
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'shaders', true, true);
Module['FS_createPath']('/', 'textures', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 59, 10, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 50, 32, 97, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 32, 32, 32, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 32, 61, 32, 97, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 32, 42, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 10, 125]);
Module['FS_createDataFile']('/shaders', 'texture_shader.vsh', fileData0, true, true);
var fileData1 = [];
fileData1.push.apply(fileData1, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 10, 10, 117, 110, 105, 102, 111, 114, 109, 32, 115, 97, 109, 112, 108, 101, 114, 50, 68, 32, 117, 95, 84, 101, 120, 116, 117, 114, 101, 85, 110, 105, 116, 59, 10, 118, 97, 114, 121, 105, 110, 103, 32, 118, 101, 99, 50, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 59, 10, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 10, 123, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 116, 101, 120, 116, 117, 114, 101, 50, 68, 40, 117, 95, 84, 101, 120, 116, 117, 114, 101, 85, 110, 105, 116, 44, 32, 118, 95, 84, 101, 120, 116, 117, 114, 101, 67, 111, 111, 114, 100, 105, 110, 97, 116, 101, 115, 41, 59, 10, 125]);
Module['FS_createDataFile']('/shaders', 'texture_shader.fsh', fileData1, true, true);
var fileData2 = [];
fileData2.push.apply(fileData2, [112, 114, 101, 99, 105, 115, 105, 111, 110, 32, 109, 101, 100, 105, 117, 109, 112, 32, 102, 108, 111, 97, 116, 59, 32, 10, 32, 32, 32, 32, 32, 32, 9, 32, 9, 9, 9, 9, 9, 9, 9, 9, 10, 117, 110, 105, 102, 111, 114, 109, 32, 118, 101, 99, 52, 32, 117, 95, 67, 111, 108, 111, 114, 59, 32, 32, 32, 32, 32, 32, 9, 32, 32, 32, 9, 9, 9, 9, 9, 9, 9, 9, 10, 32, 32, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 9, 10, 123, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 10, 32, 32, 32, 32, 103, 108, 95, 70, 114, 97, 103, 67, 111, 108, 111, 114, 32, 61, 32, 117, 95, 67, 111, 108, 111, 114, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 9, 10, 125]);
Module['FS_createDataFile']('/shaders', 'color_shader.fsh', fileData2, true, true);
var fileData3 = [];
fileData3.push.apply(fileData3, [117, 110, 105, 102, 111, 114, 109, 32, 109, 97, 116, 52, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 59, 10, 97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 118, 101, 99, 52, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 32, 32, 10, 118, 111, 105, 100, 32, 109, 97, 105, 110, 40, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 123, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 9, 32, 32, 9, 32, 32, 10, 32, 32, 32, 32, 103, 108, 95, 80, 111, 115, 105, 116, 105, 111, 110, 32, 61, 32, 117, 95, 77, 118, 112, 77, 97, 116, 114, 105, 120, 32, 42, 32, 97, 95, 80, 111, 115, 105, 116, 105, 111, 110, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 125, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32]);
Module['FS_createDataFile']('/shaders', 'color_shader.vsh', fileData3, true, true);
var fileData4 = [];
fileData4.push.apply(fileData4, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 0, 0, 0, 2, 0, 8, 2, 0, 0, 0, 123, 26, 67, 173, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 52, 72, 0, 0, 52, 72, 1, 78, 128, 151, 165, 0, 0, 0, 26, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 80, 97, 105, 110, 116, 46, 78, 69, 84, 32, 118, 51, 46, 53, 46, 49, 48, 48, 244, 114, 161, 0, 0, 255, 140, 73, 68, 65, 84, 120, 94, 236, 253, 137, 159, 101, 103, 154, 149, 135, 198, 63, 114, 47, 119, 30, 125, 175, 239, 53, 198, 19, 54, 54, 54, 54, 198, 6, 26, 26, 26, 26, 26, 26, 26, 154, 121, 158, 231, 217, 198, 96, 176, 193, 204, 24, 99, 140, 177, 129, 166, 129, 170, 110, 85, 169, 74, 169, 89, 42, 169, 38, 169, 171, 74, 85, 165, 42, 149, 74, 42, 101, 42, 51, 165, 212, 156, 82, 166, 82, 153, 74, 233, 222, 117, 226, 141, 92, 185, 226, 249, 246, 254, 206, 62, 251, 156, 19, 113, 34, 51, 242, 247, 252, 126, 221, 153, 25, 113, 206, 222, 223, 187, 214, 243, 198, 137, 19, 149, 218, 251, 223, 252, 107, 63, 118, 202, 41, 167, 156, 114, 202, 93, 200, 233, 2, 56, 229, 148, 83, 78, 185, 75, 57, 93, 0, 167, 156, 114, 202, 41, 119, 41, 167, 11, 224, 148, 83, 78, 57, 229, 46, 229, 116, 1, 156, 114, 202, 41, 167, 220, 165, 156, 46, 128, 83, 78, 57, 229, 148, 187, 148, 211, 5, 112, 202, 41, 167, 156, 114, 151, 114, 186, 0, 78, 217, 21, 254, 183, 63, 253, 159, 221, 61, 224, 222, 79, 57, 229, 88, 56, 93, 0, 167, 108, 18, 104, 238, 148, 141, 131, 3, 63, 229, 148, 117, 56, 93, 0, 167, 44, 7, 14, 218, 6, 63, 237, 95, 255, 241, 187, 10, 220, 254, 150, 192, 28, 79, 57, 5, 156, 46, 128, 187, 29, 40, 99, 77, 160, 185, 233, 252, 239, 126, 198, 63, 191, 171, 192, 237, 175, 4, 206, 124, 77, 144, 135, 83, 238, 42, 78, 23, 192, 29, 14, 218, 62, 3, 216, 167, 15, 52, 119, 202, 54, 192, 153, 119, 192, 40, 231, 129, 68, 157, 114, 39, 113, 186, 0, 78, 60, 168, 235, 74, 192, 23, 131, 192, 62, 219, 224, 127, 255, 111, 252, 139, 187, 16, 28, 194, 54, 192, 40, 7, 65, 36, 86, 2, 81, 60, 229, 196, 113, 186, 0, 78, 12, 232, 222, 68, 208, 118, 0, 95, 172, 9, 4, 55, 157, 255, 195, 191, 249, 47, 239, 66, 112, 8, 211, 193, 177, 175, 9, 34, 209, 130, 68, 77, 4, 233, 61, 101, 55, 57, 93, 0, 59, 7, 138, 180, 20, 212, 21, 160, 237, 51, 128, 125, 58, 64, 112, 167, 108, 9, 28, 123, 7, 140, 114, 30, 72, 84, 130, 40, 78, 1, 105, 63, 229, 120, 57, 93, 0, 199, 6, 138, 177, 20, 116, 207, 160, 174, 43, 1, 95, 12, 2, 251, 108, 156, 255, 227, 191, 245, 137, 187, 25, 156, 198, 102, 193, 40, 7, 65, 36, 86, 2, 81, 76, 144, 222, 62, 168, 198, 41, 71, 198, 233, 2, 56, 10, 16, 247, 62, 40, 146, 65, 247, 38, 130, 182, 3, 248, 98, 77, 160, 182, 137, 252, 159, 254, 237, 79, 222, 205, 224, 52, 38, 130, 147, 95, 7, 68, 162, 5, 137, 154, 8, 210, 107, 144, 246, 62, 232, 209, 41, 27, 231, 116, 1, 108, 24, 36, 184, 3, 138, 97, 80, 164, 41, 160, 177, 9, 218, 62, 3, 168, 167, 3, 212, 182, 107, 252, 159, 255, 157, 159, 152, 14, 62, 119, 215, 192, 201, 119, 192, 52, 103, 128, 68, 37, 200, 225, 20, 144, 246, 2, 213, 232, 128, 186, 157, 178, 38, 167, 11, 96, 45, 144, 206, 49, 16, 247, 2, 197, 88, 10, 186, 151, 160, 177, 211, 129, 44, 6, 129, 122, 54, 11, 180, 187, 85, 254, 47, 63, 243, 39, 167, 131, 207, 221, 30, 56, 144, 141, 131, 105, 182, 32, 18, 43, 129, 28, 26, 68, 119, 41, 168, 70, 129, 18, 117, 64, 43, 79, 153, 206, 233, 2, 88, 1, 196, 110, 12, 228, 88, 32, 238, 125, 208, 37, 131, 238, 77, 4, 109, 7, 144, 197, 58, 192, 107, 19, 129, 118, 239, 66, 112, 32, 19, 193, 225, 175, 3, 34, 209, 130, 68, 77, 1, 209, 53, 136, 122, 31, 148, 168, 64, 215, 198, 64, 115, 79, 25, 227, 116, 1, 140, 130, 72, 13, 130, 116, 22, 200, 113, 7, 212, 163, 64, 151, 166, 128, 198, 38, 104, 251, 12, 160, 158, 49, 224, 181, 93, 224, 255, 250, 239, 222, 179, 41, 240, 200, 199, 14, 14, 191, 3, 166, 57, 3, 36, 42, 65, 14, 151, 130, 168, 27, 244, 162, 3, 186, 38, 80, 201, 49, 208, 238, 83, 138, 211, 5, 112, 0, 226, 50, 8, 146, 39, 144, 206, 14, 72, 124, 129, 122, 244, 65, 247, 18, 52, 118, 58, 144, 197, 32, 80, 207, 6, 129, 100, 55, 207, 191, 247, 169, 141, 129, 71, 222, 40, 56, 150, 205, 130, 105, 182, 32, 18, 43, 129, 28, 26, 68, 119, 41, 232, 69, 129, 6, 141, 129, 74, 10, 212, 118, 16, 212, 255, 174, 229, 238, 93, 0, 8, 68, 11, 82, 37, 144, 188, 49, 144, 227, 2, 137, 239, 128, 46, 25, 116, 111, 34, 104, 59, 128, 44, 214, 1, 82, 155, 4, 36, 27, 252, 223, 238, 56, 112, 131, 135, 192, 177, 76, 3, 231, 63, 27, 68, 162, 5, 137, 154, 2, 162, 107, 16, 245, 62, 104, 144, 64, 209, 198, 64, 109, 5, 170, 61, 8, 252, 112, 151, 112, 23, 45, 0, 204, 187, 5, 161, 65, 170, 198, 64, 70, 5, 114, 220, 1, 245, 48, 168, 211, 82, 208, 216, 4, 109, 95, 21, 72, 167, 7, 164, 214, 24, 240, 104, 248, 191, 255, 172, 79, 111, 21, 60, 221, 145, 129, 179, 93, 128, 243, 31, 1, 3, 93, 21, 196, 9, 32, 135, 75, 65, 206, 11, 148, 162, 3, 138, 86, 160, 143, 131, 160, 218, 2, 221, 111, 129, 61, 238, 84, 238, 216, 5, 128, 113, 182, 32, 16, 2, 161, 25, 4, 225, 19, 200, 232, 24, 8, 125, 129, 122, 44, 5, 245, 51, 40, 237, 116, 32, 139, 1, 14, 75, 7, 86, 90, 7, 136, 117, 83, 252, 63, 254, 253, 123, 183, 10, 158, 110, 83, 224, 112, 214, 228, 208, 212, 48, 208, 6, 68, 98, 37, 144, 67, 131, 220, 246, 65, 41, 10, 212, 167, 3, 250, 40, 208, 217, 65, 208, 125, 200, 161, 5, 122, 185, 99, 184, 163, 22, 0, 102, 6, 48, 114, 129, 76, 180, 32, 88, 2, 225, 27, 3, 105, 22, 8, 125, 31, 212, 201, 160, 126, 83, 64, 219, 201, 45, 77, 192, 32, 171, 2, 157, 77, 1, 98, 189, 203, 193, 225, 76, 1, 35, 88, 21, 143, 158, 145, 56, 12, 226, 52, 17, 228, 214, 32, 231, 29, 80, 159, 2, 45, 27, 3, 157, 21, 232, 117, 11, 204, 0, 117, 180, 192, 60, 39, 151, 147, 189, 0, 48, 21, 128, 161, 98, 228, 45, 8, 141, 64, 176, 6, 65, 70, 11, 164, 121, 12, 212, 195, 160, 78, 75, 65, 105, 15, 113, 171, 231, 232, 255, 68, 32, 157, 49, 160, 179, 99, 225, 255, 249, 31, 124, 230, 40, 193, 179, 31, 61, 24, 193, 24, 24, 232, 116, 150, 174, 7, 132, 112, 10, 200, 121, 129, 82, 116, 64, 203, 4, 202, 56, 8, 74, 45, 80, 252, 22, 168, 67, 192, 45, 0, 94, 58, 65, 156, 176, 5, 128, 115, 7, 152, 25, 134, 218, 130, 88, 8, 68, 167, 5, 249, 43, 16, 211, 49, 144, 251, 2, 13, 233, 131, 6, 222, 102, 174, 226, 33, 139, 22, 72, 103, 83, 64, 166, 27, 225, 95, 249, 217, 159, 61, 74, 240, 236, 235, 131, 35, 218, 20, 24, 232, 32, 72, 197, 82, 54, 187, 27, 208, 136, 2, 221, 25, 3, 77, 20, 40, 236, 32, 104, 61, 180, 208, 2, 177, 64, 59, 0, 202, 218, 113, 78, 192, 2, 192, 249, 38, 24, 12, 198, 214, 130, 193, 35, 22, 131, 32, 94, 2, 17, 28, 4, 105, 46, 144, 251, 14, 168, 211, 109, 86, 23, 61, 170, 14, 32, 139, 217, 192, 101, 75, 129, 76, 79, 17, 56, 162, 41, 96, 10, 179, 65, 42, 18, 196, 105, 41, 157, 221, 128, 144, 247, 65, 119, 4, 42, 54, 6, 218, 42, 208, 232, 22, 104, 65, 192, 27, 0, 218, 129, 148, 0, 108, 182, 107, 236, 226, 2, 192, 9, 2, 156, 62, 102, 3, 48, 87, 12, 190, 5, 209, 17, 136, 215, 32, 72, 170, 64, 154, 59, 160, 36, 7, 172, 40, 122, 148, 54, 65, 213, 87, 5, 198, 25, 3, 46, 59, 74, 254, 95, 255, 225, 125, 199, 8, 46, 230, 136, 193, 20, 198, 192, 76, 87, 2, 113, 74, 16, 194, 62, 99, 91, 65, 160, 17, 99, 160, 98, 5, 154, 56, 8, 26, 141, 202, 183, 64, 26, 2, 86, 1, 48, 18, 124, 149, 64, 116, 187, 192, 174, 44, 0, 156, 84, 130, 243, 197, 233, 3, 76, 14, 163, 109, 65, 56, 16, 157, 65, 16, 65, 129, 164, 142, 129, 220, 31, 176, 138, 235, 209, 64, 131, 210, 78, 7, 166, 104, 129, 113, 54, 5, 52, 186, 14, 255, 239, 255, 232, 204, 49, 130, 139, 89, 19, 156, 210, 166, 192, 76, 91, 144, 138, 137, 32, 132, 6, 161, 237, 48, 182, 21, 80, 156, 49, 80, 67, 129, 170, 14, 130, 202, 11, 56, 1, 64, 41, 2, 206, 73, 32, 43, 168, 12, 192, 129, 199, 194, 113, 46, 0, 28, 71, 130, 115, 196, 41, 39, 152, 13, 134, 215, 130, 217, 35, 28, 45, 72, 152, 64, 10, 199, 64, 166, 23, 76, 118, 61, 26, 101, 208, 192, 41, 160, 234, 0, 166, 152, 7, 44, 54, 5, 104, 244, 148, 2, 167, 180, 20, 12, 98, 54, 72, 69, 130, 56, 77, 1, 161, 53, 8, 249, 24, 235, 108, 5, 84, 85, 160, 206, 45, 16, 130, 128, 49, 0, 132, 3, 29, 1, 120, 12, 150, 75, 224, 198, 35, 227, 168, 23, 0, 110, 59, 201, 147, 194, 57, 2, 204, 0, 19, 2, 152, 46, 198, 223, 130, 0, 9, 132, 108, 16, 132, 117, 65, 147, 236, 65, 80, 18, 131, 82, 245, 65, 105, 19, 84, 125, 85, 96, 156, 65, 96, 177, 35, 227, 95, 253, 57, 247, 239, 8, 184, 176, 35, 3, 131, 24, 3, 51, 93, 9, 196, 41, 65, 8, 151, 130, 132, 23, 168, 195, 32, 245, 149, 19, 251, 117, 84, 43, 1, 62, 1, 112, 17, 76, 149, 164, 223, 4, 236, 151, 192, 153, 91, 229, 40, 22, 0, 110, 207, 224, 68, 112, 94, 9, 78, 25, 51, 0, 152, 31, 166, 219, 130, 124, 32, 64, 131, 32, 136, 11, 154, 212, 14, 130, 244, 11, 148, 164, 15, 26, 104, 80, 218, 233, 192, 20, 45, 48, 206, 70, 128, 61, 103, 243, 255, 249, 143, 31, 216, 17, 112, 97, 235, 128, 179, 218, 8, 152, 105, 11, 82, 49, 17, 132, 208, 32, 180, 125, 80, 135, 2, 173, 25, 100, 222, 74, 64, 217, 5, 108, 0, 32, 19, 1, 219, 36, 208, 20, 36, 6, 82, 125, 16, 99, 2, 151, 110, 156, 109, 45, 0, 220, 134, 201, 219, 22, 56, 148, 4, 167, 137, 179, 78, 48, 33, 140, 176, 5, 9, 64, 68, 90, 16, 178, 5, 77, 28, 91, 144, 233, 2, 233, 239, 128, 82, 21, 104, 224, 20, 80, 117, 0, 83, 204, 3, 10, 91, 10, 236, 121, 74, 130, 179, 234, 131, 65, 204, 6, 169, 72, 16, 167, 41, 32, 180, 6, 9, 239, 128, 214, 8, 148, 107, 144, 118, 37, 160, 200, 131, 192, 6, 112, 5, 128, 106, 32, 34, 0, 131, 193, 111, 73, 42, 17, 194, 76, 224, 216, 141, 176, 201, 5, 128, 203, 53, 121, 123, 2, 55, 159, 228, 121, 225, 52, 1, 38, 129, 57, 1, 204, 24, 9, 104, 65, 140, 230, 233, 30, 153, 238, 128, 158, 20, 40, 213, 82, 208, 91, 131, 170, 175, 10, 140, 51, 8, 20, 118, 4, 252, 127, 255, 147, 7, 119, 16, 92, 228, 17, 128, 65, 140, 129, 153, 174, 4, 226, 148, 32, 129, 75, 65, 194, 11, 116, 97, 12, 148, 75, 160, 128, 45, 27, 121, 137, 0, 147, 0, 88, 8, 142, 74, 210, 108, 2, 222, 75, 82, 149, 16, 105, 2, 247, 206, 102, 221, 5, 128, 203, 50, 121, 27, 2, 55, 153, 228, 185, 224, 212, 18, 156, 53, 38, 1, 48, 69, 204, 24, 32, 34, 11, 154, 48, 1, 100, 81, 32, 175, 99, 32, 253, 5, 122, 210, 7, 37, 52, 232, 237, 68, 96, 138, 22, 24, 103, 125, 32, 205, 121, 252, 107, 63, 247, 161, 29, 4, 23, 57, 15, 28, 215, 70, 192, 76, 91, 144, 138, 137, 32, 129, 6, 137, 237, 131, 46, 8, 84, 102, 12, 20, 80, 160, 164, 45, 51, 94, 34, 192, 36, 240, 76, 2, 65, 65, 95, 73, 26, 79, 192, 135, 73, 42, 20, 130, 77, 224, 228, 149, 152, 179, 0, 240, 244, 73, 94, 49, 110, 38, 201, 251, 199, 233, 36, 56, 83, 156, 120, 130, 57, 97, 138, 0, 33, 16, 8, 74, 11, 162, 38, 16, 199, 65, 144, 108, 129, 244, 119, 64, 169, 12, 74, 184, 20, 84, 29, 192, 20, 243, 128, 194, 250, 64, 154, 167, 0, 28, 215, 82, 48, 139, 121, 32, 21, 9, 226, 52, 5, 36, 182, 64, 188, 59, 160, 50, 5, 154, 53, 8, 26, 42, 208, 98, 176, 234, 62, 128, 100, 160, 32, 0, 119, 193, 108, 73, 202, 16, 158, 76, 82, 173, 176, 174, 129, 168, 167, 176, 194, 2, 192, 147, 153, 188, 50, 92, 116, 146, 247, 137, 35, 72, 242, 212, 112, 166, 0, 243, 192, 180, 18, 140, 89, 32, 10, 0, 49, 18, 136, 218, 32, 136, 172, 64, 178, 199, 64, 85, 10, 148, 106, 41, 232, 173, 65, 213, 87, 2, 174, 25, 3, 10, 219, 54, 63, 253, 63, 125, 120, 151, 193, 213, 110, 27, 204, 98, 16, 140, 117, 37, 16, 167, 4, 9, 236, 131, 120, 23, 40, 66, 7, 52, 75, 160, 125, 131, 160, 197, 168, 57, 216, 222, 62, 72, 167, 9, 24, 47, 73, 73, 194, 159, 73, 42, 23, 54, 54, 176, 247, 24, 75, 22, 0, 30, 212, 228, 21, 224, 226, 146, 188, 31, 220, 106, 146, 167, 131, 179, 75, 112, 226, 152, 7, 192, 44, 49, 108, 128, 160, 8, 36, 169, 5, 113, 20, 136, 236, 24, 232, 128, 64, 85, 250, 160, 132, 6, 189, 157, 8, 76, 1, 224, 154, 245, 129, 43, 231, 241, 175, 255, 188, 71, 118, 25, 92, 237, 12, 112, 104, 235, 131, 177, 182, 32, 21, 19, 65, 2, 13, 18, 219, 1, 69, 40, 208, 151, 49, 208, 62, 212, 115, 16, 116, 28, 18, 0, 43, 237, 3, 168, 9, 226, 74, 210, 117, 2, 38, 76, 82, 158, 240, 170, 73, 15, 67, 209, 6, 74, 7, 195, 11, 0, 15, 97, 242, 249, 112, 41, 38, 175, 27, 183, 148, 228, 41, 224, 140, 18, 156, 44, 206, 61, 193, 180, 48, 78, 128, 40, 32, 40, 45, 72, 155, 64, 28, 7, 65, 178, 11, 116, 160, 3, 122, 85, 160, 132, 83, 64, 219, 19, 152, 98, 6, 144, 87, 31, 184, 242, 148, 65, 112, 104, 125, 48, 142, 121, 32, 21, 9, 178, 180, 20, 196, 213, 32, 219, 29, 208, 23, 129, 90, 13, 130, 122, 10, 84, 184, 5, 18, 128, 34, 0, 244, 2, 249, 128, 84, 22, 132, 150, 164, 3, 5, 12, 105, 210, 168, 2, 190, 53, 41, 103, 120, 219, 192, 243, 226, 246, 2, 192, 135, 154, 124, 92, 60, 165, 201, 235, 195, 213, 39, 121, 183, 56, 139, 36, 143, 15, 39, 11, 14, 77, 165, 153, 89, 130, 97, 11, 164, 1, 32, 76, 2, 129, 107, 65, 106, 11, 132, 123, 12, 180, 165, 64, 181, 250, 160, 183, 9, 218, 62, 29, 184, 102, 16, 200, 107, 171, 252, 140, 255, 236, 209, 19, 1, 46, 123, 171, 96, 28, 131, 96, 172, 43, 129, 44, 25, 196, 111, 41, 200, 118, 129, 22, 140, 129, 78, 9, 84, 111, 16, 244, 23, 5, 111, 129, 31, 32, 16, 112, 200, 60, 155, 120, 113, 144, 110, 20, 48, 167, 73, 211, 66, 194, 73, 74, 27, 62, 47, 172, 253, 61, 252, 69, 145, 159, 143, 135, 54, 121, 41, 2, 23, 106, 242, 174, 112, 207, 73, 158, 17, 78, 48, 193, 185, 99, 42, 0, 19, 197, 188, 1, 226, 130, 48, 13, 130, 80, 10, 4, 119, 16, 116, 160, 64, 91, 58, 160, 135, 6, 189, 157, 8, 76, 1, 224, 154, 245, 129, 40, 87, 229, 223, 248, 207, 31, 59, 17, 224, 178, 103, 128, 115, 91, 19, 140, 181, 5, 169, 152, 2, 226, 103, 16, 215, 62, 104, 129, 64, 89, 198, 64, 239, 4, 186, 217, 130, 130, 163, 254, 45, 176, 7, 220, 146, 64, 74, 80, 86, 146, 150, 19, 112, 160, 73, 103, 10, 24, 213, 164, 126, 33, 103, 147, 38, 135, 228, 139, 67, 11, 32, 63, 26, 15, 100, 242, 89, 113, 65, 38, 175, 30, 247, 150, 228, 89, 224, 164, 18, 156, 47, 78, 63, 193, 204, 48, 81, 128, 64, 32, 46, 45, 8, 156, 64, 40, 7, 65, 190, 5, 58, 208, 1, 213, 42, 208, 195, 41, 160, 237, 9, 76, 49, 3, 152, 171, 15, 68, 121, 202, 24, 56, 183, 14, 24, 199, 60, 144, 138, 4, 89, 90, 10, 226, 106, 144, 237, 49, 80, 150, 2, 157, 26, 4, 221, 68, 121, 91, 80, 127, 200, 1, 64, 44, 208, 14, 72, 89, 65, 101, 73, 218, 79, 192, 141, 38, 93, 10, 205, 38, 169, 101, 24, 219, 216, 237, 233, 252, 189, 159, 246, 211, 111, 75, 95, 224, 115, 138, 124, 116, 60, 177, 201, 11, 197, 61, 36, 121, 207, 56, 145, 36, 15, 81, 224, 136, 147, 28, 12, 198, 6, 48, 114, 4, 162, 5, 145, 66, 224, 6, 65, 112, 5, 242, 61, 6, 218, 82, 160, 90, 125, 208, 219, 4, 109, 159, 14, 92, 51, 8, 204, 181, 61, 254, 205, 159, 255, 248, 201, 2, 215, 191, 37, 48, 142, 65, 48, 214, 149, 64, 150, 12, 226, 215, 7, 193, 46, 80, 129, 49, 80, 40, 129, 210, 13, 130, 242, 10, 180, 27, 64, 14, 80, 7, 72, 231, 8, 24, 41, 73, 137, 65, 113, 73, 90, 81, 192, 153, 38, 29, 11, 253, 154, 116, 53, 52, 110, 82, 248, 123, 99, 210, 23, 249, 88, 120, 26, 147, 215, 132, 203, 53, 121, 111, 184, 243, 36, 15, 11, 231, 152, 224, 244, 49, 27, 128, 185, 98, 234, 0, 137, 65, 164, 90, 144, 75, 129, 236, 142, 129, 38, 8, 20, 166, 15, 170, 88, 160, 183, 19, 129, 41, 0, 92, 179, 38, 240, 227, 170, 252, 91, 191, 224, 115, 39, 11, 92, 255, 74, 224, 232, 214, 4, 99, 109, 65, 42, 166, 128, 248, 25, 100, 181, 3, 42, 80, 160, 41, 131, 160, 116, 2, 197, 108, 65, 181, 5, 186, 15, 224, 13, 88, 37, 129, 142, 32, 171, 36, 253, 38, 96, 63, 147, 182, 132, 72, 147, 20, 47, 156, 108, 82, 224, 112, 123, 241, 211, 126, 198, 143, 239, 225, 143, 242, 115, 240, 112, 38, 159, 27, 151, 101, 242, 54, 112, 135, 73, 158, 8, 206, 43, 193, 41, 99, 6, 9, 38, 135, 185, 2, 100, 2, 161, 105, 65, 236, 4, 162, 57, 8, 34, 46, 208, 132, 49, 80, 45, 131, 42, 46, 5, 109, 79, 96, 138, 25, 192, 92, 29, 224, 199, 83, 58, 224, 232, 250, 96, 34, 51, 64, 42, 18, 100, 105, 41, 200, 106, 129, 96, 119, 64, 83, 4, 218, 52, 8, 90, 41, 208, 92, 128, 226, 11, 152, 1, 164, 82, 32, 28, 144, 154, 130, 196, 146, 244, 30, 148, 152, 164, 69, 33, 88, 147, 54, 134, 168, 77, 90, 29, 194, 63, 88, 0, 249, 17, 248, 100, 147, 207, 132, 139, 48, 121, 197, 184, 25, 147, 55, 143, 115, 73, 242, 40, 5, 14, 58, 201, 241, 96, 114, 0, 83, 71, 44, 90, 144, 42, 196, 110, 16, 196, 87, 32, 226, 99, 160, 51, 5, 218, 213, 7, 213, 53, 104, 251, 116, 32, 154, 65, 96, 174, 109, 240, 111, 255, 194, 39, 78, 40, 184, 145, 45, 129, 137, 180, 96, 172, 43, 129, 44, 25, 100, 175, 15, 82, 93, 32, 255, 99, 160, 77, 2, 141, 107, 65, 109, 5, 122, 13, 160, 5, 72, 3, 164, 109, 4, 92, 148, 164, 190, 32, 183, 36, 125, 8, 85, 38, 169, 86, 88, 215, 164, 162, 97, 111, 99, 207, 31, 44, 0, 255, 30, 31, 87, 228, 35, 226, 201, 76, 94, 25, 46, 218, 228, 77, 10, 28, 129, 201, 35, 19, 56, 208, 36, 103, 128, 9, 1, 76, 23, 179, 7, 200, 13, 130, 213, 130, 104, 10, 196, 119, 16, 52, 161, 64, 103, 58, 160, 138, 6, 213, 157, 2, 76, 1, 32, 154, 53, 129, 28, 167, 243, 239, 124, 223, 147, 39, 20, 220, 200, 74, 224, 244, 214, 1, 99, 5, 136, 196, 68, 144, 61, 131, 172, 118, 64, 254, 5, 106, 50, 6, 26, 135, 74, 182, 160, 212, 2, 173, 7, 48, 6, 124, 146, 164, 133, 4, 28, 149, 164, 214, 32, 189, 36, 37, 9, 133, 154, 244, 45, 84, 108, 210, 219, 80, 186, 41, 237, 239, 225, 79, 139, 252, 124, 60, 180, 201, 235, 192, 37, 154, 188, 31, 220, 170, 201, 163, 17, 56, 56, 131, 179, 198, 36, 18, 204, 15, 211, 5, 72, 6, 162, 211, 130, 240, 33, 154, 131, 32, 229, 2, 77, 232, 128, 118, 21, 168, 226, 82, 80, 248, 4, 166, 152, 1, 180, 213, 1, 114, 60, 165, 15, 78, 175, 3, 38, 178, 42, 136, 68, 130, 32, 45, 5, 65, 53, 72, 245, 24, 168, 137, 64, 149, 6, 65, 37, 5, 58, 11, 80, 121, 1, 39, 128, 148, 9, 84, 3, 82, 80, 208, 87, 146, 186, 131, 12, 147, 148, 39, 188, 106, 82, 194, 240, 179, 73, 153, 195, 243, 226, 208, 2, 240, 199, 225, 33, 76, 62, 31, 46, 197, 228, 117, 227, 150, 76, 30, 129, 192, 1, 153, 60, 80, 129, 227, 78, 114, 72, 2, 35, 76, 48, 123, 132, 163, 5, 217, 66, 248, 90, 144, 96, 129, 148, 143, 129, 206, 20, 40, 88, 31, 180, 215, 160, 240, 211, 129, 104, 6, 129, 182, 54, 206, 207, 252, 69, 159, 63, 209, 224, 118, 182, 1, 38, 210, 130, 177, 78, 7, 65, 74, 144, 189, 62, 72, 181, 64, 248, 199, 64, 149, 4, 234, 214, 130, 194, 10, 52, 26, 64, 8, 208, 5, 128, 103, 96, 161, 36, 197, 5, 173, 37, 169, 65, 72, 210, 164, 81, 5, 124, 91, 164, 153, 33, 109, 99, 189, 11, 59, 127, 47, 255, 20, 159, 96, 242, 209, 241, 196, 197, 161, 75, 108, 110, 192, 228, 221, 226, 32, 76, 30, 156, 192, 177, 38, 57, 9, 204, 9, 228, 128, 49, 254, 22, 164, 7, 241, 106, 65, 64, 5, 66, 60, 8, 250, 32, 208, 153, 14, 168, 162, 65, 123, 167, 0, 83, 0, 136, 102, 29, 160, 197, 233, 252, 187, 191, 248, 11, 39, 26, 220, 206, 74, 224, 12, 103, 131, 177, 2, 68, 98, 34, 200, 94, 129, 160, 118, 64, 248, 11, 116, 100, 16, 116, 77, 160, 143, 45, 104, 52, 250, 14, 210, 21, 2, 38, 73, 210, 63, 2, 118, 74, 82, 104, 208, 93, 146, 122, 132, 57, 77, 154, 22, 18, 54, 169, 107, 152, 188, 72, 231, 239, 225, 239, 76, 62, 10, 158, 192, 228, 213, 224, 66, 77, 222, 21, 110, 216, 228, 1, 9, 28, 159, 193, 137, 99, 30, 9, 166, 136, 25, 3, 228, 3, 233, 105, 65, 254, 16, 208, 65, 16, 116, 129, 62, 140, 129, 130, 21, 168, 226, 82, 80, 248, 4, 166, 88, 21, 8, 171, 3, 180, 120, 202, 20, 112, 134, 99, 96, 40, 171, 130, 72, 36, 8, 210, 82, 16, 212, 2, 145, 238, 128, 142, 8, 244, 168, 5, 101, 20, 104, 107, 11, 250, 14, 27, 128, 212, 8, 36, 3, 82, 77, 16, 87, 146, 162, 131, 6, 77, 58, 83, 192, 168, 38, 245, 11, 51, 23, 233, 112, 232, 221, 112, 1, 228, 231, 224, 225, 138, 124, 214, 177, 47, 246, 243, 234, 113, 111, 73, 158, 5, 142, 201, 228, 177, 10, 28, 122, 146, 163, 18, 24, 100, 130, 4, 32, 31, 0, 241, 18, 136, 96, 11, 66, 44, 16, 244, 49, 208, 28, 129, 130, 245, 65, 123, 13, 10, 63, 29, 136, 166, 5, 194, 218, 56, 255, 222, 247, 127, 241, 206, 0, 247, 181, 89, 48, 148, 65, 48, 217, 137, 32, 72, 6, 193, 235, 131, 72, 23, 72, 254, 32, 40, 145, 64, 209, 6, 65, 91, 81, 103, 0, 21, 64, 20, 0, 134, 129, 127, 146, 84, 22, 132, 150, 164, 0, 225, 70, 147, 46, 133, 102, 77, 58, 25, 186, 54, 182, 58, 132, 127, 176, 0, 252, 215, 2, 159, 89, 228, 115, 224, 233, 77, 94, 43, 110, 195, 228, 61, 227, 56, 76, 30, 159, 192, 225, 38, 57, 15, 76, 11, 228, 152, 17, 2, 128, 0, 9, 36, 172, 5, 49, 69, 142, 7, 65, 31, 10, 52, 167, 3, 10, 89, 160, 189, 83, 128, 38, 0, 68, 51, 27, 216, 112, 58, 63, 235, 151, 124, 233, 206, 0, 247, 53, 17, 28, 227, 58, 96, 178, 9, 34, 49, 5, 4, 207, 32, 165, 29, 144, 124, 129, 130, 12, 130, 162, 9, 52, 177, 5, 93, 70, 217, 65, 90, 66, 192, 33, 73, 154, 71, 192, 75, 73, 170, 12, 162, 51, 105, 69, 1, 103, 154, 20, 44, 220, 107, 108, 105, 8, 220, 164, 234, 23, 11, 160, 254, 63, 124, 144, 241, 195, 9, 60, 83, 145, 215, 132, 203, 53, 121, 111, 184, 243, 36, 79, 10, 135, 152, 228, 185, 99, 42, 9, 102, 137, 73, 3, 164, 4, 25, 2, 136, 160, 64, 76, 91, 144, 245, 2, 149, 24, 3, 29, 43, 80, 200, 62, 40, 124, 2, 77, 172, 10, 132, 53, 6, 108, 120, 202, 68, 112, 140, 99, 96, 40, 171, 130, 72, 36, 8, 210, 82, 144, 210, 2, 121, 30, 3, 237, 16, 40, 209, 32, 104, 34, 170, 218, 130, 166, 195, 3, 32, 5, 2, 189, 36, 105, 36, 1, 95, 37, 169, 56, 216, 207, 164, 45, 33, 82, 147, 214, 133, 144, 77, 170, 27, 86, 47, 202, 252, 123, 248, 211, 226, 246, 39, 55, 143, 91, 228, 21, 224, 226, 76, 222, 9, 110, 210, 228, 137, 224, 176, 146, 60, 95, 156, 126, 146, 3, 19, 24, 103, 130, 28, 32, 37, 0, 33, 19, 72, 97, 11, 162, 44, 16, 247, 65, 208, 156, 2, 29, 235, 128, 246, 38, 232, 252, 68, 32, 154, 22, 8, 107, 179, 252, 251, 191, 244, 203, 119, 18, 184, 187, 13, 130, 161, 12, 130, 201, 78, 4, 41, 50, 8, 94, 31, 228, 89, 32, 246, 99, 160, 65, 2, 45, 107, 65, 79, 81, 100, 0, 9, 64, 17, 0, 110, 129, 121, 146, 148, 21, 60, 102, 210, 123, 2, 86, 52, 169, 80, 216, 213, 164, 138, 97, 233, 226, 182, 204, 135, 54, 193, 237, 5, 144, 31, 135, 135, 48, 126, 38, 92, 132, 201, 43, 198, 205, 152, 188, 115, 156, 75, 146, 231, 136, 35, 78, 114, 42, 152, 25, 200, 97, 35, 10, 0, 49, 18, 200, 25, 64, 76, 5, 162, 60, 8, 90, 33, 208, 156, 14, 40, 164, 65, 129, 151, 2, 77, 0, 136, 102, 54, 80, 225, 68, 254, 131, 31, 120, 234, 78, 2, 119, 55, 17, 156, 228, 108, 48, 217, 4, 145, 152, 2, 82, 87, 32, 162, 29, 16, 251, 2, 237, 104, 65, 197, 4, 106, 216, 130, 22, 163, 230, 32, 253, 32, 96, 143, 36, 157, 35, 96, 36, 147, 6, 19, 240, 155, 73, 31, 66, 149, 38, 189, 10, 229, 26, 203, 89, 192, 219, 69, 26, 222, 218, 223, 203, 63, 197, 39, 20, 249, 184, 120, 74, 147, 215, 135, 75, 55, 121, 159, 56, 2, 147, 231, 133, 211, 76, 242, 244, 49, 155, 4, 19, 197, 188, 1, 178, 130, 36, 1, 4, 81, 32, 172, 45, 136, 187, 64, 43, 198, 64, 205, 10, 20, 114, 41, 232, 188, 129, 38, 86, 5, 182, 26, 3, 42, 60, 101, 58, 56, 201, 49, 48, 151, 149, 64, 36, 18, 164, 168, 15, 34, 90, 32, 204, 99, 160, 26, 2, 245, 25, 4, 29, 68, 73, 91, 208, 113, 24, 0, 164, 58, 32, 150, 36, 93, 36, 96, 42, 147, 102, 19, 240, 158, 73, 73, 194, 159, 38, 101, 11, 15, 23, 105, 108, 200, 220, 216, 249, 123, 179, 191, 201, 147, 215, 129, 75, 52, 121, 63, 184, 85, 147, 231, 130, 83, 75, 242, 148, 49, 131, 36, 199, 38, 48, 212, 4, 105, 64, 86, 0, 162, 134, 32, 182, 32, 205, 2, 137, 31, 3, 253, 17, 168, 89, 31, 20, 216, 160, 243, 19, 129, 101, 90, 96, 171, 13, 242, 179, 127, 217, 211, 119, 30, 184, 199, 13, 130, 185, 180, 96, 178, 19, 65, 138, 12, 82, 215, 1, 97, 46, 144, 249, 65, 80, 31, 129, 138, 181, 160, 164, 168, 112, 75, 214, 31, 114, 0, 169, 20, 8, 39, 73, 71, 9, 24, 204, 164, 241, 32, 195, 36, 229, 9, 175, 22, 105, 96, 200, 217, 216, 225, 208, 187, 217, 195, 239, 253, 9, 2, 143, 85, 228, 179, 226, 130, 140, 175, 27, 183, 100, 242, 8, 4, 14, 200, 228, 105, 226, 172, 147, 28, 15, 38, 7, 114, 228, 72, 3, 64, 152, 16, 181, 22, 132, 85, 32, 208, 131, 160, 24, 2, 253, 25, 3, 133, 52, 40, 240, 82, 160, 9, 0, 203, 204, 6, 30, 156, 194, 127, 248, 203, 127, 234, 206, 3, 247, 56, 5, 156, 228, 108, 48, 217, 4, 145, 152, 2, 82, 87, 32, 162, 29, 144, 121, 129, 94, 12, 130, 126, 161, 128, 45, 168, 48, 10, 14, 210, 12, 2, 222, 72, 210, 54, 2, 46, 50, 233, 46, 1, 179, 153, 212, 32, 36, 105, 172, 83, 1, 211, 26, 59, 25, 186, 54, 41, 246, 20, 254, 193, 2, 240, 223, 225, 211, 140, 159, 64, 224, 185, 139, 188, 74, 220, 128, 201, 187, 197, 65, 152, 60, 53, 156, 105, 146, 51, 192, 132, 18, 204, 21, 83, 7, 72, 12, 242, 4, 16, 71, 132, 117, 16, 132, 94, 160, 24, 99, 160, 105, 5, 58, 217, 7, 157, 55, 208, 196, 170, 192, 86, 99, 192, 131, 167, 76, 7, 39, 57, 6, 230, 178, 18, 136, 68, 130, 20, 245, 65, 62, 11, 36, 121, 12, 244, 66, 160, 59, 45, 40, 160, 64, 67, 1, 218, 141, 238, 131, 148, 6, 148, 146, 164, 133, 4, 28, 101, 210, 105, 208, 93, 146, 122, 132, 57, 141, 29, 11, 253, 154, 20, 53, 28, 94, 88, 245, 98, 177, 0, 234, 255, 195, 7, 25, 63, 22, 158, 198, 248, 130, 4, 174, 181, 200, 187, 194, 13, 155, 60, 32, 129, 227, 51, 121, 214, 152, 68, 146, 195, 19, 24, 109, 130, 76, 32, 49, 0, 105, 67, 28, 91, 16, 104, 129, 208, 15, 130, 254, 20, 104, 90, 7, 20, 216, 160, 243, 19, 129, 101, 90, 96, 171, 77, 241, 31, 253, 224, 87, 238, 84, 112, 167, 155, 2, 115, 105, 193, 100, 39, 130, 20, 21, 136, 92, 31, 36, 89, 32, 240, 99, 160, 59, 40, 87, 11, 234, 41, 208, 95, 144, 197, 135, 22, 64, 202, 4, 170, 73, 210, 78, 2, 238, 50, 41, 58, 104, 208, 164, 51, 161, 83, 147, 226, 133, 147, 11, 171, 91, 192, 234, 69, 153, 127, 15, 127, 42, 242, 51, 241, 160, 198, 207, 141, 203, 50, 121, 15, 184, 61, 147, 103, 129, 99, 50, 121, 166, 56, 241, 36, 135, 36, 48, 194, 36, 7, 143, 76, 0, 228, 9, 129, 107, 65, 100, 17, 232, 65, 208, 13, 129, 254, 116, 64, 45, 11, 20, 120, 10, 48, 69, 2, 203, 204, 3, 6, 156, 194, 207, 249, 21, 95, 189, 83, 193, 157, 46, 5, 135, 57, 27, 76, 54, 65, 30, 150, 130, 200, 25, 228, 115, 12, 4, 94, 160, 20, 131, 160, 92, 2, 237, 3, 40, 47, 170, 13, 210, 9, 2, 198, 72, 82, 50, 80, 80, 146, 214, 130, 208, 146, 20, 32, 220, 104, 82, 164, 112, 108, 97, 21, 11, 88, 186, 72, 159, 67, 245, 226, 246, 2, 200, 143, 195, 67, 20, 249, 76, 184, 8, 227, 107, 197, 109, 152, 188, 103, 28, 135, 201, 227, 19, 56, 92, 147, 195, 192, 156, 18, 76, 23, 179, 7, 25, 26, 68, 170, 5, 137, 68, 100, 91, 144, 123, 129, 110, 140, 129, 166, 21, 168, 101, 31, 116, 62, 129, 41, 166, 3, 85, 141, 1, 3, 158, 178, 18, 56, 204, 49, 48, 154, 149, 64, 30, 12, 34, 212, 7, 225, 44, 16, 227, 49, 80, 10, 129, 226, 180, 160, 122, 2, 221, 4, 217, 107, 129, 214, 39, 208, 5, 100, 146, 164, 127, 160, 166, 36, 85, 6, 209, 153, 180, 34, 132, 105, 172, 86, 1, 235, 22, 233, 103, 168, 187, 72, 195, 91, 251, 123, 249, 167, 248, 132, 34, 31, 23, 79, 89, 228, 149, 225, 162, 77, 222, 33, 110, 222, 228, 73, 225, 16, 77, 30, 58, 230, 145, 96, 138, 152, 113, 130, 100, 32, 55, 0, 153, 67, 40, 91, 16, 107, 129, 232, 15, 130, 22, 9, 148, 173, 3, 58, 108, 208, 249, 137, 192, 50, 0, 170, 218, 20, 255, 241, 175, 252, 218, 29, 12, 110, 118, 83, 96, 52, 45, 152, 236, 20, 16, 33, 131, 200, 117, 64, 140, 11, 164, 125, 16, 180, 70, 160, 89, 0, 197, 20, 104, 46, 200, 202, 67, 8, 32, 53, 2, 201, 36, 233, 37, 40, 43, 73, 197, 193, 126, 38, 85, 9, 139, 22, 233, 91, 168, 216, 216, 216, 144, 185, 177, 243, 247, 254, 149, 159, 189, 45, 239, 231, 157, 224, 38, 77, 158, 8, 14, 203, 228, 225, 10, 28, 189, 201, 81, 9, 12, 50, 201, 241, 35, 25, 0, 169, 66, 236, 90, 144, 90, 196, 122, 16, 212, 67, 160, 69, 99, 160, 150, 6, 53, 94, 10, 76, 145, 192, 50, 243, 128, 1, 151, 242, 159, 252, 208, 51, 119, 48, 184, 217, 41, 224, 60, 231, 129, 201, 38, 200, 195, 82, 144, 183, 2, 225, 28, 3, 81, 47, 208, 136, 22, 212, 74, 160, 119, 0, 181, 69, 169, 65, 218, 64, 192, 21, 73, 234, 5, 242, 73, 82, 86, 80, 153, 73, 239, 65, 137, 38, 253, 9, 181, 154, 148, 48, 252, 92, 216, 225, 208, 187, 209, 2, 56, 244, 123, 127, 130, 192, 99, 21, 126, 62, 92, 138, 201, 235, 198, 45, 153, 188, 127, 28, 141, 201, 115, 196, 17, 155, 28, 137, 192, 192, 146, 156, 49, 18, 0, 50, 58, 8, 86, 11, 114, 137, 224, 182, 32, 250, 2, 13, 25, 3, 125, 19, 168, 101, 31, 116, 62, 129, 41, 166, 3, 79, 141, 1, 3, 30, 59, 63, 247, 87, 125, 189, 15, 62, 254, 216, 193, 121, 14, 130, 209, 172, 4, 242, 96, 16, 161, 62, 8, 103, 129, 12, 15, 130, 58, 8, 84, 102, 16, 244, 14, 173, 4, 217, 104, 129, 190, 39, 105, 9, 1, 135, 36, 169, 29, 72, 41, 73, 137, 193, 111, 38, 101, 8, 79, 154, 148, 42, 124, 91, 88, 203, 2, 198, 46, 108, 117, 8, 255, 96, 1, 248, 175, 5, 62, 179, 240, 163, 227, 137, 141, 175, 15, 151, 110, 242, 62, 113, 4, 38, 207, 11, 71, 105, 242, 232, 5, 6, 99, 48, 75, 76, 58, 65, 62, 144, 30, 128, 228, 33, 151, 45, 8, 55, 210, 63, 8, 90, 84, 160, 111, 29, 80, 227, 2, 157, 159, 8, 44, 3, 224, 169, 141, 0, 23, 111, 131, 255, 244, 87, 127, 163, 15, 62, 126, 227, 224, 150, 55, 2, 70, 211, 130, 201, 78, 1, 17, 50, 200, 91, 7, 100, 88, 32, 234, 131, 160, 50, 2, 157, 106, 65, 43, 209, 89, 144, 101, 135, 10, 64, 10, 4, 122, 73, 82, 71, 144, 149, 73, 179, 253, 140, 159, 55, 188, 12, 210, 144, 144, 167, 177, 102, 5, 12, 92, 88, 212, 2, 14, 47, 236, 249, 131, 5, 224, 223, 227, 227, 10, 63, 22, 158, 166, 200, 171, 193, 133, 154, 188, 43, 220, 112, 145, 71, 131, 83, 75, 242, 148, 49, 0, 147, 3, 19, 24, 103, 146, 33, 64, 62, 0, 178, 133, 228, 1, 4, 87, 32, 220, 45, 104, 72, 129, 34, 141, 129, 102, 22, 168, 241, 82, 96, 138, 4, 150, 153, 1, 220, 183, 20, 184, 248, 142, 4, 183, 188, 20, 28, 233, 60, 48, 217, 4, 121, 88, 10, 242, 86, 32, 153, 99, 32, 231, 2, 117, 24, 4, 157, 66, 233, 0, 10, 139, 58, 131, 244, 128, 128, 37, 146, 20, 11, 180, 147, 164, 166, 96, 48, 147, 198, 131, 12, 77, 106, 19, 70, 45, 210, 189, 208, 114, 97, 117, 11, 88, 189, 40, 237, 239, 225, 79, 11, 127, 38, 30, 180, 200, 231, 198, 101, 21, 121, 245, 184, 49, 147, 167, 128, 3, 50, 121, 154, 56, 104, 147, 131, 17, 24, 91, 146, 147, 70, 14, 64, 6, 8, 241, 2, 136, 166, 64, 118, 91, 80, 0, 129, 146, 12, 130, 190, 21, 104, 102, 31, 212, 222, 192, 20, 211, 129, 167, 6, 129, 251, 142, 133, 159, 247, 195, 223, 156, 13, 30, 234, 88, 192, 145, 14, 130, 209, 172, 4, 242, 96, 144, 159, 62, 72, 166, 64, 128, 199, 64, 23, 4, 250, 210, 130, 198, 161, 146, 32, 187, 44, 208, 244, 36, 253, 32, 96, 143, 36, 133, 3, 29, 153, 116, 151, 128, 217, 204, 109, 13, 206, 125, 89, 144, 54, 134, 168, 11, 203, 92, 192, 243, 226, 208, 2, 240, 199, 225, 33, 138, 124, 38, 92, 68, 145, 215, 138, 219, 48, 190, 97, 28, 132, 201, 83, 195, 153, 38, 57, 3, 140, 39, 201, 137, 98, 222, 9, 82, 130, 12, 1, 228, 15, 233, 4, 8, 183, 64, 1, 6, 65, 151, 4, 250, 214, 1, 53, 54, 168, 253, 20, 96, 25, 0, 79, 173, 15, 228, 187, 41, 254, 179, 95, 243, 236, 108, 240, 80, 155, 2, 55, 190, 62, 24, 13, 192, 88, 39, 130, 252, 20, 8, 91, 7, 4, 88, 32, 228, 131, 160, 44, 2, 133, 106, 65, 31, 209, 86, 144, 53, 135, 4, 64, 170, 3, 86, 73, 82, 68, 112, 148, 73, 167, 65, 119, 198, 98, 20, 112, 166, 177, 93, 33, 94, 99, 63, 67, 221, 133, 245, 46, 236, 252, 189, 127, 245, 231, 108, 221, 251, 121, 111, 184, 109, 147, 103, 132, 227, 51, 121, 214, 24, 67, 146, 147, 195, 80, 147, 140, 2, 82, 2, 144, 48, 228, 15, 32, 190, 2, 17, 111, 65, 79, 4, 186, 52, 6, 202, 89, 160, 198, 75, 129, 44, 18, 88, 102, 6, 16, 95, 31, 200, 247, 14, 6, 55, 222, 7, 71, 58, 3, 140, 53, 65, 24, 150, 130, 176, 21, 136, 229, 24, 8, 185, 64, 17, 6, 65, 155, 80, 183, 150, 172, 42, 138, 12, 210, 0, 2, 126, 72, 82, 41, 176, 141, 73, 59, 9, 184, 203, 164, 232, 224, 64, 99, 91, 66, 164, 198, 190, 133, 138, 141, 141, 13, 153, 23, 22, 190, 208, 2, 56, 54, 239, 231, 89, 224, 152, 76, 158, 41, 78, 60, 201, 9, 97, 120, 73, 206, 27, 105, 0, 25, 35, 36, 12, 32, 160, 2, 9, 110, 65, 13, 208, 147, 49, 208, 58, 129, 114, 246, 65, 243, 13, 100, 49, 29, 120, 106, 16, 136, 239, 40, 249, 207, 127, 237, 183, 54, 11, 30, 255, 200, 192, 145, 14, 130, 209, 76, 7, 97, 72, 144, 159, 14, 136, 101, 129, 244, 14, 130, 34, 8, 52, 165, 5, 93, 67, 25, 65, 182, 88, 160, 227, 73, 154, 65, 192, 27, 73, 170, 6, 22, 50, 105, 45, 8, 205, 164, 253, 32, 70, 115, 91, 161, 107, 127, 131, 8, 122, 55, 123, 248, 189, 63, 65, 224, 177, 10, 63, 31, 46, 197, 248, 162, 113, 51, 38, 239, 28, 135, 98, 242, 4, 113, 184, 38, 39, 129, 33, 37, 57, 87, 76, 61, 65, 86, 144, 36, 128, 20, 34, 163, 0, 17, 23, 168, 193, 32, 168, 147, 64, 235, 58, 160, 201, 5, 154, 63, 5, 88, 6, 192, 83, 235, 3, 225, 174, 201, 207, 255, 145, 111, 111, 22, 60, 254, 154, 224, 222, 215, 4, 163, 1, 24, 235, 20, 16, 30, 131, 164, 117, 64, 122, 5, 18, 62, 8, 154, 130, 42, 181, 160, 137, 232, 41, 200, 130, 163, 254, 73, 26, 67, 192, 39, 38, 253, 35, 96, 39, 147, 42, 131, 229, 14, 248, 249, 203, 151, 129, 165, 186, 241, 77, 112, 176, 0, 252, 215, 2, 159, 89, 248, 209, 241, 196, 198, 151, 136, 75, 55, 190, 67, 222, 255, 45, 242, 164, 112, 136, 38, 79, 28, 243, 72, 114, 126, 152, 110, 146, 129, 16, 136, 75, 130, 156, 33, 133, 0, 33, 22, 72, 121, 11, 170, 34, 80, 167, 49, 208, 207, 2, 101, 238, 3, 89, 36, 176, 204, 12, 96, 189, 62, 16, 238, 157, 13, 238, 189, 15, 78, 117, 85, 48, 214, 4, 97, 88, 10, 146, 86, 32, 147, 99, 32, 225, 2, 45, 104, 65, 143, 80, 180, 22, 244, 20, 45, 78, 208, 125, 152, 193, 164, 73, 4, 60, 99, 210, 75, 80, 150, 73, 191, 65, 125, 198, 146, 20, 240, 103, 97, 205, 110, 106, 19, 236, 249, 247, 248, 184, 194, 143, 133, 167, 41, 110, 95, 205, 150, 191, 201, 147, 231, 139, 163, 55, 57, 39, 76, 49, 201, 169, 35, 19, 32, 147, 132, 156, 1, 196, 20, 33, 110, 65, 13, 4, 170, 50, 8, 90, 87, 160, 159, 29, 208, 124, 3, 89, 76, 7, 146, 26, 4, 214, 59, 2, 126, 193, 175, 123, 110, 171, 224, 233, 142, 6, 156, 106, 11, 70, 51, 29, 132, 193, 32, 60, 125, 144, 73, 129, 232, 14, 130, 10, 8, 212, 164, 5, 69, 67, 13, 65, 246, 87, 160, 221, 73, 58, 65, 192, 24, 38, 13, 35, 224, 31, 147, 178, 130, 199, 76, 74, 15, 62, 44, 210, 156, 144, 106, 145, 238, 133, 150, 11, 171, 91, 192, 234, 194, 218, 223, 195, 95, 20, 254, 76, 60, 104, 145, 207, 141, 203, 42, 242, 234, 113, 99, 69, 222, 63, 142, 198, 228, 57, 226, 136, 77, 206, 3, 211, 74, 114, 186, 152, 125, 130, 196, 32, 79, 0, 89, 68, 82, 1, 130, 46, 80, 134, 22, 52, 74, 160, 117, 29, 80, 230, 2, 205, 159, 2, 44, 3, 32, 169, 53, 129, 103, 103, 243, 11, 127, 253, 119, 182, 10, 158, 110, 54, 184, 253, 53, 193, 104, 0, 198, 58, 5, 132, 199, 32, 105, 99, 32, 186, 2, 241, 30, 4, 29, 65, 137, 90, 208, 65, 52, 20, 100, 181, 81, 252, 36, 93, 33, 96, 18, 147, 230, 129, 148, 146, 219, 18, 251, 190, 225, 101, 144, 38, 132, 36, 15, 136, 111, 16, 65, 179, 198, 54, 134, 168, 11, 203, 92, 192, 243, 226, 208, 2, 200, 15, 197, 163, 8, 63, 141, 192, 21, 20, 190, 80, 193, 219, 216, 39, 239, 22, 7, 97, 124, 100, 56, 74, 147, 71, 47, 48, 24, 147, 83, 196, 140, 147, 140, 133, 64, 104, 18, 164, 13, 89, 4, 136, 50, 130, 62, 8, 10, 131, 70, 141, 129, 126, 22, 40, 115, 31, 200, 34, 129, 101, 86, 5, 202, 235, 3, 207, 222, 241, 224, 246, 251, 224, 96, 87, 5, 99, 77, 16, 134, 62, 136, 89, 129, 64, 142, 129, 120, 11, 228, 191, 5, 37, 66, 197, 90, 208, 80, 244, 55, 201, 202, 67, 8, 73, 58, 68, 192, 48, 38, 117, 4, 89, 25, 107, 77, 192, 120, 198, 110, 132, 54, 15, 216, 220, 38, 72, 231, 47, 22, 128, 255, 66, 224, 115, 10, 63, 46, 158, 175, 240, 101, 9, 94, 244, 62, 190, 49, 129, 123, 46, 242, 116, 112, 112, 38, 79, 25, 3, 48, 57, 45, 204, 50, 201, 241, 35, 25, 32, 243, 132, 180, 1, 132, 21, 81, 110, 65, 25, 4, 10, 51, 8, 186, 39, 80, 209, 62, 40, 191, 129, 47, 38, 2, 73, 181, 64, 121, 219, 230, 251, 126, 244, 249, 35, 3, 79, 189, 109, 112, 176, 131, 96, 58, 19, 65, 18, 12, 146, 211, 1, 129, 44, 144, 219, 65, 144, 127, 20, 164, 5, 21, 67, 1, 65, 54, 87, 160, 215, 73, 218, 0, 162, 72, 210, 45, 208, 206, 109, 190, 127, 249, 50, 72, 215, 65, 131, 38, 133, 9, 151, 46, 88, 182, 9, 172, 235, 41, 239, 19, 236, 213, 255, 193, 71, 20, 126, 32, 60, 65, 225, 139, 16, 188, 196, 125, 124, 15, 184, 61, 147, 103, 129, 99, 42, 242, 52, 121, 214, 183, 200, 193, 8, 140, 205, 228, 152, 145, 128, 4, 185, 65, 170, 18, 196, 17, 97, 109, 65, 220, 81, 134, 65, 80, 42, 129, 238, 141, 129, 50, 27, 148, 127, 41, 80, 12, 128, 164, 214, 1, 122, 157, 199, 47, 250, 13, 223, 61, 50, 240, 212, 243, 192, 33, 172, 9, 166, 147, 96, 172, 83, 64, 114, 10, 196, 108, 12, 132, 182, 64, 182, 91, 80, 16, 129, 6, 1, 20, 16, 245, 4, 89, 106, 84, 62, 73, 75, 64, 32, 73, 10, 7, 58, 50, 233, 46, 104, 205, 220, 22, 224, 188, 111, 16, 109, 98, 19, 236, 225, 143, 132, 63, 13, 15, 87, 248, 41, 5, 47, 104, 31, 95, 49, 110, 198, 248, 182, 113, 28, 38, 207, 14, 199, 106, 114, 6, 24, 143, 201, 113, 98, 210, 73, 134, 67, 32, 58, 9, 50, 135, 68, 2, 164, 25, 113, 111, 65, 97, 4, 122, 53, 6, 90, 90, 160, 207, 125, 224, 11, 3, 197, 172, 10, 124, 215, 1, 122, 189, 75, 192, 33, 116, 192, 193, 174, 10, 198, 154, 32, 9, 125, 144, 177, 2, 105, 28, 4, 193, 22, 8, 127, 11, 234, 35, 208, 47, 128, 110, 162, 185, 73, 150, 29, 42, 72, 210, 30, 16, 75, 146, 34, 130, 163, 14, 88, 233, 101, 193, 145, 111, 130, 219, 11, 192, 31, 132, 79, 46, 252, 4, 130, 79, 191, 143, 175, 15, 151, 94, 220, 190, 195, 9, 222, 231, 9, 222, 34, 207, 26, 99, 48, 57, 54, 129, 161, 154, 12, 129, 64, 68, 146, 76, 21, 50, 7, 144, 87, 4, 186, 5, 149, 64, 103, 6, 65, 247, 10, 180, 180, 3, 202, 111, 224, 139, 137, 64, 82, 45, 240, 221, 246, 248, 197, 191, 241, 133, 99, 1, 151, 177, 61, 112, 176, 131, 96, 58, 19, 65, 18, 12, 146, 211, 1, 105, 20, 8, 237, 32, 8, 191, 64, 59, 0, 202, 133, 234, 129, 236, 172, 64, 163, 147, 148, 0, 20, 145, 164, 82, 32, 28, 147, 118, 130, 184, 140, 21, 39, 96, 191, 34, 61, 9, 133, 22, 214, 172, 128, 129, 23, 76, 222, 4, 214, 254, 158, 255, 72, 224, 163, 133, 31, 78, 240, 201, 246, 241, 213, 224, 66, 139, 188, 31, 220, 106, 145, 39, 130, 195, 50, 121, 178, 56, 116, 147, 19, 194, 240, 76, 14, 91, 32, 10, 6, 233, 65, 182, 18, 132, 18, 145, 109, 65, 226, 81, 137, 65, 80, 45, 129, 250, 141, 129, 62, 23, 40, 255, 82, 160, 24, 0, 73, 173, 3, 196, 186, 42, 223, 255, 155, 94, 60, 22, 112, 25, 51, 192, 57, 172, 3, 166, 147, 96, 172, 75, 65, 108, 12, 50, 54, 6, 18, 43, 144, 234, 22, 84, 67, 160, 59, 0, 213, 67, 49, 65, 214, 25, 101, 79, 82, 14, 80, 71, 146, 170, 129, 133, 76, 42, 11, 54, 43, 210, 123, 80, 162, 177, 57, 33, 213, 194, 226, 21, 112, 242, 130, 201, 155, 96, 177, 0, 240, 119, 133, 63, 159, 15, 189, 143, 159, 27, 151, 85, 248, 210, 5, 238, 170, 200, 251, 199, 209, 20, 121, 130, 56, 92, 147, 147, 192, 144, 76, 14, 85, 96, 228, 38, 35, 34, 16, 160, 4, 201, 67, 46, 1, 50, 141, 208, 183, 160, 54, 2, 213, 26, 4, 45, 45, 80, 233, 62, 240, 133, 129, 98, 86, 5, 178, 235, 0, 177, 222, 61, 224, 28, 58, 224, 108, 87, 2, 99, 77, 144, 132, 62, 200, 152, 64, 20, 199, 64, 170, 5, 146, 223, 130, 238, 160, 89, 32, 43, 137, 194, 130, 172, 57, 36, 144, 164, 52, 160, 20, 147, 254, 129, 154, 76, 122, 12, 138, 59, 32, 190, 65, 4, 73, 26, 187, 20, 154, 45, 172, 98, 1, 75, 47, 88, 182, 9, 246, 240, 123, 127, 52, 31, 104, 31, 63, 19, 46, 162, 240, 133, 10, 220, 67, 225, 91, 21, 60, 136, 125, 242, 188, 112, 148, 38, 207, 29, 35, 49, 57, 63, 140, 214, 100, 20, 4, 130, 146, 100, 188, 144, 60, 128, 212, 34, 211, 45, 104, 5, 106, 51, 8, 26, 40, 208, 210, 14, 40, 191, 129, 47, 38, 2, 67, 181, 64, 118, 91, 226, 151, 252, 230, 239, 29, 47, 184, 158, 45, 129, 179, 109, 193, 116, 166, 128, 24, 24, 196, 166, 3, 162, 40, 16, 215, 65, 16, 123, 129, 94, 0, 212, 10, 165, 3, 217, 86, 129, 46, 39, 89, 127, 200, 33, 73, 153, 192, 51, 38, 165, 4, 95, 25, 155, 13, 210, 59, 96, 149, 183, 10, 32, 222, 194, 114, 22, 240, 182, 176, 216, 69, 10, 255, 96, 1, 248, 239, 240, 105, 133, 31, 23, 79, 89, 248, 178, 4, 174, 184, 240, 93, 241, 158, 111, 225, 163, 17, 56, 181, 34, 207, 23, 71, 111, 114, 78, 24, 161, 201, 145, 11, 4, 34, 201, 12, 33, 97, 9, 162, 137, 224, 182, 32, 247, 40, 70, 11, 218, 37, 208, 192, 49, 80, 233, 2, 253, 159, 2, 44, 147, 192, 80, 179, 129, 79, 87, 229, 151, 254, 150, 151, 142, 23, 92, 207, 74, 224, 40, 214, 1, 211, 73, 48, 211, 165, 32, 54, 5, 2, 54, 6, 226, 42, 16, 233, 65, 208, 11, 180, 6, 160, 116, 168, 100, 146, 45, 22, 232, 120, 146, 90, 128, 52, 76, 26, 70, 192, 63, 69, 154, 10, 18, 51, 169, 59, 152, 176, 176, 48, 5, 92, 90, 216, 183, 80, 113, 97, 93, 67, 227, 11, 154, 23, 4, 123, 254, 61, 63, 52, 188, 47, 240, 28, 194, 23, 33, 112, 125, 133, 239, 1, 183, 103, 124, 10, 56, 32, 147, 167, 137, 131, 46, 114, 30, 152, 86, 146, 211, 197, 224, 13, 178, 130, 36, 37, 200, 31, 210, 9, 144, 108, 228, 190, 5, 229, 65, 187, 198, 64, 87, 5, 42, 221, 7, 190, 72, 96, 153, 149, 128, 236, 198, 128, 79, 239, 42, 112, 20, 29, 112, 182, 43, 129, 153, 26, 196, 160, 15, 2, 86, 32, 135, 131, 32, 210, 2, 153, 111, 65, 107, 208, 41, 144, 101, 68, 85, 65, 22, 28, 245, 79, 82, 23, 48, 137, 73, 243, 64, 74, 230, 182, 190, 126, 96, 120, 25, 88, 128, 2, 110, 44, 172, 80, 1, 187, 22, 7, 6, 94, 246, 179, 67, 16, 251, 130, 91, 155, 96, 143, 127, 177, 143, 63, 19, 143, 88, 28, 153, 247, 113, 160, 38, 79, 31, 131, 49, 57, 69, 12, 56, 201, 76, 32, 46, 73, 134, 12, 249, 3, 200, 46, 146, 13, 80, 12, 129, 242, 12, 130, 18, 10, 116, 181, 3, 20, 80, 192, 23, 19, 129, 161, 90, 32, 187, 141, 243, 3, 191, 245, 236, 142, 128, 11, 219, 6, 56, 219, 22, 76, 103, 10, 136, 129, 65, 102, 58, 32, 135, 2, 89, 29, 4, 153, 71, 41, 90, 208, 41, 52, 46, 201, 158, 10, 180, 56, 201, 226, 195, 9, 38, 29, 34, 96, 152, 3, 126, 112, 249, 50, 176, 208, 4, 92, 87, 88, 137, 2, 182, 44, 44, 85, 1, 223, 10, 11, 121, 198, 38, 56, 180, 0, 252, 113, 248, 252, 194, 79, 131, 167, 47, 124, 125, 184, 244, 34, 239, 16, 55, 95, 228, 25, 225, 248, 140, 79, 153, 51, 184, 69, 78, 11, 179, 76, 114, 246, 136, 69, 146, 73, 66, 206, 18, 164, 19, 217, 5, 136, 190, 64, 55, 90, 80, 48, 129, 18, 142, 129, 86, 23, 80, 192, 82, 96, 153, 4, 134, 154, 13, 100, 122, 183, 129, 211, 152, 13, 166, 147, 96, 166, 75, 65, 102, 10, 164, 107, 12, 100, 85, 32, 207, 45, 104, 4, 42, 3, 80, 55, 148, 49, 201, 254, 10, 180, 59, 73, 33, 192, 21, 38, 221, 2, 237, 24, 11, 74, 192, 93, 69, 90, 14, 2, 44, 210, 147, 80, 104, 97, 205, 10, 24, 88, 88, 209, 131, 155, 192, 122, 23, 118, 254, 98, 1, 228, 95, 224, 115, 132, 31, 20, 79, 86, 228, 5, 225, 90, 69, 222, 15, 110, 181, 200, 19, 193, 97, 21, 121, 166, 56, 110, 147, 179, 193, 216, 76, 206, 24, 227, 79, 50, 49, 200, 83, 130, 20, 34, 163, 0, 249, 70, 250, 1, 202, 35, 80, 176, 65, 208, 213, 2, 173, 238, 0, 95, 36, 176, 204, 74, 192, 116, 155, 229, 151, 253, 182, 221, 2, 151, 183, 113, 112, 182, 43, 129, 153, 26, 196, 160, 15, 210, 37, 16, 194, 65, 16, 102, 129, 192, 183, 160, 47, 104, 19, 200, 26, 162, 164, 73, 246, 90, 160, 245, 38, 45, 241, 115, 127, 104, 254, 50, 72, 107, 65, 104, 198, 222, 131, 18, 139, 52, 39, 164, 186, 96, 217, 207, 14, 89, 218, 144, 121, 97, 219, 47, 22, 192, 82, 239, 11, 60, 186, 240, 211, 11, 94, 220, 62, 190, 122, 220, 88, 225, 155, 23, 56, 151, 34, 79, 16, 135, 91, 228, 12, 48, 30, 147, 227, 196, 164, 147, 76, 6, 114, 147, 100, 212, 144, 66, 128, 4, 35, 223, 0, 245, 16, 168, 80, 11, 122, 88, 160, 174, 99, 64, 1, 6, 202, 152, 2, 12, 53, 15, 104, 116, 58, 191, 252, 183, 239, 22, 184, 188, 233, 224, 64, 102, 131, 233, 76, 1, 25, 40, 16, 152, 14, 72, 160, 64, 80, 7, 65, 218, 81, 135, 22, 180, 9, 93, 75, 178, 161, 2, 253, 53, 217, 119, 1, 27, 152, 180, 7, 196, 98, 210, 66, 16, 212, 1, 241, 13, 34, 40, 206, 216, 132, 144, 100, 97, 145, 10, 56, 118, 193, 196, 77, 48, 254, 130, 96, 15, 127, 42, 58, 222, 23, 126, 62, 94, 202, 62, 190, 86, 220, 70, 225, 91, 21, 56, 133, 194, 135, 37, 120, 148, 251, 228, 137, 99, 24, 38, 39, 135, 161, 154, 76, 0, 242, 145, 100, 158, 144, 182, 4, 25, 69, 130, 1, 10, 128, 122, 12, 130, 154, 161, 135, 99, 160, 216, 5, 20, 176, 20, 88, 102, 58, 208, 220, 24, 208, 232, 93, 8, 14, 100, 12, 28, 239, 74, 96, 166, 125, 16, 152, 2, 209, 26, 3, 65, 21, 72, 114, 11, 234, 128, 178, 0, 20, 13, 53, 76, 178, 185, 2, 189, 54, 233, 1, 1, 75, 152, 84, 10, 108, 99, 236, 37, 40, 203, 164, 220, 224, 189, 194, 110, 132, 54, 11, 171, 85, 192, 186, 11, 186, 155, 192, 74, 111, 55, 193, 237, 5, 224, 15, 194, 39, 23, 126, 116, 62, 241, 62, 190, 50, 92, 116, 225, 27, 19, 184, 231, 194, 231, 130, 35, 51, 62, 92, 28, 186, 201, 9, 97, 120, 38, 39, 141, 28, 36, 153, 27, 164, 42, 65, 22, 145, 212, 4, 17, 23, 232, 0, 64, 133, 4, 106, 54, 8, 26, 43, 80, 236, 62, 80, 198, 20, 96, 40, 0, 205, 109, 150, 31, 252, 29, 187, 8, 46, 114, 179, 224, 120, 91, 48, 157, 41, 32, 3, 29, 16, 173, 2, 9, 28, 4, 73, 70, 212, 91, 208, 20, 84, 9, 100, 1, 81, 207, 36, 27, 45, 208, 119, 147, 126, 128, 58, 76, 122, 6, 10, 50, 150, 149, 128, 199, 10, 235, 78, 192, 132, 133, 109, 9, 145, 22, 150, 173, 128, 135, 133, 69, 45, 224, 112, 97, 201, 91, 251, 123, 63, 179, 171, 254, 124, 56, 60, 147, 240, 117, 224, 18, 11, 223, 134, 192, 29, 22, 62, 5, 28, 144, 241, 57, 226, 136, 77, 206, 3, 163, 50, 57, 87, 140, 220, 100, 62, 144, 158, 36, 3, 39, 16, 199, 4, 57, 70, 202, 1, 74, 130, 10, 13, 130, 42, 10, 52, 118, 12, 40, 96, 41, 176, 76, 2, 67, 205, 3, 14, 157, 200, 175, 248, 157, 187, 8, 46, 114, 58, 56, 147, 121, 96, 58, 9, 102, 218, 7, 129, 25, 3, 241, 43, 144, 210, 22, 68, 29, 69, 104, 65, 143, 208, 178, 36, 139, 41, 208, 92, 147, 77, 23, 240, 128, 73, 105, 192, 39, 230, 182, 124, 70, 222, 45, 176, 190, 4, 204, 86, 88, 128, 2, 110, 44, 236, 79, 168, 181, 176, 126, 161, 229, 5, 147, 223, 36, 216, 27, 244, 190, 240, 231, 243, 161, 151, 189, 181, 235, 139, 22, 184, 159, 194, 247, 140, 227, 40, 242, 212, 112, 160, 197, 237, 115, 63, 114, 233, 35, 115, 9, 146, 138, 28, 3, 212, 0, 37, 105, 65, 205, 4, 218, 56, 6, 186, 221, 1, 202, 48, 176, 204, 116, 224, 184, 49, 224, 208, 187, 19, 156, 201, 32, 56, 222, 233, 96, 160, 6, 1, 232, 131, 92, 13, 130, 136, 10, 196, 184, 5, 69, 64, 77, 0, 42, 134, 2, 38, 217, 89, 129, 70, 155, 52, 0, 228, 96, 126, 222, 15, 223, 94, 6, 144, 140, 73, 35, 65, 86, 69, 58, 13, 186, 43, 172, 68, 1, 91, 22, 54, 42, 100, 91, 216, 198, 16, 245, 130, 101, 155, 96, 15, 191, 247, 71, 243, 129, 246, 241, 51, 225, 10, 10, 95, 37, 174, 190, 240, 29, 226, 230, 139, 60, 35, 28, 95, 145, 167, 140, 1, 24, 143, 10, 83, 52, 57, 114, 129, 64, 152, 76, 15, 178, 149, 32, 145, 200, 107, 130, 160, 163, 6, 45, 40, 146, 64, 217, 90, 208, 216, 14, 16, 65, 1, 107, 76, 1, 134, 2, 112, 220, 6, 249, 149, 191, 107, 119, 193, 165, 110, 16, 28, 47, 192, 104, 166, 128, 0, 24, 164, 101]);
fileData4.push.apply(fileData4, [12, 196, 111, 16, 100, 88, 32, 231, 0, 53, 65, 137, 64, 86, 15, 197, 76, 178, 203, 63, 255, 71, 214, 92, 6, 7, 122, 17, 48, 143, 177, 163, 160, 47, 99, 203, 65, 128, 133, 37, 41, 224, 207, 226, 192, 177, 67, 255, 203, 50, 203, 89, 192, 219, 194, 98, 135, 240, 15, 22, 128, 255, 90, 224, 51, 133, 31, 23, 79, 89, 28, 175, 247, 115, 42, 24, 152, 201, 233, 98, 240, 38, 131, 130, 12, 37, 25, 59, 129, 80, 38, 72, 51, 178, 14, 208, 19, 20, 105, 16, 20, 114, 16, 116, 187, 128, 8, 250, 64, 52, 9, 12, 53, 15, 8, 116, 10, 63, 244, 187, 119, 23, 92, 234, 68, 112, 38, 51, 192, 104, 18, 12, 116, 41, 72, 139, 64, 168, 198, 64, 62, 91, 16, 114, 129, 22, 0, 52, 8, 253, 74, 178, 146, 40, 108, 146, 29, 71, 253, 147, 212, 5, 76, 82, 164, 115, 160, 35, 99, 107, 65, 104, 198, 222, 131, 18, 11, 107, 83, 192, 168, 194, 202, 237, 111, 2, 104, 124, 65, 243, 130, 96, 207, 191, 231, 135, 78, 254, 86, 15, 46, 174, 200, 27, 192, 189, 9, 223, 188, 192, 185, 20, 62, 62, 129, 147, 45, 114, 6, 24, 79, 145, 83, 196, 128, 77, 6, 66, 32, 46, 38, 227, 37, 16, 190, 36, 243, 138, 52, 3, 52, 1, 85, 105, 65, 217, 6, 65, 111, 5, 186, 221, 1, 214, 48, 16, 205, 116, 224, 184, 49, 32, 208, 187, 19, 156, 201, 32, 56, 222, 233, 96, 160, 6, 1, 232, 128, 80, 21, 200, 94, 11, 2, 220, 130, 10, 160, 32, 32, 155, 37, 208, 187, 36, 171, 138, 34, 39, 89, 124, 104, 193, 164, 67, 160, 151, 34, 191, 65, 36, 224, 168, 226, 182, 202, 150, 189, 85, 0, 73, 46, 88, 246, 83, 164, 150, 48, 228, 92, 216, 222, 16, 187, 176, 246, 247, 126, 214, 70, 191, 228, 247, 229, 10, 222, 204, 42, 222, 199, 33, 26, 159, 53, 38, 97, 114, 102, 24, 167, 201, 217, 35, 22, 38, 99, 36, 16, 50, 131, 92, 34, 181, 9, 226, 142, 50, 180, 160, 78, 45, 40, 164, 64, 111, 199, 128, 8, 10, 88, 99, 10, 48, 20, 128, 227, 54, 197, 175, 250, 61, 39, 0, 92, 243, 70, 192, 241, 2, 140, 102, 10, 8, 64, 129, 168, 140, 129, 224, 9, 132, 115, 16, 36, 28, 160, 32, 168, 15, 200, 210, 161, 146, 73, 86, 24, 5, 79, 82, 8, 112, 133, 73, 177, 192, 57, 133, 213, 36, 96, 173, 194, 114, 219, 226, 38, 88, 253, 91, 67, 123, 249, 155, 252, 80, 60, 138, 232, 120, 95, 248, 250, 120, 233, 251, 248, 222, 112, 207, 133, 143, 6, 71, 102, 124, 178, 56, 116, 227, 217, 96, 108, 38, 103, 140, 241, 155, 140, 139, 64, 152, 76, 134, 79, 32, 154, 9, 50, 141, 196, 3, 180, 165, 5, 149, 67, 39, 199, 64, 195, 5, 68, 208, 7, 162, 73, 96, 168, 25, 192, 155, 83, 248, 213, 191, 247, 4, 128, 107, 94, 10, 142, 101, 6, 24, 77, 130, 129, 246, 65, 84, 10, 36, 106, 16, 132, 83, 32, 189, 45, 200, 63, 64, 119, 208, 172, 36, 203, 136, 170, 38, 89, 109, 20, 223, 164, 37, 32, 16, 99, 213, 8, 88, 168, 176, 172, 4, 60, 86, 88, 119, 131, 155, 192, 170, 20, 176, 232, 130, 238, 38, 176, 162, 167, 127, 107, 232, 96, 1, 248, 239, 240, 57, 226, 246, 131, 118, 191, 228, 231, 133, 238, 227, 59, 193, 77, 22, 62, 8, 28, 144, 241, 57, 226, 136, 139, 156, 4, 134, 100, 114, 162, 24, 182, 201, 100, 32, 52, 38, 67, 38, 16, 193, 36, 83, 139, 76, 3, 244, 1, 160, 78, 2, 149, 107, 65, 111, 11, 52, 188, 3, 196, 97, 224, 154, 137, 192, 113, 131, 192, 155, 119, 45, 56, 150, 65, 112, 188, 211, 193, 52, 13, 166, 223, 1, 137, 18, 8, 222, 32, 72, 47, 226, 221, 130, 118, 36, 217, 41, 129, 198, 37, 89, 82, 84, 56, 201, 202, 195, 6, 198, 222, 24, 123, 235, 56, 253, 3, 53, 21, 214, 151, 128, 217, 10, 11, 16, 98, 44, 44, 79, 1, 175, 10, 139, 87, 192, 201, 194, 198, 134, 204, 133, 85, 47, 22, 11, 192, 191, 193, 199, 9, 63, 10, 30, 93, 228, 211, 227, 202, 132, 175, 27, 183, 84, 248, 182, 5, 78, 164, 240, 169, 225, 64, 139, 60, 119, 140, 164, 240, 228, 4, 134, 106, 50, 1, 8, 135, 201, 48, 9, 68, 205, 32, 157, 200, 110, 130, 196, 3, 20, 70, 160, 81, 45, 168, 165, 64, 117, 199, 128, 11, 10, 136, 99, 41, 48, 20, 128, 227, 54, 194, 15, 255, 190, 147, 1, 46, 123, 35, 224, 120, 1, 70, 51, 5, 76, 191, 64, 78, 198, 64, 234, 4, 146, 217, 130, 108, 35, 252, 0, 197, 1, 89, 55, 148, 49, 201, 242, 162, 218, 38, 61, 0, 69, 152, 244, 9, 84, 99, 108, 36, 200, 170, 176, 208, 4, 92, 87, 216, 135, 80, 101, 97, 157, 66, 179, 11, 214, 126, 65, 176, 135, 63, 21, 183, 63, 109, 197, 47, 249, 125, 161, 2, 247, 32, 124, 147, 2, 247, 95, 248, 140, 112, 124, 133, 143, 88, 224, 244, 139, 156, 19, 70, 104, 114, 222, 136, 130, 201, 220, 32, 82, 38, 35, 40, 16, 208, 4, 201, 6, 104, 5, 58, 3, 80, 57, 129, 90, 14, 130, 134, 23, 112, 65, 31, 184, 198, 192, 80, 51, 128, 55, 151, 242, 107, 126, 255, 201, 0, 151, 61, 5, 156, 204, 170, 96, 52, 9, 166, 217, 7, 57, 17, 136, 211, 24, 72, 38, 162, 219, 130, 228, 163, 23, 0, 157, 74, 178, 134, 40, 105, 146, 165, 70, 223, 77, 202, 1, 222, 48, 54, 12, 228, 99, 236, 40, 232, 171, 176, 226, 4, 236, 87, 216, 144, 144, 103, 97, 187, 66, 188, 194, 90, 22, 48, 182, 56, 240, 249, 208, 26, 56, 180, 0, 166, 120, 95, 224, 185, 133, 175, 12, 87, 92, 248, 174, 112, 183, 133, 79, 4, 135, 85, 248, 64, 5, 206, 186, 240, 72, 4, 166, 85, 228, 92, 49, 114, 147, 249, 64, 116, 76, 70, 77, 32, 136, 9, 226, 155, 32, 247, 104, 5, 64, 169, 4, 90, 215, 130, 246, 10, 52, 188, 3, 196, 97, 224, 154, 137, 64, 112, 131, 192, 155, 119, 51, 56, 153, 22, 28, 239, 116, 48, 205, 2, 163, 239, 128, 56, 9, 68, 110, 16, 228, 22, 193, 110, 201, 82, 160, 50, 0, 93, 75, 178, 158, 40, 175, 201, 166, 11, 120, 160, 72, 99, 64, 38, 198, 206, 89, 250, 13, 34, 8, 173, 176, 244, 4, 124, 88, 28, 56, 115, 213, 55, 9, 86, 127, 65, 112, 176, 0, 252, 119, 248, 28, 225, 71, 228, 147, 77, 254, 146, 31, 247, 86, 248, 254, 113, 52, 133, 143, 79, 224, 100, 11, 15, 0, 131, 49, 57, 69, 12, 184, 200, 28, 32, 37, 73, 166, 10, 129, 75, 16, 211, 36, 195, 141, 220, 3, 212, 6, 165, 106, 65, 51, 5, 218, 59, 6, 116, 80, 64, 28, 75, 129, 161, 0, 4, 183, 62, 191, 246, 15, 156, 36, 112, 241, 235, 131, 227, 5, 24, 205, 82, 48, 250, 2, 33, 25, 3, 145, 19, 136, 101, 11, 130, 141, 216, 131, 236, 139, 64, 155, 18, 116, 48, 201, 218, 162, 209, 38, 13, 0, 57, 152, 212, 8, 12, 83, 88, 68, 219, 216, 4, 86, 104, 127, 19, 64, 203, 194, 210, 22, 240, 185, 200, 53, 176, 183, 212, 251, 2, 143, 46, 252, 220, 184, 38, 113, 251, 162, 135, 212, 239, 187, 197, 65, 20, 62, 44, 129, 115, 44, 124, 220, 24, 131, 241, 180, 48, 72, 147, 83, 71, 32, 76, 166, 7, 193, 74, 16, 71, 131, 4, 35, 223, 0, 221, 64, 115, 0, 138, 39, 80, 206, 65, 208, 115, 1, 29, 244, 129, 107, 12, 12, 181, 42, 48, 230, 82, 126, 228, 15, 158, 36, 112, 241, 75, 193, 225, 172, 10, 70, 147, 96, 154, 29, 16, 146, 2, 89, 26, 4, 153, 68, 104, 91, 144, 121, 52, 2, 100, 149, 80, 180, 4, 221, 52, 217, 229, 239, 95, 99, 25, 88, 44, 2, 206, 41, 172, 166, 25, 155, 96, 233, 63, 56, 97, 163, 66, 182, 133, 109, 12, 75, 79, 121, 65, 176, 135, 63, 21, 254, 28, 62, 220, 26, 223, 234, 241, 237, 9, 220, 188, 240, 209, 8, 156, 90, 225, 195, 197, 161, 23, 57, 27, 140, 205, 120, 186, 24, 188, 201, 160, 32, 67, 9, 98, 103, 50, 166, 2, 33, 78, 144, 126, 116, 3, 160, 90, 40, 222, 32, 40, 176, 64, 207, 199, 128, 56, 12, 92, 51, 17, 8, 174, 5, 198, 188, 203, 193, 225, 12, 130, 19, 158, 2, 70, 105, 48, 250, 14, 200, 146, 64, 222, 90, 16, 90, 129, 84, 131, 172, 3, 202, 2, 178, 98, 40, 96, 130, 206, 154, 236, 56, 234, 111, 44, 10, 1, 135, 20, 105, 27, 136, 168, 176, 172, 182, 184, 9, 54, 247, 130, 224, 208, 2, 240, 7, 225, 243, 133, 31, 29, 207, 42, 58, 222, 23, 190, 31, 220, 106, 225, 179, 192, 25, 21, 62, 74, 28, 113, 145, 147, 192, 144, 138, 156, 37, 198, 108, 50, 19, 136, 139, 65, 188, 76, 198, 81, 32, 172, 73, 70, 28, 233, 7, 104, 14, 170, 213, 130, 114, 10, 20, 120, 12, 24, 161, 128, 62, 250, 64, 79, 0, 130, 91, 147, 95, 247, 135, 78, 30, 184, 133, 245, 193, 9, 39, 24, 205, 82, 48, 247, 2, 9, 25, 3, 121, 67, 32, 91, 16, 105, 4, 30, 100, 83, 4, 122, 148, 100, 245, 80, 204, 4, 93, 54, 110, 253, 216, 203, 130, 180, 7, 196, 82, 124, 223, 143, 222, 94, 6, 80, 83, 97, 125, 205, 218, 4, 7, 218, 20, 48, 170, 176, 114, 161, 226, 194, 174, 134, 195, 7, 95, 16, 44, 22, 128, 255, 148, 159, 176, 198, 119, 249, 125, 245, 184, 177, 194, 119, 142, 19, 41, 124, 112, 56, 208, 194, 135, 46, 48, 146, 34, 39, 135, 161, 22, 158, 189, 64, 44, 12, 98, 100, 50, 118, 2, 161, 76, 50, 199, 72, 57, 200, 122, 160, 60, 45, 168, 31, 202, 57, 8, 122, 94, 192, 8, 29, 224, 154, 4, 134, 90, 9, 232, 178, 207, 175, 255, 195, 39, 15, 220, 66, 31, 28, 206, 170, 96, 46, 6, 163, 236, 131, 132, 8, 4, 105, 16, 4, 82, 32, 177, 32, 211, 46, 208, 133, 36, 27, 36, 208, 175, 36, 43, 137, 194, 26, 20, 220, 164, 13, 32, 10, 99, 159, 64, 53, 197, 154, 155, 192, 50, 20, 240, 228, 86, 94, 16, 28, 94, 3, 123, 75, 213, 143, 199, 21, 29, 239, 11, 95, 49, 110, 70, 228, 173, 226, 20, 132, 143, 73, 224, 4, 133, 143, 88, 96, 0, 133, 135, 36, 48, 191, 34, 39, 141, 16, 24, 132, 198, 100, 194, 16, 190, 36, 243, 138, 52, 39, 232, 0, 26, 2, 208, 46, 212, 175, 5, 29, 22, 232, 121, 7, 232, 163, 128, 107, 38, 2, 193, 181, 64, 151, 119, 57, 56, 156, 65, 112, 194, 83, 192, 40, 13, 230, 62, 6, 130, 36, 16, 182, 22, 196, 85, 32, 207, 32, 139, 128, 154, 128, 44, 23, 122, 151, 100, 85, 209, 98, 131, 214, 27, 251, 1, 234, 48, 41, 25, 248, 71, 172, 178, 9, 104, 63, 97, 55, 66, 155, 162, 191, 9, 44, 100, 136, 90, 88, 227, 2, 134, 47, 243, 239, 225, 79, 133, 63, 1, 143, 37, 252, 76, 184, 2, 225, 235, 195, 165, 23, 190, 55, 220, 179, 240, 161, 8, 156, 151, 240, 129, 10, 28, 119, 145, 35, 193, 180, 10, 15, 85, 96, 222, 5, 194, 97, 50, 73, 8, 89, 146, 185, 68, 100, 147, 12, 58, 58, 0, 208, 31, 20, 172, 5, 21, 21, 168, 241, 32, 48, 66, 1, 125, 44, 5, 134, 74, 32, 184, 53, 249, 209, 63, 114, 34, 193, 93, 172, 9, 78, 56, 193, 92, 150, 130, 185, 11, 196, 99, 12, 36, 77, 32, 141, 0, 97, 70, 212, 65, 118, 68, 160, 65, 73, 150, 14, 125, 52, 217, 95, 84, 219, 64, 5, 198, 198, 152, 247, 13, 162, 109, 110, 130, 209, 53, 32, 14, 252, 188, 202, 11, 130, 219, 11, 192, 31, 129, 207, 20, 246, 190, 192, 83, 10, 95, 19, 174, 85, 248, 78, 112, 135, 133, 79, 1, 167, 83, 248, 4, 113, 184, 133, 79, 31, 131, 49, 30, 33, 70, 107, 16, 5, 147, 185, 65, 164, 76, 230, 15, 209, 76, 50, 205, 200, 122, 130, 146, 160, 66, 45, 104, 32, 42, 58, 8, 218, 46, 96, 132, 62, 208, 141, 129, 161, 86, 2, 174, 236, 243, 27, 254, 232, 137, 4, 119, 209, 7, 231, 179, 18, 152, 139, 193, 28, 59, 32, 30, 5, 82, 212, 130, 40, 10, 100, 21, 32, 234, 40, 66, 146, 221, 17, 104, 150, 249, 65, 17, 101, 68, 79, 77, 150, 26, 125, 55, 240, 67, 97, 141, 204, 221, 4, 7, 18, 19, 240, 155, 176, 0, 55, 251, 173, 33, 187, 26, 26, 23, 150, 188, 181, 191, 88, 0, 254, 83, 124, 180, 240, 99, 225, 57, 132, 175, 0, 23, 39, 242, 210, 113, 87, 194, 183, 141, 227, 40, 124, 94, 56, 202, 194, 103, 141, 49, 24, 15, 12, 131, 52, 152, 122, 145, 249, 64, 116, 76, 230, 12, 41, 76, 50, 181, 200, 116, 130, 38, 160, 39, 0, 29, 67, 9, 91, 80, 99, 129, 182, 143, 1, 125, 24, 232, 102, 10, 176, 91, 11, 92, 121, 10, 206, 167, 5, 39, 60, 5, 204, 177, 192, 208, 199, 64, 132, 4, 98, 54, 8, 178, 138, 36, 131, 172, 0, 10, 146, 100, 167, 4, 26, 103, 178, 161, 40, 175, 201, 166, 67, 2, 6, 198, 40, 44, 150, 165, 155, 0, 202, 42, 172, 53, 1, 227, 9, 43, 17, 170, 44, 236, 82, 104, 86, 88, 194, 144, 179, 176, 186, 219, 23, 4, 22, 190, 216, 171, 255, 131, 143, 16, 254, 124, 60, 174, 240, 179, 226, 106, 132, 175, 21, 247, 32, 124, 147, 2, 247, 47, 124, 58, 56, 184, 194, 135, 43, 112, 238, 133, 199, 131, 177, 21, 24, 176, 201, 52, 32, 40, 69, 70, 10, 105, 75, 50, 157, 200, 110, 146, 113, 71, 19, 0, 90, 132, 142, 181, 160, 168, 104, 242, 24, 240, 130, 128, 62, 150, 2, 67, 37, 176, 219, 58, 252, 198, 63, 118, 130, 193, 189, 172, 3, 78, 56, 193, 92, 250, 96, 232, 5, 178, 49, 8, 98, 38, 144, 67, 128, 24, 35, 228, 32, 219, 33, 208, 29, 147, 93, 19, 104, 162, 201, 230, 162, 212, 198, 221, 255, 129, 145, 101, 0, 141, 20, 86, 205, 140, 77, 48, 241, 91, 67, 91, 121, 65, 48, 242, 125, 161, 61, 252, 145, 189, 47, 240, 64, 126, 14, 129, 43, 200, 139, 195, 117, 139, 186, 43, 129, 187, 21, 62, 14, 129, 195, 18, 62, 74, 129, 83, 46, 60, 12, 12, 169, 192, 56, 141, 7, 143, 64, 152, 76, 15, 130, 101, 50, 133, 200, 104, 146, 153, 70, 226, 19, 84, 5, 69, 106, 65, 15, 81, 212, 65, 80, 120, 1, 47, 116, 128, 110, 12, 12, 181, 18, 16, 101, 135, 223, 244, 199, 79, 48, 184, 151, 14, 56, 159, 149, 192, 92, 12, 230, 216, 1, 217, 16, 200, 207, 32, 200, 33, 82, 10, 16, 114, 84, 32, 201, 214, 8, 116, 202, 100, 7, 5, 26, 90, 76, 249, 30, 145, 133, 32, 224, 138, 2, 98, 41, 44, 159, 141, 111, 2, 11, 179, 191, 9, 32, 225, 121, 107, 224, 246, 2, 24, 243, 190, 240, 227, 226, 41, 133, 175, 6, 87, 41, 124, 27, 2, 119, 40, 124, 255, 56, 154, 194, 103, 135, 51, 45, 124, 244, 24, 73, 129, 225, 21, 57, 99, 140, 223, 56, 37, 200, 144, 201, 180, 33, 139, 73, 102, 23, 201, 78, 208, 7, 180, 5, 160, 105, 232, 97, 11, 202, 44, 80, 248, 49, 96, 144, 2, 186, 153, 2, 236, 214, 2, 81, 158, 130, 243, 105, 193, 9, 79, 1, 115, 44, 48, 241, 49, 144, 31, 129, 140, 181, 32, 165, 200, 48, 200, 240, 163, 26, 73, 182, 73, 160, 107, 38, 187, 137, 218, 26, 23, 92, 160, 251, 69, 90, 2, 2, 41, 160, 154, 194, 58, 154, 181, 9, 14, 52, 40, 96, 72, 97, 127, 66, 173, 194, 226, 133, 144, 133, 117, 13, 141, 11, 75, 222, 218, 95, 44, 0, 255, 41, 62, 90, 248, 177, 240, 28, 194, 87, 128, 43, 19, 190, 110, 220, 143, 200, 27, 198, 89, 8, 159, 20, 78, 176, 240, 65, 99, 0, 5, 70, 85, 228, 68, 49, 236, 34, 51, 129, 184, 152, 204, 22, 98, 103, 50, 163, 72, 112, 146, 161, 23, 168, 68, 130, 46, 161, 105, 0, 69, 21, 40, 243, 32, 240, 66, 1, 131, 244, 129, 161, 18, 216, 109, 54, 191, 249, 79, 156, 108, 112, 59, 235, 128, 19, 54, 24, 202, 82, 48, 113, 129, 96, 12, 130, 128, 9, 132, 176, 5, 25, 70, 194, 147, 44, 5, 42, 147, 100, 203, 126, 104, 141, 101, 144, 173, 135, 16, 140, 189, 1, 165, 20, 144, 79, 97, 65, 13, 110, 2, 203, 77, 192, 123, 71, 252, 130, 192, 194, 23, 123, 245, 127, 240, 17, 194, 159, 140, 199, 245, 243, 9, 92, 138, 47, 84, 224, 30, 132, 239, 16, 55, 47, 242, 104, 112, 106, 194, 199, 138, 227, 46, 48, 152, 194, 195, 19, 152, 107, 145, 9, 64, 56, 138, 204, 16, 226, 101, 50, 142, 72, 106, 146, 225, 70, 238, 65, 182, 5, 93, 2, 168, 162, 64, 93, 91, 208, 121, 1, 47, 116, 128, 113, 12, 12, 53, 29, 88, 178, 195, 111, 249, 147, 39, 27, 220, 78, 7, 28, 209, 116, 48, 20, 131, 33, 118, 64, 48, 4, 194, 51, 8, 18, 136, 136, 130, 204, 182, 64, 242, 147, 236, 139, 64, 155, 76, 182, 15, 197, 52, 217, 98, 20, 188, 200, 111, 16, 65, 17, 198, 38, 129, 100, 10, 232, 168, 176, 178, 160, 178, 194, 174, 131, 6, 133, 37, 41, 224, 79, 81, 106, 221, 236, 247, 133, 246, 240, 71, 254, 104, 60, 144, 240, 115, 224, 185, 69, 93, 153, 192, 21, 139, 188, 37, 220, 173, 240, 89, 224, 140, 132, 15, 81, 224, 124, 5, 198, 80, 120, 84, 2, 83, 44, 60, 108, 129, 40, 20, 153, 24, 132, 201, 100, 242, 16, 74, 147, 9, 70, 190, 19, 180, 2, 157, 1, 232, 27, 218, 216, 130, 74, 163, 243, 99, 64, 34, 5, 140, 51, 5, 216, 13, 192, 146, 71, 198, 111, 253, 83, 147, 192, 103, 29, 13, 56, 34, 128, 227, 157, 2, 134, 88, 96, 220, 99, 32, 60, 2, 233, 106, 65, 62, 145, 94, 144, 177, 71, 41, 146, 236, 17, 42, 150, 100, 37, 209, 86, 147, 213, 70, 235, 139, 148, 3, 188, 81, 216, 45, 208, 78, 1, 65, 21, 165, 175, 173, 189, 32, 160, 135, 173, 104, 168, 187, 179, 6, 110, 47, 0, 127, 4, 62, 89, 248, 113, 241, 124, 194, 87, 131, 171, 20, 190, 7, 220, 158, 240, 157, 227, 80, 138, 142, 247, 5, 206, 93, 120, 48, 2, 51, 43, 60, 87, 140, 220, 56, 25, 8, 141, 201, 132, 33, 124, 38, 195, 138, 28, 39, 25, 125, 129, 98, 36, 104, 20, 250, 6, 80, 87, 129, 74, 15, 2, 59, 8, 72, 164, 15, 36, 149, 192, 110, 179, 129, 154, 215, 228, 183, 253, 233, 73, 224, 179, 214, 4, 119, 52, 15, 28, 111, 130, 161, 244, 193, 184, 11, 164, 98, 16, 164, 11, 241, 107, 65, 122, 145, 237, 36, 235, 128, 178, 36, 217, 47, 84, 207, 100, 79, 81, 97, 227, 178, 11, 120, 160, 176, 46, 4, 76, 82, 216, 54, 16, 81, 1, 95, 9, 11, 173, 191, 9, 32, 73, 97, 133, 10, 216, 85, 148, 120, 87, 124, 65, 192, 53, 176, 88, 0, 254, 83, 124, 180, 240, 3, 225, 9, 234, 185, 11, 92, 86, 94, 52, 238, 71, 248, 110, 113, 10, 194, 199, 132, 227, 43, 112, 202, 133, 39, 129, 9, 21, 158, 34, 6, 108, 156, 3, 68, 196, 100, 158, 16, 53, 147, 185, 68, 100, 77, 70, 92, 160, 0, 73, 118, 6, 141, 2, 40, 36, 234, 58, 8, 106, 47, 96, 135, 14, 144, 78, 1, 73, 77, 7, 138, 236, 0, 53, 159, 68, 112, 71, 99, 224, 136, 166, 131, 161, 24, 76, 176, 3, 82, 33, 144, 156, 22, 196, 15, 225, 4, 153, 106, 129, 204, 39, 89, 19, 148, 40, 201, 210, 161, 143, 198, 205, 29, 123, 183, 192, 245, 23, 48, 67, 97, 129, 8, 184, 165, 56, 88, 3, 51, 54, 65, 99, 63, 97, 55, 194, 153, 83, 94, 16, 204, 91, 3, 98, 175, 254, 15, 62, 194, 159, 41, 240, 160, 245, 124, 2, 215, 33, 124, 149, 184, 1, 225, 123, 195, 61, 23, 62, 23, 156, 151, 192, 153, 22, 235, 120, 63, 167, 142, 64, 20, 206, 141, 64, 164, 76, 230, 15, 209, 52, 25, 101, 129, 160, 27, 116, 3, 205, 73, 80, 57, 129, 78, 2, 84, 90, 160, 246, 99, 192, 35, 5, 164, 179, 20, 216, 13, 64, 145, 91, 229, 183, 255, 153, 249, 224, 161, 182, 10, 142, 8, 224, 120, 167, 128, 9, 22, 152, 245, 32, 136, 141, 64, 180, 90, 144, 76, 68, 23, 100, 224, 81, 135, 36, 235, 131, 114, 153, 108, 34, 74, 106, 178, 209, 40, 123, 145, 78, 128, 46, 10, 43, 69, 192, 54, 194, 58, 26, 220, 4, 16, 90, 113, 176, 6, 230, 190, 32, 128, 120, 133, 181, 12, 93, 11, 155, 28, 146, 175, 239, 11, 237, 225, 79, 253, 209, 120, 20, 225, 231, 192, 115, 11, 95, 25, 174, 88, 248, 126, 112, 159, 162, 227, 125, 129, 115, 20, 62, 104, 12, 160, 240, 132, 48, 188, 34, 103, 140, 241, 23, 153, 18, 4, 200, 56, 106, 72, 97, 146, 169, 69, 160, 77, 22, 64, 160, 30, 9, 122, 133, 214, 1, 148, 86, 160, 216, 45, 176, 67, 1, 143, 116, 128, 164, 18, 216, 109, 30, 208, 241, 60, 126, 199, 159, 157, 15, 30, 106, 30, 184, 169, 121, 224, 120, 19, 12, 165, 15, 102, 45, 16, 137, 65, 144, 43, 4, 175, 5, 185, 69, 170, 147, 44, 2, 106, 146, 100, 173, 208, 56, 227, 122, 10, 52, 215, 184, 227, 168, 191, 177, 37, 32, 16, 177, 244, 29, 99, 11, 10, 226, 42, 224, 55, 97, 1, 66, 140, 194, 218, 20, 48, 106, 231, 5, 129, 21, 221, 190, 32, 176, 216, 33, 252, 219, 11, 192, 31, 129, 207, 20, 126, 92, 60, 159, 240, 165, 224, 42, 133, 111, 0, 247, 38, 124, 231, 56, 17, 129, 83, 19, 62, 86, 129, 19, 23, 30, 137, 192, 192, 132, 199, 41, 48, 233, 194, 129, 16, 200, 74, 145, 169, 66, 224, 76, 166, 19, 193, 53, 25, 116, 129, 26, 36, 217, 28, 244, 10, 160, 150, 40, 109, 11, 154, 95, 64, 16, 99, 64, 58, 6, 158, 154, 8, 20, 57, 6, 116, 124, 66, 193, 77, 141, 129, 35, 154, 14, 38, 98, 48, 193, 49, 144, 7, 129, 216, 180, 32, 120, 136, 37, 200, 60, 11, 164, 61, 201, 130, 160, 62, 73, 214, 13, 77, 44, 178, 179, 168, 179, 113, 235, 33, 4, 99, 111, 64, 41, 98, 226, 38, 216, 234, 11, 130, 121, 223, 23, 178, 228, 173, 253, 197, 2, 240, 159, 226, 163, 69, 61, 144, 192, 19, 248, 185, 113, 89, 194, 87, 140, 59, 17, 29, 239, 11, 156, 148, 232, 120, 95, 120, 6, 24, 79, 225, 249, 97, 174, 133, 199, 47, 144, 140, 34, 51, 132, 120, 21, 153, 66, 4, 212, 100, 160, 5, 226, 110, 208, 16, 244, 39, 65, 241, 80, 203, 22, 20, 91, 160, 252, 131, 192, 35, 5, 164, 179, 20, 216, 13, 64, 145, 91, 226, 119, 254, 185, 205, 128, 135, 221, 18, 56, 34, 128, 227, 93, 10, 198, 87, 96, 208, 99, 32, 51, 8, 85, 11, 98, 137, 208, 130, 140, 58, 138, 144, 100, 113, 80, 43, 147, 29, 68, 61, 139, 31, 158, 176, 12, 236, 1, 40, 162, 176, 70, 4, 12, 35, 250, 155, 192, 250, 154, 184, 9, 172, 71, 104, 83, 88, 170, 144, 237, 250, 107, 96, 239, 216, 213, 143, 115, 17, 62, 56, 129, 51, 21, 62, 113, 12, 163, 240, 180, 48, 200, 194, 195, 22, 200, 65, 225, 172, 32, 73, 38, 51, 135, 56, 154, 204, 46, 98, 109, 178, 6, 2, 37, 73, 208, 46, 116, 15, 160, 186, 40, 246, 32, 112, 132, 128, 74, 250, 192, 83, 6, 118, 155, 7, 68, 188, 42, 191, 235, 191, 216, 12, 120, 216, 25, 224, 190, 102, 128, 227, 77, 48, 145, 14, 24, 116, 129, 60, 180, 32, 84, 2, 169, 3, 72, 44, 242, 156, 100, 5, 80, 144, 36, 11, 133, 174, 153, 44, 38, 58, 91, 184, 218, 2, 173, 47, 108, 6, 72, 163, 176, 88, 4, 156, 35, 44, 37, 1, 95, 9, 219, 12, 162, 19, 144, 161, 176, 42, 219, 23, 4, 22, 172, 128, 123, 173, 101, 232, 90, 148, 198, 199, 214, 192, 30, 254, 180, 62, 186, 192, 3, 249, 57, 240, 220, 194, 151, 133, 43, 22, 190, 31, 220, 167, 192, 89, 8, 159, 20, 78, 80, 228, 17, 227, 244, 133, 103, 131, 177, 21, 30, 173, 192, 212, 11, 39, 3, 161, 49, 206, 22, 98, 103, 50, 163, 136, 111, 146, 137, 71, 25, 146, 236, 15, 218, 5, 208, 76, 84, 183, 5, 229, 23, 112, 196, 24, 144, 142, 129, 167, 38, 2, 63, 142, 1, 17, 159, 92, 112, 95, 131, 224, 136, 166, 131, 137, 20, 24, 223, 24, 8, 131, 64, 96, 90, 16, 57, 4, 18, 100, 146, 5, 114, 158, 100, 53, 208, 26, 147, 45, 67, 1, 141, 171, 42, 208, 226, 194, 101, 23, 240, 64, 97, 87, 64, 35, 133, 85, 3, 5, 137, 109, 188, 32, 88, 241, 251, 66, 43, 175, 129, 219, 11, 160, 62, 66, 224, 51, 133, 31, 23, 207, 231, 235, 16, 184, 196, 121, 222, 23, 56, 53, 225, 51, 197, 113, 11, 15, 67, 96, 78, 194, 131, 20, 152, 113, 225, 28, 32, 34, 69, 38, 9, 33, 51, 153, 72, 132, 213, 100, 178, 17, 250, 36, 123, 130, 22, 37, 168, 31, 202, 217, 130, 122, 163, 255, 99, 192, 38, 2, 210, 89, 10, 236, 6, 224, 199, 141, 243, 187, 255, 203, 205, 131, 167, 216, 56, 56, 34, 128, 227, 93, 10, 198, 87, 96, 202, 131, 32, 48, 2, 137, 2, 8, 36, 226, 154, 100, 194, 5, 242, 111, 126, 116, 197, 101, 240, 35, 35, 203, 32, 251, 139, 106, 23, 174, 191, 128, 25, 10, 219, 3, 98, 41, 108, 30, 72, 73, 76, 217, 4, 199, 242, 125, 161, 50, 124, 174, 129, 197, 2, 168, 63, 21, 248, 104, 225, 7, 194, 115, 248, 185, 113, 77, 194, 87, 140, 59, 17, 184, 91, 49, 207, 251, 194, 167, 143, 169, 20, 158, 28, 38, 90, 120, 234, 8, 68, 145, 185, 65, 164, 10, 39, 79, 32, 148, 38, 19, 140, 124, 39, 217, 7, 180, 37, 65, 199, 208, 64, 128, 246, 162, 222, 131, 64, 19, 2, 54, 233, 0, 79, 25, 216, 109, 6, 240, 239, 74, 252, 158, 63, 191, 121, 240, 20, 43, 129, 91, 155, 1, 142, 215, 96, 28, 125, 48, 101, 129, 36, 180, 32, 78, 2, 121, 3, 25, 84, 196, 24, 100, 248, 209, 11, 147, 61, 66, 197, 76, 246, 17, 85, 53, 110, 52, 202, 94, 88, 8, 2, 174, 40, 14, 214, 192, 208, 38, 176, 136, 4, 28, 181, 193, 23, 4, 150, 42, 100, 43, 172, 98, 40, 122, 226, 26, 216, 171, 223, 224, 35, 132, 63, 25, 143, 235, 231, 195, 117, 8, 95, 37, 174, 94, 224, 246, 132, 239, 31, 231, 34, 124, 106, 56, 80, 225, 179, 198, 24, 138, 19, 225, 253, 204, 61, 42, 145, 100, 145, 208, 49, 128, 126, 162, 192, 45, 80, 128, 128, 38, 198, 128, 122, 10, 120, 106, 34, 240, 227, 32, 240, 239, 137, 6, 183, 54, 8, 142, 104, 34, 24, 135, 193, 236, 198, 64, 18, 4, 210, 2, 16, 54, 129, 52, 38, 153, 97, 129, 132, 155, 108, 132, 64, 95, 76, 150, 11, 189, 51, 110, 40, 202, 107, 220, 113, 212, 191, 176, 34, 4, 236, 33, 172, 151, 254, 38, 128, 178, 196, 198, 95, 16, 116, 222, 30, 128, 174, 151, 174, 129, 61, 252, 169, 240, 39, 224, 177, 252, 28, 120, 110, 49, 166, 126, 220, 143, 152, 226, 125, 129, 19, 20, 62, 95, 156, 187, 240, 96, 4, 102, 38, 60, 81, 12, 187, 112, 32, 4, 178, 82, 56, 82, 2, 105, 43, 50, 151, 136, 172, 201, 124, 35, 253, 73, 182, 5, 93, 74, 208, 64, 84, 180, 5, 13, 135, 2, 6, 129, 77, 10, 168, 167, 15, 236, 6, 224, 199, 205, 242, 123, 255, 171, 45, 130, 231, 218, 32, 56, 34, 128, 227, 93, 10, 102, 39, 48, 226, 65, 16, 21, 129, 44, 1, 68, 17, 65, 77, 50, 219, 2, 201, 55, 217, 20, 148, 200, 100, 227, 80, 70, 227, 206, 46, 253, 6, 17, 132, 32, 242, 103, 135, 32, 147, 194, 182, 129, 136, 10, 155, 10, 6, 155, 250, 130, 160, 113, 38, 164, 42, 54, 184, 6, 14, 45, 0, 127, 16, 62, 223, 143, 139, 231, 19, 155, 85, 63, 142, 76, 248, 52, 113, 202, 133, 39, 129, 9, 9, 143, 80, 96, 192, 194, 227, 23, 72, 70, 225, 0, 33, 88, 38, 83, 136, 128, 22, 25, 101, 164, 60, 201, 86, 160, 51, 9, 154, 134, 30, 2, 116, 24, 37, 111, 129, 41, 4, 108, 210, 1, 158, 74, 32, 184, 85, 129, 121, 167, 243, 251, 254, 194, 22, 193, 115, 77, 7, 119, 183, 42, 56, 91, 131, 113, 116, 192, 136, 5, 98, 48, 8, 178, 132, 164, 129, 140, 40, 2, 156, 100, 230, 5, 26, 97, 178, 65, 40, 151, 201, 26, 162, 161, 133, 139, 188, 189, 77, 176, 242, 11, 130, 91, 186, 19, 48, 161, 37, 9, 121, 10, 8, 86, 108, 100, 13, 28, 44, 0, 255, 5, 62, 199, 143, 133, 231, 176, 247, 5, 46, 11, 215, 45, 124, 87, 184, 91, 225, 131, 192, 25, 9, 159, 32, 78, 86, 116, 188, 47, 60, 51, 140, 179, 240, 188, 145, 131, 194, 113, 65, 140, 140, 211, 134, 32, 154, 76, 45, 2, 109, 50, 253, 232, 70, 146, 117, 66, 211, 0, 90, 138, 14, 183, 64, 4, 48, 197, 24, 80, 79, 1, 79, 77, 4, 114, 28, 4, 230, 61, 233, 224, 238, 6, 193, 41, 77, 1, 227, 40, 48, 184, 49, 16, 3, 129, 156, 180, 32, 105, 200, 97, 146, 233, 21, 200, 182, 201, 46, 160, 38, 73, 214, 10, 141, 43, 92, 76, 129, 206, 22, 174, 246, 198, 55, 129, 117, 4, 77, 21, 246, 24, 252, 54, 239, 251, 66, 144, 173, 40, 9, 207, 94, 3, 123, 254, 13, 62, 206, 159, 143, 199, 29, 243, 190, 192, 181, 138, 49, 245, 251, 206, 5, 206, 197, 231, 37, 112, 148, 194, 103, 141, 25, 8, 79, 8, 195, 43, 60, 93, 76, 189, 112, 56, 16, 26, 227, 108, 33, 118, 198, 233, 68, 112, 77, 6, 29, 29, 72, 178, 51, 104, 84, 130, 30, 162, 165, 0, 37, 23, 16, 193, 32, 112, 138, 128, 122, 150, 2, 187, 37, 144, 227, 166, 248, 253, 127, 241, 40, 192, 147, 110, 16, 156, 82, 130, 179, 237, 131, 193, 21, 152, 239, 32, 200, 9, 130, 4, 16, 66, 68, 52, 201, 84, 11, 100, 222, 100, 71, 80, 31, 227, 162, 9, 116, 176, 112, 85, 5, 90, 92, 184, 236, 131, 155, 192, 162, 16, 112, 136, 176, 100, 32, 159, 226, 96, 13, 172, 242, 130, 96, 83, 111, 15, 204, 94, 3, 139, 5, 128, 191, 243, 231, 224, 177, 166, 171, 223, 222, 23, 184, 37, 223, 45, 14, 66, 248, 140, 112, 118, 98, 138, 247, 5, 166, 37, 60, 75, 140, 185, 112, 20, 4, 82, 34, 50, 73, 8, 89, 145, 89, 68, 76, 77, 102, 26, 113, 55, 217, 13, 52, 39, 65, 223, 208, 70, 128, 38, 163, 231, 45, 144, 133, 128, 83, 58, 64, 85, 6, 118, 91, 9, 56, 119, 34, 127, 224, 191, 62, 10, 240, 164, 19, 193, 13, 174, 10, 206, 214, 96, 22, 29, 48, 95, 129, 12, 180, 32, 69, 200, 24, 200, 112, 34, 186, 73, 166, 29, 69, 72, 178, 56, 232, 84, 145, 237, 67, 49, 139, 236, 47, 170, 93, 184, 251, 208, 66, 97, 117, 64, 41, 98, 246, 11, 2, 43, 14, 234, 19, 22, 35, 132, 41, 74, 164, 219, 88, 3, 98, 47, 127, 227, 143, 195, 231, 207, 80, 63, 238, 65, 248, 14, 113, 231, 194, 231, 130, 243, 18, 62, 77, 156, 178, 240, 12, 48, 30, 225, 225, 9, 204, 85, 120, 240, 2, 153, 40, 156, 27, 68, 170, 200, 228, 33, 148, 69, 102, 23, 177, 54, 89, 3, 52, 36, 201, 82, 9, 84, 46, 65, 87, 209, 100, 0, 17, 8, 200, 98, 12, 216, 167, 128, 170, 166, 0, 57, 182, 192, 185, 119, 0, 184, 193, 65, 112, 74, 83, 192, 44, 10, 76, 109, 16, 4, 64, 32, 36, 45, 200, 24, 18, 152, 100, 104, 17, 233, 36, 91, 128, 130, 152, 108, 19, 138, 102, 220, 71, 84, 181, 112, 157, 5, 154, 94, 216, 6, 16, 69, 97, 147, 64, 50, 194, 10, 18, 176, 147, 56, 88, 3, 43, 189, 32, 184, 37, 73, 1, 127, 110, 105, 13, 28, 44, 0, 255, 29, 62, 71, 28, 139, 250, 237, 125, 129, 99, 21, 62, 116, 204, 67, 120, 90, 152, 98, 225, 73, 35, 1, 133, 83, 130, 0, 21, 14, 153, 64, 254, 138, 76, 42, 66, 108, 50, 241, 40, 131, 201, 242, 160, 87, 9, 218, 136, 174, 2, 84, 93, 64, 7, 45, 112, 74, 1, 251, 244, 129, 221, 18, 200, 113, 35, 252, 193, 191, 116, 164, 224, 217, 55, 2, 78, 41, 193, 217, 246, 193, 212, 4, 134, 59, 8, 18, 130, 8, 1, 196, 15, 225, 76, 50, 207, 136, 122, 146, 213, 64, 107, 140, 251, 133, 234, 25, 55, 20, 229, 45, 92, 112, 129, 238, 23, 7, 107, 96, 197, 111, 13, 77, 121, 65, 176, 169, 239, 11, 109, 124, 13, 236, 249, 247, 248, 56, 177, 61, 245, 251, 206, 113, 34, 98, 77, 239, 11, 76, 78, 28, 175, 247, 51, 217, 8, 189, 201, 146, 160, 63, 9, 90, 135, 78, 38, 40, 179, 64, 219, 91, 160, 12, 1, 173, 140, 1, 85, 25, 216, 109, 37, 96, 219, 41, 252, 161, 191, 124, 164, 224, 217, 151, 130, 27, 92, 21, 156, 109, 129, 65, 116, 192, 100, 5, 166, 223, 130, 252, 32, 96, 32, 99, 137, 208, 38, 153, 115, 84, 192, 100, 95, 80, 37, 147, 165, 67, 31, 11, 119, 22, 117, 46, 92, 121, 1, 27, 8, 235, 162, 191, 9, 160, 32, 97, 65, 65, 92, 194, 90, 131, 238, 132, 101, 8, 73, 30, 205, 26, 88, 44, 0, 252, 157, 168, 79, 107, 237, 143, 39, 219, 41, 245, 99, 78, 194, 131, 20, 152, 177, 112, 2, 16, 142, 194, 1, 18, 200, 86, 225, 252, 33, 154, 38, 115, 140, 136, 155, 236, 3, 170, 98, 178, 90, 2, 197, 75, 208, 88, 244, 25, 64, 7, 2, 202, 24, 4, 2, 42, 160, 170, 41, 64, 142, 45, 176, 237, 29, 0, 110, 112, 16, 156, 210, 82, 48, 136, 2, 35, 27, 3, 211, 71, 60, 90, 144, 46, 100, 47, 201, 184, 34, 204, 73, 134, 31, 189, 48, 89, 34, 244, 171, 112, 13, 5, 26, 90, 184, 197, 40, 184, 200, 127, 115, 2, 114, 40, 108, 15, 136, 69, 88, 59, 2, 70, 154, 247, 130, 192, 98, 132, 48, 183, 189, 6, 246, 240, 71, 59, 165, 126, 159, 163, 192, 41, 11, 15, 0, 179, 17, 158, 28, 38, 42, 60, 114, 129, 64, 8, 199, 69, 32, 73, 133, 211, 134, 32, 26, 231, 21, 81, 54, 153, 123, 84, 194, 100, 133, 4, 10, 150, 100, 39, 209, 88, 128, 194, 67, 7, 131, 192, 44, 2, 2, 234, 3, 187, 37, 144, 227, 250, 252, 225, 255, 230, 24, 192, 53, 172, 15, 78, 201, 224, 96, 251, 96, 100, 5, 38, 219, 130, 120, 32, 60, 32, 83, 39, 144, 201, 36, 99, 140, 144, 155, 108, 4, 202, 98, 92, 43, 129, 198, 21, 46, 166, 64, 103, 11, 247, 26, 149, 23, 253, 77, 96, 153, 172, 244, 130, 224, 164, 172, 129, 219, 11, 224, 232, 213, 111, 239, 11, 28, 144, 207, 14, 199, 42, 124, 226, 152, 132, 240, 168, 4, 166, 40, 60, 99, 140, 191, 112, 62, 144, 155, 194, 217, 66, 236, 138, 76, 39, 130, 107, 28, 113, 164, 63, 201, 182, 160, 72, 6, 221, 67, 51, 19, 84, 26, 133, 111, 129, 50, 4, 204, 50, 6, 108, 101, 96, 183, 149, 128, 106, 151, 242, 71, 254, 219, 99, 0, 215, 176, 20, 220, 227, 116, 112, 176, 6, 131, 24, 3, 99, 21, 24, 125, 11, 194, 131, 104, 129, 12, 36, 226, 154, 100, 188, 145, 124, 227, 154, 8, 52, 168, 200, 174, 161, 134, 133, 171, 42, 208, 226, 194, 77, 135, 1, 132, 21, 33, 96, 15, 97, 183, 64, 59, 194, 82, 130, 172, 54, 251, 246, 192, 140, 53, 0, 153, 139, 131, 53, 144, 11, 96, 162, 250, 197, 198, 213, 143, 19, 17, 62, 47, 28, 165, 240, 41, 227, 244, 133, 103, 131, 153, 137, 28, 42, 230, 45, 156, 6, 164, 164, 112, 146, 16, 178, 34, 179, 136, 152, 22, 153, 102, 4, 221, 100, 43, 80, 24, 147, 5, 19, 168, 95, 130, 222, 162, 213, 0, 82, 128, 53, 198, 128, 131, 10, 8, 107, 41, 48, 99, 11, 84, 123, 103, 128, 123, 4, 56, 162, 41, 96, 10, 5, 230, 53, 8, 70, 47, 144, 13, 128, 92, 33, 117, 73, 6, 21, 49, 78, 50, 246, 104, 68, 145, 221, 65, 173, 140, 219, 135, 98, 22, 46, 175, 64, 175, 133, 139, 47, 224, 132, 173, 188, 32, 216, 213, 53, 176, 119, 55, 168, 31, 3, 22, 57, 126, 36, 67, 56, 55, 136, 84, 225, 216, 9, 36, 178, 200, 236, 34, 214, 69, 166, 31, 197, 72, 178, 75, 168, 89, 146, 205, 68, 111, 1, 58, 15, 41, 12, 2, 185, 8, 56, 168, 3, 4, 151, 192, 140, 107, 242, 71, 255, 202, 177, 129, 43, 89, 7, 28, 81, 130, 131, 237, 131, 121, 9, 204, 180, 5, 193, 16, 72, 78, 146, 121, 19, 72, 99, 146, 1, 70, 182, 77, 118, 1, 53, 49, 110, 19, 138, 102, 220, 71, 84, 181, 112, 157, 81, 243, 194, 30, 128, 34, 196, 148, 77, 176, 169, 239, 11, 29, 253, 26, 40, 243, 239, 225, 79, 5, 62, 173, 30, 174, 181, 191, 159, 62, 47, 75, 248, 114, 113, 27, 51, 212, 239, 115, 196, 249, 138, 41, 222, 23, 152, 168, 240, 188, 145, 3, 225, 160, 8, 100, 72, 56, 100, 2, 249, 43, 28, 83, 129, 4, 23, 153, 117, 212, 192, 100, 103, 80, 167, 36, 27, 136, 126, 38, 104, 53, 106, 223, 2, 113, 8, 200, 101, 12, 8, 171, 128, 224, 86, 2, 158, 237, 243, 199, 254, 234, 177, 129, 43, 233, 131, 123, 156, 14, 14, 214, 96, 10, 99, 96, 166, 2, 115, 7, 136, 13, 66, 5, 50, 138, 72, 105, 146, 193, 70, 230, 141, 219, 129, 226, 152, 172, 24, 218, 87, 184, 161, 40, 111, 225, 118, 163, 248, 133, 205, 0, 99, 76, 125, 65, 208, 56, 202, 250, 130, 214, 150, 174, 1, 1, 121, 10, 123, 53, 101, 187, 254, 26, 56, 180, 0, 240, 161, 39, 87, 253, 24, 161, 240, 116, 49, 245, 194, 201, 64, 98, 10, 167, 10, 105, 43, 156, 72, 132, 213, 56, 214, 136, 187, 201, 110, 160, 54, 73, 54, 13, 37, 76, 208, 94, 116, 27, 192, 11, 16, 199, 32, 112, 80, 1, 97, 45, 5, 102, 108, 129, 103, 239, 12, 112, 143, 0, 71, 52, 5, 76, 65, 96, 88, 131, 96, 232, 2, 169, 0, 72, 20, 242, 150, 100, 68, 145, 94, 147, 105, 71, 17, 140, 43, 35, 208, 166, 194, 165, 19, 232, 99, 225, 206, 162, 203, 194, 101, 23, 240, 128, 176, 40, 32, 16, 97, 189, 8, 152, 199, 82, 106, 95, 16, 88, 101, 80, 220, 58, 107, 0, 226, 245, 26, 128, 168, 197, 193, 26, 56, 44, 118, 97, 231, 31, 44, 0, 252, 245, 93, 162, 126, 231, 0, 17, 41, 156, 33, 100, 171, 112, 254, 16, 77, 227, 4, 35, 220, 38, 155, 128, 146, 152, 108, 20, 202, 150, 100, 63, 209, 94, 128, 230, 67, 13, 45, 240, 139, 128, 131, 250, 192, 113, 6, 102, 92, 135, 63, 254, 223, 29, 51, 184, 158, 217, 224, 136, 18, 156, 106, 7, 12, 75, 96, 160, 45, 136, 132, 64, 102, 146, 76, 154, 64, 14, 147, 140, 46, 82, 109, 178, 2, 104, 71, 225, 18, 9, 244, 171, 112, 13, 5, 26, 42, 92, 97, 129, 118, 11, 215, 31, 90, 40, 236, 13, 248, 100, 222, 247, 133, 172, 53, 232, 110, 198, 55, 133, 44, 91, 72, 120, 213, 53, 112, 176, 0, 240, 167, 226, 4, 169, 223, 147, 192, 144, 132, 231, 135, 185, 22, 158, 61, 50, 33, 156, 24, 132, 169, 200, 192, 33, 139, 133, 243, 138, 40, 23, 153, 120, 148, 193, 100, 115, 80, 170, 36, 123, 136, 150, 38, 232, 54, 202, 223, 2, 125, 192, 47, 99, 64, 88, 6, 142, 155, 8, 12, 219, 231, 79, 252, 181, 99, 6, 215, 211, 1, 183, 57, 29, 156, 106, 129, 17, 140, 129, 129, 10, 76, 28, 32, 48, 136, 83, 146, 9, 20, 200, 167, 201, 60, 35, 234, 38, 123, 129, 202, 20, 174, 149, 64, 227, 10, 183, 18, 133, 45, 92, 106, 148, 189, 176, 13, 96, 9, 97, 141, 64, 47, 155, 125, 123, 96, 147, 107, 224, 150, 168, 33, 240, 131, 29, 208, 172, 129, 67, 11, 96, 80, 253, 98, 80, 253, 98, 219, 234, 31, 243, 190, 240, 233, 99, 48, 194, 51, 195, 44, 133, 39, 141, 4, 20, 78, 9, 210, 35, 28, 47, 129, 228, 21, 78, 39, 130, 91, 100, 190, 17, 125, 147, 61, 65, 133, 76, 246, 13, 109, 76, 208, 97, 52, 28, 192, 14, 208, 199, 32, 48, 145, 128, 176, 150, 2, 51, 2, 24, 246, 142, 1, 183, 9, 112, 68, 75, 193, 8, 10, 76, 106, 16, 76, 28, 121, 0, 200, 18, 146, 102, 50, 153, 2, 185, 53, 25, 114, 228, 223, 184, 41, 40, 81, 225, 162, 9, 116, 176, 112, 79, 81, 225, 194, 29, 71, 247, 133, 229, 0, 105, 8, 43, 69, 192, 54, 22, 17, 4, 37, 78, 196, 26, 56, 88, 0, 245, 23, 173, 253, 253, 64, 120, 130, 65, 245, 139, 147, 168, 126, 103, 2, 89, 41, 156, 39, 228, 172, 112, 22, 17, 211, 194, 81, 22, 72, 121, 145, 125, 64, 85, 76, 246, 10, 173, 75, 178, 165, 232, 48, 64, 255, 97, 135, 22, 40, 70, 192, 68, 29, 224, 56, 3, 51, 206, 230, 79, 254, 245, 227, 7, 151, 52, 27, 28, 81, 130, 83, 237, 128, 73, 9, 76, 179, 5, 121, 64, 90, 146, 204, 152, 64, 2, 77, 38, 22, 97, 54, 153, 124, 148, 194, 184, 59, 168, 85, 225, 234, 9, 180, 178, 112, 115, 209, 104, 225, 202, 11, 216, 64, 216, 21, 112, 136, 176, 97, 96, 158, 206, 11, 130, 227, 90, 3, 203, 223, 31, 174, 5, 48, 79, 253, 2, 23, 81, 23, 215, 218, 223, 55, 147, 55, 41, 124, 243, 56, 148, 25, 234, 247, 84, 4, 6, 230, 89, 98, 198, 34, 67, 128, 124, 8, 167, 7, 169, 42, 156, 60, 132, 178, 112, 112, 5, 50, 93, 100, 250, 81, 140, 34, 43, 132, 118, 37, 217, 70, 116, 53, 65, 195, 209, 255, 22, 24, 4, 138, 25, 3, 206, 42, 224, 184, 137, 192, 176, 29, 254, 84, 159, 191, 177, 57, 240, 200, 1, 46, 169, 3, 110, 115, 58, 56, 213, 2, 231, 63, 8, 70, 41, 48, 107, 128, 168, 32, 72, 73, 102, 79, 32, 153, 38, 147, 140, 144, 155, 172, 3, 154, 82, 184, 77, 40, 90, 225, 50, 10, 244, 84, 184, 200, 2, 29, 23, 54, 0, 228, 32, 172, 14, 40, 69, 216, 54, 16, 209, 210, 53, 32, 160, 59, 97, 19, 166, 30, 55, 190, 6, 160, 119, 107, 127, 177, 0, 240, 119, 226, 196, 169, 31, 19, 18, 158, 31, 230, 42, 60, 117, 164, 65, 100, 92, 144, 36, 225, 156, 33, 130, 133, 99, 42, 144, 224, 194, 41, 71, 1, 76, 182, 5, 69, 50, 217, 58, 116, 50, 65, 147, 209, 243, 4, 130, 16, 144, 72, 11, 76, 84, 192, 89, 125, 96, 70, 112, 200, 176, 16, 241, 137, 35, 238, 5, 183, 9, 112, 68, 75, 193, 249, 11, 140, 105, 16, 204, 26, 97, 0, 25, 33, 4, 44, 201, 76, 34, 174, 73, 198, 27, 201, 47, 92, 16, 129, 238, 20, 238, 23, 170, 87, 184, 158, 168, 109, 225, 94, 163, 242, 194, 66, 128, 40, 132, 53, 2, 189, 8, 203, 7, 82, 90, 103, 13, 64, 149, 203, 215, 192, 97, 21, 139, 118, 7, 136, 242, 249, 224, 26, 216, 195, 31, 13, 170, 95, 220, 61, 234, 71, 110, 132, 131, 37, 144, 57, 225, 80, 10, 228, 181, 112, 166, 17, 119, 227, 86, 160, 48, 38, 11, 134, 238, 37, 89, 87, 52, 25, 192, 2, 112, 68, 11, 68, 35, 32, 163, 49, 224, 56, 115, 91, 139, 208, 229, 42, 252, 233, 191, 185, 43, 224, 194, 86, 166, 187, 30, 112, 164, 29, 48, 35, 129, 57, 182, 32, 9, 200, 73, 146, 233, 66, 240, 146, 204, 42, 98, 108, 28, 120, 129, 46, 20, 174, 140, 64, 155, 10, 55, 14, 101, 44, 220, 86, 20, 89, 184, 230, 2, 6, 16, 246, 3, 188, 33, 108, 21, 216, 198, 34, 130, 160, 182, 177, 6, 160, 89, 49, 184, 6, 202, 213, 19, 215, 192, 237, 5, 224, 191, 198, 167, 13, 170, 95, 156, 32, 245, 123, 174, 2, 35, 207, 64, 32, 43, 194, 73, 66, 194, 10, 167, 16, 233, 44, 156, 96, 132, 187, 200, 14, 160, 30, 38, 187, 132, 154, 153, 172, 37, 26, 155, 160, 231, 176, 0, 128, 68, 4, 68, 51, 8, 180, 85, 204, 179, 60, 244, 58, 198, 159, 249, 91, 187, 2, 46, 108, 12, 220, 230, 114, 198, 23, 3, 14, 127, 12, 204, 17, 131, 6, 8, 9, 34, 148, 100, 234, 16, 200, 36, 3, 140, 108, 23, 217, 2, 20, 164, 112, 137, 4, 250, 85, 184, 131, 232, 166, 112, 121, 5, 122, 45, 220, 122, 8, 65, 216, 21, 208, 136, 176, 97, 96, 30, 97, 47, 165, 172, 102, 188, 55, 96, 85, 66, 161, 86, 43, 148, 123, 176, 3, 230, 126, 71, 232, 96, 1, 116, 212, 47, 240, 208, 131, 234, 23, 199, 165, 126, 79, 5, 211, 18, 158, 37, 102, 44, 156, 0, 36, 67, 100, 116, 144, 42, 225, 204, 33, 139, 133, 243, 138, 40, 23, 153, 120, 148, 161, 200, 206, 160, 78, 38, 235, 135, 102, 38, 232, 51, 218, 158, 64, 19, 2, 30, 105, 129, 143, 196, 74, 174, 135, 25, 1, 244, 122, 199, 128, 219, 4, 56, 162, 30, 205, 225, 23, 152, 81, 11, 166, 140, 24, 128, 12, 15, 162, 149, 100, 26, 17, 84, 147, 169, 70, 224, 141, 123, 129, 202, 20, 174, 149, 64, 227, 132, 43, 41, 208, 86, 225, 46, 163, 230, 194, 18, 128, 28, 132, 213, 1, 165, 8, 11, 7, 34, 18, 118, 84, 138, 235, 216, 215, 0, 196, 94, 182, 175, 53, 176, 231, 223, 224, 131, 58, 234, 111, 237, 63, 168, 126, 49, 168, 126, 177, 251, 234, 71, 134, 68, 134, 12, 249, 19, 78, 39, 130, 91, 56, 220, 2, 185, 47, 178, 33, 40, 143, 201, 166, 161, 132, 38, 75, 43, 80, 233, 4, 46, 128, 41, 0, 68, 35, 214, 119, 61, 228, 56, 131, 63, 59, 198, 223, 222, 38, 120, 174, 91, 224, 218, 102, 128, 243, 49, 56, 207, 97, 154, 1, 9, 12, 177, 5, 25, 64, 66, 146, 12, 21, 34, 151, 100, 68, 145, 94, 227, 156, 163, 2, 198, 77, 65, 137, 10, 23, 13, 5, 44, 220, 80, 148, 87, 184, 218, 2, 173, 23, 118, 2, 92, 33, 108, 18, 24, 198, 242, 129, 148, 132, 125, 149, 18, 219, 212, 26, 88, 245, 141, 129, 50, 249, 216, 26, 88, 44, 0, 252, 133, 63, 1, 15, 212, 81, 191, 200, 75, 20, 190, 116, 220, 82, 221, 106, 107, 127, 31, 77, 30, 153, 240, 81, 226, 136, 125, 250, 152, 138, 240, 192, 48, 72, 207, 88, 96, 252, 25, 14, 228, 70, 56, 85, 72, 155, 112, 28, 5, 146, 42, 28, 101, 129, 148, 23, 46, 131, 64, 79, 138, 108, 20, 202, 102, 178, 156, 2, 213, 53, 104, 59, 92, 0, 160, 18, 65, 227, 12, 1, 115, 21, 208, 220, 20, 14, 185, 21, 254, 13, 254, 220, 223, 217, 33, 112, 109, 135, 184, 117, 47, 184, 205, 137, 224, 60, 11, 156, 252, 0, 205, 4, 49, 98, 128, 120, 32, 60, 73, 134, 13, 81, 52, 153, 91, 68, 218, 100, 248, 209, 139, 194, 221, 65, 173, 10, 247, 14, 149, 20, 46, 172, 64, 151, 133, 155, 14, 9, 8, 251, 1, 234, 16, 182, 10, 108, 99, 17, 65, 80, 194, 238, 74, 161, 109, 124, 13, 64, 200, 7, 59, 96, 218, 75, 1, 177, 151, 191, 89, 73, 253, 226, 196, 169, 31, 243, 22, 78, 3, 82, 34, 156, 33, 196, 171, 112, 254, 144, 203, 194, 217, 69, 166, 139, 140, 62, 90, 81, 100, 127, 80, 45, 147, 61, 68, 69, 13, 90, 141, 206, 39, 144, 197, 148, 47, 240, 161, 36, 1, 115, 245, 233, 248, 29, 110, 189, 99, 192, 109, 30, 48, 107, 61, 224, 228, 5, 166, 211, 130, 17, 35, 0, 32, 99, 131, 80, 37, 25, 66, 228, 211, 100, 152, 145, 243, 34, 235, 128, 166, 20, 110, 19, 90, 38, 92, 67, 129, 134, 10, 87, 24, 213, 22, 46, 62, 132, 32, 172, 11, 104, 68, 216, 48, 48, 143, 165, 4, 89, 9, 123, 44, 229, 54, 123, 13, 64, 182, 101, 224, 117, 214, 192, 237, 5, 208, 81, 127, 107, 255, 65, 245, 139, 59, 94, 253, 78, 27, 130, 88, 56, 169, 72, 112, 225, 148, 163, 0, 198, 61, 65, 133, 76, 246, 13, 85, 52, 89, 93, 129, 98, 39, 48, 2, 124, 1, 160, 27, 1, 37, 141, 49, 38, 122, 200, 113, 85, 254, 139, 191, 187, 91, 224, 242, 102, 128, 243, 89, 176, 202, 98, 192, 116, 48, 190, 22, 76, 31, 217, 72, 50, 78, 8, 155, 201, 100, 34, 180, 198, 241, 22, 72, 126, 225, 130, 8, 116, 71, 184, 92, 2, 189, 19, 46, 38, 10, 43, 92, 103, 129, 166, 11, 123, 0, 126, 176, 58, 160, 20, 97, 219, 192, 66, 22, 20, 196, 37, 218, 29, 32, 188, 6, 32, 70, 113, 176, 6, 14, 139, 180, 236, 186, 242, 26, 56, 172, 244, 242, 188, 215, 192, 98, 1, 248, 143, 240, 161, 29, 245, 11, 92, 196, 160, 250, 197, 86, 213, 239, 73, 96, 66, 194, 243, 195, 92, 133, 71, 142, 40, 100, 80, 144, 33, 225, 132, 33, 121, 34, 163, 137, 212, 138, 140, 53, 18, 95, 184, 21, 40, 140, 113, 181, 208, 186, 36, 91, 138, 2, 39, 217, 121, 24, 1, 64, 40, 208, 205, 32, 155, 18, 61, 220, 58, 200, 127, 57, 200, 127, 127, 36, 224, 73, 247, 193, 229, 141, 129, 59, 93, 10, 14, 115, 65, 115, 236, 131, 96, 124, 2, 243, 77, 50, 21, 2, 153, 73, 50, 102, 72, 160, 113, 92, 5, 146, 92, 56, 240, 2, 93, 40, 220, 23, 84, 169, 112, 215, 80, 195, 194, 61, 69, 127, 133, 219, 141, 226, 11, 59, 1, 174, 16, 54, 9, 12, 99, 249, 64, 74, 150, 21, 36, 102, 185, 65, 122, 99, 107, 224, 96, 7, 108, 249, 59, 66, 123, 29, 245, 143, 217, 63, 159, 88, 248, 130, 112, 161, 131, 234, 23, 27, 81, 191, 88, 85, 253, 158, 49, 102, 47, 156, 12, 36, 70, 56, 79, 200, 89, 225, 44, 34, 163, 194, 33, 22, 200, 119, 225, 14, 160, 30, 69, 182, 8, 5, 51, 217, 70, 20, 213, 160, 219, 104, 126, 2, 95, 64, 40, 45, 173, 238, 33, 175, 62, 48, 99, 114, 91, 172, 48, 239, 9, 37, 238, 8, 119, 154, 224, 124, 58, 224, 216, 167, 172, 4, 12, 23, 163, 7, 25, 24, 196, 41, 201, 248, 33, 153, 69, 102, 24, 241, 46, 92, 1, 129, 118, 20, 110, 16, 202, 85, 184, 125, 104, 165, 112, 109, 81, 103, 225, 178, 67, 2, 194, 138, 128, 58, 132, 173, 2, 219, 108, 108, 13, 220, 250, 154, 24, 182, 236, 175, 1, 168, 184, 252, 60, 186, 6, 14, 75, 190, 204, 191, 88, 0, 248, 139, 142, 250, 5, 158, 178, 163, 254, 214, 254, 131, 234, 23, 131, 234, 23, 59, 171, 126, 39, 15, 137, 44, 156, 90, 164, 185, 112, 226, 81, 134, 34, 59, 131, 58, 21, 217, 58, 20, 50, 201, 14, 163, 222, 9, 188, 0, 107, 128, 121, 198, 135, 230, 204, 129, 19, 225, 202, 201, 252, 249, 191, 183, 115, 224, 10, 167, 210, 221, 13, 56, 204, 49, 48, 151, 165, 43, 1, 115, 71, 42, 146, 12, 18, 50, 102, 50, 147, 136, 171, 113, 170, 17, 248, 194, 165, 16, 232, 75, 225, 78, 161, 107, 194, 101, 68, 73, 133, 43, 44, 208, 110, 23, 95, 192, 9, 214, 5, 52, 34, 108, 24, 152, 103, 35, 107, 96, 249, 27, 3, 135, 53, 91, 238, 29, 91, 3, 16, 248, 193, 14, 104, 214, 192, 94, 254, 166, 62, 104, 204, 254, 120, 26, 63, 61, 46, 171, 163, 126, 145, 55, 44, 124, 16, 56, 160, 190, 250, 5, 6, 224, 193, 96, 96, 158, 37, 102, 44, 60, 126, 36, 67, 56, 52, 200, 147, 112, 218, 144, 66, 225, 140, 34, 187, 133, 243, 141, 232, 23, 174, 135, 64, 115, 138, 236, 24, 234, 103, 178, 171, 168, 113, 146, 205, 135, 23, 0, 180, 2, 233, 12, 2, 127, 137, 25, 162, 135, 88, 7, 249, 175, 254, 135, 157, 3, 87, 56, 8, 238, 180, 199, 26, 91, 1, 131, 235, 239, 131, 204, 131, 64, 90, 146, 12, 24, 178, 103, 156, 82, 4, 216, 56, 231, 168, 64, 225, 154, 8, 52, 72, 184, 98, 168, 94, 225, 110, 162, 179, 194, 141, 70, 211, 133, 61, 0, 63, 88, 29, 80, 138, 176, 109, 96, 33, 219, 9, 214, 154, 183, 6, 160, 208, 131, 29, 176, 233, 151, 2, 183, 23, 64, 71, 253, 34, 31, 125, 37, 245, 139, 25, 234, 23, 56, 68, 31, 46, 14, 221, 195, 192, 144, 60, 63, 204, 85, 120, 228, 136, 130, 83, 130, 244, 8, 103, 11, 153, 19, 14, 165, 64, 94, 133, 211, 140, 160, 23, 46, 131, 64, 79, 10, 215, 73, 160, 105, 69, 118, 18, 117, 77, 178, 225, 232, 127, 130, 175, 241, 161, 149, 22, 136, 73, 76, 119, 61, 204, 152, 64, 172, 119, 18, 184, 83, 131, 195, 25, 165, 57, 240, 2, 115, 1, 57, 83, 129, 161, 39, 153, 19, 129, 20, 153, 76, 29, 2, 105, 50, 186, 72, 117, 225, 228, 163, 20, 133, 139, 131, 66, 21, 110, 28, 202, 40, 92, 85, 84, 88, 184, 224, 40, 190, 176, 19, 224, 10, 107, 4, 122, 17, 54, 15, 140, 100, 83, 193, 96, 54, 27, 140, 215, 238, 0, 81, 206, 220, 200, 26, 128, 210, 15, 118, 192, 173, 53, 176, 88, 0, 245, 71, 99, 246, 199, 131, 118, 212, 223, 218, 127, 167, 212, 239, 25, 11, 140, 223, 201, 64, 98, 132, 243, 132, 156, 9, 167, 16, 233, 20, 142, 175, 64, 178, 133, 163, 47, 208, 138, 194, 205, 65, 169, 76, 54, 16, 229, 52, 217, 100, 244, 60, 129, 29, 224, 14, 0, 239, 76, 212, 61, 100, 87, 192, 140, 43, 241, 23, 90, 254, 254, 145, 131, 11, 104, 46, 114, 37, 112, 56, 6, 39, 57, 192, 225, 137, 20, 152, 26, 56, 52, 241, 38, 15, 38, 243, 35, 144, 46, 147, 81, 68, 74, 11, 135, 89, 32, 231, 133, 187, 128, 154, 20, 238, 17, 42, 38, 92, 64, 20, 83, 184, 182, 2, 141, 118, 217, 33, 1, 97, 63, 64, 29, 86, 10, 84, 35, 6, 119, 128, 24, 220, 1, 162, 179, 3, 4, 84, 185, 100, 13, 28, 150, 112, 153, 25, 107, 160, 28, 62, 186, 6, 180, 0, 58, 234, 23, 249, 88, 126, 2, 60, 113, 71, 253, 2, 183, 116, 188, 234, 199, 188, 133, 211, 128, 148, 8, 7, 8, 217, 18, 78, 30, 18, 41, 156, 87, 228, 184, 112, 214, 209, 129, 194, 61, 65, 133, 140, 155, 134, 18, 154, 108, 44, 250, 156, 164, 2, 96, 7, 0, 179, 44, 53, 62, 252, 85, 64, 118, 75, 185, 109, 85, 56, 247, 22, 127, 241, 127, 220, 69, 112, 145, 183, 137, 59, 194, 157, 46, 5, 39, 41, 112, 224, 3, 28, 30, 153, 192, 76, 147, 76, 130, 64, 78, 76, 230, 10, 145, 51, 14, 167, 64, 110, 11, 199, 91, 32, 249, 133, 219, 129, 214, 8, 215, 74, 160, 113, 194, 125, 68, 79, 133, 91, 140, 118, 11, 119, 31, 78, 176, 46, 160, 17, 235, 5, 218, 17, 43, 173, 1, 235, 14, 26, 28, 92, 3, 27, 252, 142, 16, 36, 95, 230, 95, 44, 0, 252, 69, 171, 126, 209, 81, 255, 152, 253, 243, 54, 132, 111, 15, 183, 61, 168, 126, 113, 92, 234, 119, 98, 4, 194, 228, 156, 33, 127, 34, 3, 138, 236, 10, 39, 27, 137, 47, 220, 10, 20, 166, 200, 94, 161, 114, 38, 251, 137, 234, 154, 236, 57, 44, 144, 192, 29, 148, 75, 3, 244, 36, 160, 176, 49, 14, 156, 8, 87, 238, 3, 177, 222, 49, 224, 54, 15, 88, 113, 49, 224, 180, 5, 38, 2, 48, 80, 140, 59, 201, 132, 8, 228, 199, 100, 216, 144, 195]);
fileData4.push.apply(fileData4, [34, 19, 139, 48, 23, 14, 188, 64, 23, 132, 203, 34, 208, 35, 225, 150, 161, 128, 194, 245, 68, 109, 133, 27, 141, 178, 11, 123, 0, 126, 176, 58, 160, 20, 171, 6, 10, 178, 154, 160, 172, 242, 216, 170, 107, 0, 242, 44, 163, 142, 174, 129, 195, 90, 46, 87, 99, 13, 148, 213, 219, 53, 176, 151, 191, 241, 7, 229, 103, 138, 142, 253, 113, 65, 190, 80, 220, 64, 71, 253, 2, 71, 51, 168, 126, 177, 146, 250, 197, 108, 245, 35, 61, 194, 217, 66, 230, 132, 19, 137, 164, 138, 140, 50, 82, 46, 220, 1, 212, 163, 200, 22, 161, 96, 69, 246, 16, 21, 53, 217, 103, 180, 61, 129, 35, 96, 16, 0, 251, 64, 79, 131, 140, 185, 30, 126, 156, 206, 127, 253, 15, 118, 17, 92, 228, 74, 224, 100, 22, 52, 199, 56, 6, 38, 130, 121, 1, 204, 26, 73, 48, 153, 28, 132, 202, 100, 2, 17, 78, 227, 12, 35, 222, 133, 43, 128, 106, 20, 238, 14, 106, 37, 92, 58, 148, 81, 184, 170, 2, 45, 118, 193, 81, 124, 97, 39, 192, 21, 71, 179, 6, 32, 198, 178, 229, 216, 26, 128, 114, 15, 118, 192, 220, 151, 2, 183, 23, 64, 71, 253, 176, 127, 61, 229, 152, 253, 113, 209, 190, 25, 220, 100, 71, 253, 2, 199, 55, 168, 126, 177, 251, 234, 71, 166, 133, 67, 47, 208, 7, 225, 194, 8, 116, 169, 200, 214, 161, 144, 69, 86, 23, 173, 78, 210, 2, 112, 4, 128, 95, 96, 159, 150, 214, 245, 144, 221, 82, 32, 214, 150, 191, 212, 242, 63, 29, 7, 135, 175, 1, 23, 217, 130, 219, 92, 10, 142, 113, 226, 74, 192, 188, 48, 205, 36, 51, 32, 144, 16, 147, 137, 66, 216, 140, 51, 137, 184, 26, 167, 26, 129, 47, 220, 8, 148, 69, 184, 74, 2, 45, 19, 238, 32, 186, 41, 220, 92, 52, 218, 101, 135, 4, 132, 253, 0, 111, 108, 118, 13, 64, 122, 101, 194, 177, 53, 0, 157, 150, 99, 71, 215, 64, 88, 90, 116, 118, 128, 215, 192, 193, 2, 232, 216, 31, 15, 218, 81, 191, 192, 229, 110, 74, 253, 2, 71, 236, 163, 199, 72, 60, 42, 140, 208, 163, 197, 200, 157, 6, 164, 68, 56, 64, 8, 150, 51, 135, 44, 138, 12, 43, 114, 44, 156, 114, 164, 191, 112, 67, 208, 156, 194, 5, 19, 232, 94, 145, 45, 69, 129, 77, 182, 29, 46, 72, 96, 16, 248, 5, 172, 163, 123, 248, 209, 220, 182, 42, 132, 187, 33, 254, 242, 63, 28, 5, 31, 185, 25, 110, 221, 14, 110, 51, 193, 201, 140, 129, 163, 94, 186, 18, 48, 74, 12, 58, 201, 108, 32, 54, 137, 51, 134, 248, 153, 12, 42, 50, 44, 28, 114, 129, 252, 11, 23, 68, 160, 59, 194, 205, 66, 233, 132, 43, 137, 170, 10, 183, 24, 237, 118, 241, 33, 4, 97, 87, 192, 33, 118, 11, 156, 99, 23, 193, 81, 157, 29, 32, 32, 192, 25, 107, 0, 18, 62, 216, 1, 135, 215, 64, 57, 28, 107, 32, 255, 103, 195, 123, 245, 255, 193, 254, 254, 180, 124, 44, 209, 177, 63, 46, 177, 163, 126, 129, 155, 223, 41, 245, 59, 49, 2, 97, 114, 206, 144, 63, 225, 116, 34, 181, 34, 99, 141, 196, 11, 247, 1, 85, 41, 178, 78, 104, 90, 225, 66, 10, 116, 181, 200, 98, 119, 222, 194, 133, 41, 224, 145, 100, 158, 241, 225, 187, 98, 182, 229, 97, 237, 85, 249, 111, 254, 231, 81, 240, 145, 171, 130, 235, 156, 196, 248, 110, 192, 25, 14, 130, 89, 96, 88, 32, 71, 140, 0, 36, 153, 25, 196, 201, 100, 240, 144, 201, 34, 163, 139, 84, 11, 199, 94, 160, 17, 194, 125, 65, 149, 132, 139, 134, 2, 10, 215, 19, 181, 21, 110, 52, 202, 110, 9, 64, 14, 194, 222, 128, 79, 236, 25, 248, 167, 179, 3, 4, 228, 214, 95, 3, 208, 102, 103, 7, 140, 174, 129, 195, 222, 110, 119, 128, 40, 237, 47, 22, 0, 254, 162, 163, 126, 216, 223, 23, 129, 139, 235, 216, 31, 55, 236, 131, 192, 1, 29, 175, 250, 145, 30, 225, 108, 33, 115, 194, 137, 68, 82, 133, 115, 140, 124, 139, 44, 0, 186, 33, 178, 60, 232, 85, 225, 238, 161, 150, 38, 59, 140, 122, 155, 212, 1, 76, 1, 96, 25, 56, 168, 5, 34, 19, 43, 137, 30, 86, 109, 129, 181, 119, 7, 92, 39, 192, 109, 246, 24, 217, 10, 56, 231, 22, 76, 10, 115, 76, 114, 250, 8, 70, 146, 65, 66, 198, 10, 71, 81, 32, 165, 133, 147, 140, 144, 23, 110, 1, 10, 34, 92, 31, 129, 102, 9, 247, 14, 125, 116, 85, 5, 90, 236, 130, 163, 248, 22, 2, 68, 33, 6, 119, 128, 232, 236, 0, 1, 113, 245, 215, 0, 148, 88, 158, 92, 105, 13, 164, 147, 197, 244, 29, 32, 246, 240, 251, 142, 253, 241, 52, 29, 245, 195, 254, 190, 37, 220, 106, 71, 253, 2, 135, 184, 107, 234, 119, 254, 4, 162, 153, 193, 69, 166, 133, 19, 143, 38, 8, 87, 69, 160, 69, 133, 155, 134, 18, 22, 217, 213, 177, 47, 246, 179, 246, 2, 82, 48, 240, 8, 44, 3, 32, 41, 49, 81, 247, 240, 163, 129, 85, 55, 197, 127, 251, 143, 166, 130, 79, 220, 20, 184, 77, 131, 99, 25, 165, 57, 103, 12, 2, 96, 136, 24, 113, 146, 145, 64, 96, 76, 166, 11, 193, 43, 28, 78, 129, 220, 22, 206, 54, 98, 95, 184, 23, 232, 139, 112, 155, 80, 52, 225, 14, 162, 158, 194, 205, 69, 163, 93, 118, 72, 192, 114, 128, 52, 44, 19, 72, 198, 242, 129, 148, 250, 107, 0, 186, 43, 7, 142, 173, 129, 180, 168, 232, 236, 0, 172, 129, 50, 54, 214, 64, 185, 29, 107, 224, 246, 2, 240, 95, 231, 231, 248, 129, 242, 209, 69, 199, 254, 184, 232, 142, 250, 5, 142, 163, 163, 126, 129, 131, 30, 84, 191, 56, 50, 245, 35, 139, 194, 73, 69, 130, 133, 243, 141, 220, 23, 238, 6, 58, 83, 184, 87, 168, 92, 145, 205, 68, 105, 77, 54, 28, 229, 55, 240, 5, 108, 146, 64, 67, 83, 116, 15, 229, 21, 240, 227, 68, 32, 235, 157, 2, 151, 58, 17, 28, 75, 129, 3, 28, 224, 240, 20, 4, 198, 4, 114, 184, 24, 125, 146, 81, 65, 138, 140, 243, 134, 40, 22, 142, 171, 64, 146, 133, 163, 46, 208, 2, 225, 154, 160, 62, 194, 229, 66, 233, 132, 43, 137, 170, 10, 183, 24, 237, 118, 241, 33, 4, 139, 2, 2, 153, 183, 6, 160, 178, 242, 219, 216, 26, 128, 36, 203, 156, 88, 3, 229, 216, 177, 53, 0, 75, 183, 59, 64, 96, 7, 28, 44, 128, 86, 253, 162, 163, 126, 216, 223, 151, 149, 215, 234, 27, 192, 141, 117, 212, 47, 112, 100, 29, 245, 11, 12, 99, 80, 253, 98, 80, 253, 226, 216, 213, 239, 38, 160, 36, 133, 91, 132, 130, 21, 46, 161, 64, 63, 139, 108, 50, 74, 110, 82, 10, 2, 202, 72, 224, 26, 202, 232, 48, 112, 153, 128, 242, 250, 192, 170, 27, 225, 175, 252, 47, 43, 131, 71, 88, 31, 220, 102, 31, 28, 160, 192, 33, 183, 96, 70, 152, 96, 146, 67, 71, 36, 76, 230, 7, 209, 50, 78, 32, 194, 89, 56, 192, 2, 217, 22, 14, 63, 74, 81, 184, 53, 104, 147, 112, 215, 208, 65, 215, 19, 181, 21, 110, 52, 154, 190, 217, 53, 0, 77, 149, 187, 198, 214, 0, 4, 88, 86, 28, 91, 3, 233, 85, 177, 193, 29, 176, 87, 191, 89, 201, 254, 120, 226, 86, 253, 162, 163, 126, 129, 155, 223, 148, 250, 5, 6, 230, 65, 98, 192, 30, 60, 2, 225, 160, 32, 64, 206, 22, 50, 39, 28, 71, 196, 212, 9, 22, 8, 183, 112, 250, 209, 10, 225, 206, 160, 78, 133, 43, 39, 208, 198, 34, 123, 139, 74, 155, 236, 63, 212, 96, 96, 19, 184, 6, 64, 85, 2, 58, 27, 4, 126, 156, 8, 52, 61, 145, 191, 250, 191, 174, 12, 30, 97, 10, 184, 212, 137, 224, 88, 198, 192, 9, 99, 4, 0, 227, 195, 112, 147, 12, 3, 114, 98, 50, 84, 200, 91, 225, 76, 34, 174, 133, 35, 141, 168, 23, 238, 2, 58, 34, 220, 32, 148, 75, 184, 119, 232, 163, 171, 138, 10, 11, 183, 27, 173, 183, 13, 96, 9, 219, 3, 86, 233, 236, 0, 1, 101, 13, 174, 129, 50, 222, 216, 26, 128, 54, 59, 59, 0, 107, 160, 252, 140, 53, 80, 38, 199, 26, 176, 246, 15, 22, 64, 254, 157, 63, 33, 31, 197, 15, 157, 207, 39, 86, 181, 63, 110, 216, 7, 145, 167, 227, 35, 195, 81, 238, 148, 250, 157, 63, 129, 104, 58, 181, 72, 179, 112, 214, 209, 129, 194, 61, 65, 127, 132, 11, 38, 208, 189, 194, 253, 68, 117, 77, 246, 28, 10, 48, 176, 6, 156, 146, 64, 70, 80, 213, 32, 176, 94, 7, 88, 21, 64, 211, 59, 5, 46, 21, 224, 54, 251, 224, 244, 90, 48, 2, 12, 8, 228, 88, 49, 116, 147, 9, 65, 120, 140, 99, 38, 144, 192, 194, 41, 69, 128, 11, 39, 28, 201, 23, 174, 6, 42, 35, 92, 40, 20, 77, 184, 131, 168, 167, 107, 139, 58, 11, 55, 29, 6, 176, 25, 96, 140, 193, 29, 32, 102, 172, 129, 180, 156, 232, 236, 0, 172, 129, 50, 234, 216, 26, 128, 147, 219, 29, 32, 218, 29, 32, 22, 11, 0, 127, 212, 170, 95, 12, 218, 191, 158, 27, 246, 247, 133, 230, 213, 251, 150, 112, 171, 173, 250, 69, 71, 253, 2, 199, 125, 188, 234, 71, 22, 133, 147, 138, 4, 11, 231, 27, 185, 23, 110, 5, 218, 82, 184, 81, 131, 239, 235, 186, 141, 40, 170, 201, 86, 163, 240, 38, 237, 0, 113, 36, 48, 14, 124, 4, 160, 179, 49, 160, 200, 2, 86, 93, 147, 255, 238, 31, 207, 7, 15, 181, 38, 184, 77, 131, 51, 25, 4, 199, 219, 130, 233, 96, 118, 73, 142, 27, 73, 48, 25, 27, 36, 170, 112, 240, 4, 50, 89, 56, 183, 200, 179, 112, 224, 81, 132, 194, 77, 65, 131, 92, 46, 129, 222, 185, 146, 168, 170, 43, 140, 106, 139, 193, 29, 32, 6, 119, 128, 24, 92, 3, 229, 159, 177, 53, 0, 137, 149, 217, 176, 6, 202, 129, 99, 107, 32, 45, 42, 182, 177, 3, 14, 45, 128, 142, 253, 241, 4, 173, 250, 69, 171, 126, 209, 81, 191, 200, 179, 240, 1, 225, 224, 58, 234, 23, 24, 201, 29, 163, 126, 247, 103, 134, 247, 243, 71, 245, 81, 108, 147, 22, 128, 32, 146, 116, 10, 140, 3, 32, 172, 22, 88, 175, 128, 34, 167, 0, 71, 47, 229, 175, 253, 147, 249, 224, 161, 150, 130, 75, 157, 8, 206, 68, 224, 232, 6, 193, 249, 39, 57, 53, 129, 153, 38, 25, 3, 36, 164, 112, 144, 4, 98, 86, 56, 138, 2, 41, 21, 142, 177, 64, 194, 133, 243, 143, 94, 8, 183, 6, 109, 18, 238, 26, 58, 232, 122, 162, 182, 174, 51, 106, 46, 6, 215, 128, 117, 1, 141, 148, 91, 198, 214, 0, 4, 85, 214, 26, 91, 3, 233, 61, 177, 234, 14, 192, 26, 40, 27, 99, 13, 148, 183, 177, 6, 202, 240, 185, 6, 110, 47, 128, 35, 182, 63, 142, 160, 163, 126, 129, 195, 237, 168, 95, 96, 108, 199, 165, 126, 39, 24, 201, 22, 206, 61, 250, 32, 178, 48, 232, 146, 112, 211, 80, 194, 98, 169, 247, 179, 237, 157, 31, 221, 73, 119, 192, 44, 9, 124, 212, 2, 169, 193, 122, 125, 32, 214, 4, 142, 222, 41, 112, 169, 0, 247, 216, 1, 71, 39, 112, 182, 0, 163, 1, 57, 80, 204, 218, 100, 54, 16, 27, 227, 116, 33, 120, 133, 195, 137, 208, 22, 78, 53, 2, 47, 92, 7, 212, 68, 184, 68, 40, 151, 112, 239, 208, 71, 87, 21, 21, 118, 181, 81, 121, 171, 0, 138, 232, 175, 1, 200, 167, 140, 52, 182, 6, 160, 181, 206, 14, 192, 26, 40, 127, 142, 173, 1, 24, 184, 221, 1, 162, 221, 1, 34, 119, 192, 98, 1, 212, 239, 97, 255, 250, 76, 216, 191, 158, 3, 246, 175, 171, 129, 253, 125, 233, 121, 63, 190, 73, 220, 124, 199, 254, 56, 80, 31, 52, 6, 208, 81, 191, 192, 104, 7, 213, 47, 6, 213, 47, 142, 88, 253, 237, 151, 252, 174, 150, 64, 235, 196, 106, 222, 111, 154, 95, 164, 35, 160, 143, 4, 222, 73, 32, 44, 1, 169, 13, 2, 69, 26, 136, 117, 54, 127, 253, 159, 174, 11, 30, 112, 29, 112, 143, 5, 14, 100, 12, 156, 45, 14, 31, 96, 106, 38, 167, 44, 144, 1, 227, 180, 32, 72, 198, 121, 67, 20, 11, 103, 21, 49, 22, 14, 185, 64, 254, 93, 13, 129, 214, 184, 80, 40, 154, 112, 7, 209, 205, 205, 174, 1, 136, 165, 108, 51, 182, 6, 160, 172, 242, 24, 214, 64, 25, 111, 108, 13, 164, 51, 197, 86, 119, 192, 94, 199, 254, 120, 160, 86, 253, 162, 85, 191, 104, 213, 47, 58, 234, 23, 121, 58, 62, 50, 28, 101, 71, 253, 34, 39, 212, 87, 191, 192, 248, 119, 69, 253, 77, 97, 220, 37, 116, 172, 112, 15, 209, 207, 194, 53, 22, 104, 120, 145, 46, 128, 41, 18, 200, 37, 129, 149, 224, 172, 22, 184, 79, 64, 145, 83, 128, 160, 151, 240, 99, 107, 131, 7, 236, 130, 75, 157, 2, 14, 164, 192, 185, 181, 224, 228, 49, 151, 4, 211, 52, 57, 125, 4, 195, 56, 63, 136, 86, 225, 248, 9, 36, 83, 56, 186, 2, 169, 22, 206, 60, 186, 32, 220, 20, 52, 200, 229, 66, 233, 132, 251, 136, 158, 206, 91, 3, 144, 134, 101, 146, 134, 17, 157, 29, 48, 182, 6, 210, 114, 98, 35, 59, 0, 107, 96, 213, 29, 176, 88, 0, 248, 139, 35, 182, 63, 14, 165, 163, 126, 129, 227, 110, 213, 47, 102, 168, 95, 32, 34, 142, 14, 34, 229, 168, 33, 130, 78, 39, 82, 235, 52, 11, 4, 221, 29, 152, 253, 37, 63, 10, 89, 184, 180, 2, 125, 46, 178, 249, 144, 130, 129, 68, 146, 244, 14, 172, 4, 32, 53, 1, 247, 117, 128, 88, 15, 17, 118, 254, 27, 59, 64, 94, 15, 47, 245, 48, 184, 199, 49, 112, 104, 2, 7, 11, 114, 34, 2, 243, 74, 48, 101, 147, 145, 64, 90, 10, 39, 10, 97, 43, 188, 6, 4, 178, 42, 156, 100, 132, 92, 184, 2, 168, 134, 112, 107, 80, 40, 23, 13, 5, 20, 238, 38, 58, 235, 46, 163, 227, 131, 59, 64, 108, 106, 13, 64, 98, 101, 54, 172, 129, 114, 32, 214, 64, 217, 18, 107, 160, 188, 138, 53, 208, 217, 1, 88, 3, 101, 117, 172, 129, 197, 2, 200, 223, 139, 137, 246, 247, 19, 231, 213, 248, 18, 243, 186, 125, 51, 121, 135, 98, 85, 251, 227, 136, 59, 234, 23, 24, 222, 241, 170, 31, 201, 22, 206, 125, 71, 253, 104, 145, 232, 127, 171, 199, 21, 21, 104, 111, 225, 134, 163, 252, 6, 178, 72, 210, 47, 176, 79, 2, 109, 9, 168, 109, 16, 88, 242, 128, 125, 159, 66, 181, 171, 242, 55, 255, 217, 198, 192, 35, 175, 68, 127, 61, 224, 52, 6, 193, 169, 226, 216, 65, 14, 11, 115, 52, 24, 189, 113, 72, 4, 242, 83, 56, 99, 136, 95, 225, 124, 34, 186, 194, 193, 22, 200, 188, 235, 32, 208, 20, 151, 8, 229, 18, 253, 53, 128, 242, 138, 193, 29, 32, 6, 215, 64, 25, 99, 108, 13, 64, 59, 157, 29, 48, 182, 6, 224, 189, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 28, 90, 0, 173, 253, 235, 81, 166, 219, 31, 151, 219, 81, 63, 236, 95, 231, 2, 251, 251, 16, 113, 184, 29, 251, 99, 96, 30, 36, 6, 124, 194, 212, 127, 28, 222, 79, 143, 64, 49, 9, 220, 4, 115, 181, 64, 127, 11, 26, 99, 246, 129, 154, 59, 252, 173, 31, 223, 24, 120, 228, 14, 184, 218, 14, 99, 91, 1, 39, 214, 130, 51, 199, 68, 146, 28, 34, 230, 107, 144, 135, 194, 177, 17, 72, 84, 225, 212, 33, 144, 194, 113, 21, 72, 178, 112, 206, 145, 127, 225, 118, 160, 53, 46, 20, 138, 230, 2, 162, 152, 98, 165, 53, 80, 54, 24, 91, 3, 80, 74, 121, 102, 165, 53, 144, 78, 19, 59, 181, 3, 14, 22, 64, 253, 233, 160, 253, 241, 160, 173, 250, 197, 170, 246, 199, 205, 183, 234, 23, 29, 245, 195, 254, 30, 9, 70, 213, 81, 191, 64, 8, 142, 78, 253, 135, 67, 239, 62, 160, 39, 98, 226, 151, 252, 131, 63, 207, 227, 246, 162, 216, 5, 20, 96, 210, 23, 80, 73, 146, 246, 129, 155, 0, 212, 182, 160, 241, 224, 32, 176, 106, 2, 53, 239, 26, 184, 90, 131, 27, 28, 163, 93, 9, 56, 82, 144, 179, 16, 152, 148, 201, 201, 98, 232, 6, 33, 41, 28, 36, 129, 140, 9, 135, 80, 32, 159, 194, 233, 69, 176, 133, 99, 143, 58, 8, 55, 5, 13, 114, 185, 80, 58, 151, 17, 37, 117, 121, 81, 234, 106, 250, 216, 26, 128, 46, 202, 33, 99, 107, 32, 45, 36, 58, 59, 0, 107, 160, 140, 135, 53, 80, 110, 196, 26, 40, 139, 98, 13, 148, 111, 177, 6, 230, 237, 128, 197, 2, 56, 89, 246, 199, 161, 119, 212, 47, 48, 206, 142, 250, 5, 130, 50, 168, 126, 113, 148, 234, 71, 163, 132, 251, 182, 13, 239, 195, 26, 73, 90, 6, 14, 74, 32, 175, 41, 186, 135, 40, 11, 88, 117, 14, 255, 124, 163, 224, 193, 87, 7, 55, 88, 224, 40, 6, 193, 145, 226, 192, 147, 156, 145, 192, 4, 141, 199, 45, 144, 132, 2, 177, 41, 28, 45, 129, 212, 9, 199, 18, 113, 21, 94, 3, 2, 57, 119, 5, 80, 13, 225, 214, 160, 77, 46, 26, 10, 56, 111, 13, 64, 5, 229, 135, 177, 53, 0, 201, 148, 121, 176, 6, 202, 81, 88, 3, 131, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 140, 237, 0, 172, 129, 254, 14, 216, 107, 213, 47, 38, 218, 191, 174, 0, 246, 175, 107, 133, 253, 235, 174, 96, 255, 186, 127, 216, 223, 135, 149, 39, 232, 99, 205, 179, 22, 29, 251, 99, 132, 30, 45, 70, 222, 81, 191, 64, 152, 6, 213, 47, 54, 169, 254, 91, 85, 65, 139, 132, 59, 214, 170, 63, 203, 137, 222, 10, 212, 187, 72, 11, 64, 16, 38, 109, 2, 215, 36, 48, 20, 252, 5, 96, 64, 1, 81, 46, 231, 150, 148, 255, 118, 151, 191, 243, 47, 54, 9, 30, 28, 248, 146, 22, 224, 106, 187, 224, 40, 4, 142, 171, 5, 167, 141, 89, 152, 156, 157, 192, 100, 139, 204, 0, 226, 81, 32, 72, 133, 147, 134, 16, 22, 78, 41, 210, 43, 156, 109, 100, 222, 117, 64, 77, 132, 27, 132, 102, 205, 91, 3, 168, 121, 117, 127, 108, 13, 64, 32, 101, 149, 177, 53, 0, 47, 181, 59, 64, 28, 205, 14, 16, 99, 59, 0, 107, 160, 204, 191, 88, 0, 249, 167, 98, 125, 251, 227, 210, 91, 245, 139, 86, 253, 162, 85, 191, 232, 168, 31, 246, 247, 144, 48, 188, 77, 169, 95, 32, 112, 14, 34, 2, 234, 224, 34, 208, 206, 58, 58, 208, 249, 110, 143, 27, 37, 80, 54, 225, 54, 162, 165, 2, 101, 46, 178, 243, 208, 65, 145, 214, 128, 83, 146, 116, 16, 12, 5, 32, 56, 24, 112, 148, 125, 153, 194, 179, 5, 212, 188, 107, 224, 106, 197, 74, 139, 1, 199, 37, 112, 158, 73, 78, 65, 96, 70, 38, 103, 138, 113, 27, 167, 2, 129, 41, 16, 173, 194, 217, 67, 38, 133, 19, 139, 48, 11, 231, 28, 21, 16, 110, 7, 90, 227, 54, 161, 101, 110, 31, 90, 57, 184, 3, 196, 244, 53, 80, 198, 24, 91, 3, 233, 28, 177, 234, 14, 192, 26, 40, 19, 98, 13, 28, 217, 14, 216, 203, 223, 139, 214, 254, 245, 88, 131, 246, 199, 165, 28, 177, 253, 49, 134, 142, 250, 69, 78, 215, 35, 71, 20, 142, 87, 253, 232, 137, 112, 139, 58, 95, 242, 163, 147, 5, 218, 43, 92, 111, 129, 230, 23, 233, 8, 232, 195, 164, 107, 96, 162, 4, 254, 130, 224, 134, 105, 164, 41, 32, 214, 149, 248, 187, 255, 114, 243, 224, 41, 86, 5, 119, 39, 166, 108, 5, 28, 38, 142, 58, 201, 233, 8, 204, 206, 120, 202, 8, 128, 113, 78, 16, 161, 2, 73, 19, 142, 34, 34, 42, 28, 96, 4, 91, 44, 93, 3, 168, 143, 112, 179, 208, 184, 193, 29, 32, 6, 215, 64, 117, 124, 108, 13, 164, 37, 68, 103, 7, 96, 13, 148, 145, 176, 6, 202, 93, 88, 3, 171, 238, 0, 172, 129, 114, 44, 214, 192, 196, 29, 32, 218, 29, 112, 104, 1, 28, 129, 253, 125, 171, 121, 255, 62, 148, 60, 41, 31, 95, 158, 169, 15, 58, 79, 95, 116, 236, 143, 161, 118, 212, 47, 16, 151, 153, 234, 63, 108, 255, 35, 83, 63, 186, 90, 184, 207, 232, 121, 97, 29, 8, 152, 162, 72, 167, 192, 56, 9, 60, 5, 139, 145, 70, 133, 112, 101, 31, 120, 121, 152, 79, 108, 1, 60, 197, 16, 184, 212, 165, 224, 28, 150, 174, 4, 156, 51, 166, 96, 114, 106, 24, 168, 201, 209, 35, 21, 133, 147, 131, 68, 9, 4, 175, 112, 50, 145, 88, 225, 60, 35, 231, 179, 215, 0, 170, 39, 6, 215, 64, 245, 119, 108, 13, 64, 2, 101, 6, 172, 129, 114, 200, 216, 26, 128, 133, 218, 29, 32, 218, 29, 32, 218, 29, 32, 218, 29, 32, 182, 189, 3, 110, 47, 128, 49, 251, 227, 65, 39, 218, 191, 174, 123, 186, 253, 113, 64, 173, 250, 69, 71, 253, 176, 191, 199, 150, 179, 244, 128, 49, 248, 142, 250, 5, 34, 117, 116, 234, 63, 92, 33, 183, 75, 160, 120, 2, 253, 20, 110, 47, 90, 93, 184, 249, 144, 130, 73, 131, 64, 46, 38, 77, 4, 79, 1, 104, 14, 18, 28, 3, 110, 189, 205, 45, 35, 255, 247, 59, 131, 47, 137, 151, 26, 224, 238, 6, 193, 65, 245, 247, 65, 158, 191, 192, 116, 76, 142, 18, 83, 46, 28, 6, 129, 156, 8, 7, 73, 32, 99, 2, 57, 20, 78, 41, 2, 44, 156, 109, 100, 126, 108, 13, 184, 62, 217, 41, 225, 186, 161, 134, 213, 205, 177, 53, 128, 130, 87, 235, 199, 214, 64, 122, 67, 236, 218, 14, 16, 99, 59, 0, 107, 96, 233, 14, 56, 88, 0, 71, 102, 127, 220, 240, 70, 236, 143, 193, 180, 234, 23, 29, 245, 11, 132, 163, 163, 126, 129, 216, 29, 153, 250, 209, 52, 129, 54, 138, 172, 43, 154, 44, 220, 115, 40, 192, 216, 20, 144, 136, 73, 227, 192, 71, 135, 56, 44, 50, 104, 174, 5, 174, 60, 96, 13, 203, 255, 189, 79, 110, 5, 60, 203, 68, 198, 118, 3, 14, 161, 37, 207, 80, 240, 144, 131, 156, 11, 70, 102, 60, 92, 129, 185, 23, 142, 7, 98, 83, 56, 87, 136, 156, 64, 44, 133, 67, 139, 48, 11, 231, 28, 249, 223, 236, 26, 64, 121, 171, 209, 99, 107, 0, 90, 232, 236, 0, 172, 129, 242, 15, 214, 64, 153, 10, 107, 160, 156, 134, 53, 80, 246, 195, 26, 56, 226, 29, 176, 88, 0, 179, 237, 95, 87, 48, 104, 127, 220, 192, 206, 218, 31, 129, 112, 80, 16, 160, 142, 250, 5, 162, 57, 168, 126, 113, 52, 234, 71, 111, 133, 139, 45, 208, 249, 194, 94, 128, 50, 76, 250, 5, 234, 49, 176, 21, 92, 6, 160, 194, 149, 92, 15, 41, 15, 242, 63, 252, 196, 86, 192, 179, 180, 224, 82, 59, 204, 88, 9, 121, 188, 56, 252, 36, 135, 133, 57, 22, 30, 183, 64, 18, 10, 167, 5, 65, 18, 142, 153, 64, 2, 5, 82, 234, 0, 35, 216, 194, 153, 71, 23, 230, 173, 1, 20, 179, 218, 58, 182, 6, 80, 249, 242, 0, 214, 64, 25, 99, 108, 13, 192, 57, 237, 14, 16, 237, 14, 16, 43, 237, 0, 172, 129, 137, 59, 64, 172, 180, 3, 246, 118, 199, 254, 117, 58, 176, 127, 157, 35, 236, 95, 39, 14, 251, 215, 108, 96, 127, 15, 50, 167, 235, 145, 35, 10, 155, 82, 191, 64, 124, 183, 167, 254, 44, 36, 186, 42, 220, 100, 52, 188, 176, 5, 32, 136, 34, 61, 2, 197, 152, 84, 146, 128, 176, 18, 152, 110, 138, 238, 225, 86, 3, 41, 239, 20, 184, 84, 131, 91, 27, 164, 93, 9, 56, 195, 36, 143, 29, 67, 49, 57, 65, 12, 183, 112, 0, 4, 178, 33, 28, 30, 129, 92, 9, 167, 14, 129, 20, 72, 172, 112, 158, 145, 115, 231, 31, 189, 232, 175, 1, 148, 78, 76, 95, 3, 213, 241, 177, 53, 144, 150, 16, 71, 179, 3, 196, 49, 238, 128, 197, 2, 200, 63, 58, 2, 251, 215, 221, 14, 218, 31, 135, 213, 170, 95, 180, 234, 23, 173, 250, 69, 171, 126, 209, 81, 191, 200, 172, 56, 64, 8, 214, 129, 250, 215, 251, 158, 143, 163, 143, 74, 184, 42, 168, 16, 58, 38, 220, 64, 52, 83, 184, 183, 168, 116, 225, 206, 67, 7, 69, 90, 3, 66, 41, 82, 61, 2, 98, 50, 112, 89, 154, 110, 16, 24, 83, 192, 173, 43, 240, 147, 163, 252, 253, 105, 224, 179, 110, 131, 39, 154, 12, 110, 173, 192, 9, 0, 28, 32, 142, 55, 201, 113, 96, 88, 198, 51, 197, 184, 11, 71, 66, 32, 45, 194, 113, 66, 204, 132, 67, 136, 112, 10, 4, 88, 56, 219, 200, 188, 187, 128, 142, 12, 238, 0, 49, 184, 6, 170, 149, 99, 107, 32, 123, 45, 54, 178, 3, 176, 6, 202, 75, 88, 3, 235, 236, 0, 49, 182, 3, 176, 6, 214, 217, 1, 123, 249, 155, 149, 236, 159, 87, 32, 78, 186, 253, 17, 145, 142, 250, 5, 194, 119, 34, 212, 239, 134, 163, 252, 133, 5, 33, 224, 142, 34, 45, 3, 1, 25, 56, 43, 117, 6, 160, 66, 1, 99, 246, 184, 165, 99, 88, 219, 252, 143, 247, 108, 11, 60, 81, 178, 234, 134, 192, 237, 11, 28, 17, 200, 131, 197, 177, 39, 158, 17, 198, 103, 60, 101, 4, 160, 112, 72, 16, 30, 225, 104, 9, 164, 206, 129, 20, 200, 42, 194, 44, 6, 119, 128, 24, 220, 1, 98, 112, 13, 84, 227, 198, 214, 0, 106, 219, 217, 1, 88, 3, 229, 7, 172, 129, 50, 201, 216, 26, 72, 17, 117, 118, 0, 214, 192, 238, 236, 128, 219, 11, 224, 200, 236, 143, 219, 94, 199, 254, 53, 3, 216, 223, 3, 203, 41, 122, 180, 57, 111, 135, 0, 225, 232, 216, 127, 234, 23, 254, 125, 245, 31, 182, 255, 49, 170, 223, 58, 16, 48, 69, 97, 161, 64, 52, 38, 197, 36, 210, 89, 0, 190, 131, 16, 135, 105, 60, 43, 32, 229, 157, 2, 151, 42, 166, 47, 6, 156, 15, 78, 47, 201, 3, 199, 56, 140, 7, 39, 48, 211, 194, 115, 71, 36, 10, 103, 6, 89, 18, 78, 26, 18, 40, 156, 79, 228, 22, 193, 22, 43, 173, 129, 106, 211, 216, 26, 200, 62, 138, 234, 41, 214, 64, 53, 122, 108, 13, 164, 19, 68, 187, 3, 196, 196, 29, 32, 218, 29, 32, 198, 118, 0, 214, 192, 209, 239, 128, 131, 5, 80, 127, 138, 5, 48, 102, 127, 44, 128, 214, 254, 117, 197, 27, 180, 127, 157, 233, 160, 253, 49, 146, 86, 253, 162, 85, 191, 24, 180, 191, 131, 146, 233, 113, 164, 16, 181, 97, 245, 119, 237, 191, 113, 245, 187, 141, 104, 169, 112, 135, 209, 237, 194, 253, 135, 23, 10, 187, 3, 90, 49, 233, 160, 116, 83, 2, 163, 193, 119, 45, 80, 167, 128, 94, 39, 242, 15, 62, 181, 69, 240, 92, 19, 193, 125, 45, 93, 9, 56, 58, 28, 108, 146, 131, 192, 140, 10, 143, 82, 96, 202, 133, 147, 128, 132, 8, 71, 8, 209, 18, 14, 30, 2, 41, 156, 85, 100, 24, 33, 119, 248, 179, 17, 162, 154, 50, 182, 6, 80, 183, 234, 224, 216, 26, 200, 22, 139, 211, 29, 80, 228, 14, 88, 44, 128, 221, 177, 127, 157, 209, 160, 253, 113, 196, 27, 177, 63, 162, 208, 170, 95, 28, 168, 127, 35, 95, 248, 31, 14, 250, 160, 250, 5, 106, 227, 58, 161, 102, 110, 32, 154, 41, 220, 91, 244, 89, 184, 237, 176, 64, 97, 83, 64, 34, 69, 186, 102, 236, 93, 92, 152, 11, 94, 59, 196, 97, 39, 10, 72, 115, 12, 24, 121, 128, 79, 15, 240, 63, 173, 14, 30, 225, 0, 60, 215, 97, 112, 169, 29, 112, 239, 60, 156, 195, 228, 145, 226, 192, 77, 78, 7, 131, 43, 60, 92, 129, 185, 11, 7, 3, 129, 17, 142, 147, 64, 210, 28, 66, 132, 83, 56, 183, 200, 51, 210, 222, 95, 3, 168, 82, 245, 107, 108, 13, 100, 67, 69, 103, 7, 96, 13, 148, 13, 176, 6, 202, 27, 88, 3, 101, 24, 172, 129, 114, 17, 214, 192, 196, 29, 32, 182, 189, 3, 202, 228, 99, 59, 224, 246, 2, 200, 191, 62, 181, 127, 113, 96, 255, 195, 193, 234, 168, 95, 100, 94, 251, 234, 23, 40, 3, 170, 226, 10, 161, 90, 110, 29, 218, 40, 92, 84, 116, 88, 184, 225, 104, 190, 176, 23, 160, 140, 34, 205, 146, 198, 73, 210, 80, 144, 87, 2, 235, 193, 137, 45, 208, 235, 1, 183, 92, 12, 95, 31, 47, 157, 245, 128, 155, 26, 4, 39, 131, 115, 75, 242, 168, 49, 5, 227, 121, 97, 148, 133, 199, 141, 24, 20, 206, 9, 242, 35, 156, 46, 164, 206, 129, 68, 80, 197, 224, 14, 16, 72, 254, 224, 14, 16, 157, 53, 128, 2, 86, 43, 177, 6, 170, 191, 99, 107, 0, 6, 104, 119, 128, 104, 119, 128, 56, 161, 59, 32, 13, 47, 74, 251, 123, 83, 236, 47, 166, 216, 95, 172, 105, 127, 28, 214, 68, 251, 215, 60, 96, 255, 154, 28, 236, 95, 51, 134, 253, 43, 13, 176, 191, 163, 147, 121, 114, 200, 16, 190, 86, 253, 226, 64, 253, 179, 190, 231, 179, 65, 245, 187, 207, 232, 185, 176, 8, 4, 28, 33, 44, 17, 145, 114, 49, 105, 34, 72, 42, 73, 175, 193, 122, 0, 222, 92, 176, 186, 232, 255, 225, 189, 219, 5, 79, 183, 148, 193, 173, 128, 27, 7, 121, 98, 2, 231, 105, 242, 252, 49, 26, 227, 9, 98, 184, 133, 167, 143, 96, 8, 199, 6, 113, 18, 78, 26, 18, 232, 112, 34, 180, 98, 112, 13, 160, 2, 98, 112, 13, 84, 143, 176, 6, 170, 113, 99, 107, 32, 59, 43, 142, 102, 7, 136, 177, 29, 128, 53, 176, 141, 29, 144, 102, 22, 211, 119, 192, 98, 1, 228, 31, 221, 73, 246, 199, 32, 91, 245, 139, 86, 253, 162, 85, 191, 232, 168, 95, 100, 58, 29, 89, 68, 121, 27, 234, 119, 27, 209, 82, 225, 14, 163, 219, 194, 205, 135, 17, 10, 91, 99, 240, 251, 60, 233, 29, 40, 201, 164, 191, 96, 183, 4, 90, 20, 176, 231, 24, 144, 114, 242, 63, 127, 102, 187, 224, 233, 0, 174, 115, 144, 118, 37, 224, 88, 64, 30, 38, 206, 217, 228, 80, 48, 175, 194, 51, 197, 172, 133, 195, 32, 144, 19, 71, 72, 32, 93, 14, 30, 2, 233, 160, 34, 192, 14, 54, 2, 143, 58, 84, 71, 198, 214, 64, 182, 76, 172, 186, 3, 176, 6, 170, 251, 127, 246, 176, 16, 202, 18, 88, 3, 119, 234, 14, 88, 44, 128, 252, 125, 125, 4, 22, 192, 142, 216, 191, 78, 118, 208, 254, 24, 204, 17, 219, 31, 161, 60, 80, 255, 26, 95, 248, 163, 57, 98, 80, 253, 98, 179, 234, 183, 35, 250, 222, 135, 122, 76, 122, 10, 10, 75, 224, 62, 200, 177, 5, 134, 45, 32, 229, 221, 1, 215, 89, 224, 142, 90, 112, 38, 56, 49, 147, 39, 140, 195, 55, 30, 147, 192, 4, 197, 237, 17, 119, 55, 1, 50, 35, 156, 40, 36, 109, 171, 107, 32, 27, 36, 170, 89, 88, 3, 213, 65, 172, 129, 106, 43, 215, 192, 208, 14, 16, 37, 129, 212, 66, 103, 7, 96, 13, 220, 1, 59, 96, 96, 1, 228, 39, 220, 169, 246, 175, 169, 195, 254, 149, 15, 216, 223, 97, 202, 132, 57, 118, 153, 69, 113, 96, 255, 195, 193, 157, 174, 126, 129, 194, 108, 74, 253, 238, 54, 58, 47, 82, 10, 41, 139, 194, 54, 129, 104, 140, 149, 4, 91, 37, 105, 55, 184, 15, 64, 157, 2, 134, 93, 202, 63, 250, 236, 118, 193, 211, 77, 1, 119, 132, 91, 6, 121, 86, 2, 39, 105, 124, 236, 2, 19, 41, 60, 56, 12, 180, 240, 196, 17, 6, 225, 168, 32, 66, 194, 233, 66, 234, 230, 173, 1, 84, 0, 5, 169, 214, 140, 173, 1, 244, 174, 221, 1, 98, 96, 7, 172, 247, 237, 160, 117, 118, 128, 56, 250, 29, 80, 246, 238, 239, 128, 219, 11, 96, 138, 253, 69, 187, 0, 118, 217, 254, 53, 197, 233, 246, 71, 92, 90, 245, 139, 142, 250, 97, 127, 135, 24, 225, 70, 244, 59, 234, 23, 40, 149, 203, 134, 18, 186, 156, 40, 173, 251, 140, 158, 11, 91, 160, 253, 146, 223, 250, 16, 48, 75, 97, 251, 64, 76, 38, 45, 6, 199, 37, 144, 35, 212, 57, 6, 164, 156, 252, 47, 247, 109, 23, 60, 29, 192, 117, 14, 130, 91, 198, 129, 36, 121, 134, 2, 39, 92, 120, 16, 2, 51, 42, 60, 71, 140, 88, 220, 14, 64, 179, 9, 28, 27, 196, 73, 56, 105, 72, 160, 147, 137, 196, 118, 118, 192, 196, 53, 144, 157, 18, 199, 184, 3, 254, 212, 248, 14, 192, 26, 216, 246, 14, 40, 235, 78, 220, 1, 105, 117, 145, 59, 224, 96, 1, 108, 220, 254, 88, 0, 187, 102, 127, 140, 127, 35, 246, 71, 76, 79, 186, 250, 225, 145, 194, 174, 129, 134, 138, 67, 194, 106, 116, 102, 96, 64, 248, 17, 192, 176, 5, 164, 188, 35, 224, 34, 11, 220, 78, 11, 78, 3, 103, 101, 242, 108, 113, 236, 133, 71, 35, 48, 53, 225, 177, 10, 76, 92, 56, 15, 200, 137, 35, 132, 104, 9, 167, 14, 105, 28, 220, 1, 162, 179, 6, 80, 10, 84, 166, 122, 132, 53, 80, 141, 195, 26, 168, 110, 98, 13, 84, 139, 177, 6, 170, 239, 88, 3, 187, 179, 3, 202, 150, 19, 119, 64, 218, 88, 76, 217, 1, 101, 251, 218, 1, 139, 5, 208, 218, 95, 180, 11, 96, 138, 253, 197, 116, 251, 99, 1, 108, 195, 254, 24, 231, 58, 246, 119, 188, 50, 115, 98, 27, 246, 71, 121, 182, 161, 254, 236, 191, 72, 65, 192, 29, 194, 102, 129, 116, 138, 116, 19, 180, 101, 210, 113, 48, 32, 128, 64, 5, 60, 219, 231, 127, 221, 50, 120, 186, 165, 224, 94, 4, 238, 55, 201, 83, 18, 56, 67, 227, 211, 198, 32, 10, 15, 75, 96, 142, 194, 83, 70, 0, 132, 179, 129, 204, 56, 78, 136, 153, 24, 220, 1, 98, 112, 13, 84, 182, 215, 89, 3, 104, 89, 187, 3, 68, 187, 3, 68, 187, 3, 6, 223, 18, 40, 63, 12, 190, 45, 156, 110, 89, 103, 7, 148, 229, 118, 100, 7, 44, 22, 64, 253, 127, 88, 0, 211, 237, 143, 5, 48, 197, 254, 98, 131, 246, 175, 73, 108, 208, 254, 149, 149, 41, 246, 175, 252, 193, 254, 149, 84, 216, 31, 225, 174, 196, 195, 254, 174, 7, 106, 179, 17, 245, 187, 219, 171, 125, 201, 31, 42, 129, 101, 132, 53, 36, 96, 168, 34, 93, 6, 211, 37, 240, 35, 4, 58, 8, 164, 156, 252, 227, 45, 131, 167, 75, 112, 145, 131, 224, 102, 113, 20, 73, 158, 30, 14, 214, 248, 252, 49, 154, 194, 179, 227, 88, 55, 186, 6, 28, 69, 68, 180, 114, 59, 182, 6, 50, 249, 226, 116, 7, 140, 237, 128, 116, 169, 152, 178, 3, 218, 5, 32, 198, 118, 192, 193, 2, 200, 191, 152, 98, 127, 177, 85, 251, 139, 41, 246, 23, 179, 237, 95, 179, 31, 180, 63, 162, 211, 170, 95, 180, 234, 23, 173, 250, 5, 98, 221, 170, 95, 116, 212, 47, 80, 173, 35, 80, 191, 221, 1, 167, 8, 75, 71, 192, 71, 69, 154, 11, 82, 51, 240, 32, 44, 9, 224, 89, 1, 41, 239, 8, 184, 200, 2, 247, 2, 242, 16, 112, 68, 73, 30, 41, 78, 187, 240, 68, 48, 172, 194, 211, 196, 148, 133, 51, 128, 108, 56, 54, 136, 147, 99, 134, 248, 245, 215, 0, 130, 93, 105, 199, 26, 168, 94, 244, 215, 64, 245, 11, 107, 160, 154, 136, 53, 176, 206, 14, 16, 71, 179, 3, 210, 129, 98, 202, 14, 40, 199, 206, 216, 1, 237, 2, 16, 7, 11, 32, 255, 168, 181, 191, 104, 23, 192, 116, 251, 99, 1, 220, 205, 246, 119, 196, 51, 247, 46, 3, 74, 210, 81, 191, 64, 253, 6, 213, 47, 86, 86, 255, 45, 83, 8, 72, 68, 216, 50, 131, 223, 223, 183, 161, 32, 47, 147, 178, 131, 7, 1, 28, 10, 207, 246, 249, 39, 219, 7, 207, 216, 1, 55, 34, 112, 167, 73, 158, 15, 142, 206, 248, 144, 5, 206, 191, 240, 140, 48, 59, 225, 201, 114, 232, 155, 94, 3, 8, 109, 37, 121, 108, 13, 100, 23, 196, 210, 29, 32, 218, 29, 32, 198, 118, 192, 95, 56, 92, 231, 129, 29, 208, 121, 91, 248, 176, 70, 86, 218, 1, 233, 46, 177, 241, 29, 144, 238, 21, 243, 118, 192, 98, 1, 228, 239, 69, 187, 0, 230, 217, 95, 236, 184, 253, 17, 130, 137, 246, 175, 156, 193, 254, 149, 72, 216, 31, 33, 110, 213, 47, 58, 234, 23, 40, 82, 71, 253, 2, 21, 117, 117, 179, 207, 194, 85, 135, 2, 172, 126, 88, 67, 216, 41, 219, 243, 62, 44, 9, 141, 14, 2, 41, 155, 127, 186, 125, 240, 140, 6, 87, 216, 130, 219, 196, 33, 36, 121, 104, 56, 207, 194, 199, 46, 48, 17, 225, 145, 97, 148, 98, 227, 107, 0, 129, 172, 148, 142, 173, 1, 68, 125, 219, 59, 64, 140, 237, 0, 172, 129, 29, 217, 1, 237, 2, 16, 83, 118, 64, 187, 0, 196, 148, 29, 112, 104, 1, 204, 179, 191, 104, 23, 192, 20, 251, 139, 118, 1, 156, 80, 251, 35, 160, 136, 239, 170, 246, 71, 121, 92, 170, 108, 218, 241, 170, 223, 246, 129, 152, 138, 244, 23, 212, 102, 96, 67, 184, 18, 64, 181, 2, 82, 222, 5, 112, 133, 2, 119, 1, 242, 246, 113, 56, 38, 79, 18, 135, 92, 120, 16, 24, 80, 225, 9, 98, 178, 179, 215, 0, 194, 38, 58, 107, 0, 49, 174, 108, 99, 13, 84, 11, 176, 6, 170, 47, 88, 3, 168, 216, 106, 59, 96, 242, 143, 6, 165, 43, 196, 6, 119, 64, 153, 109, 198, 14, 40, 151, 206, 216, 1, 237, 2, 16, 216, 1, 183, 23, 192, 20, 251, 139, 118, 1, 76, 183, 63, 22, 192, 116, 251, 99, 1, 108, 219, 254, 149, 152, 65, 251, 35, 112, 75, 237, 239, 40, 103, 190, 29, 250, 108, 130, 232, 216, 31, 5, 235, 171, 31, 223, 243, 113, 165, 81, 245, 41, 234, 135, 80, 132, 141, 3, 19, 137, 180, 21, 68, 86, 164, 242, 4, 132, 152, 192, 164, 80, 109, 135, 31, 219, 62, 120, 198, 14, 184, 11, 220, 99, 146, 199, 130, 67, 51, 62, 91, 28, 123, 225, 185, 96, 94, 194, 211, 196, 148, 151, 174, 129, 76, 81, 49, 184, 6, 42, 141, 88, 3, 149, 219, 177, 53, 128, 228, 183, 59, 64, 180, 59, 64, 100, 209, 170, 125, 88, 3, 187, 191, 3, 210, 120, 98, 250, 14, 72, 199, 138, 121, 59, 96, 173, 5, 48, 207, 254, 98, 158, 253, 197, 116, 251, 99, 1, 236, 142, 253, 17, 235, 142, 250, 97, 127, 87, 40, 123, 229, 178, 161, 132, 27, 81, 191, 77, 49, 251, 75, 126, 56, 171, 72, 187, 65, 124, 6, 174, 132, 73, 91, 32, 101, 243, 207, 182, 12, 158, 206, 224, 242, 6, 201, 27, 196, 237, 39, 62, 43, 28, 163, 241, 105, 99, 10, 194, 99, 194, 248, 132, 135, 139, 161, 175, 186, 6, 14, 146, 182, 202, 119, 132, 50, 213, 226, 142, 220, 1, 229, 165, 25, 59, 160, 76, 56, 99, 7, 140, 45, 128, 149, 118, 192, 193, 2, 88, 199, 254, 75, 23, 192, 20, 251, 139, 118, 1, 76, 177, 191, 152, 110, 127, 44, 128, 205, 218, 31, 49, 93, 213, 254, 40, 73, 171, 126, 209, 83, 255, 200, 247, 124, 80, 233, 205, 170, 223, 38, 130, 161, 10, 139, 76, 192, 113, 69, 10, 81, 64, 151, 9, 108, 43, 224, 229, 99, 7, 151, 39, 112, 11, 32, 111, 28, 199, 98, 242, 0, 113, 182, 194, 135, 47, 48, 23, 225, 169, 97, 154, 30, 52, 2, 48, 182, 6, 42, 69, 99, 107, 0, 81, 236, 236, 0, 172, 129, 202, 60, 214, 64, 181, 3, 107, 160, 122, 132, 53, 144, 189, 19, 155, 220, 1, 183, 68, 145, 246, 40, 159, 76, 220, 1, 233, 43, 49, 125, 7, 164, 33, 203, 153, 179, 119, 64, 122, 187, 93, 0, 194, 59, 96, 177, 0, 166, 216, 95, 140, 45, 128, 188, 160, 233, 246, 199, 2, 56, 181, 127, 178, 178, 253, 15, 151, 211, 165, 69, 153, 7, 213, 47, 54, 171, 254, 212, 22, 140, 86, 164, 251, 160, 197, 4, 62, 133, 112, 199, 248, 241, 45, 131, 167, 235, 128, 235, 199, 221, 37, 121, 32, 56, 171, 194, 231, 137, 163, 46, 60, 11, 204, 72, 120, 130, 152, 236, 188, 53, 144, 25, 19, 7, 217, 59, 188, 6, 42, 165, 99, 107, 0, 57, 111, 119, 128, 216, 236, 14, 192, 26, 88, 115, 7, 164, 103, 196, 148, 29, 208, 46, 0, 49, 125, 7, 164, 75, 203, 174, 27, 217, 1, 43, 47, 128, 121, 246, 23, 99, 11, 32, 111, 126, 138, 253, 69, 187, 0, 166, 216, 95, 28, 187, 253, 43, 211, 176, 127, 165, 31, 246, 175, 158, 192, 254, 46, 85, 54, 205, 245, 203, 78, 138, 65, 245, 47, 249, 194, 255, 176, 29, 132, 197, 1, 161, 216, 53, 112, 144, 176, 164, 4, 252, 85, 216, 113, 208, 95, 146, 198, 132, 79, 91, 160, 230, 226, 159, 111, 25, 60, 157, 193, 181, 129, 188, 47, 129, 187, 54, 62, 34, 129, 211, 43, 124, 194, 56, 124, 225, 209, 96, 100, 194, 211, 196, 148, 251, 107, 0, 17, 170, 92, 141, 173, 129, 76, 166, 216, 248, 14, 16, 219, 222, 1, 233, 135, 137, 59, 160, 252, 115, 104, 7, 236, 59, 106, 233, 14, 104, 23, 128, 152, 190, 3, 210, 186, 99, 11, 96, 226, 14, 216, 91, 199, 254, 75, 23, 192, 60, 251, 139, 118, 1, 76, 183, 63, 22, 192, 20, 251, 139, 99, 177, 63, 202, 208, 170, 95, 180, 234, 23, 7, 246, 63, 92, 69, 87, 20, 213, 237, 169, 191, 121, 155, 215, 178, 128, 68, 236, 23, 120, 71, 216, 74, 176, 85, 97, 163, 65, 118, 38, 205, 8, 111, 38, 16, 174, 128, 154, 103, 240, 47, 246, 193, 31, 206, 3, 215, 134, 139, 7, 121, 203, 56, 141, 194, 135, 38, 112, 158, 194, 7, 46, 48, 11, 143, 9, 227, 19, 158, 44, 38, 62, 184, 3, 68, 103, 13, 100, 234, 68, 111, 7, 28, 94, 3, 149, 112, 172, 129, 35, 216, 1, 217, 107, 177, 40, 251, 225, 250, 175, 185, 3, 210, 75, 179, 119, 64, 187, 0, 196, 58, 59, 32, 29, 222, 91, 0, 249, 167, 98, 250, 2, 200, 139, 152, 103, 127, 209, 46, 128, 121, 246, 23, 59, 107, 127, 132, 123, 35, 246, 207, 6, 138, 93, 83, 191, 253, 5, 181, 21, 105, 64, 200, 49, 129, 85, 225, 220, 65, 202, 233, 19, 249, 151, 251, 224, 15, 251, 224, 233, 198, 192, 149, 227, 190, 76, 158, 3, 142, 168, 240, 49, 10, 156, 176, 240, 249, 99, 46, 30, 25, 70, 41, 6, 119, 128, 24, 92, 3, 157, 29, 128, 53, 80, 153, 196, 26, 168, 244, 46, 214, 64, 68, 186, 179, 3, 176, 6, 142, 125, 7, 148, 61, 6, 118, 192, 97, 237, 180, 59, 160, 93, 0, 98, 222, 14, 152, 178, 0, 196, 236, 29, 192, 5, 176, 41, 251, 139, 41, 11, 96, 158, 253, 69, 187, 0, 166, 216, 95, 180, 11, 96, 55, 237, 239, 242, 100, 163, 92, 179, 236, 158, 11, 137, 162, 246, 236, 127, 184, 252, 171, 170, 223, 222, 129, 143, 68, 10, 11, 46, 19, 233, 59, 168, 208, 164, 55, 97, 85, 0, 53, 23, 229, 244, 237, 129, 167, 43, 112, 97, 32, 239, 72, 224, 126, 141, 79, 6, 135, 86, 248, 84, 113, 224, 194, 227, 192, 152, 60, 62, 140, 85, 12, 174, 129, 131, 108, 172, 178, 6, 50, 135, 162, 221, 1, 162, 221, 1, 226, 100, 237, 128, 180, 138, 152, 183, 3, 218, 5, 32, 54, 181, 3, 230, 45, 0, 177, 151, 191, 105, 237, 47, 230, 45, 128, 117, 236, 191, 116, 1, 76, 183, 63, 22, 192, 116, 251, 99, 1, 108, 207, 254, 213, 132, 65, 251, 163, 72, 173, 250, 69, 71, 253, 176, 191, 235, 141, 218, 111, 92, 253, 48, 151, 176, 218, 4, 172, 87, 164, 31, 97, 207, 4, 218, 21, 176, 243, 68, 62, 49, 2, 62, 108, 58, 184, 42, 92, 118, 146, 119, 138, 67, 48, 62, 43, 28, 163, 240, 33, 11, 156, 191, 71, 131, 145, 121, 148, 24, 113, 205, 125, 108, 13, 100, 114, 196, 17, 237, 128, 161, 111, 7, 109, 111, 7, 84, 247, 211, 6, 98, 202, 14, 40, 219, 164, 127, 4, 119, 192, 190, 181, 150, 238, 128, 41, 11, 64, 108, 111, 7, 44, 89, 0, 155, 181, 255, 196, 5, 144, 71, 54, 221, 254, 131, 11, 32, 7, 57, 197, 254, 226, 206, 176, 63, 10, 124, 96, 255, 195, 85, 183, 2, 160, 134, 109, 168, 31, 142, 43, 210, 134, 16, 165, 73, 177, 66, 187, 45, 7, 42, 63, 115, 246, 147, 103, 206, 254, 196, 253, 231, 62, 251, 200, 249, 135, 158, 184, 248, 248, 151, 94, 253, 194, 87, 94, 123, 250, 235, 111, 124, 237, 91, 111, 125, 227, 185, 183, 191, 245, 221, 119, 158, 255, 222, 229, 23, 94, 122, 183, 229, 59, 47, 92, 126, 246, 249, 183, 191, 254, 237, 183, 190, 242, 205, 55, 191, 252, 181, 215, 159, 124, 250, 210, 163, 95, 120, 245, 254, 199, 47, 124, 234, 193, 151, 245, 104, 122, 76, 61, 242, 148, 61, 145, 215, 44, 112, 71, 38, 111, 31, 39, 35, 124, 116, 2, 167, 42, 124, 230, 152, 133, 199, 132, 241, 245, 215, 64, 166, 66, 28, 164, 229, 240, 26, 168, 92, 97, 13, 84, 2, 177, 6, 42, 171, 88, 3, 71, 188, 3, 170, 179, 51, 118, 64, 89, 226, 208, 14, 184, 245, 165, 100, 234, 165, 221, 1, 92, 0, 107, 255, 47, 3, 210, 159, 235, 44, 128, 254, 14, 184, 189, 0, 166, 216, 95, 172, 179, 0, 242, 38, 231, 217, 95, 140, 45, 128, 28, 207, 116, 251, 99, 1, 28, 189, 253, 81, 137, 237, 217, 31, 37, 239, 168, 95, 64, 31, 171, 170, 63, 229, 5, 175, 9, 91, 15, 66, 52, 105, 79, 184, 53, 41, 215, 255, 228, 253, 231, 206, 60, 118, 225, 115, 95, 190, 36, 107, 63, 255, 226, 229, 243, 23, 175, 190, 241, 214, 7, 87, 222, 255, 240, 195, 15, 63, 250, 232, 163, 143, 63, 254, 248, 255, 87, 172, 250, 75, 159, 225, 207, 213, 227, 124, 112, 253, 230, 229, 119, 111, 92, 122, 253, 253, 151, 94, 126, 239, 217, 239, 188, 173, 245, 240, 200, 231, 95, 185, 247, 225, 243, 90, 12, 186, 6, 92, 88, 146, 247, 34, 112, 167, 133, 15, 68, 224, 172, 132, 79, 18, 135, 44, 124, 254, 152, 75, 127, 13, 96, 232, 149, 132, 177, 53, 128, 44, 181, 59, 64, 12, 236, 128, 161, 151, 2, 7, 59, 96, 232, 45, 129, 236, 197, 102, 119, 64, 118, 89, 76, 223, 1, 105, 143, 242, 201, 192, 14, 8, 11, 137, 177, 29, 144, 78, 155, 178, 0, 196, 102, 119, 64, 90, 125, 173, 5, 176, 61, 251, 139, 41, 11, 96, 29, 251, 15, 46, 128, 140, 194, 20, 251, 139, 12, 220, 177, 216, 191, 250, 6, 251, 87, 51, 97, 255, 234, 48, 236, 239, 194, 67, 4, 29, 245, 11, 40, 198, 234, 129, 146, 108, 43, 88, 76, 216, 113, 208, 95, 145, 150, 132, 67, 141, 140, 255, 201, 51, 231, 62, 243, 240, 249, 199, 191, 248, 234, 215, 158, 125, 75, 46, 150, 235, 175, 125, 112, 179, 68, 127, 148, 191, 106, 61, 220, 188, 249, 241, 123, 87, 110, 188, 114, 233, 253, 239, 188, 120, 89, 43, 225, 193, 39, 46, 222, 243, 192, 203, 157, 125, 144, 247, 136, 219, 47, 124, 68, 56, 58, 225, 131, 197, 129, 11, 207, 2, 51, 234, 236, 128, 177, 53, 144, 57, 17, 59, 190, 3, 170, 125, 43, 237, 128, 118, 1, 136, 133, 10, 194, 12, 98, 108, 7, 164, 103, 202, 60, 233, 34, 193, 29, 112, 220, 47, 2, 68, 127, 7, 28, 44, 128, 41, 246, 23, 219, 91, 0, 155, 178, 191, 24, 91, 0, 57, 224, 41, 246, 23, 237, 2, 200, 168, 141, 217, 31, 11, 96, 182, 253, 171, 63, 131, 246, 71, 253, 90, 245, 139, 86, 253, 162, 163, 126, 145, 166, 56, 26, 245, 167, 19, 161, 203, 66, 210, 215, 87, 217, 15, 60, 126, 241, 233, 103, 222, 248, 222, 185, 247, 222, 190, 124, 93, 95, 218, 175, 164, 251, 250, 42, 254, 22, 31, 107, 91, 72, 220, 215, 111, 124, 116, 253, 250, 205, 224, 163, 27, 7, 175, 24, 234, 215, 193, 199, 79, 255, 165, 143, 213, 167, 107, 27, 233, 85, 194, 183, 159, 127, 231, 201, 167, 46, 233, 245, 129, 214, 21, 110, 199, 248, 174, 113, 32, 133, 79, 12, 39, 41, 124, 206, 56, 255, 193, 29, 32, 58, 107, 0, 49, 232, 236, 0, 172, 129, 131, 29, 48, 244, 237, 160, 204, 234, 145, 237, 128, 108, 165, 200, 194, 78, 217, 1, 101, 131, 244, 131, 224, 14, 24, 123, 17, 48, 237, 27, 65, 105, 182, 114, 221, 145, 237, 128, 141, 45, 128, 163, 180, 191, 152, 183, 0, 230, 217, 95, 180, 11, 96, 85, 251, 139, 233, 246, 199, 2, 56, 118, 251, 67, 16, 27, 81, 191, 45, 38, 32, 56, 97, 3, 194, 140, 133, 212, 121, 223, 163, 23, 244, 101, 181, 190, 204, 127, 247, 189, 27, 82, 246, 82, 27, 235, 35, 164, 96, 153, 253, 242, 187, 55, 94, 125, 109, 241, 189, 154, 111, 61, 255, 206, 215, 190, 249, 230, 151, 190, 242, 218, 19, 95, 122, 245, 145, 39, 47, 62, 240, 216, 133, 207, 62, 124, 254, 211, 15, 156, 251, 212, 253, 231, 238, 57, 51, 128, 254, 252, 222, 7, 95, 190, 239, 145, 243, 15, 61, 126, 241, 177, 207, 191, 242, 249, 167, 46, 61, 253, 181, 215, 191, 254, 173, 183, 158, 127, 241, 242, 203, 23, 175, 188, 241, 230, 7, 87, 174, 126, 248, 225, 205, 197, 250, 89, 122, 53, 250, 0, 93, 201, 235, 111, 94, 251, 246, 119, 223, 121, 252, 75, 175, 126, 234, 193, 209, 87, 6, 62, 7, 156, 143, 240, 233, 225, 96, 197, 224, 14, 16, 131, 107, 160, 166, 137, 53, 80, 115, 199, 26, 168, 132, 140, 173, 129, 12, 216, 81, 236, 128, 253, 238, 204, 216, 1, 217, 89, 49, 111, 7, 112, 1, 28, 249, 55, 130, 54, 181, 0, 68, 103, 7, 44, 22, 192, 152, 253, 143, 113, 1, 108, 214, 254, 75, 23, 192, 170, 246, 23, 237, 2, 152, 98, 127, 177, 109, 251, 87, 87, 97, 127, 23, 59, 219, 110, 5, 164, 23, 68, 199, 254, 208, 205, 82, 245, 195, 104, 194, 190, 131, 7, 11, 125, 177, 255, 224, 19, 23, 191, 241, 237, 183, 164, 78, 125, 73, 222, 241, 172, 191, 226, 214, 71, 190, 120, 238, 221, 103, 158, 125, 243, 201, 47, 95, 146, 226, 63, 189, 144, 251, 89, 241, 147, 247, 109, 24, 61, 230, 167, 206, 156, 251, 204, 131, 47, 107, 151, 104, 169, 60, 251, 157, 183, 181, 21, 46, 191, 187, 252, 21, 137, 174, 243, 234, 251, 31, 158, 187, 112, 229, 75, 95, 125, 253, 51, 139, 151, 5, 188, 107, 225, 99, 193, 113, 9, 31, 38, 14, 217, 135, 143, 161, 212, 164, 198, 214, 0, 102, 221, 238, 0, 49, 113, 7, 136, 177, 29, 144, 107, 96, 253, 29, 144, 157, 18, 171, 238, 128, 118, 1, 136, 225, 29, 16, 150, 16, 99, 59, 32, 157, 83, 22, 74, 47, 181, 11, 224, 216, 191, 17, 52, 115, 1, 228, 67, 28, 175, 253, 197, 58, 11, 32, 135, 58, 207, 254, 34, 227, 181, 85, 251, 139, 109, 216, 31, 37, 239, 168, 31, 246, 183, 80, 32, 154, 13, 170, 127, 241, 77, 158, 207, 201, 251, 111, 235, 171, 108, 249, 244, 64, 156, 205, 47, 121, 86, 91, 225, 173, 183, 63, 120, 241, 236, 187, 79, 63, 243, 198, 195, 79, 92, 252, 244, 3, 47, 111, 195, 245, 211, 209, 74, 184, 239, 225, 243, 122, 133, 161, 165, 117, 254, 149, 171, 122, 137, 32, 221, 31, 92, 110, 243, 75, 215, 175, 141, 165, 181, 241, 197, 175, 190, 190, 255, 13, 34, 158, 131, 240, 41, 225, 244, 124, 176, 56, 240, 154, 130, 192, 116, 78, 204, 14, 136, 46, 136, 41, 59, 160, 93, 0, 98, 213, 29, 48, 188, 0, 142, 252, 27, 65, 105, 194, 211, 5, 112, 64, 187, 0, 182, 103, 127, 49, 101, 1, 100, 176, 166, 216, 95, 180, 11, 224, 104, 236, 143, 210, 174, 106, 127, 40, 163, 163, 126, 1, 25, 173, 170, 254, 79, 156, 57, 171, 175, 136, 159, 122, 230, 141, 87, 94, 123, 255, 198, 141, 209, 175, 163, 111, 222, 252, 248, 157, 203, 215, 95, 120, 233, 221, 47, 126, 229, 181, 51, 143, 156, 151, 115, 97, 225, 29, 65, 171, 232, 211, 15, 156, 123, 248, 137, 139, 95, 251, 230, 155, 23, 94, 185, 250, 254, 181, 253, 239, 22, 13, 253, 210, 159, 107, 85, 232, 142, 30, 253, 226, 171, 63, 249, 192, 192, 251, 4, 62, 49, 156, 100, 127, 13, 96, 76, 53, 59, 172, 129, 154, 50, 214, 64, 229, 1, 107, 160, 146, 131, 53, 176, 210, 14, 200, 12, 79, 220, 1, 213, 145, 220, 1, 199, 251, 102, 0, 23, 192, 42, 47, 2, 14, 237, 128, 93, 125, 17, 176, 119, 18, 237, 47, 54, 181, 0, 214, 183, 191, 104, 23, 192, 116, 251, 99, 1, 28, 139, 253, 45, 133, 52, 133, 232, 216, 31, 2, 178, 152, 32, 44, 139, 12, 130, 251, 228, 254, 151, 252, 207, 125, 247, 157, 247, 174, 220, 24, 252, 146, 121, 241, 197, 254, 141, 143, 94, 123, 227, 218, 215, 191, 245, 150, 148, 250, 233, 251, 119, 84, 250, 99, 104, 25, 124, 230, 161, 151, 63, 255, 212, 37, 89, 254, 221, 247, 134, 239, 81, 191, 62, 252, 240, 227, 75, 175, 95, 211, 10, 212, 11, 130, 246, 127, 97, 224, 211, 195, 169, 118, 118, 128, 192, 188, 218, 29, 32, 218, 29, 32, 118, 106, 7, 100, 119, 102, 239, 128, 108, 241, 216, 2, 24, 216, 1, 97, 12, 177, 206, 14, 72, 143, 157, 46, 128, 141, 45, 128, 237, 217, 95, 172, 186, 0, 230, 217, 95, 28, 189, 253, 171, 225, 83, 236, 95, 214, 128, 253, 173, 152, 244, 206, 170, 234, 255, 137, 251, 207, 61, 250, 133, 87, 95, 122, 249, 189, 15, 62, 24, 126, 99, 247, 195, 15, 63, 122, 227, 173, 107, 95, 255, 246, 91, 15, 62, 126, 241, 83, 39, 205, 251, 131, 220, 251, 224, 203, 79, 126, 249, 210, 139, 103, 223, 29, 251, 6, 145, 254, 240, 242, 187, 215, 191, 241, 237, 183, 238, 123, 100, 224, 251, 66, 62, 73, 156, 112, 103, 13, 228, 212, 196, 58, 59, 64, 108, 114, 7, 236, 39, 188, 221, 1, 51, 222, 12, 168, 222, 109, 100, 7, 164, 19, 202, 18, 233, 141, 121, 11, 64, 112, 7, 236, 228, 139, 128, 197, 2, 200, 63, 218, 77, 251, 31, 217, 2, 216, 148, 253, 151, 46, 128, 233, 246, 199, 2, 216, 134, 253, 161, 134, 86, 253, 162, 85, 191, 88, 85, 253, 143, 125, 241, 213, 115, 231, 175, 92, 191, 49, 240, 93, 254, 143, 247, 191, 43, 242, 221, 239, 93, 126, 236, 11, 175, 124, 250, 129, 59, 193, 251, 64, 175, 9, 62, 251, 240, 249, 167, 190, 246, 250, 43, 151, 22, 223, 239, 58, 184, 237, 248, 165, 19, 208, 235, 161, 111, 126, 231, 237, 251, 30, 189, 48, 182, 6, 112, 212, 157, 29, 128, 53, 80, 51, 197, 26, 56, 198, 29, 144, 201, 175, 46, 204, 222, 1, 217, 199, 254, 2, 16, 83, 119, 64, 120, 67, 204, 219, 1, 92, 0, 59, 249, 34, 224, 100, 44, 128, 60, 214, 227, 178, 191, 152, 190, 0, 50, 184, 211, 237, 63, 184, 0, 178, 78, 99, 246, 199, 2, 24, 179, 63, 170, 190, 61, 251, 67, 94, 159, 60, 115, 238, 161, 39, 46, 126, 239, 220, 123, 31, 92, 191, 121, 96, 187, 248, 117, 243, 230, 199, 111, 189, 253, 193, 51, 207, 190, 121, 230, 145, 243, 199, 251, 142, 238, 209, 240, 105, 45, 194, 207, 191, 242, 194, 75, 239, 190, 127, 109, 224, 53, 80, 189, 26, 248, 218, 179, 111, 222, 251, 16, 191, 41, 84, 103, 139, 53, 80, 83, 24, 91, 3, 152, 227, 216, 14, 192, 26, 152, 189, 3, 42, 159, 153, 88, 177, 194, 14, 136, 142, 12, 44, 128, 109, 126, 35, 40, 205, 80, 174, 72, 123, 108, 123, 1, 172, 191, 3, 78, 23, 192, 161, 241, 108, 99, 1, 108, 202, 254, 98, 108, 1, 100, 73, 166, 216, 95, 76, 183, 63, 22, 192, 68, 251, 151, 71, 96, 127, 75, 39, 77, 100, 61, 165, 179, 164, 176, 207, 62, 114, 254, 217, 239, 188, 125, 245, 234, 135, 173, 236, 164, 254, 215, 222, 184, 166, 47, 138, 63, 243, 208, 203]);
fileData4.push.apply(fileData4, [176, 228, 29, 207, 61, 103, 206, 61, 248, 248, 133, 231, 190, 251, 142, 94, 247, 140, 157, 204, 231, 127, 234, 181, 246, 45, 226, 118, 7, 136, 35, 216, 1, 149, 43, 145, 97, 155, 178, 3, 42, 201, 185, 3, 230, 191, 25, 48, 121, 1, 156, 184, 29, 144, 98, 156, 177, 0, 196, 188, 29, 176, 151, 191, 57, 181, 127, 6, 37, 3, 212, 218, 95, 204, 91, 0, 243, 236, 47, 218, 5, 176, 65, 251, 151, 23, 6, 237, 15, 173, 180, 234, 23, 173, 250, 133, 228, 37, 133, 189, 241, 214, 7, 237, 55, 190, 111, 126, 244, 177, 254, 252, 233, 103, 222, 248, 204, 131, 119, 157, 250, 147, 253, 53, 112, 241, 59, 47, 94, 126, 255, 253, 129, 53, 112, 253, 250, 205, 23, 206, 190, 251, 192, 227, 23, 241, 29, 161, 227, 221, 1, 153, 55, 49, 125, 7, 100, 194, 219, 5, 32, 22, 11, 96, 251, 223, 8, 58, 93, 0, 233, 252, 211, 5, 112, 192, 170, 11, 96, 179, 246, 95, 186, 0, 230, 217, 95, 28, 139, 253, 245, 133, 255, 125, 143, 94, 144, 215, 62, 248, 128, 223, 243, 169, 239, 116, 127, 227, 91, 111, 221, 247, 240, 121, 216, 240, 174, 229, 83, 247, 159, 123, 244, 201, 87, 206, 158, 127, 175, 125, 119, 68, 187, 243, 237, 119, 174, 127, 241, 171, 175, 227, 165, 64, 157, 57, 214, 64, 77, 7, 107, 96, 165, 29, 144, 57, 17, 83, 118, 64, 187, 0, 196, 98, 1, 204, 126, 51, 32, 250, 50, 111, 1, 136, 205, 236, 128, 112, 136, 224, 14, 216, 55, 207, 201, 218, 1, 187, 178, 0, 78, 186, 253, 197, 102, 23, 64, 22, 99, 158, 253, 69, 187, 0, 166, 216, 95, 204, 182, 191, 53, 148, 110, 170, 55, 123, 95, 125, 237, 253, 155, 55, 249, 53, 173, 4, 247, 210, 185, 247, 30, 254, 220, 69, 125, 229, 11, 9, 158, 114, 239, 3, 47, 127, 233, 43, 175, 191, 249, 246, 192, 11, 38, 237, 209, 231, 94, 184, 252, 217, 71, 134, 223, 21, 200, 137, 136, 93, 216, 1, 149, 216, 204, 240, 192, 2, 24, 217, 1, 167, 47, 2, 196, 150, 22, 128, 192, 14, 184, 189, 0, 142, 204, 254, 226, 164, 47, 128, 163, 180, 191, 152, 178, 0, 118, 196, 254, 247, 60, 248, 242, 83, 207, 188, 241, 238, 123, 55, 240, 13, 13, 125, 225, 127, 249, 221, 235, 79, 63, 243, 198, 189, 119, 247, 247, 124, 250, 220, 115, 230, 236, 3, 143, 93, 248, 238, 75, 151, 175, 55, 239, 150, 127, 120, 243, 227, 11, 175, 94, 125, 232, 201, 87, 230, 125, 59, 104, 246, 14, 104, 23, 128, 216, 216, 14, 216, 218, 139, 128, 41, 11, 96, 210, 14, 8, 147, 156, 46, 128, 211, 5, 112, 192, 81, 46, 128, 117, 236, 191, 116, 1, 172, 105, 255, 52, 145, 248, 244, 67, 47, 127, 227, 219, 111, 189, 127, 109, 72, 94, 175, 92, 125, 228, 201, 87, 78, 191, 240, 159, 130, 118, 164, 54, 101, 187, 68, 245, 202, 224, 141, 183, 62, 120, 252, 75, 175, 234, 53, 86, 30, 251, 236, 29, 80, 211, 159, 177, 3, 86, 88, 0, 221, 29, 112, 4, 239, 6, 103, 145, 179, 224, 83, 23, 192, 137, 122, 17, 112, 82, 23, 192, 169, 253, 139, 41, 246, 23, 211, 23, 64, 214, 120, 186, 253, 177, 0, 38, 218, 255, 222, 135, 95, 126, 246, 249, 183, 219, 31, 244, 188, 126, 253, 163, 239, 188, 112, 249, 204, 35, 167, 223, 241, 95, 129, 79, 221, 127, 238, 115, 95, 124, 245, 181, 55, 22, 255, 154, 196, 193, 57, 238, 255, 210, 74, 120, 231, 242, 245, 39, 159, 122, 109, 179, 59, 32, 83, 81, 57, 217, 228, 14, 136, 60, 99, 1, 136, 211, 5, 80, 108, 100, 1, 136, 85, 119, 192, 90, 11, 96, 35, 246, 23, 167, 11, 160, 152, 178, 0, 54, 101, 127, 49, 182, 0, 82, 25, 147, 237, 127, 254, 91, 207, 191, 211, 218, 95, 175, 6, 190, 241, 173, 183, 238, 194, 159, 242, 92, 159, 123, 206, 156, 125, 248, 137, 139, 231, 95, 185, 170, 215, 79, 7, 167, 185, 255, 75, 59, 224, 237, 203, 215, 159, 120, 234, 210, 210, 29, 208, 46, 0, 49, 125, 7, 100, 126, 166, 47, 128, 118, 7, 204, 123, 17, 176, 67, 239, 4, 132, 79, 4, 118, 192, 29, 178, 0, 102, 216, 95, 220, 145, 11, 32, 227, 178, 251, 246, 23, 243, 22, 192, 60, 251, 139, 118, 1, 44, 190, 243, 243, 220, 91, 215, 154, 31, 248, 121, 255, 218, 135, 95, 251, 230, 155, 119, 249, 15, 122, 174, 201, 131, 143, 95, 56, 119, 225, 10, 254, 133, 212, 143, 62, 254, 248, 205, 183, 63, 120, 236, 139, 175, 126, 114, 245, 29, 208, 46, 0, 177, 217, 29, 144, 137, 173, 12, 103, 170, 177, 0, 196, 224, 2, 88, 236, 128, 104, 208, 113, 46, 128, 109, 188, 8, 216, 55, 94, 187, 3, 210, 147, 167, 11, 224, 208, 9, 98, 1, 108, 201, 254, 34, 227, 178, 251, 11, 96, 123, 246, 23, 237, 2, 104, 237, 127, 207, 3, 231, 158, 122, 230, 141, 171, 239, 127, 120, 32, 167, 91, 191, 78, 237, 191, 17, 238, 217, 223, 1, 23, 94, 185, 138, 31, 169, 250, 232, 163, 143, 47, 189, 254, 254, 67, 79, 92, 196, 127, 103, 102, 222, 14, 56, 202, 5, 32, 176, 3, 218, 23, 1, 119, 254, 2, 216, 232, 139, 128, 116, 242, 201, 91, 0, 51, 236, 47, 78, 23, 64, 177, 189, 5, 48, 197, 254, 159, 60, 179, 248, 137, 207, 183, 47, 95, 199, 219, 149, 31, 92, 191, 249, 173, 231, 223, 249, 236, 195, 167, 246, 223, 0, 247, 156, 57, 251, 200, 147, 175, 188, 246, 250, 53, 252, 120, 232, 141, 15, 63, 122, 241, 220, 187, 159, 121, 228, 124, 78, 164, 93, 0, 98, 215, 118, 0, 22, 128, 192, 2, 16, 199, 184, 3, 210, 24, 39, 98, 1, 172, 186, 3, 182, 187, 0, 242, 114, 151, 218, 95, 156, 184, 5, 144, 129, 187, 219, 236, 143, 5, 112, 223, 99, 23, 94, 190, 120, 5, 223, 164, 254, 240, 195, 143, 206, 158, 191, 114, 255, 163, 23, 32, 178, 83, 102, 243, 169, 251, 207, 61, 249, 229, 75, 151, 223, 229, 162, 125, 255, 218, 205, 175, 124, 227, 205, 79, 61, 248, 114, 14, 165, 221, 1, 167, 11, 32, 75, 157, 101, 31, 92, 0, 43, 239, 128, 147, 182, 0, 132, 119, 192, 252, 5, 48, 104, 255, 147, 181, 0, 102, 216, 255, 46, 95, 0, 41, 26, 121, 231, 107, 207, 190, 137, 111, 253, 127, 92, 223, 158, 254, 252, 43, 119, 195, 63, 235, 118, 148, 124, 230, 161, 151, 191, 254, 45, 190, 209, 162, 211, 126, 235, 237, 15, 30, 126, 242, 149, 221, 255, 70, 208, 170, 111, 5, 159, 164, 5, 48, 235, 69, 192, 9, 88, 0, 249, 16, 176, 191, 216, 193, 5, 144, 67, 90, 106, 127, 113, 162, 23, 192, 241, 218, 95, 198, 145, 119, 228, 122, 57, 232, 192, 70, 251, 191, 244, 53, 233, 87, 191, 241, 230, 233, 255, 218, 107, 27, 60, 240, 216, 133, 243, 175, 240, 245, 214, 245, 27, 31, 125, 231, 197, 203, 247, 62, 188, 228, 27, 65, 199, 190, 0, 22, 59, 32, 226, 141, 5, 32, 176, 0, 196, 210, 29, 48, 246, 239, 131, 102, 103, 119, 118, 1, 136, 165, 59, 224, 136, 22, 192, 160, 253, 119, 121, 1, 12, 218, 255, 164, 44, 128, 141, 216, 95, 28, 239, 2, 248, 244, 67, 47, 127, 243, 59, 252, 169, 255, 155, 55, 63, 190, 248, 234, 85, 121, 10, 230, 58, 101, 35, 124, 234, 254, 115, 95, 120, 250, 181, 43, 87, 15, 189, 223, 190, 248, 95, 6, 188, 123, 253, 209, 47, 28, 122, 17, 80, 243, 106, 119, 64, 78, 249, 14, 88, 0, 98, 112, 1, 76, 223, 1, 59, 190, 0, 4, 118, 192, 221, 178, 0, 242, 224, 96, 127, 177, 179, 11, 96, 169, 253, 197, 29, 176, 0, 62, 161, 175, 70, 63, 119, 241, 245, 55, 249, 182, 228, 251, 215, 62, 252, 169, 103, 222, 184, 247, 78, 252, 207, 185, 236, 8, 247, 63, 122, 190, 253, 169, 208, 122, 203, 253, 211, 15, 239, 214, 59, 1, 153, 222, 157, 93, 0, 98, 112, 7, 164, 55, 118, 106, 1, 8, 236, 128, 59, 97, 1, 228, 161, 212, 49, 229, 193, 237, 200, 2, 88, 106, 127, 177, 227, 11, 96, 35, 246, 23, 139, 31, 253, 252, 218, 235, 248, 209, 79, 45, 131, 215, 223, 184, 246, 224, 227, 23, 225, 172, 83, 54, 200, 167, 31, 56, 247, 244, 215, 222, 120, 191, 57, 249, 215, 222, 184, 118, 230, 241, 11, 57, 163, 99, 95, 0, 171, 238, 128, 157, 90, 0, 3, 59, 32, 220, 178, 83, 11, 64, 96, 7, 236, 250, 2, 200, 27, 174, 35, 200, 67, 217, 145, 5, 0, 251, 139, 29, 95, 0, 75, 237, 47, 54, 181, 0, 238, 125, 228, 252, 243, 223, 187, 140, 127, 187, 248, 250, 245, 143, 158, 123, 225, 157, 211, 127, 228, 121, 219, 60, 244, 185, 139, 111, 53, 111, 189, 92, 185, 250, 225, 147, 67, 255, 219, 224, 156, 227, 142, 47, 0, 129, 29, 176, 91, 11, 160, 251, 34, 96, 167, 22, 128, 192, 14, 216, 149, 5, 80, 183, 151, 55, 188, 83, 11, 32, 35, 178, 83, 11, 96, 169, 253, 197, 81, 46, 128, 51, 143, 93, 88, 252, 107, 207, 135, 191, 255, 163, 23, 4, 122, 89, 112, 34, 254, 115, 190, 247, 156, 57, 123, 239, 3, 139, 255, 32, 215, 231, 190, 248, 234, 19, 95, 190, 244, 216, 23, 94, 57, 243, 232, 133, 147, 242, 31, 160, 63, 243, 232, 249, 151, 94, 126, 15, 223, 5, 186, 246, 193, 205, 175, 127, 251, 173, 79, 63, 180, 238, 119, 129, 118, 106, 1, 8, 236, 128, 157, 93, 0, 39, 226, 39, 65, 211, 240, 183, 23, 128, 213, 95, 210, 79, 245, 215, 163, 20, 245, 184, 245, 76, 69, 61, 119, 93, 77, 81, 215, 87, 87, 92, 88, 250, 69, 221, 100, 221, 118, 81, 7, 81, 71, 83, 212, 97, 213, 241, 21, 117, 160, 37, 253, 84, 127, 205, 160, 168, 169, 212, 156, 138, 154, 92, 205, 178, 168, 233, 214, 188, 23, 222, 223, 87, 127, 198, 162, 130, 82, 84, 116, 42, 76, 69, 197, 171, 2, 87, 84, 4, 43, 148, 69, 74, 191, 248, 59, 251, 246, 255, 187, 183, 188, 191, 80, 255, 190, 253, 255, 222, 45, 239, 47, 212, 191, 111, 255, 191, 127, 203, 251, 11, 245, 239, 219, 255, 31, 88, 253, 251, 246, 255, 135, 70, 234, 223, 183, 255, 63, 50, 82, 255, 190, 253, 171, 174, 69, 21, 184, 42, 109, 210, 251, 69, 137, 160, 212, 80, 148, 44, 74, 31, 69, 9, 229, 19, 197, 153, 179, 15, 61, 113, 241, 242, 187, 215, 15, 220, 115, 235, 215, 123, 87, 110, 236, 254, 79, 127, 222, 251, 224, 203, 95, 252, 169, 215, 206, 191, 114, 85, 198, 252, 232, 163, 197, 151, 209, 197, 205, 155, 31, 191, 251, 222, 141, 239, 190, 116, 89, 183, 176, 227, 155, 224, 179, 15, 189, 252, 108, 243, 246, 251, 141, 27, 31, 233, 226, 63, 179, 255, 31, 12, 40, 114, 7, 20, 185, 3, 138, 220, 1, 69, 174, 129, 34, 215, 64, 177, 88, 3, 251, 59, 192, 241, 91, 172, 129, 253, 29, 224, 136, 46, 214, 192, 126, 116, 15, 168, 53, 112, 43, 222, 11, 106, 13, 220, 170, 192, 130, 90, 3, 183, 106, 178, 160, 214, 64, 180, 233, 111, 31, 222, 4, 34, 215, 64, 145, 107, 160, 200, 53, 80, 100, 235, 115, 13, 20, 185, 6, 138, 92, 3, 69, 174, 129, 162, 164, 100, 71, 229, 26, 40, 114, 13, 20, 185, 6, 138, 92, 3, 69, 174, 129, 34, 215, 64, 145, 107, 160, 200, 53, 80, 120, 13, 20, 94, 3, 123, 207, 60, 127, 229, 235, 224, 187, 87, 190, 1, 94, 184, 242, 77, 240, 226, 149, 103, 193, 247, 174, 124, 235, 48, 223, 126, 233, 48, 103, 175, 60, 7, 206, 93, 249, 14, 120, 249, 202, 243, 224, 252, 149, 239, 54, 188, 208, 240, 98, 195, 247, 26, 94, 58, 204, 217, 109, 114, 110, 35, 92, 216, 81, 244, 229, 63, 190, 2, 173, 31, 255, 127, 232, 115, 59, 253, 243, 63, 15, 60, 118, 225, 236, 249, 247, 110, 28, 190, 242, 252, 165, 77, 160, 215, 49, 95, 223, 237, 127, 189, 78, 59, 236, 43, 95, 127, 3, 255, 230, 182, 118, 217, 149, 171, 31, 94, 120, 245, 42, 38, 181, 43, 32, 216, 115, 65, 203, 54, 8, 228, 32, 96, 15, 1, 195, 8, 88, 72, 192, 84, 210, 23, 132, 38, 197, 65, 122, 210, 32, 196, 40, 85, 66, 158, 223, 18, 135, 237, 42, 223, 194, 192, 114, 50, 44, 45, 111, 195, 228, 114, 123, 170, 94, 242, 223, 59, 72, 208, 233, 175, 211, 95, 107, 252, 210, 87, 211, 151, 94, 127, 255, 129, 199, 119, 119, 1, 232, 11, 231, 111, 62, 247, 118, 251, 159, 168, 108, 127, 233, 165, 204, 147, 95, 190, 180, 179, 175, 3, 62, 253, 192, 185, 47, 127, 149, 239, 192, 159, 254, 58, 253, 53, 239, 215, 233, 2, 56, 253, 181, 129, 95, 90, 0, 175, 238, 246, 2, 184, 239, 145, 243, 223, 125, 233, 221, 27, 205, 127, 116, 183, 253, 181, 255, 102, 198, 27, 59, 251, 102, 134, 46, 236, 75, 95, 121, 237, 116, 1, 156, 254, 218, 200, 175, 189, 247, 174, 124, 120, 215, 114, 101, 10, 87, 79, 33, 215, 22, 255, 157, 146, 67, 239, 0, 47, 126, 6, 244, 205, 107, 15, 238, 240, 2, 88, 252, 115, 58, 79, 13, 252, 115, 58, 248, 181, 248, 223, 178, 93, 186, 186, 203, 63, 204, 122, 111, 253, 36, 232, 181, 195, 255, 115, 176, 253, 127, 130, 73, 91, 1, 147, 58, 133, 117, 30, 2, 90, 184, 171, 216, 251, 189, 251, 111, 255, 254, 190, 253, 55, 126, 127, 191, 249, 139, 103, 255, 192, 254, 27, 191, 127, 208, 252, 165, 179, 127, 40, 126, 230, 231, 15, 239, 191, 253, 251, 71, 226, 103, 126, 254, 232, 254, 219, 191, 127, 44, 127, 230, 231, 240, 15, 125, 254, 201, 99, 249, 153, 159, 248, 177, 159, 191, 188, 255, 14, 112, 189, 247, 187, 120, 251, 119, 255, 29, 224, 191, 18, 239, 253, 254, 213, 252, 169, 255, 253, 119, 128, 255, 90, 252, 216, 207, 95, 223, 127, 7, 248, 111, 152, 31, 59, 251, 55, 247, 223, 1, 254, 91, 230, 199, 23, 111, 82, 29, 188, 241, 123, 248, 237, 223, 197, 27, 191, 183, 88, 188, 253, 251, 137, 253, 55, 126, 111, 177, 120, 251, 247, 39, 246, 223, 248, 61, 252, 246, 239, 226, 189, 223, 124, 7, 184, 222, 251, 205, 119, 128, 235, 189, 223, 124, 7, 248, 204, 217, 127, 28, 252, 147, 224, 159, 238, 243, 99, 193, 63, 219, 231, 199, 131, 127, 190, 207, 191, 56, 204, 191, 220, 231, 19, 183, 248, 228, 253, 231, 30, 253, 194, 171, 239, 93, 185, 113, 224, 158, 91, 191, 46, 191, 119, 253, 145, 39, 94, 129, 173, 118, 10, 237, 128, 207, 125, 241, 213, 11, 175, 92, 29, 124, 29, 160, 197, 32, 171, 62, 255, 226, 229, 7, 30, 187, 176, 203, 111, 101, 127, 102, 255, 191, 187, 137, 127, 20, 232, 198, 135, 31, 125, 239, 220, 123, 159, 125, 244, 130, 199, 36, 106, 112, 152, 102, 141, 56, 135, 94, 49, 200, 96, 84, 84, 156, 156, 76, 148, 2, 230, 247, 129, 139, 122, 55, 184, 222, 7, 46, 234, 221, 224, 122, 31, 184, 200, 247, 129, 77, 197, 62, 139, 80, 213, 200, 178, 228, 91, 193, 197, 237, 183, 130, 247, 75, 183, 120, 43, 184, 126, 34, 232, 86, 49, 23, 111, 5, 223, 234, 236, 130, 122, 43, 248, 86, 175, 23, 196, 187, 193, 170, 255, 226, 173, 224, 248, 161, 32, 249, 97, 241, 86, 240, 45, 105, 44, 56, 252, 86, 112, 145, 111, 5, 23, 249, 86, 176, 200, 183, 130, 139, 124, 43, 184, 200, 183, 130, 139, 131, 119, 131, 111, 57, 115, 65, 189, 27, 124, 75, 170, 11, 234, 221, 224, 91, 226, 93, 80, 239, 6, 223, 146, 243, 130, 122, 55, 248, 150, 189, 23, 239, 9, 215, 187, 193, 251, 122, 95, 188, 33, 92, 239, 6, 255, 249, 187, 254, 199, 64, 111, 15, 254, 244, 199, 64, 247, 169, 159, 15, 169, 159, 24, 41, 234, 103, 72, 234, 167, 74, 138, 251, 31, 191, 240, 198, 91, 215, 240, 34, 64, 95, 109, 125, 225, 233, 215, 118, 255, 135, 41, 117, 133, 15, 63, 113, 241, 171, 223, 120, 243, 133, 151, 222, 61, 255, 202, 213, 139, 175, 94, 125, 249, 194, 149, 231, 94, 120, 231, 75, 95, 121, 253, 204, 35, 231, 119, 255, 191, 90, 124, 223, 35, 231, 117, 229, 216, 97, 155, 250, 31, 3, 231, 79, 254, 20, 149, 162, 204, 85, 37, 45, 179, 87, 105, 204, 124, 86, 98, 29, 96, 81, 145, 206, 144, 87, 236, 179, 8, 85, 141, 44, 75, 213, 39, 11, 229, 159, 252, 41, 170, 131, 217, 202, 234, 105, 54, 183, 186, 156, 237, 206, 214, 231, 79, 254, 20, 51, 116, 47, 96, 252, 233, 186, 79, 31, 150, 33, 45, 76, 81, 10, 77, 169, 150, 102, 83, 188, 165, 226, 148, 115, 233, 58, 5, 238, 159, 252, 41, 202, 249, 71, 253, 191, 3, 16, 187, 182, 0, 198, 118, 192, 78, 45, 0, 129, 29, 112, 188, 11, 224, 179, 143, 158, 255, 222, 203, 252, 113, 154, 15, 62, 184, 249, 205, 111, 191, 125, 178, 254, 235, 143, 247, 236, 255, 111, 2, 240, 135, 59, 206, 131, 143, 95, 184, 244, 250, 251, 31, 53, 255, 35, 140, 47, 125, 245, 245, 159, 124, 160, 247, 31, 8, 91, 106, 127, 177, 131, 11, 32, 219, 84, 253, 202, 198, 237, 200, 2, 128, 253, 197, 78, 45, 128, 242, 121, 26, 254, 56, 23, 64, 238, 128, 157, 93, 0, 2, 59, 96, 167, 22, 128, 152, 184, 3, 178, 204, 155, 90, 0, 131, 255, 16, 244, 205, 155, 31, 95, 120, 229, 244, 95, 130, 219, 46, 122, 249, 242, 249, 167, 46, 233, 197, 214, 193, 161, 239, 255, 210, 43, 177, 183, 222, 185, 190, 248, 175, 131, 197, 140, 96, 127, 177, 227, 11, 96, 208, 254, 187, 185, 0, 96, 127, 177, 131, 11, 32, 237, 189, 187, 11, 64, 96, 7, 236, 236, 2, 16, 131, 59, 32, 227, 184, 131, 11, 96, 27, 59, 224, 19, 103, 206, 62, 252, 249, 87, 222, 121, 247, 58, 222, 79, 93, 252, 0, 229, 83, 187, 251, 3, 148, 119, 0, 247, 61, 124, 254, 249, 23, 249, 143, 112, 220, 184, 241, 209, 11, 103, 151, 255, 167, 193, 142, 113, 1, 44, 181, 191, 216, 217, 5, 0, 251, 139, 29, 92, 0, 105, 230, 114, 117, 218, 251, 36, 45, 0, 49, 184, 3, 242, 112, 119, 106, 1, 76, 217, 1, 25, 235, 59, 96, 1, 8, 233, 70, 210, 193, 119, 162, 245, 219, 23, 207, 190, 123, 230, 145, 211, 127, 14, 104, 43, 220, 115, 230, 236, 99, 218, 187, 205, 127, 128, 243, 234, 251, 31, 126, 225, 167, 94, 251, 201, 77, 252, 7, 226, 7, 23, 64, 38, 106, 134, 253, 197, 142, 47, 128, 116, 2, 236, 47, 118, 112, 1, 164, 117, 203, 195, 105, 230, 149, 23, 64, 187, 3, 118, 112, 1, 244, 119, 192, 142, 47, 128, 245, 119, 192, 174, 45, 128, 159, 216, 255, 169, 202, 246, 103, 129, 244, 39, 159, 127, 234, 4, 188, 21, 124, 18, 25, 252, 242, 255, 195, 155, 31, 191, 124, 241, 202, 125, 143, 158, 236, 127, 10, 84, 108, 105, 1, 44, 181, 255, 46, 47, 128, 65, 251, 31, 197, 2, 16, 131, 59, 32, 159, 102, 167, 22, 128, 88, 186, 3, 78, 244, 2, 16, 187, 182, 3, 244, 34, 160, 253, 55, 65, 229, 163, 243, 175, 92, 57, 125, 39, 96, 227, 104, 167, 126, 225, 167, 94, 27, 222, 184, 79, 191, 214, 254, 59, 160, 119, 222, 2, 152, 97, 127, 177, 227, 11, 32, 77, 8, 251, 139, 157, 91, 0, 253, 29, 176, 227, 11, 64, 204, 216, 1, 25, 166, 211, 5, 144, 150, 249, 228, 254, 59, 1, 111, 190, 253, 1, 126, 30, 116, 241, 227, 64, 207, 189, 253, 217, 19, 245, 227, 64, 59, 206, 61, 251, 255, 10, 116, 251, 47, 176, 222, 205, 255, 61, 72, 177, 179, 11, 96, 162, 253, 239, 180, 5, 32, 150, 238, 128, 19, 183, 0, 142, 119, 7, 100, 145, 198, 22, 192, 49, 238, 128, 123, 30, 56, 247, 244, 51, 111, 180, 255, 44, 193, 149, 171, 55, 190, 252, 213, 147, 241, 79, 67, 159, 8, 206, 60, 114, 254, 197, 230, 29, 151, 197, 191, 191, 244, 198, 181, 7, 135, 126, 248, 231, 116, 1, 152, 141, 44, 128, 180, 202, 82, 251, 139, 29, 95, 0, 182, 255, 49, 44, 0, 49, 99, 7, 220, 181, 11, 96, 226, 14, 200, 78, 110, 111, 1, 136, 118, 7, 232, 203, 207, 231, 94, 120, 231, 250, 245, 67, 110, 250, 248, 227, 143, 223, 190, 124, 253, 137, 29, 254, 39, 213, 78, 16, 159, 125, 248, 229, 111, 61, 207, 127, 255, 89, 47, 186, 46, 191, 119, 227, 201, 167, 142, 250, 155, 63, 187, 188, 0, 182, 100, 255, 147, 181, 0, 150, 218, 95, 156, 188, 5, 32, 54, 184, 3, 114, 228, 119, 234, 2, 16, 217, 222, 77, 237, 128, 118, 1, 232, 203, 207, 51, 143, 93, 56, 215, 252, 135, 106, 245, 245, 233, 27, 111, 93, 123, 252, 139, 175, 126, 234, 204, 233, 14, 152, 207, 224, 63, 252, 160, 95, 122, 213, 245, 149, 175, 191, 121, 207, 131, 43, 255, 79, 127, 197, 58, 11, 32, 147, 182, 83, 246, 23, 119, 228, 2, 72, 151, 46, 181, 191, 152, 185, 0, 166, 236, 128, 59, 102, 1, 220, 37, 59, 32, 219, 59, 101, 1, 136, 153, 59, 224, 204, 226, 191, 17, 127, 241, 213, 171, 55, 111, 30, 250, 14, 245, 254, 14, 248, 224, 137, 47, 189, 122, 250, 58, 96, 30, 245, 79, 88, 183, 246, 191, 118, 237, 230, 215, 191, 245, 214, 167, 150, 253, 247, 191, 68, 187, 0, 54, 101, 127, 113, 186, 0, 138, 193, 5, 144, 238, 154, 109, 255, 221, 90, 0, 98, 35, 59, 224, 116, 1, 20, 155, 93, 0, 27, 217, 1, 237, 2, 16, 19, 119, 192, 67, 79, 92, 124, 229, 181, 247, 177, 3, 22, 223, 169, 120, 247, 250, 151, 190, 242, 218, 233, 251, 1, 171, 114, 230, 145, 253, 31, 250, 60, 252, 189, 53, 253, 210, 62, 24, 251, 175, 63, 98, 1, 204, 179, 191, 152, 178, 0, 78, 237, 95, 12, 218, 255, 116, 1, 28, 186, 110, 44, 0, 177, 83, 59, 96, 213, 5, 32, 118, 115, 7, 100, 63, 199, 22, 192, 140, 29, 80, 30, 153, 178, 3, 30, 252, 220, 197, 243, 23, 175, 226, 123, 65, 250, 245, 254, 251, 31, 126, 227, 219, 111, 157, 254, 92, 208, 68, 238, 57, 115, 246, 225, 39, 46, 158, 127, 133, 223, 85, 211, 175, 171, 239, 127, 248, 204, 179, 195, 95, 251, 207, 176, 191, 104, 23, 192, 60, 251, 139, 211, 5, 80, 236, 212, 2, 232, 219, 95, 156, 46, 128, 5, 171, 238, 128, 227, 93, 0, 98, 157, 29, 144, 109, 23, 155, 220, 1, 247, 157, 189, 239, 209, 11, 237, 207, 171, 232, 215, 141, 15, 63, 58, 119, 254, 138, 188, 118, 226, 254, 241, 181, 35, 230, 222, 7, 206, 125, 249, 43, 175, 191, 253, 206, 7, 248, 231, 222, 244, 90, 234, 221, 247, 110, 60, 245, 181, 215, 239, 121, 96, 254, 119, 126, 68, 14, 122, 186, 253, 151, 46, 128, 163, 180, 191, 56, 209, 11, 224, 200, 236, 47, 86, 88, 0, 98, 246, 14, 200, 203, 58, 93, 0, 102, 123, 59, 96, 202, 2, 16, 83, 118, 64, 187, 0, 68, 201, 34, 13, 50, 113, 7, 8, 125, 125, 250, 204, 179, 111, 234, 107, 85, 252, 139, 5, 31, 125, 252, 241, 59, 151, 175, 63, 253, 181, 55, 238, 125, 240, 244, 165, 192, 0, 90, 141, 15, 60, 118, 225, 187, 223, 187, 140, 31, 248, 209, 175, 155, 31, 125, 252, 218, 27, 215, 30, 255, 210, 171, 75, 127, 230, 71, 180, 246, 23, 211, 237, 63, 184, 0, 50, 84, 243, 236, 47, 54, 181, 0, 78, 180, 253, 197, 29, 184, 0, 78, 119, 128, 104, 119, 192, 58, 11, 96, 35, 59, 160, 218, 187, 169, 29, 32, 198, 118, 0, 214, 128, 60, 245, 196, 151, 47, 189, 254, 230, 226, 191, 28, 118, 224, 176, 91, 191, 22, 47, 5, 46, 92, 121, 236, 243, 175, 156, 190, 51, 156, 124, 230, 193, 151, 127, 234, 153, 55, 222, 126, 231, 58, 190, 240, 215, 175, 235, 215, 111, 126, 247, 165, 203, 103, 30, 91, 252, 199, 94, 242, 144, 39, 218, 191, 230, 184, 212, 254, 98, 158, 253, 197, 148, 5, 176, 89, 251, 159, 46, 0, 113, 186, 0, 22, 236, 206, 2, 16, 155, 221, 1, 217, 159, 118, 1, 136, 233, 59, 32, 91, 45, 54, 187, 3, 68, 187, 3, 100, 43, 57, 235, 249, 161, 175, 103, 245, 202, 224, 253, 107, 31, 62, 247, 194, 59, 59, 254, 223, 222, 58, 26, 62, 253, 192, 226, 95, 85, 122, 229, 210, 251, 31, 30, 126, 255, 92, 191, 180, 12, 180, 18, 190, 252, 213, 215, 7, 127, 220, 19, 246, 175, 185, 28, 129, 253, 177, 0, 230, 217, 95, 172, 179, 0, 178, 116, 167, 246, 47, 102, 216, 95, 236, 253, 206, 63, 119, 232, 247, 91, 218, 1, 235, 44, 128, 19, 180, 3, 230, 45, 0, 49, 111, 7, 180, 11, 64, 172, 185, 3, 176, 6, 214, 217, 1, 226, 39, 31, 56, 247, 196, 83, 151, 46, 189, 113, 13, 63, 29, 164, 95, 31, 127, 252, 241, 123, 87, 110, 60, 251, 220, 219, 247, 63, 122, 151, 174, 1, 169, 255, 137, 47, 189, 250, 242, 133, 43, 237, 91, 38, 250, 245, 193, 7, 55, 181, 62, 103, 127, 225, 47, 90, 245, 139, 217, 246, 23, 243, 236, 47, 218, 5, 176, 89, 251, 159, 46, 0, 177, 211, 11, 64, 172, 179, 3, 242, 76, 119, 103, 1, 136, 77, 237, 128, 118, 1, 136, 157, 218, 1, 88, 3, 101, 156, 41, 107, 224, 19, 247, 157, 189, 247, 161, 243, 95, 251, 230, 155, 151, 223, 189, 129, 127, 53, 72, 191, 244, 7, 87, 174, 46, 94, 13, 60, 244, 185, 139, 119, 207, 55, 133, 238, 125, 224, 220, 23, 158, 190, 116, 225, 213, 171, 248, 175, 170, 213, 175, 15, 63, 252, 72, 127, 213, 126, 199, 95, 236, 184, 253, 69, 187, 0, 230, 217, 95, 76, 95, 0, 89, 201, 163, 180, 255, 233, 2, 56, 96, 215, 22, 128, 56, 154, 29, 48, 101, 1, 136, 121, 59, 160, 93, 0, 98, 202, 14, 168, 174, 206, 219, 1, 162, 221, 1, 162, 221, 1, 98, 226, 14, 16, 250, 50, 246, 190, 71, 47, 60, 251, 157, 183, 165, 251, 102, 11, 44, 214, 128, 190, 224, 61, 123, 254, 189, 39, 191, 124, 73, 114, 132, 46, 239, 24, 244, 66, 231, 204, 35, 139, 93, 248, 198, 91, 31, 180, 47, 137, 244, 75, 127, 120, 233, 245, 107, 95, 248, 169, 215, 238, 57, 252, 31, 119, 20, 117, 170, 176, 127, 157, 255, 108, 251, 215, 244, 143, 221, 254, 162, 93, 0, 235, 216, 255, 200, 22, 64, 90, 232, 36, 218, 95, 242, 95, 44, 128, 211, 23, 1, 166, 93, 0, 34, 195, 52, 111, 7, 140, 45, 128, 25, 59, 160, 58, 182, 107, 59, 64, 164, 152, 196, 224, 26, 248, 228, 153, 179, 247, 63, 182, 88, 3, 239, 93, 25, 120, 53, 160, 95, 50, 224, 91, 239, 124, 240, 236, 115, 111, 223, 97, 47, 8, 238, 125, 240, 229, 207, 63, 117, 233, 123, 231, 222, 123, 255, 154, 246, 223, 192, 141, 235, 171, 254, 87, 95, 123, 255, 139, 95, 225, 183, 251, 197, 160, 250, 69, 71, 253, 176, 127, 77, 115, 227, 246, 199, 2, 152, 98, 127, 209, 46, 128, 233, 246, 159, 184, 0, 178, 176, 89, 228, 77, 217, 95, 156, 46, 128, 93, 92, 0, 91, 218, 1, 153, 167, 177, 5, 48, 123, 7, 100, 19, 196, 6, 119, 128, 24, 219, 1, 88, 3, 118, 65, 10, 194, 214, 72, 149, 216, 47, 240, 206, 224, 14, 16, 99, 107, 224, 179, 143, 156, 127, 230, 217, 183, 222, 122, 123, 248, 11, 97, 253, 209, 141, 27, 31, 233, 107, 225, 175, 63, 251, 214, 201, 221, 4, 250, 122, 255, 51, 15, 190, 172, 215, 52, 223, 253, 222, 229, 203, 239, 221, 104, 127, 188, 71, 191, 180, 11, 174, 95, 191, 121, 238, 194, 149, 39, 158, 186, 132, 255, 164, 187, 232, 171, 127, 204, 254, 57, 47, 209, 170, 95, 180, 234, 23, 219, 176, 63, 22, 192, 116, 251, 15, 46, 128, 172, 216, 60, 251, 111, 100, 1, 220, 49, 246, 31, 94, 0, 226, 228, 238, 128, 156, 211, 188, 5, 32, 230, 237, 128, 76, 103, 187, 0, 196, 148, 29, 80, 13, 153, 184, 3, 178, 129, 162, 106, 153, 93, 21, 235, 236, 0, 209, 238, 0, 49, 184, 6, 108, 37, 216, 74, 12, 174, 129, 79, 236, 255, 199, 229, 63, 255, 244, 107, 47, 95, 188, 242, 193, 245, 155, 67, 95, 22, 47, 252, 168, 47, 141, 223, 124, 251, 131, 231, 94, 120, 231, 137, 47, 95, 250, 204, 67, 47, 239, 254, 219, 197, 90, 87, 247, 63, 122, 225, 233, 175, 189, 126, 238, 252, 149, 43, 87, 63, 28, 244, 190, 126, 233, 207, 47, 191, 119, 253, 219, 223, 125, 231, 193, 39, 46, 142, 125, 175, 191, 85, 191, 232, 168, 95, 96, 82, 199, 101, 127, 49, 207, 254, 98, 158, 253, 197, 148, 5, 144, 53, 223, 148, 253, 197, 9, 94, 0, 191, 227, 207, 30, 252, 127, 249, 119, 39, 101, 1, 108, 105, 7, 244, 23, 128, 152, 183, 3, 42, 217, 19, 119, 64, 54, 71, 140, 237, 0, 172, 129, 137, 59, 64, 180, 59, 64, 172, 185, 3, 196, 170, 107, 64, 124, 242, 204, 185, 251, 31, 187, 160, 23, 4, 175, 191, 121, 173, 253, 199, 15, 252, 235, 227, 143, 63, 254, 224, 131, 155, 175, 190, 254, 254, 179, 223, 121, 91, 95, 86, 127, 246, 225, 243, 247, 236, 198, 191, 51, 170, 157, 244, 233, 251, 207, 61, 248, 248, 66, 250, 47, 158, 125, 247, 237, 119, 174, 235, 46, 6, 247, 153, 126, 233, 46, 174, 93, 251, 240, 236, 249, 247, 62, 255, 83, 175, 105, 255, 229, 63, 229, 95, 44, 85, 191, 192, 153, 119, 212, 15, 251, 215, 124, 97, 255, 74, 2, 236, 95, 153, 25, 180, 127, 230, 77, 204, 182, 191, 104, 23, 192, 20, 251, 139, 118, 1, 172, 111, 127, 49, 111, 1, 236, 130, 253, 119, 98, 1, 136, 163, 223, 1, 57, 137, 41, 11, 64, 172, 191, 3, 218, 5, 32, 166, 239, 128, 76, 188, 216, 193, 29, 32, 82, 28, 98, 179, 107, 64, 64, 124, 66, 95, 8, 63, 244, 228, 43, 223, 124, 238, 237, 55, 222, 250, 160, 227, 80, 253, 210, 95, 221, 248, 240, 163, 119, 46, 95, 151, 73, 191, 254, 173, 183, 62, 255, 212, 165, 7, 30, 187, 32, 11, 31, 193, 235, 3, 61, 133, 22, 207, 189, 15, 190, 252, 240, 19, 23, 191, 252, 213, 215, 245, 37, 252, 43, 151, 222, 215, 87, 250, 55, 123, 215, 187, 240, 254, 251, 215, 110, 234, 181, 206, 151, 191, 246, 250, 103, 30, 62, 255, 201, 195, 63, 217, 89, 248, 100, 112, 98, 194, 231, 137, 115, 246, 249, 99, 46, 173, 250, 69, 171, 126, 209, 170, 95, 180, 234, 23, 199, 104, 127, 44, 128, 85, 237, 47, 166, 44, 128, 77, 217, 95, 28, 253, 2, 72, 51, 79, 183, 191, 228, 191, 88, 0, 39, 226, 69, 128, 216, 212, 14, 152, 178, 0, 196, 170, 59, 160, 114, 121, 196, 59, 64, 140, 237, 0, 172, 129, 106, 53, 214, 64, 245, 127, 108, 13, 192, 32, 131, 59, 64, 88, 67, 208, 147, 181, 5, 157, 21, 99, 107, 64, 104, 19, 220, 255, 248, 197, 175, 124, 227, 205, 11, 175, 92, 125, 255, 218, 232, 119, 81, 252, 75, 234, 213, 199, 92, 251, 224, 166, 54, 199, 185, 11, 87, 158, 251, 238, 59, 95, 253, 198, 155, 159, 127, 250, 210, 35, 79, 92, 188, 239, 145, 243, 159, 90, 44, 134, 197, 110, 184, 77, 163, 245, 226, 208, 199, 156, 57, 251, 169, 125, 209, 235, 213, 201, 227, 95, 120, 85, 174, 215, 166, 121, 225, 165, 119, 165, 251, 203, 239, 222, 184, 177, 120, 15, 91, 191, 14, 46, 96, 240, 151, 254, 242, 230, 205, 197, 127, 24, 231, 249, 239, 93, 126, 242, 169, 75, 247, 62, 244, 114, 223, 251, 2, 71, 36, 124, 134, 56, 91, 159, 57, 102, 81, 51, 58, 46, 251, 87, 62, 55, 101, 127, 49, 207, 254, 34, 107, 187, 142, 253, 103, 44, 128, 163, 180, 191, 216, 173, 5, 32, 182, 183, 3, 166, 47, 128, 141, 236, 128, 118, 1, 136, 12, 217, 216, 14, 200, 188, 138, 99, 217, 1, 162, 221, 1, 162, 221, 1, 162, 179, 3, 38, 174, 1, 251, 72, 64, 85, 86, 24, 212, 86, 216, 125, 208, 98, 241, 9, 89, 248, 193, 151, 31, 253, 194, 43, 95, 255, 246, 91, 23, 95, 189, 122, 245, 253, 229, 203, 192, 191, 100, 231, 90, 12, 122, 49, 161, 175, 190, 223, 125, 239, 198, 155, 111, 127, 240, 218, 27, 215, 94, 185, 116, 245, 252, 43, 87, 180, 39, 206, 158, 191, 242, 189, 115, 239, 189, 120, 246, 221, 151, 94, 126, 239, 220, 249, 43, 47, 95, 184, 162, 167, 120, 245, 181, 247, 95, 127, 243, 154, 172, 253, 222, 213, 15, 63, 184, 126, 83, 159, 94, 143, 211, 119, 189, 127, 233, 195, 244, 116, 250, 116, 61, 242, 83, 207, 188, 126, 230, 241, 11, 237, 247, 247, 11, 223, 184, 192, 153, 8, 31, 26, 14, 83, 248, 156, 49, 130, 25, 234, 135, 253, 43, 27, 39, 203, 254, 162, 93, 0, 89, 216, 41, 246, 23, 99, 11, 32, 53, 178, 142, 253, 183, 180, 0, 214, 180, 255, 237, 5, 176, 193, 29, 176, 169, 5, 32, 214, 217, 1, 57, 185, 118, 1, 136, 121, 59, 32, 115, 38, 142, 102, 7, 96, 13, 108, 111, 7, 8, 152, 98, 112, 7, 136, 193, 53, 32, 172, 39, 104, 75, 88, 106, 144, 93, 97, 27, 66, 148, 70, 203, 224, 39, 31, 56, 247, 224, 19, 23, 159, 126, 230, 141, 239, 126, 239, 178, 84, 174, 47, 249, 75, 208, 199, 248, 171, 140, 175, 237, 162, 23, 43, 139, 55, 39, 158, 126, 237, 179, 143, 156, 255, 228, 253, 231, 218, 111, 238, 23, 190, 77, 129, 19, 40, 124, 74, 56, 61, 225, 179, 197, 153, 247, 213, 63, 102, 127, 4, 160, 163, 126, 216, 191, 146, 54, 104, 255, 76, 169, 216, 65, 251, 139, 118, 1, 204, 179, 191, 152, 190, 0, 82, 107, 155, 181, 255, 49, 47, 0, 177, 189, 29, 48, 101, 1, 136, 121, 59, 160, 93, 0, 98, 75, 59, 160, 210, 188, 241, 29, 128, 53, 224, 102, 102, 93, 221, 97, 116, 123, 250, 26, 176, 71, 224, 23, 177, 116, 13, 8, 88, 204, 130, 19, 112, 95, 145, 138, 132, 61, 19, 237, 3, 125, 113, 125, 230, 177, 11, 79, 62, 125, 233, 153, 111, 189, 165, 47, 228, 47, 189, 254, 254, 123, 87, 110, 220, 88, 188, 72, 56, 248, 178, 125, 131, 191, 234, 1, 245, 208, 218, 58, 111, 191, 115, 93, 186, 255, 206, 11, 239, 60, 253, 245, 55, 244, 234, 100, 255, 123, 59, 231, 240, 15, 54, 36, 121, 71, 184, 89, 227, 51, 193, 113, 21, 62, 76, 156, 243, 152, 250, 69, 71, 253, 2, 115, 239, 216, 63, 179, 36, 90, 245, 139, 245, 237, 143, 5, 48, 102, 127, 44, 128, 41, 246, 199, 2, 152, 103, 127, 209, 46, 128, 77, 217, 95, 172, 179, 0, 82, 197, 171, 218, 95, 220, 94, 0, 98, 222, 14, 88, 103, 1, 108, 100, 7, 140, 45, 128, 25, 59, 160, 93, 0, 162, 191, 3, 42, 133, 91, 221, 1, 98, 226, 14, 16, 237, 14, 16, 107, 238, 0, 177, 217, 53, 32, 172, 60, 1, 27, 154, 84, 39, 172, 218, 34, 5, 75, 196, 122, 149, 112, 223, 163, 23, 30, 253, 226, 171, 95, 252, 202, 107, 95, 249, 230, 155, 223, 124, 254, 237, 23, 94, 122, 247, 220, 133, 43, 23, 47, 189, 255, 218, 155, 215, 222, 122, 231, 131, 119, 222, 189, 174, 61, 113, 229, 234, 135, 87, 223, 255, 240, 131, 15, 110, 126, 112, 253, 230, 251, 215, 110, 94, 189, 250, 225, 149, 171, 55, 244, 133, 252, 219, 151, 175, 191, 241, 214, 7, 151, 94, 191, 118, 254, 149, 171, 47, 189, 252, 222, 243, 47, 94, 254, 250, 115, 111, 235, 53, 199, 147, 79, 93, 122, 232, 137, 139, 247, 62, 116, 94, 91, 231, 147, 103, 22, 63, 195, 138, 103, 7, 121, 229, 2, 247, 101, 124, 2, 56, 156, 194, 167, 135, 131, 21, 171, 170, 95, 116, 212, 127, 4, 246, 175, 84, 15, 218, 63, 27, 33, 54, 98, 127, 49, 207, 254, 162, 93, 0, 243, 236, 47, 166, 44, 128, 77, 217, 95, 28, 197, 2, 16, 155, 221, 1, 121, 22, 99, 11, 96, 246, 14, 200, 41, 138, 173, 238, 128, 76, 167, 56, 130, 29, 32, 214, 220, 1, 98, 179, 107, 64, 64, 85, 194, 34, 19, 112, 156, 176, 4, 5, 252, 152, 64, 169, 16, 110, 31, 249, 90, 235, 161, 144, 190, 3, 217, 188, 184, 253, 135, 7, 31, 217, 60, 72, 31, 92, 158, 192, 245, 155, 188, 95, 28, 69, 145, 199, 133, 147, 20, 62, 103, 156, 191, 240, 116, 48, 53, 79, 19, 83, 94, 85, 253, 176, 127, 101, 15, 246, 175, 148, 158, 8, 251, 139, 118, 1, 76, 183, 255, 210, 5, 48, 207, 254, 98, 222, 2, 152, 97, 127, 177, 247, 219, 255, 204, 161, 223, 79, 217, 1, 243, 22, 128, 88, 103, 7, 228, 201, 214, 89, 207, 216, 1, 237, 2, 16, 83, 118, 64, 229, 105, 253, 29, 32, 198, 118, 0, 214, 192, 70, 118, 128, 200, 26, 87, 183, 219, 53, 80, 34, 56, 222, 53, 80, 164, 28, 225, 77, 0, 219, 10, 24, 121, 171, 224, 169, 11, 92, 97, 146, 247, 37, 112, 215, 198, 231, 131, 163, 43, 124, 182, 56, 115, 225, 137, 96, 82, 158, 32, 38, 235, 137, 35, 9, 29, 251, 35, 96, 173, 250, 69, 171, 126, 209, 170, 95, 108, 214, 254, 34, 139, 185, 113, 251, 15, 46, 128, 148, 207, 116, 251, 47, 93, 0, 155, 181, 255, 6, 22, 128, 216, 212, 14, 152, 178, 0, 196, 244, 29, 144, 51, 168, 169, 204, 216, 1, 149, 131, 157, 221, 1, 88, 3, 213, 177, 149, 214, 0, 250, 220, 95, 3, 48, 133, 176, 68, 32, 23, 75, 7, 50, 42, 108, 43, 88, 76, 88, 115, 5, 36, 104, 210, 152, 240, 233, 32, 208, 113, 11, 36, 222, 7, 159, 11, 240, 212, 131, 228, 245, 11, 220, 157, 201, 163, 192, 65, 21, 62, 73, 156, 176, 240, 8, 48, 26, 225, 169, 97, 154, 51, 212, 127, 103, 216, 31, 11, 96, 138, 253, 197, 60, 251, 139, 177, 5, 144, 162, 155, 103, 127, 49, 125, 1, 164, 198, 91, 251, 75, 254, 139, 5, 176, 193, 23, 1, 27, 217, 1, 237, 2, 16, 211, 119, 64, 78, 75, 108, 124, 7, 100, 218, 68, 6, 177, 210, 137, 53, 48, 113, 7, 136, 118, 7, 136, 118, 7, 136, 85, 119, 128, 64, 183, 7, 119, 128, 152, 189, 6, 4, 244, 36, 44, 47, 72, 205, 164, 254, 96, 198, 4, 50, 133, 106, 39, 2, 137, 247, 193, 231, 78, 1, 23, 137, 91, 0, 121, 227, 56, 147, 194, 71, 39, 112, 170, 194, 103, 142, 113, 8, 79, 10, 19, 236, 171, 127, 204, 254, 136, 83, 101, 12, 246, 175, 52, 194, 254, 149, 219, 41, 246, 175, 46, 12, 218, 63, 123, 36, 102, 216, 95, 76, 183, 63, 22, 192, 116, 251, 99, 1, 204, 179, 191, 152, 178, 0, 54, 101, 127, 113, 123, 1, 108, 112, 7, 228, 181, 182, 11, 64, 204, 219, 1, 237, 2, 16, 83, 118, 64, 77, 113, 226, 14, 200, 148, 136, 177, 29, 128, 53, 144, 113, 60, 222, 29, 32, 166, 175, 1, 55, 31, 70, 16, 171, 174, 1, 97, 37, 65, 85, 133, 93, 6, 205, 37, 233, 68, 232, 18, 64, 181, 5, 116, 188, 85, 240, 212, 5, 46, 178, 37, 111, 16, 247, 110, 124, 80, 2, 103, 40, 124, 200, 2, 231, 47, 60, 29, 76, 109, 76, 253, 162, 163, 126, 129, 20, 181, 234, 23, 173, 250, 197, 160, 253, 43, 219, 59, 104, 127, 49, 207, 254, 98, 158, 253, 69, 187, 0, 214, 177, 255, 140, 5, 80, 218, 223, 251, 109, 127, 122, 230, 2, 16, 243, 118, 64, 187, 0, 196, 188, 29, 80, 167, 63, 113, 7, 228, 116, 197, 246, 118, 128, 24, 219, 1, 88, 3, 78, 127, 86, 194, 61, 201, 242, 184, 81, 89, 179, 234, 94, 187, 6, 166, 239, 0, 177, 206, 26, 16, 112, 80, 26, 10, 242, 42, 82, 112, 112, 95, 146, 174, 132, 70, 199, 128, 142, 91, 32, 241, 14, 248, 196, 65, 240, 236, 131, 228, 93, 8, 220, 99, 226, 51, 193, 113, 25, 159, 42, 14, 92, 228, 56, 48, 169, 85, 213, 47, 58, 234, 95, 201, 254, 153, 94, 209, 170, 95, 180, 234, 23, 19, 237, 159, 237, 19, 219, 182, 191, 104, 23, 192, 20, 251, 139, 118, 1, 204, 179, 191, 24, 91, 0, 169, 229, 233, 246, 151, 252, 23, 11, 96, 246, 14, 104, 23, 128, 152, 183, 3, 218, 5, 32, 166, 239, 128, 156, 138, 216, 205, 29, 32, 218, 29, 32, 218, 29, 32, 218, 29, 32, 218, 29, 32, 6, 119, 128, 56, 198, 53, 32, 44, 44, 1, 151, 25, 91, 79, 64, 136, 9, 52, 42, 224, 217, 137, 192, 224, 29, 240, 137, 211, 193, 117, 226, 70, 64, 222, 62, 78, 198, 248, 12, 113, 188, 133, 207, 31, 163, 17, 75, 213, 47, 144, 1, 103, 3, 153, 233, 168, 31, 246, 175, 124, 222, 229, 246, 199, 2, 152, 103, 127, 209, 46, 128, 121, 246, 23, 115, 22, 128, 152, 183, 3, 198, 22, 192, 140, 29, 80, 103, 183, 155, 59, 64, 28, 227, 14, 16, 89, 60, 183, 49, 43, 90, 108, 118, 13, 8, 136, 70, 88, 67, 2, 134, 18, 86, 152, 128, 221, 76, 170, 80, 64, 148, 45, 240, 108, 1, 23, 111, 27, 60, 123, 129, 235, 108, 201, 219, 196, 33, 152, 60, 49, 28, 102, 145, 7, 142, 89, 8, 79, 10, 19, 20, 158, 47, 230, 238, 60, 32, 39, 21, 158, 49, 251, 103, 2, 69, 71, 253, 176, 127, 165, 29, 246, 175, 94, 192, 254, 213, 160, 85, 237, 95, 109, 61, 98, 251, 139, 121, 246, 23, 237, 2, 152, 110, 255, 165, 11, 160, 99, 255, 219, 11, 96, 112, 7, 140, 45, 128, 217, 59, 32, 239, 80, 76, 223, 1, 121, 166, 226, 14, 222, 1, 34, 171, 226, 254, 160, 87, 237, 14, 16, 99, 107, 96, 112, 7, 8, 215, 30, 58, 176, 38, 160, 143, 98, 108, 13, 136, 20, 19, 156, 85, 164, 218, 96, 189, 36, 45, 41, 224, 208, 49, 224, 226, 65, 32, 241, 65, 240, 41, 99, 224, 217, 199, 192, 189, 224, 78, 147, 60, 28, 156, 91, 145, 199, 139, 147, 23, 246, 190, 192, 200, 60, 80, 129, 89, 59, 3, 200, 198, 12, 245, 143, 217, 63, 243, 44, 90, 245, 139, 86, 253, 162, 85, 191, 200, 174, 137, 147, 104, 127, 44, 128, 233, 246, 31, 92, 0, 169, 226, 85, 237, 47, 110, 47, 0, 49, 125, 7, 228, 179, 214, 117, 204, 216, 1, 237, 2, 16, 27, 220, 1, 53, 185, 117, 118, 0, 214, 192, 196, 29, 32, 50, 178, 149, 99, 172, 129, 74, 252, 216, 26, 64, 103, 58, 59, 64, 160, 141, 131, 59, 64, 108, 99, 13, 8, 104, 168, 72, 85, 193, 98, 69, 202, 78, 64, 133, 9, 4, 42, 96, 216, 149, 128, 196, 7, 193, 167, 172, 4, 46, 85, 224, 118, 64, 30, 2, 142, 200, 228, 97, 226, 156, 11, 207, 2, 51, 18, 30, 34, 134, 43, 60, 119, 228, 161, 175, 254, 49, 251, 35, 156, 149, 216, 173, 218, 191, 122, 55, 104, 255, 236, 172, 88, 201, 254, 88, 0, 99, 246, 199, 2, 152, 98, 127, 49, 207, 254, 98, 158, 253, 197, 186, 11, 64, 76, 223, 1, 121, 125, 117, 197, 219, 219, 1, 117, 226, 39, 101, 7, 136, 118, 7, 136, 233, 59, 64, 76, 95, 3, 238, 106, 22, 184, 88, 117, 13, 8, 75, 4, 114, 41, 108, 31, 88, 169, 72, 121, 193, 107, 38, 37, 40, 160, 200, 22, 24, 214, 192, 197, 219, 6, 207, 94, 224, 82, 7, 201, 155, 197, 81, 36, 121, 116, 56, 213, 194, 39, 143, 137, 20, 158, 26, 166, 41, 60, 107, 100, 96, 158, 250, 5, 50, 217, 81, 63, 236, 95, 249, 135, 253, 171, 41, 83, 236, 143, 26, 174, 111, 255, 180, 132, 88, 211, 254, 88, 0, 83, 236, 47, 218, 5, 48, 197, 254, 162, 93, 0, 75, 237, 47, 246, 126, 235, 159, 58, 244, 251, 118, 7, 180, 11, 64, 76, 223, 1, 121, 39, 98, 202, 14, 168, 147, 154, 184, 3, 114, 18, 98, 179, 59, 64, 140, 237, 0, 172, 129, 74, 36, 214, 0, 18, 220, 217, 1, 34, 139, 225, 182, 160, 69, 253, 29, 32, 178, 159, 238, 109, 150, 185, 88, 186, 6, 4, 172, 97, 161, 64, 52, 198, 62, 130, 167, 138, 212, 153, 128, 236, 146, 244, 163, 128, 61, 59, 192, 197, 29, 160, 242, 4, 31, 217, 1, 207, 222, 1, 119, 132, 251, 77, 242, 136, 112, 128, 198, 231, 140, 243, 47, 60, 38, 140, 175, 240, 112, 49, 247, 49, 245, 139, 65, 245, 139, 202, 27, 162, 88, 249, 28, 179, 127, 38, 92, 180, 234, 23, 75, 213, 47, 214, 177, 127, 117, 252, 14, 176, 63, 22, 192, 60, 251, 139, 197, 2, 152, 177, 3, 234, 249, 102, 236, 128, 186, 195, 137, 59, 32, 79, 80, 236, 206, 14, 16, 237, 14, 16, 237, 14, 16, 25, 229, 202, 247, 216, 26, 64, 67, 6, 119, 128, 232, 175, 1, 20, 117, 179, 107, 64, 88, 49, 80, 143, 177, 161, 96, 46, 147, 154, 131, 1, 91, 96, 79, 1, 189, 206, 0, 42, 79, 240, 145, 51, 192, 213, 10, 220, 17, 200, 211, 192, 65, 37, 62, 85, 156, 118, 225, 161, 8, 204, 75, 120, 154, 24, 180, 88, 170, 126, 129, 68, 13, 170, 95, 116, 212, 127, 247, 216, 95, 76, 183, 63, 22, 192, 20, 251, 139, 121, 246, 23, 237, 2, 144, 249, 7, 22, 128, 152, 190, 3, 242, 58, 196, 244, 29, 144, 119, 46, 182, 189, 3, 196, 216, 14, 192, 26, 216, 246, 14, 16, 157, 29, 128, 53, 224, 254, 160, 87, 98, 179, 107, 64, 64, 13, 194, 226, 128, 80, 68, 26, 7, 50, 50, 118, 22, 92, 150, 164, 254, 4, 228, 56, 8, 244, 106, 32, 226, 109, 131, 103, 55, 184, 218, 65, 242, 150, 113, 32, 137, 15, 80, 224, 108, 141, 167, 128, 1, 21, 158, 32, 38, 43, 60, 119, 228, 65, 56, 45, 72, 145, 211, 133, 212, 85, 20, 199, 236, 159, 121, 22, 29, 245, 247, 237, 95, 205, 130, 253, 171, 131, 176, 127, 181, 117, 208, 254, 217, 116, 113, 44, 246, 23, 211, 237, 143, 5, 48, 197, 254, 162, 93, 0, 131, 246, 95, 44, 128, 223, 242, 39, 15, 254, 191, 252, 187, 118, 1, 136, 41, 59, 160, 174, 239, 206, 216, 1, 88, 3, 157, 29, 32, 50, 148, 78, 106, 198, 23, 201, 118, 226, 209, 132, 118, 7, 136, 177, 53, 48, 184, 3, 132, 139, 138, 2, 187, 216, 217, 246, 194, 58, 128, 38, 132, 37, 34, 224, 23, 97, 1, 9, 184, 201, 164, 200, 224, 56, 144, 102, 20, 240, 102, 7, 88, 120, 10, 83, 108, 222, 1, 23, 208, 1, 55, 37, 112, 215, 73, 158, 149, 192, 73, 22, 121, 230, 24, 71, 225, 121, 97, 148, 133, 103, 141, 12, 56, 30, 2, 201, 113, 162, 144, 180, 149, 212, 47, 58, 246, 71, 65, 178, 59, 162, 85, 191, 104, 213, 47, 90, 245, 139, 19, 103, 127, 113, 4, 246, 151, 252, 23, 11, 96, 226, 14, 168, 199, 157, 184, 3, 242, 186, 197, 209, 236, 0, 172, 129, 137, 59, 64, 172, 180, 3, 198, 214, 0, 210, 217, 238, 0, 129, 148, 119, 118, 192, 216, 26, 64, 211, 196, 6, 215, 128, 24, 91, 3, 194, 90, 17, 48, 78, 97, 43, 65, 88, 73, 218, 13, 238, 107, 129, 55, 5, 220, 186, 14, 243, 108, 190, 20, 92, 112, 129, 251, 2, 121, 38, 2, 39, 102, 124, 188, 2, 39, 95, 228, 128, 48, 59, 49, 230, 125, 225, 72, 32, 42, 194, 41, 66, 186, 250, 234, 111, 237, 223, 81, 255, 142, 216, 191, 204, 48, 104, 255, 180, 138, 216, 17, 251, 139, 118, 1, 76, 177, 191, 224, 2, 88, 105, 7, 228, 243, 137, 59, 117, 7, 136, 118, 7, 136, 13, 239, 128, 109, 126, 71, 72, 184, 192, 40, 182, 59, 47, 210, 5, 133, 101, 1, 137, 20, 41, 26, 56, 168, 72, 85, 193, 98, 9, 196, 7, 45, 14, 2, 177, 26, 88, 248, 8, 192, 5, 24, 92, 240, 32, 184, 113, 28, 75, 146, 39, 137, 67, 54, 57, 14, 76, 74, 120, 148, 2, 83, 22, 206, 0, 226, 33, 156, 28, 36, 106, 158, 250, 5, 18, 62, 93, 253, 176, 127, 117, 13, 246, 175, 86, 194, 254, 213, 95, 216, 191, 154, 126, 87, 217, 31, 11, 192, 246, 31, 88, 0, 219, 219, 1, 117, 87, 91, 221, 1, 98, 108, 7, 96, 13, 108, 102, 7, 28, 94, 3, 206, 101, 134, 245, 47, 111, 226, 165, 128, 200, 70, 185, 105, 104, 160, 88, 186, 6, 4, 122, 110, 5, 164, 23, 140, 221, 1, 173, 20, 169, 30, 88, 201, 164, 194, 96, 55, 0, 45, 66, 154, 125, 96, 225, 35, 0, 23, 208, 7, 183, 38, 112, 239, 73, 158, 152, 192, 121, 154, 60, 124, 204, 165, 240, 236, 48, 83, 225, 161, 11, 228, 65, 56, 42, 72, 209, 152, 250, 197, 160, 250, 69, 165, 23, 193, 174, 180, 79, 180, 127, 182, 73, 180, 234, 23, 173, 250, 69, 171, 126, 209, 170, 95, 180, 234, 23, 19, 237, 95, 22, 90, 199, 254, 88, 0, 99, 246, 199, 2, 152, 98, 127, 209, 183, 191, 184, 189, 0, 68, 187, 0, 196, 148, 29, 80, 87, 115, 18, 119, 0, 214, 64, 229, 3, 107, 160, 146, 132, 53, 80, 153, 91, 172, 129, 195, 89, 108, 119, 128, 152, 180, 3, 102, 125, 71, 104, 227, 107, 64, 164, 41, 140, 109, 2, 203, 20, 41, 35, 120, 42, 73, 175, 193, 122, 45, 48, 102, 1, 177, 238, 38, 184, 102, 129, 91, 107, 201, 147, 17, 56, 55, 147, 231, 140, 17, 24, 79, 10, 19, 44, 60, 101, 4, 64, 56, 27, 136, 141, 216, 148, 250, 197, 116, 245, 195, 254, 213, 172, 83, 251, 139, 77, 217, 95, 236, 253, 230, 63, 113, 232, 247, 237, 14, 168, 71, 217, 157, 29, 128, 53, 48, 113, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 21, 118, 192, 49, 173, 1, 129, 50, 187, 231, 2, 10, 16, 22, 68, 90, 35, 177, 95, 224, 29, 147, 146, 130, 191, 18, 40, 15, 66, 28, 3, 98, 77, 96, 225, 109, 131, 103, 79, 112, 205, 131, 224, 246, 113, 56, 32, 143, 20, 167, 109, 60, 23, 204, 171, 240, 88, 5, 38, 46, 156, 7, 68, 69, 56, 69, 72, 151, 112, 246, 144, 73, 103, 21, 25, 30, 84, 191, 64, 35, 90, 245, 139, 142, 250, 97, 255, 234, 233, 102, 237, 95, 62, 25, 180, 127, 186, 72, 28, 163, 253, 177, 0, 166, 216, 95, 44, 22, 192, 196, 29, 144, 143, 46, 198, 118, 64, 94, 171, 184, 75, 118, 128, 64, 58, 135, 215, 192, 208, 14, 16, 168, 196, 224, 14, 16, 174, 22, 42, 231, 42, 162, 162, 194, 5, 70, 177, 133, 107, 47, 96, 4, 97, 95, 164, 71, 18, 27, 7, 38, 74, 210, 92, 144, 26, 128, 16, 5, 140, 185, 20, 88, 120, 219, 224, 217, 151, 130, 187, 19, 56, 129, 36, 207, 77, 224, 84, 141, 71, 32, 48, 157, 194, 67, 20, 152, 175, 200, 0, 32, 27, 194, 201, 65, 162, 28, 54, 129, 28, 58, 159, 200, 109, 229, 185, 181, 63, 90, 80, 237, 88, 201, 254, 40, 99, 71, 253, 176, 127, 181, 30, 246, 47, 63, 236, 136, 253, 197, 20, 251, 139, 233, 246, 199, 2, 144, 249, 15, 22, 192, 9, 218, 1, 98, 108, 7, 96, 13, 120, 114, 57, 78, 207, 56, 7, 239, 52, 100, 68, 156, 155, 12, 211, 159, 95, 253, 165, 192, 196, 53, 128, 110, 136, 13, 174, 1, 49, 111, 13, 8, 27, 36, 205, 146, 164, 134, 96, 168, 36, 141, 6, 223, 13, 2, 93, 22, 176, 234, 110, 130, 107, 46, 112, 119, 45, 121, 62, 2, 167, 151, 228, 129, 99, 22, 133, 71, 38, 48, 205, 194, 19, 71, 24, 132, 189, 47, 16, 33, 7, 12, 193, 19, 206, 36, 178, 186, 61, 245, 175, 100, 255, 236, 181, 104, 213, 47, 90, 245, 139, 86, 253, 98, 162, 253, 203, 93, 131, 246, 79, 239, 137, 109, 219, 95, 12, 218, 127, 177, 0, 126, 211, 31, 31, 88, 0, 226, 196, 237, 0, 177, 206, 14, 16, 237, 14, 16, 237, 14, 16, 157, 29, 32, 144, 215, 225, 29, 176, 222, 119, 132, 132, 43, 135, 42, 186, 165, 104, 111, 225, 110, 163, 246, 194, 82, 16, 240, 69, 97, 167, 164, 107, 64, 186, 9, 218, 74, 32, 59, 168, 112, 12, 40, 21, 192, 194, 219, 6, 207, 158, 224, 178, 199, 192, 33, 224, 136, 64, 30, 44, 206, 220, 120, 64, 2, 179, 43, 60, 95, 140, 190, 112, 54, 144, 25, 225, 80, 33, 108, 194, 57, 68, 62, 39, 170, 95, 116, 212, 63, 102, 127, 84, 175, 250, 8, 251, 87, 115, 79, 162, 253, 203, 150, 71, 96, 127, 201, 127, 177, 0, 142, 107, 7, 136, 177, 29, 128, 53, 176, 206, 14, 16, 237, 14, 16, 235, 238, 128, 254, 75, 129, 195, 107, 192, 105, 70, 202, 55, 184, 6, 4, 154, 233, 210, 162, 204, 197, 216, 26, 16, 214, 132, 128, 65, 138, 20, 77, 10, 40, 73, 97, 9, 232, 12, 64, 133, 2, 174, 156, 2, 44, 188, 109, 240, 236, 75, 193, 13, 10, 28, 66, 75, 30, 32, 142, 55, 201, 113, 96, 82, 69, 14, 20, 179, 22, 246, 190, 64, 72, 132, 83, 132, 116, 9, 7, 15, 153, 28, 83, 191, 64, 206, 43, 252, 99, 246, 207, 6, 137, 106, 214, 152, 253, 81, 207, 142, 250, 97, 255, 242, 0, 236, 95, 198, 128, 253, 203, 45, 176, 127, 89, 104, 208, 254, 105, 48, 177, 131, 246, 191, 189, 0, 78, 202, 14, 192, 26, 216, 200, 14, 16, 25, 8, 167, 36, 163, 83, 121, 26, 88, 3, 171, 191, 20, 24, 88, 3, 183, 106, 128, 122, 160, 60, 219, 91, 3, 2, 82, 40, 82, 28, 112, 74, 145, 234, 17, 105, 37, 144, 46, 19, 48, 93, 11, 92, 89, 64, 169, 59, 11, 46, 187, 192, 13, 14, 130, 83, 194, 25, 38, 121, 236, 24, 138, 201, 241, 97, 178, 194, 163, 23, 72, 133, 112, 108, 16, 39, 145, 97, 67, 14, 55, 165, 126, 129, 238, 116, 212, 191, 146, 253, 179, 233, 162, 85, 191, 104, 213, 47, 90, 245, 139, 86, 253, 226, 4, 217, 95, 220, 94, 0, 162, 221, 1, 245, 249, 235, 236, 0, 172, 129, 137, 59, 64, 172, 180, 3, 176, 6, 106, 90, 88, 3, 53, 87, 172, 129, 63, 125, 180, 47, 5, 196, 224, 14, 16, 131, 59, 64, 160, 72, 94, 3, 2, 245, 203, 102, 162, 180, 194, 149, 70, 213, 11, 187, 0, 154, 40, 82, 37, 176, 140, 73, 37, 137, 180, 21, 128, 230, 4, 60, 56, 6, 148, 10, 96, 225, 109, 131, 103, 79, 112, 217, 29, 112, 14, 56, 40, 144, 199, 139, 195, 55, 57, 41, 12, 209, 120, 214, 200, 64, 225, 156, 32, 63, 194, 233, 66, 240, 132, 51, 137, 184, 10, 228, 121, 158, 250, 199, 236, 143, 50, 86, 67, 97, 255, 234, 242, 78, 217, 191, 140, 55, 104, 255, 180, 165, 216, 134, 253, 15, 45, 128, 223, 248, 199, 110, 255, 70, 236, 248, 14, 16, 237, 14, 16, 237, 14, 16, 237, 14, 16, 237, 14, 16, 157, 29, 32, 50, 76, 78, 24, 146, 87, 113, 156, 184, 6, 156, 117, 116, 96, 236, 59, 66, 2, 165, 18, 174, 28, 170, 40, 92, 84, 20, 88, 184, 222, 168, 189, 177, 29, 96, 13, 147, 138, 129, 125, 76, 170, 74, 164, 197, 90, 32, 193, 2, 162, 156, 2, 44, 188, 109, 240, 236, 83, 192, 61, 10, 28, 69, 75, 30, 35, 14, 57, 201, 161, 96, 94, 198, 147, 197, 196, 11, 7, 3, 129, 41, 156, 40, 36, 77, 56, 135, 200, 167, 64, 134, 55, 171, 126, 129, 14, 182, 234, 23, 29, 245, 195, 254, 101, 6, 216, 191, 28, 50, 219, 254, 101, 176, 157, 181, 191, 88, 44, 128, 173, 238, 0, 49, 182, 3, 176, 6, 142, 121, 7, 172, 254, 82, 96, 108, 13, 32, 175, 206, 241, 86, 214, 192, 172, 239, 11, 9, 23, 30, 34, 48, 246, 5, 60, 98, 82, 58, 2, 74, 74, 210, 98, 34, 5, 55, 6, 68, 89, 192, 167, 187, 12, 174, 188, 192, 61, 14, 130, 179, 194, 73, 38, 121, 248, 24, 141, 241, 16, 5, 230, 91, 56, 6, 2, 9, 17, 206]);
fileData4.push.apply(fileData4, [15, 162, 37, 236, 125, 129, 76, 10, 228, 246, 24, 213, 63, 102, 127, 212, 191, 85, 191, 232, 168, 31, 246, 47, 35, 77, 183, 127, 122, 79, 76, 180, 127, 217, 117, 131, 246, 151, 249, 15, 22, 192, 210, 29, 32, 142, 108, 7, 96, 13, 248, 28, 243, 112, 125, 226, 57, 6, 207, 38, 7, 86, 83, 156, 186, 6, 38, 191, 20, 16, 195, 59, 96, 211, 107, 64, 160, 78, 40, 155, 232, 172, 1, 225, 26, 11, 52, 92, 184, 255, 80, 131, 73, 137, 192, 47, 38, 101, 36, 160, 170, 4, 130, 19, 169, 191, 62, 240, 41, 128, 130, 183, 10, 158, 186, 5, 87, 62, 6, 142, 66, 224, 184, 64, 30, 50, 70, 144, 228, 200, 48, 205, 194, 67, 23, 200, 131, 200, 192, 32, 75, 98, 186, 247, 133, 51, 140, 120, 59, 246, 217, 133, 98, 80, 253, 162, 163, 254, 49, 251, 163, 200, 213, 238, 245, 237, 159, 206, 17, 173, 250, 69, 171, 126, 177, 107, 246, 95, 44, 128, 223, 240, 71, 15, 254, 191, 117, 118, 0, 214, 192, 196, 29, 32, 218, 29, 32, 38, 238, 0, 209, 238, 0, 209, 238, 0, 177, 194, 14, 232, 191, 20, 152, 248, 29, 161, 13, 173, 1, 225, 10, 161, 90, 2, 245, 19, 46, 39, 74, 43, 178, 213, 40, 124, 97, 35, 64, 22, 38, 181, 2, 227, 36, 41, 41, 1, 133, 181, 192, 128, 34, 21, 57, 29, 40, 120, 171, 224, 169, 39, 130, 219, 44, 112, 26, 45, 121, 152, 56, 234, 36, 167, 131, 193, 25, 143, 88, 96, 250, 133, 19, 130, 240, 20, 78, 23, 82, 39, 144, 76, 225, 220, 34, 207, 142, 122, 230, 191, 112, 59, 208, 154, 65, 245, 139, 142, 250, 199, 236, 143, 178, 151, 1, 96, 255, 114, 197, 113, 217, 191, 60, 57, 104, 255, 116, 172, 88, 223, 254, 146, 255, 98, 1, 156, 136, 29, 32, 54, 178, 3, 68, 14, 219, 9, 64, 50, 58, 59, 64, 32, 115, 163, 107, 96, 63, 184, 155, 89, 3, 179, 190, 47, 36, 208, 97, 225, 146, 11, 244, 191, 72, 77, 192, 32, 38, 117, 3, 19, 129, 244, 151, 128, 221, 6, 129, 34, 77, 202, 116, 199, 193, 149, 23, 184, 205, 49, 112, 98, 56, 207, 36, 167, 32, 48, 35, 147, 3, 197, 172, 11, 231, 1, 81, 41, 156, 37, 196, 172, 64, 26, 197, 198, 213, 47, 208, 44, 55, 14, 77, 236, 168, 127, 204, 254, 105, 3, 209, 81, 63, 236, 95, 230, 129, 253, 203, 81, 176, 127, 217, 12, 246, 47, 239, 29, 175, 253, 111, 47, 128, 53, 119, 128, 24, 219, 1, 88, 3, 219, 219, 1, 34, 199, 227, 153, 97, 150, 237, 14, 16, 195, 59, 96, 19, 223, 17, 18, 131, 59, 64, 56, 244, 91, 90, 3, 194, 213, 69, 165, 11, 215, 94, 192, 8, 69, 138, 3, 78, 73, 160, 33, 72, 10, 192, 110, 112, 95, 31, 248, 20, 164, 127, 183, 13, 158, 186, 5, 87, 222, 1, 7, 34, 112, 98, 0, 167, 141, 89, 152, 156, 29, 198, 106, 60, 125, 4, 163, 112, 120, 4, 114, 37, 16, 63, 49, 230, 125, 225, 72, 103, 206, 11, 183, 0, 237, 152, 167, 126, 129, 182, 118, 212, 15, 251, 151, 25, 198, 236, 159, 110, 17, 173, 250, 69, 171, 126, 209, 170, 95, 180, 234, 23, 173, 250, 197, 68, 251, 151, 147, 7, 237, 159, 62, 23, 105, 127, 113, 123, 1, 136, 141, 239, 0, 49, 182, 3, 176, 6, 234, 68, 176, 6, 234, 236, 176, 6, 234, 148, 199, 214, 0, 230, 212, 217, 1, 34, 199, 239, 76, 32, 43, 21, 160, 177, 53, 48, 241, 59, 66, 98, 246, 26, 16, 168, 147, 112, 217, 80, 66, 129, 162, 22, 110, 50, 74, 94, 88, 4, 2, 142, 48, 41, 20, 184, 38, 129, 158, 32, 175, 22, 184, 175, 128, 34, 39, 2, 5, 111, 21, 60, 245, 116, 112, 167, 2, 7, 210, 130, 35, 197, 129, 39, 57, 35, 129, 9, 22, 57, 107, 196, 160, 112, 84, 4, 82, 84, 32, 111, 194, 105, 68, 74, 133, 51, 156, 217, 46, 156, 124, 52, 98, 179, 234, 23, 104, 116, 171, 126, 209, 81, 255, 29, 108, 127, 177, 247, 163, 127, 228, 208, 239, 197, 216, 14, 192, 26, 88, 103, 7, 136, 118, 7, 136, 118, 7, 136, 118, 7, 136, 85, 119, 128, 192, 116, 219, 29, 32, 250, 107, 0, 9, 115, 242, 214, 124, 99, 64, 184, 12, 88, 3, 194, 21, 66, 181, 68, 231, 5, 129, 64, 111, 11, 119, 27, 181, 55, 41, 8, 184, 195, 164, 101, 224, 32, 0, 121, 65, 109, 99, 64, 145, 6, 50, 221, 101, 112, 229, 6, 119, 58, 8, 14, 77, 224, 84, 147, 156, 133, 192, 164, 76, 142, 21, 19, 47, 28, 12, 129, 204, 20, 72, 151, 176, 247, 5, 146, 41, 156, 91, 228, 217, 81, 23, 104, 193, 49, 170, 127, 204, 254, 144, 73, 25, 6, 246, 47, 23, 193, 254, 101, 45, 216, 191, 252, 54, 197, 254, 229, 76, 216, 191, 236, 58, 104, 255, 52, 179, 152, 104, 127, 177, 88, 0, 39, 122, 7, 136, 28, 134, 39, 132, 201, 117, 118, 128, 64, 38, 134, 119, 192, 134, 214, 128, 112, 208, 81, 0, 23, 99, 165, 53, 32, 220, 67, 84, 180, 64, 147, 11, 183, 29, 34, 48, 169, 12, 216, 36, 73, 251, 192, 77, 45, 240, 154, 128, 251, 250, 64, 166, 45, 176, 240, 246, 192, 243, 182, 224, 202, 251, 224, 76, 4, 206, 13, 228, 153, 11, 76, 196, 228, 4, 49, 92, 227, 24, 8, 36, 164, 64, 150, 10, 231, 13, 57, 20, 14, 42, 2, 44, 28, 111, 196, 94, 184, 17, 104, 138, 75, 148, 205, 42, 6, 213, 47, 58, 234, 31, 179, 63, 180, 80, 174, 24, 179, 127, 218, 70, 180, 234, 23, 173, 250, 197, 160, 253, 203, 129, 211, 237, 15, 217, 174, 99, 255, 50, 255, 222, 175, 255, 195, 7, 255, 95, 254, 157, 104, 119, 128, 24, 219, 1, 88, 3, 117, 173, 88, 3, 190, 171, 188, 85, 223, 127, 30, 138, 79, 42, 143, 175, 206, 116, 108, 13, 96, 42, 157, 29, 32, 48, 239, 131, 29, 48, 241, 59, 66, 71, 184, 6, 4, 42, 36, 92, 48, 20, 79, 116, 126, 114, 84, 160, 216, 38, 21, 0, 59, 152, 84, 9, 44, 147, 64, 76, 208, 214, 32, 16, 159, 128, 28, 87, 2, 22, 222, 30, 120, 222, 233, 224, 102, 11, 156, 73, 11, 14, 22, 199, 158, 228, 164, 4, 230, 104, 114, 232, 200, 67, 129, 240, 20, 78, 23, 130, 87, 56, 153, 72, 172, 112, 158, 17, 117, 225, 22, 160, 29, 46, 78, 182, 169, 88, 73, 253, 162, 163, 254, 49, 251, 67, 29, 229, 147, 245, 237, 159, 150, 19, 173, 250, 69, 171, 126, 177, 142, 253, 203, 228, 131, 246, 63, 88, 0, 107, 238, 0, 209, 238, 0, 209, 238, 0, 209, 238, 0, 209, 238, 0, 209, 238, 0, 177, 234, 14, 16, 152, 101, 103, 7, 8, 164, 228, 40, 214, 192, 166, 191, 47, 36, 250, 223, 26, 18, 104, 123, 145, 82, 128, 47, 146, 244, 11, 236, 3, 160, 45, 72, 109, 12, 200, 49, 129, 76, 119, 25, 92, 185, 193, 205, 142, 129, 163, 19, 56, 219, 36, 39, 34, 48, 47, 147, 243, 197, 232, 13, 114, 82, 216, 251, 2, 73, 19, 142, 34, 34, 90, 56, 195, 200, 182, 152, 173, 126, 129, 222, 85, 25, 91, 251, 15, 170, 95, 116, 212, 63, 102, 127, 232, 165, 163, 126, 216, 191, 60, 118, 4, 246, 47, 51, 79, 183, 127, 153, 255, 96, 1, 120, 7, 96, 13, 236, 236, 14, 16, 121, 244, 53, 143, 177, 53, 128, 137, 122, 210, 72, 64, 127, 13, 32, 91, 194, 177, 67, 28, 29, 211, 109, 175, 1, 225, 250, 161, 150, 133, 123, 139, 74, 27, 244, 223, 164, 44, 224, 145, 4, 234, 129, 152, 0, 140, 38, 96, 189, 165, 64, 166, 45, 176, 240, 150, 192, 147, 14, 130, 43, 239, 131, 99, 17, 56, 186, 22, 156, 60, 230, 146, 228, 40, 49, 101, 131, 84, 20, 14, 143, 64, 174, 132, 131, 39, 144, 73, 225, 208, 34, 204, 98, 204, 251, 194, 5, 201, 214, 20, 238, 20, 186, 230, 14, 162, 155, 213, 217, 214, 254, 238, 56, 186, 223, 81, 255, 74, 246, 135, 172, 58, 234, 135, 253, 203, 138, 176, 127, 249, 19, 246, 47, 211, 78, 183, 127, 250, 92, 164, 253, 197, 237, 5, 32, 58, 59, 0, 107, 96, 35, 59, 64, 228, 17, 248, 92, 242, 176, 234, 4, 199, 214, 0, 102, 208, 217, 1, 2, 211, 237, 175, 1, 124, 71, 72, 244, 215, 0, 114, 41, 28, 217, 177, 53, 32, 80, 0, 175, 1, 129, 218, 8, 151, 170, 243, 130, 64, 160, 168, 69, 150, 25, 61, 47, 96, 132, 36, 13, 2, 185, 36, 80, 18, 132, 53, 8, 172, 87, 64, 142, 43, 1, 11, 111, 9, 60, 233, 74, 224, 102, 11, 28, 203, 32, 56, 94, 28, 62, 200, 145, 97, 154, 6, 1, 48, 25, 21, 164, 168, 112, 210, 16, 194, 194, 41, 69, 122, 133, 179, 141, 216, 11, 55, 34, 155, 82, 184, 71, 232, 215, 102, 213, 47, 224, 135, 142, 250, 97, 255, 114, 209, 74, 246, 79, 239, 137, 86, 253, 162, 85, 191, 104, 213, 47, 90, 245, 139, 41, 246, 23, 123, 191, 238, 15, 29, 250, 189, 88, 105, 7, 96, 13, 212, 245, 97, 13, 212, 157, 140, 173, 1, 156, 69, 187, 3, 68, 103, 7, 136, 28, 134, 152, 177, 6, 144, 9, 103, 101, 226, 27, 3, 194, 113, 68, 76, 29, 95, 172, 1, 225, 208, 163, 12, 194, 85, 65, 133, 132, 11, 38, 208, 61, 225, 114, 10, 244, 182, 200, 122, 163, 249, 6, 166, 72, 210, 44, 144, 14, 128, 176, 4, 140, 54, 6, 228, 104, 96, 210, 29, 7, 23, 159, 224, 126, 199, 192, 233, 225, 120, 65, 206, 69, 96, 106, 9, 102, 109, 156, 10, 4, 198, 56, 87, 136, 92, 225, 76, 34, 174, 133, 243, 140, 156, 11, 183, 0, 237, 112, 113, 4, 58, 229, 174, 161, 131, 174, 103, 118, 86, 184, 206, 168, 249, 250, 234, 23, 29, 245, 195, 254, 101, 182, 157, 178, 191, 88, 44, 128, 41, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 108, 100, 7, 8, 156, 117, 103, 7, 8, 76, 177, 179, 3, 4, 242, 225, 220, 28, 219, 26, 24, 255, 190, 144, 112, 229, 250, 223, 26, 18, 104, 114, 209, 127, 199, 216, 64, 31, 9, 164, 3, 37, 1, 232, 172, 128, 242, 250, 64, 163, 99, 64, 196, 27, 7, 79, 55, 6, 46, 126, 41, 56, 25, 129, 3, 108, 193, 249, 99, 58, 9, 102, 106, 28, 0, 129, 120, 24, 167, 8, 1, 43, 28, 66, 129, 124, 138, 41, 222, 23, 104, 132, 203, 130, 18, 9, 247, 11, 189, 115, 37, 179, 167, 194, 21, 70, 181, 93, 121, 168, 160, 252, 48, 102, 127, 72, 166, 204, 51, 102, 127, 232, 171, 163, 126, 216, 191, 60, 9, 251, 151, 81, 97, 255, 114, 47, 236, 95, 150, 134, 253, 203, 231, 176, 127, 153, 127, 239, 71, 254, 224, 193, 255, 151, 127, 39, 142, 120, 7, 136, 60, 154, 58, 175, 177, 53, 128, 19, 247, 36, 48, 161, 206, 14, 16, 152, 189, 51, 129, 172, 56, 67, 71, 179, 6, 4, 170, 34, 92, 36, 20, 172, 112, 3, 231, 109, 2, 145, 34, 128, 35, 18, 104, 37, 129, 140, 4, 108, 213, 2, 223, 25, 152, 113, 85, 32, 226, 141, 131, 167, 155, 1, 238, 183, 192, 225, 12, 130, 19, 198, 8, 0, 102, 103, 114, 214, 2, 73, 40, 50, 51, 136, 83, 225, 200, 9, 164, 81, 56, 174, 2, 73, 22, 206, 57, 42, 32, 92, 16, 20, 71, 184, 83, 232, 154, 107, 152, 221, 44, 6, 213, 47, 6, 213, 47, 58, 234, 31, 179, 63, 68, 84, 118, 90, 201, 254, 144, 97, 171, 126, 209, 170, 95, 172, 106, 127, 232, 189, 156, 127, 176, 0, 188, 3, 68, 126, 80, 125, 38, 214, 128, 159, 35, 159, 216, 87, 147, 151, 88, 215, 141, 53, 80, 119, 56, 182, 6, 112, 70, 157, 29, 32, 112, 250, 157, 29, 32, 48, 215, 99, 92, 3, 194, 65, 71, 1, 132, 235, 129, 218, 136, 254, 59, 4, 194, 157, 28, 220, 4, 194, 173, 70, 225, 147, 180, 3, 220, 145, 64, 55, 0, 170, 18, 112, 89, 7, 152, 209, 64, 163, 59, 14, 46, 62, 193, 253, 118, 192, 25, 226, 144, 1, 6, 4, 114, 172, 152, 184, 113, 60, 4, 146, 83, 56, 96, 2, 217, 43, 156, 79, 68, 87, 56, 216, 2, 153, 23, 110, 4, 154, 34, 220, 35, 244, 203, 213, 203, 62, 22, 110, 43, 90, 236, 118, 163, 245, 131, 234, 23, 29, 245, 143, 217, 31, 178, 42, 131, 193, 254, 229, 186, 245, 237, 159, 6, 22, 173, 250, 69, 199, 254, 101, 254, 131, 5, 80, 180, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 180, 59, 64, 116, 118, 128, 200, 195, 242, 9, 226, 100, 59, 59, 64, 96, 102, 199, 185, 6, 110, 109, 2, 196, 90, 56, 244, 43, 191, 32, 216, 220, 38, 16, 176, 64, 146, 214, 128, 80, 0, 100, 212, 2, 151, 9, 200, 110, 41, 208, 104, 7, 184, 120, 179, 224, 185, 198, 192, 197, 47, 5, 135, 83, 224, 12, 91, 48, 133, 36, 103, 39, 48, 89, 147, 73, 64, 72, 140, 227, 36, 144, 180, 194, 105, 68, 80, 11, 39, 25, 33, 23, 174, 128, 64, 59, 236, 125, 129, 78, 185, 110, 217, 193, 194, 13, 69, 115, 221, 104, 52, 221, 6, 128, 25, 6, 213, 47, 58, 234, 31, 179, 127, 218, 76, 116, 212, 15, 251, 151, 57, 183, 106, 127, 113, 104, 1, 136, 35, 222, 1, 2, 103, 209, 238, 0, 209, 217, 1, 2, 243, 232, 175, 1, 76, 90, 12, 238, 0, 225, 208, 32, 76, 14, 217, 216, 26, 16, 136, 236, 148, 53, 32, 80, 15, 225, 242, 160, 84, 197, 244, 77, 32, 208, 106, 147, 10, 128, 29, 146, 180, 9, 92, 211, 2, 79, 13, 2, 217, 21, 208, 226, 60, 224, 226, 205, 130, 231, 154, 1, 110, 217, 224, 124, 6, 193, 57, 131, 156, 145, 192, 4, 147, 28, 58, 242, 96, 50, 60, 200, 85, 225, 236, 33, 150, 133, 163, 43, 144, 106, 225, 204, 163, 14, 98, 204, 251, 194, 253, 202, 222, 21, 110, 37, 218, 234, 22, 163, 221, 125, 245, 183, 246, 31, 84, 191, 232, 168, 31, 246, 47, 179, 141, 217, 31, 122, 236, 168, 31, 246, 47, 15, 195, 254, 101, 108, 216, 191, 220, 158, 246, 23, 123, 191, 246, 15, 28, 250, 189, 232, 236, 0, 145, 79, 227, 231, 206, 11, 242, 85, 230, 165, 215, 253, 140, 173, 1, 156, 136, 79, 42, 143, 79, 204, 88, 3, 152, 162, 167, 139, 169, 59, 13, 72, 137, 112, 128, 16, 44, 7, 14, 107, 64, 56, 166, 136, 175, 112, 184, 17, 122, 225, 74, 180, 47, 8, 132, 187, 132, 154, 21, 27, 223, 4, 2, 202, 72, 32, 26, 104, 168, 5, 22, 235, 0, 39, 2, 152, 116, 151, 193, 149, 39, 184, 229, 14, 56, 198, 22, 12, 2, 99, 2, 57, 92, 140, 222, 100, 78, 16, 33, 227, 164, 33, 132, 133, 131, 42, 144, 97, 225, 144, 11, 228, 95, 184, 29, 104, 141, 112, 167, 208, 53, 215, 80, 160, 161, 110, 46, 26, 237, 178, 67, 2, 150, 3, 164, 81, 38, 105, 237, 63, 93, 253, 162, 163, 254, 149, 236, 159, 166, 21, 173, 250, 69, 171, 126, 209, 170, 95, 72, 254, 139, 5, 80, 228, 95, 212, 71, 99, 13, 12, 238, 0, 209, 238, 0, 209, 238, 0, 209, 217, 1, 2, 167, 211, 217, 1, 2, 231, 222, 217, 1, 2, 19, 245, 164, 145, 0, 39, 3, 137, 17, 14, 19, 66, 230, 240, 173, 182, 6, 230, 190, 32, 16, 110, 23, 138, 87, 44, 221, 4, 34, 75, 142, 254, 155, 148, 133, 128, 74, 0, 52, 4, 73, 141, 1, 217, 77, 1, 38, 237, 0, 29, 111, 10, 60, 75, 7, 92, 249, 20, 112, 62, 131, 224, 168, 5, 102, 1, 114, 136, 24, 113, 146, 145, 64, 90, 140, 115, 133, 200, 25, 39, 19, 137, 45, 156, 106, 4, 94, 216, 251, 2, 77, 113, 137, 4, 250, 229, 234, 161, 146, 194, 109, 69, 139, 93, 112, 20, 223, 66, 128, 40, 44, 16, 136, 165, 108, 51, 102, 127, 40, 171, 60, 54, 102, 127, 200, 176, 12, 9, 251, 151, 75, 183, 97, 255, 197, 2, 248, 53, 191, 255, 172, 104, 119, 128, 104, 119, 128, 88, 117, 7, 136, 188, 25, 223, 33, 238, 188, 179, 3, 4, 206, 180, 179, 3, 4, 166, 229, 41, 98, 186, 158, 58, 210, 224, 148, 32, 61, 194, 193, 66, 224, 156, 197, 121, 107, 64, 160, 18, 194, 133, 17, 232, 146, 112, 217, 4, 122, 88, 172, 186, 9, 4, 164, 144, 164, 71, 160, 152, 22, 24, 74, 192, 98, 29, 224, 196, 217, 64, 199, 155, 2, 207, 50, 15, 220, 114, 31, 156, 164, 192, 105, 131, 156, 148, 192, 28, 147, 28, 61, 130, 97, 28, 33, 129, 128, 21, 153, 67, 68, 180, 112, 134, 17, 239, 194, 249, 71, 53, 132, 139, 131, 66, 9, 215, 13, 53, 20, 110, 40, 154, 235, 82, 163, 236, 98, 80, 253, 98, 80, 253, 162, 163, 254, 49, 251, 67, 107, 229, 186, 49, 251, 167, 45, 69, 71, 253, 176, 127, 153, 25, 246, 47, 135, 195, 254, 101, 123, 33, 243, 31, 44, 128, 25, 59, 64, 228, 211, 251, 154, 112, 173, 237, 14, 16, 157, 29, 32, 112, 94, 157, 29, 32, 48, 137, 93, 88, 3, 2, 145, 21, 14, 52, 130, 46, 58, 47, 8, 132, 43, 212, 255, 214, 144, 64, 57, 77, 214, 24, 13, 55, 169, 3, 1, 89, 36, 80, 12, 4, 52, 8, 20, 38, 160, 185, 137, 192, 164, 187, 12, 174, 124, 10, 56, 162, 2, 39, 217, 130, 113, 96, 88, 32, 71, 140, 0, 36, 25, 24, 100, 169, 200, 212, 33, 144, 133, 67, 43, 144, 103, 209, 241, 190, 112, 83, 208, 32, 225, 126, 161, 122, 194, 173, 68, 91, 93, 100, 20, 92, 244, 213, 47, 224, 144, 65, 245, 139, 142, 250, 199, 236, 15, 245, 149, 15, 87, 178, 127, 186, 87, 180, 234, 23, 173, 250, 133, 213, 95, 220, 94, 0, 162, 254, 14, 107, 160, 30, 101, 108, 13, 224, 58, 86, 221, 1, 2, 103, 209, 217, 1, 2, 167, 188, 131, 107, 64, 56, 166, 43, 189, 32, 16, 46, 6, 10, 83, 184, 81, 131, 155, 64, 184, 147, 168, 171, 201, 151, 5, 2, 181, 55, 169, 9, 1, 137, 0, 8, 8, 122, 26, 3, 154, 51, 112, 226, 108, 160, 227, 141, 128, 167, 152, 13, 110, 217, 224, 136, 198, 192, 129, 11, 76, 4, 228, 40, 49, 232, 36, 131, 129, 216, 24, 7, 76, 32, 123, 133, 35, 42, 144, 94, 225, 120, 11, 36, 95, 184, 26, 168, 76, 225, 78, 161, 107, 174, 161, 64, 67, 93, 94, 148, 90, 184, 239, 240, 128, 253, 0, 111, 216, 39, 240, 204, 160, 250, 69, 71, 253, 99, 246, 135, 30, 59, 234, 223, 160, 253, 197, 222, 15, 255, 190, 67, 191, 23, 237, 14, 16, 171, 238, 0, 129, 171, 239, 172, 1, 156, 136, 79, 10, 39, 216, 95, 3, 152, 141, 24, 220, 1, 194, 99, 198, 248, 29, 11, 196, 197, 73, 66, 194, 132, 195, 135, 92, 10, 71, 182, 93, 3, 194, 113, 71, 13, 68, 255, 91, 67, 194, 29, 91, 186, 9, 4, 58, 108, 178, 240, 112, 1, 72, 131, 64, 46, 45, 112, 147, 128, 191, 250, 192, 137, 0, 38, 221, 101, 112, 229, 0, 119, 221, 1, 135, 41, 112, 224, 45, 57, 47, 129, 105, 38, 153, 1, 196, 35, 201, 56, 33, 105, 133, 3, 41, 144, 213, 194, 121, 70, 212, 11, 119, 1, 29, 17, 46, 17, 202, 37, 92, 61, 84, 82, 184, 176, 40, 178, 112, 199, 209, 125, 59, 1, 174, 232, 171, 191, 181, 255, 160, 250, 69, 71, 253, 43, 217, 31, 178, 45, 3, 195, 254, 229, 106, 216, 191, 172, 14, 251, 139, 197, 2, 88, 105, 7, 136, 124, 50, 95, 1, 174, 172, 179, 3, 176, 6, 124, 10, 56, 157, 254, 26, 192, 185, 139, 193, 53, 224, 249, 97, 174, 194, 35, 71, 20, 28, 17, 68, 71, 56, 88, 8, 156, 179, 40, 16, 83, 225, 16, 119, 94, 16, 8, 180, 66, 76, 223, 4, 2, 157, 44, 178, 186, 2, 197, 54, 41, 2, 1, 77, 36, 144, 11, 212, 51, 8, 252, 85, 64, 115, 19, 129, 70, 251, 192, 200, 107, 130, 7, 95, 10, 174, 124, 34, 56, 37, 129, 195, 28, 4, 67, 193, 200, 64, 14, 26, 49, 72, 50, 54, 8, 149, 201, 248, 33, 153, 133, 211, 139, 96, 23, 78, 62, 74, 81, 184, 53, 104, 147, 112, 215, 80, 67, 225, 134, 162, 185, 46, 181, 64, 223, 237, 1, 248, 193, 234, 128, 82, 250, 234, 111, 237, 63, 168, 126, 177, 170, 250, 199, 236, 159, 54, 22, 173, 250, 197, 160, 250, 203, 252, 123, 191, 250, 247, 30, 252, 127, 88, 3, 245, 57, 99, 107, 0, 207, 218, 217, 1, 2, 247, 211, 238, 0, 209, 95, 3, 56, 83, 159, 53, 102, 224, 217, 96, 102, 158, 37, 102, 44, 60, 126, 196, 194, 113, 65, 146, 132, 67, 134, 240, 9, 71, 19, 145, 21, 14, 244, 170, 47, 8, 196, 250, 155, 64, 100, 165, 209, 246, 36, 5, 33, 160, 15, 0, 245, 8, 184, 105, 12, 104, 206, 64, 136, 235, 0, 35, 175, 9, 30, 124, 77, 112, 215, 6, 167, 52, 6, 206, 28, 67, 105, 201, 129, 98, 220, 73, 38, 4, 225, 49, 153, 52, 132, 208, 56, 171, 136, 113, 225, 168, 11, 180, 64, 184, 38, 168, 79, 225, 126, 161, 119, 194, 173, 68, 91, 93, 100, 20, 92, 184, 251, 112, 130, 117, 1, 141, 88, 47, 208, 142, 117, 4, 77, 149, 187, 90, 251, 119, 212, 63, 102, 127, 168, 181, 124, 187, 190, 253, 197, 98, 1, 20, 237, 14, 16, 171, 238, 0, 129, 107, 237, 236, 0, 129, 83, 232, 236, 0, 129, 243, 245, 185, 99, 30, 158, 19, 230, 231, 185, 98, 222, 194, 81, 64, 68, 156, 30, 164, 74, 56, 112, 8, 162, 112, 76, 17, 223, 194, 17, 223, 198, 38, 16, 89, 81, 180, 215, 100, 213, 97, 1, 144, 238, 16, 48, 75, 11, 220, 36, 32, 175, 62, 16, 34, 128, 70, 119, 25, 92, 57, 192, 93, 247, 193, 121, 10, 156, 121, 11, 166, 134, 153, 38, 153, 4, 129, 156, 152, 12, 21, 242, 102, 156, 76, 132, 182, 112, 176, 5, 50, 47, 92, 10, 129, 190, 8, 23, 10, 69, 19, 174, 33, 234, 41, 92, 94, 148, 90, 184, 239, 240, 128, 21, 1, 117, 88, 41, 80, 141, 152, 161, 254, 49, 251, 67, 146, 101, 206, 49, 251, 67, 191, 229, 100, 216, 191, 236, 61, 102, 255, 210, 254, 237, 5, 32, 58, 59, 64, 228, 67, 251, 249, 112, 29, 157, 29, 32, 112, 135, 157, 29, 32, 112, 118, 62, 83, 156, 245, 81, 174, 1, 129, 144, 57, 127, 2, 209, 20, 14, 46, 2, 45, 50, 241, 40, 67, 225, 182, 160, 72, 197, 166, 54, 129, 128, 2, 32, 136, 4, 90, 17, 240, 206, 32, 144, 87, 1, 199, 77, 4, 26, 157, 2, 188, 60, 15, 60, 230, 20, 112, 229, 19, 193, 41, 21, 56, 207, 65, 48, 23, 12, 14, 96, 226, 200, 131, 201, 252, 32, 90, 198, 33, 20, 136, 104, 225, 24, 11, 36, 188, 112, 11, 80, 144, 194, 13, 66, 179, 132, 123, 135, 74, 10, 183, 21, 69, 22, 238, 56, 186, 111, 45, 64, 23, 98, 37, 245, 139, 65, 245, 139, 142, 250, 199, 236, 15, 145, 150, 93, 199, 236, 159, 126, 22, 29, 245, 219, 254, 226, 208, 2, 16, 254, 8, 124, 102, 187, 3, 68, 103, 7, 8, 92, 125, 103, 7, 8, 156, 203, 14, 174, 1, 225, 96, 33, 112, 194, 113, 68, 76, 133, 67, 44, 144, 111, 225, 2, 8, 116, 163, 112, 127, 80, 45, 147, 37, 68, 63, 77, 150, 25, 61, 79, 160, 6, 136, 3, 64, 58, 2, 86, 234, 0, 199, 25, 8, 113, 125, 224, 229, 121, 224, 49, 215, 7, 119, 109, 112, 74, 99, 224, 216, 5, 70, 211, 146, 99, 197, 208, 147, 204, 137, 64, 138, 76, 70, 14, 105, 44, 28, 90, 129, 60, 23, 206, 60, 234, 80, 184, 47, 168, 146, 112, 209, 4, 58, 40, 220, 80, 52, 87, 184, 215, 232, 187, 85, 0, 69, 8, 219, 3, 86, 177, 109, 96, 33, 219, 9, 214, 26, 84, 191, 232, 168, 127, 204, 254, 144, 109, 25, 24, 246, 47, 87, 143, 217, 31, 194, 223, 251, 85, 191, 231, 172, 192, 159, 118, 118, 128, 200, 39, 243, 21, 224, 202, 58, 59, 64, 224, 158, 251, 107, 0, 167, 41, 6, 119, 128, 240, 96, 48, 48, 15, 18, 3, 246, 236, 145, 9, 225, 184, 32, 70, 194, 33, 67, 248, 68, 166, 19, 193, 21, 142, 53, 226, 94, 184, 18, 2, 109, 41, 220, 40, 148, 205, 100, 45, 209, 216, 36, 27, 142, 254, 131, 180, 134, 128, 83, 90, 96, 37, 1, 115, 45, 5, 66, 4, 208, 232, 206, 130, 203, 110, 193, 93, 247, 193, 145, 22, 56, 249, 22, 204, 14, 147, 77, 50, 15, 2, 105, 49, 153, 46, 4, 207, 56, 162, 2, 233, 45, 156, 112, 132, 191, 112, 65, 4, 186, 35, 220, 44, 148, 78, 184, 146, 168, 170, 112, 145, 81, 112, 225, 250, 67, 11, 194, 198, 128, 73, 108, 24, 152, 167, 175, 254, 214, 254, 131, 234, 23, 29, 245, 143, 217, 63, 109, 44, 58, 234, 135, 253, 203, 252, 123, 63, 244, 187, 15, 254, 191, 252, 59, 225, 207, 193, 99, 181, 59, 64, 116, 118, 128, 192, 253, 244, 215, 0, 78, 74, 108, 123, 13, 8, 71, 1, 17, 113, 122, 144, 42, 225, 204, 9, 196, 81, 56, 172, 8, 113, 225, 148, 163, 0, 133, 75, 34, 208, 159, 34, 107, 134, 6, 154, 172, 43, 154, 156, 100, 243, 225, 5, 0, 161, 8, 24, 103, 16, 104, 171, 128, 224, 166, 3, 141, 78, 4, 118, 94, 9, 60, 212, 68, 112, 217, 211, 193, 65, 21, 56, 210, 49, 48, 29, 140, 15, 228, 220, 5, 82, 97, 50, 69, 2, 25, 51, 25, 72, 100, 181, 112, 158, 17, 245, 194, 117, 16, 104, 138, 112, 149, 4, 90, 38, 220, 65, 212, 83, 184, 188, 40, 181, 112, 223, 225, 1, 43, 66, 192, 30, 182, 10, 108, 51, 79, 253, 173, 253, 7, 213, 47, 58, 234, 135, 253, 203, 204, 99, 246, 135, 222, 203, 249, 7, 11, 192, 59, 64, 224, 227, 58, 59, 64, 228, 211, 139, 25, 107, 0, 167, 32, 6, 215, 128, 79, 19, 167, 236, 211, 199, 84, 132, 7, 134, 65, 122, 192, 152, 189, 112, 44, 16, 23, 225, 48, 33, 100, 194, 17, 68, 52, 69, 102, 23, 177, 22, 153, 123, 84, 162, 112, 109, 4, 26, 85, 100, 241, 208, 201, 36, 59, 140, 134, 39, 144, 2, 148, 209, 2, 227, 8, 40, 105, 12, 8, 46, 129, 16, 55, 2, 236, 188, 18, 120, 168, 77, 129, 187, 54, 56, 168, 14, 56, 121, 129, 233, 180, 228, 112, 49, 250, 36, 211, 34, 144, 37, 147, 217, 67, 44, 141, 211, 139, 96, 27, 231, 31, 213, 40, 220, 29, 212, 74, 184, 116, 2, 125, 20, 110, 43, 90, 44, 220, 113, 116, 223, 90, 128, 46, 132, 77, 2, 195, 88, 62, 144, 146, 101, 5, 137, 245, 213, 223, 218, 127, 186, 250, 69, 71, 253, 99, 246, 47, 243, 31, 44, 128, 162, 179, 3, 4, 30, 189, 179, 3, 4, 174, 187, 179, 3, 4, 78, 196, 39, 133, 19, 244, 201, 226, 196, 61, 9, 76, 72, 120, 120, 24, 170, 231, 141, 28, 8, 71, 4, 209, 17, 14, 22, 2, 39, 50, 145, 8, 171, 112, 148, 5, 82, 46, 92, 3, 129, 134, 20, 46, 146, 64, 199, 76, 22, 18, 93, 77, 178, 219, 104, 62, 72, 95, 8, 216, 164, 5, 62, 42, 160, 173, 165, 64, 136, 0, 26, 221, 89, 112, 217, 45, 184, 235, 165, 224, 84, 5, 14, 127, 16, 76, 16, 243, 77, 50, 21, 2, 153, 49, 153, 49, 129, 4, 22, 153, 85, 196, 216, 56, 237, 40, 66, 225, 166, 160, 68, 133, 91, 134, 2, 10, 215, 19, 181, 21, 46, 181, 64, 223, 173, 2, 40, 66, 216, 30, 176, 138, 133, 3, 17, 89, 80, 16, 151, 152, 161, 254, 49, 251, 67, 185, 229, 225, 49, 251, 67, 230, 101, 120, 219, 95, 28, 90, 0, 194, 31, 129, 207, 236, 236, 0, 129, 107, 234, 236, 0, 129, 187, 245, 41, 224, 116, 118, 127, 13, 8, 68, 80, 56, 160, 8, 110, 225, 112, 35, 244, 133, 139, 33, 208, 25, 227, 118, 13, 254, 20, 105, 145, 45, 69, 135, 147, 236, 60, 140, 208, 2, 155, 192, 53, 99, 64, 91, 5, 236, 54, 29, 104, 116, 37, 224, 232, 41, 224, 17, 166, 131, 203, 94, 9, 156, 85, 129, 83, 29, 4, 3, 18, 152, 32, 200, 233, 11, 100, 35, 201, 56, 33, 105, 198, 177, 20, 72, 108, 145, 217, 70, 236, 11, 87, 67, 160, 53, 194, 181, 18, 104, 156, 112, 31, 81, 85, 225, 34, 163, 224, 194, 245, 135, 22, 132, 141, 1, 147, 88, 50, 144, 143, 88, 73, 253, 98, 80, 253, 162, 163, 254, 49, 251, 67, 203, 229, 234, 49, 251, 67, 248, 123, 191, 242, 119, 157, 21, 248, 211, 206, 14, 16, 120, 190, 206, 14, 16, 184, 147, 29, 92, 3, 194, 81, 64, 68, 132, 3, 132, 96, 9, 199, 14, 113, 44, 156, 87, 68, 185, 112, 214, 81, 3, 227, 182, 160, 72, 38, 43, 135, 54, 154, 172, 174, 64, 177, 19, 232, 0, 178, 104, 129, 107, 4, 124, 212, 1, 118, 75, 96, 195, 13, 2, 71, 79, 1, 143, 176, 65, 112, 215, 9, 206, 170, 3, 206, 95, 96, 70, 0, 35, 70, 0, 64, 198, 6, 161, 50, 153, 64, 132, 211, 56, 198, 2, 9, 47, 92, 4, 129, 142, 8, 151, 72, 160, 95, 194, 5, 20, 232, 166, 112, 115, 209, 104, 225, 190, 195, 3, 194, 150, 128, 61, 44, 22, 8, 71, 244, 213, 47, 224, 52, 187, 14, 14, 28, 84, 191, 232, 168, 127, 204, 254, 80, 119, 249, 188, 181, 191, 204, 191, 247, 43, 126, 231, 226, 255, 140, 237, 0, 129, 199, 234, 236, 0, 129, 171, 188, 27, 214, 128, 112, 10, 17, 80, 145, 9, 70, 184, 11, 167, 31, 197, 48, 89, 33, 180, 203, 100, 21, 209, 210, 36, 91, 141, 194, 3, 200, 2, 42, 25, 4, 50, 18, 16, 214, 82, 160, 194, 65, 96, 210, 221, 4, 215, 220, 130, 27, 95, 10, 14, 182, 192, 249, 183, 96, 136, 2, 83, 78, 50, 27, 2, 201, 73, 50, 108, 200, 161, 201, 208, 34, 207, 133, 99, 47, 208, 136, 194, 173, 65, 161, 10, 55, 14, 77, 20, 174, 42, 42, 44, 92, 112, 129, 238, 91, 11, 208, 133, 176, 76, 32, 25, 97, 255, 192, 75, 246, 21, 60, 102, 191, 193, 123, 246, 33, 60, 57, 168, 126, 209, 81, 255, 152, 253, 161, 247, 114, 254, 193, 2, 40, 58, 107, 0, 143, 232, 103, 194, 21, 244, 215, 0, 238, 77, 12, 238, 0, 49, 184, 3, 132, 143, 21, 199, 237, 49, 96, 60, 194, 195, 195, 80, 61, 111, 228, 64, 56, 34, 72, 79, 225, 120, 33, 118, 194, 161, 20, 200, 171, 112, 160, 5, 178, 94, 100, 37, 208, 150, 34, 75, 133, 190, 153, 44, 167, 64, 117, 147, 108, 59, 92, 208, 2, 143, 64, 52, 99, 64, 88, 6, 118, 91, 9, 152, 116, 6, 144, 117, 11, 62, 126, 6, 184, 230, 149, 192, 89, 21, 56, 216, 49, 48, 38, 129, 57, 130, 204, 128, 64, 66, 146, 12, 21, 34, 103, 50, 159, 136, 174, 201, 144, 35, 255, 133, 59, 130, 250, 20, 238, 23, 170, 87, 184, 155, 232, 172, 112, 169, 81, 118, 97, 21, 64, 17, 194, 246, 128, 85, 44, 28, 1, 23, 217, 81, 112, 215, 60, 245, 183, 246, 159, 161, 254, 49, 251, 151, 246, 111, 47, 0, 81, 127, 177, 145, 53, 128, 235, 22, 131, 107, 192, 247, 143, 115, 241, 121, 225, 28, 133, 143, 24, 71, 239, 145, 96, 90, 194, 131, 196, 128, 133, 199, 143, 88, 8, 135, 6, 97, 18, 142, 26, 34, 88, 56, 166, 136, 111, 225, 136, 11, 164, 191, 200, 146, 160, 63, 38, 203, 134, 30, 154, 44, 173, 64, 165, 19, 136, 0, 154, 104, 129, 101, 4, 76, 212, 7, 118, 51, 80, 225, 150, 128, 172, 91, 240, 241, 219, 0, 55, 158, 224, 172, 58, 96, 4, 2, 99, 106, 193, 160, 17, 3, 144, 225, 65, 180, 146, 140, 34, 82, 106, 156, 103, 68, 221, 184, 17, 40, 75, 225, 66, 9, 116, 77, 184, 140, 40, 105, 225, 22, 163, 221, 194, 221, 135, 19, 132, 141, 1, 147, 88, 50, 144, 143, 176, 151, 224, 43, 171, 12, 138, 179, 250, 160, 196, 190, 250, 199, 236, 15, 57, 79, 81, 127, 113, 104, 1, 20, 157, 29, 32, 240, 76, 157, 29, 32, 112, 15, 190, 55, 220, 179, 207, 2, 103, 228, 179, 195, 153, 10, 31, 55, 198, 224, 9, 97, 114, 194, 67, 197, 176, 133, 163, 128, 136, 8, 7, 8, 193, 42, 28, 62, 132, 178, 112, 106, 17, 232, 194, 161, 23, 232, 67, 225, 218, 8, 52, 202, 100, 253, 4, 202, 105, 178, 204, 2, 85, 7, 208, 4, 36, 50, 8, 76, 84, 64, 88, 75, 129, 10, 7, 129, 73, 119, 16, 92, 240, 32, 184, 241, 41, 224, 108, 5, 70, 48, 8, 70, 41, 48, 235, 4, 33, 65, 132, 146, 140, 28, 2, 105, 50, 189, 8, 182, 113, 254, 81, 141, 194, 245, 17, 104, 150, 112, 245, 4, 90, 41, 92, 91, 212, 89, 184, 236, 2, 30, 176, 34, 4, 236, 97, 177, 64, 56, 194, 46, 130, 163, 172, 47, 104, 205, 186, 131, 6, 173, 71, 104, 211, 58, 133, 102, 203, 189, 99, 246, 135, 192, 203, 234, 176, 191, 216, 251, 193, 223, 113, 86, 224, 79, 253, 209, 120, 148, 206, 14, 16, 184, 62, 95, 55, 238, 199, 247, 137, 251, 247, 185, 224, 188, 124, 142, 56, 95, 225, 163, 199, 72, 60, 45, 76, 81, 120, 192, 152, 189, 112, 44, 144, 152, 194, 145, 66, 212, 68, 102, 17, 49, 45, 156, 99, 68, 188, 112, 13, 4, 26, 98, 178, 78, 104, 154, 201, 90, 10, 148, 54, 65, 213, 33, 2, 0, 131, 8, 88, 102, 12, 8, 171, 128, 215, 86, 5, 38, 93, 159, 137, 202, 158, 14, 46, 120, 85, 112, 92, 6, 103, 59, 6, 38, 133, 81, 182, 32, 9, 200, 73, 146, 209, 66, 240, 146, 12, 42, 50, 92, 100, 218, 81, 132, 194, 101, 17, 232, 81, 225, 174, 161, 134, 133, 123, 138, 254, 10, 23, 28, 197, 23, 214, 2, 116, 33, 44, 19, 72, 70, 216, 63, 240, 146, 149, 5, 149, 89, 113, 80, 159, 24, 84, 191, 152, 161, 254, 49, 251, 67, 242, 101, 254, 189, 95, 254, 219, 15, 254, 191, 177, 53, 128, 199, 242, 115, 224, 185, 125, 77, 184, 214, 99, 92, 3, 194, 195, 195, 80, 61, 111, 129, 40, 8, 7, 5, 1, 18, 142, 151, 64, 242, 132, 163, 41, 144, 218, 194, 201, 70, 232, 141, 187, 129, 218, 152, 44, 152, 64, 253, 76, 214, 85, 160, 204, 9, 20, 0, 65, 12, 2, 203, 8, 104, 168, 3, 188, 150, 64, 133, 71, 195, 250, 202, 158, 1, 110, 60, 193, 113, 245, 193, 20, 4, 38, 213, 130, 113, 35, 12, 32, 35, 132, 128, 37, 25, 72, 196, 213, 56, 216, 2, 153, 47, 92, 13, 129, 214, 20, 110, 22, 74, 87, 184, 149, 40, 108, 225, 70, 163, 233, 194, 30, 128, 34, 132, 237, 1, 171, 8, 59, 7, 46, 178, 166, 160, 47, 107, 13, 186, 19, 54, 33, 12, 57, 168, 126, 49, 67, 253, 99, 246, 151, 252, 23, 11, 160, 232, 236, 0, 129, 199, 245, 243, 225, 58, 78, 214, 26, 16, 30, 63, 98, 33, 28, 26, 132, 169, 112, 224, 16, 196, 194, 97, 21, 200, 113, 225, 172, 163, 6, 38, 11, 131, 46, 153, 44, 30, 58, 153, 100, 141, 5, 74, 14, 32, 8, 232, 99, 12, 104, 72, 64, 85, 83, 128, 10, 199, 128, 76, 119, 13, 92, 237, 32, 184, 241, 41, 224, 120, 11, 76, 97, 16, 12, 20, 227, 110, 201, 168, 32, 72, 73, 102, 15, 177, 76, 50, 198, 72, 120, 225, 34, 8, 116, 164, 112, 143, 80, 177, 194, 53, 20, 104, 168, 112, 133, 81, 109, 225, 226, 11, 56, 65, 216, 24, 48, 137, 37, 35, 224, 31, 171, 9, 202, 178, 202, 160, 56, 97, 251, 193, 138, 182, 37, 44, 106, 187, 194, 186, 51, 212, 95, 246, 63, 180, 0, 132, 255, 14, 159, 227, 199, 194, 115, 12, 238, 0, 49, 184, 3, 196, 224, 14, 16, 62, 8, 28, 144, 207, 14, 103, 42, 124, 220, 24, 131, 199, 131, 201, 9, 15, 21, 195, 22, 153, 6, 4, 69, 56, 70, 136, 87, 225, 252, 33, 154, 133, 227, 43, 144, 236, 34, 11, 128, 110, 20, 89, 33, 129, 130, 153, 44, 36, 186, 10, 178, 225, 2, 253, 7, 208, 135, 128, 95, 198, 128, 170, 12, 188, 54, 3, 200, 116, 215, 192, 213, 174, 10, 142, 203, 224, 120, 199, 192, 176, 4, 6, 218, 130, 60, 32, 45, 73, 102, 12, 241, 75, 50, 174, 8, 179, 201, 216, 163, 17, 69, 22, 7, 157, 18, 46, 157, 64, 31, 133, 11, 43, 208, 101, 225, 166, 67, 2, 194, 138, 128, 58, 132, 197, 2, 225, 8, 187, 8, 142, 178, 190, 160, 53, 97, 227, 193, 132, 243, 212, 63, 102, 127, 104, 220, 122, 79, 231, 239, 253, 178, 223, 118, 232, 247, 194, 31, 135, 207, 31, 220, 1, 98, 151, 215, 128, 192, 32, 61, 99, 129, 241, 11, 135, 3, 161, 17, 153, 42, 4, 78, 100, 34, 17, 214, 34, 3, 141, 172, 23, 89, 9, 180, 197, 100, 181, 208, 186, 36, 139, 42, 80, 227, 4, 229, 135, 26, 6, 129, 95, 4, 28, 212, 7, 94, 3, 176, 225, 157, 10, 238, 58, 193, 113, 245, 193, 32, 10, 204, 171, 5, 67, 71, 36, 64, 6, 9, 49, 75, 50, 153, 8, 173, 201, 132, 35, 252, 198, 29, 65, 125, 140, 91, 134, 2, 22, 110, 40, 202, 43, 92, 109, 129, 214, 11, 59, 1, 186, 16, 54, 9, 36, 35, 236, 31, 120, 201, 202, 130, 202, 132, 45, 7, 251, 109, 86, 253, 99, 246, 135, 234, 197, 98, 1, 20, 248, 139, 193, 29, 32, 6, 215, 128, 175, 6, 87, 233, 171, 199, 93, 249, 110, 113, 10, 194, 7, 132, 131, 243, 153, 226, 172, 133, 199, 128, 241, 8, 15, 15, 67, 21, 30, 57, 162, 32, 50, 43, 136, 145, 112, 200, 4, 242, 39, 28, 80, 129, 236, 22, 142, 184, 64, 250, 77, 86, 5, 45, 50, 89, 57, 180, 49, 201, 2, 11, 212, 27, 64, 13, 2, 238, 24, 4, 2, 42, 160, 170, 137, 192, 134, 131, 64, 166, 59, 5, 46, 117, 12, 220, 245, 20, 112, 188, 5, 6, 49, 6, 102, 138, 161, 3, 4, 6, 113, 74, 50, 129, 2, 249, 52, 25, 102, 228, 220, 184, 17, 40, 139, 113, 167, 80, 183, 194, 125, 68, 85, 11, 119, 25, 53, 23, 150, 128, 128, 31, 132, 237, 1, 171, 8, 59, 7, 46, 178, 166, 160, 47, 97, 179, 193, 120, 150, 33, 36, 105, 121, 66, 170, 150, 45, 36, 220, 87, 127, 107, 255, 210, 254, 222, 15, 252, 214, 179, 162, 179, 3, 4, 30, 209, 207, 132, 43, 240, 149, 225, 138, 125, 39, 184, 67, 223, 57, 78, 68, 248, 176, 112, 136, 62, 95, 156, 187, 240, 72, 48, 42, 225, 65, 98, 192, 34, 19, 128, 112, 8, 71, 7, 145, 42, 28, 59, 196, 177, 112, 100, 5, 210, 92, 56, 244, 2, 125, 48, 89, 30, 244, 42, 201, 30, 162, 165, 0, 245, 70, 249, 91, 224, 14, 152, 165, 3, 84, 101, 224, 181, 25, 64, 166, 59, 5, 46, 117, 6, 56, 46, 131, 227, 237, 128, 145, 9, 204, 180, 5, 169, 64, 102, 146, 76, 154, 64, 14, 77, 230, 22, 145, 54, 153, 127, 84, 195, 184, 65, 40, 87, 225, 2, 10, 116, 83, 184, 188, 2, 189, 22, 110, 61, 132, 32, 172, 11, 104, 68, 88, 50, 144, 143, 176, 154, 160, 44, 97, 155, 193, 114, 22, 32, 196, 104, 97, 66, 164, 98, 80, 253, 98, 134, 250, 133, 204, 127, 176, 0, 188, 3, 4, 62, 218, 143, 130, 71, 223, 133, 53, 32, 48, 6, 79, 72, 96, 120, 158, 171, 192, 200, 133, 3, 129, 160, 20, 78, 18, 66, 86, 56, 133, 8, 104, 225, 16, 11, 228, 219, 100, 25, 208, 19, 147, 165, 66, 223, 18, 84, 20, 5, 78, 80, 123, 1, 47, 180, 192, 44, 5, 4, 212, 7, 94, 3, 176, 225, 157, 10, 238, 26, 224, 196, 250, 96, 22, 2, 35, 27, 4, 115, 71, 48, 0, 18, 133, 188, 153, 204, 167, 64, 122, 77, 70, 29, 45, 40, 178, 47, 168, 82, 225, 186, 9, 52, 81, 184, 170, 2, 45, 22, 174, 185, 128, 1, 132, 253, 0, 117, 8, 91, 5, 194, 17, 118, 17, 52, 37, 108, 48, 152, 205, 210, 131, 12, 45, 73, 200, 83, 172, 164, 126, 177, 84, 253, 197, 237, 5, 80, 248, 35, 240, 153, 59, 184, 6, 132, 143, 30, 35, 17, 30, 24, 6, 41, 60, 102, 140, 95, 100, 62, 16, 29, 145, 217, 66, 236, 10, 231, 18, 145, 53, 78, 54, 66, 111, 178, 30, 104, 78, 146, 77, 67, 15, 19, 84, 23, 197, 6, 144, 130, 128, 53, 198, 128, 128, 10, 120, 106, 34, 80, 225, 24, 240, 233, 238, 128, 235, 28, 3, 119, 61, 17, 156, 112, 129, 89, 12, 130, 177, 10, 140, 30, 32, 54, 8, 85, 146, 57, 20, 72, 169, 201, 84, 35, 240, 198, 213, 16, 104, 77, 225, 114, 9, 244, 174, 112, 55, 81, 219, 194, 189, 70, 229, 133, 133, 32, 224, 10, 97, 147, 192, 48, 194, 254, 129, 151, 172, 44, 1, 155, 89, 116, 16, 160, 197, 8, 97, 10, 187, 20, 142, 181, 123, 225, 100, 187, 26, 14, 135, 250, 139, 189, 95, 250, 91, 94, 18, 248, 211, 254, 26, 192, 243, 9, 95, 10, 46, 209, 151, 142, 91, 242, 221, 226, 20, 132, 15, 8, 7, 231, 3, 197, 89, 11, 143, 1, 227, 17, 30, 30, 134, 42, 114, 234, 8, 132, 112, 92, 4, 146, 36, 28, 53, 129, 20, 22, 78, 42, 66, 108, 50, 238, 104, 130, 201, 218, 160, 81, 73, 54, 16, 253, 4, 40, 54, 106, 223, 2, 107, 8, 152, 165, 3, 60, 101, 32, 181, 121, 192, 167, 187, 3, 174, 115, 30, 56, 49, 131, 19, 238, 128, 169, 9, 76, 182, 5, 217, 64, 114, 146, 204, 155, 64, 26, 77, 166, 87, 32, 219, 38, 139, 128, 142, 20, 174, 146, 64, 203, 10, 55, 17, 37, 45, 220, 98, 20, 188, 176, 1, 32, 7, 97, 117, 64, 41, 194, 194, 17, 112, 145, 53, 5, 125, 9, 155, 13, 198, 179, 12, 33, 73, 97, 127, 194, 171, 246, 45, 60, 220, 87, 191, 128, 231, 101, 254, 131, 5, 208, 238, 0, 49, 184, 3, 68, 127, 13, 224, 90, 133, 111, 3, 183, 231, 59, 199, 137, 8, 31, 22, 14, 209, 231, 139, 115, 23, 30, 9, 166, 85, 120, 156, 24, 179, 112, 8, 16, 142, 194, 1, 66, 176, 10, 135, 79, 32, 151, 69, 198, 23, 201, 46, 178, 0, 232, 70, 146, 93, 66, 211, 18, 148, 19, 213, 5, 232, 60, 140, 48, 8, 180, 34, 160, 158, 165, 64, 106, 0, 42, 188, 83, 193, 93, 3, 156, 88, 31, 140, 163, 192, 212, 6, 193, 244, 145, 13, 128, 92, 33, 117, 73, 6, 21, 25, 54, 153, 121, 212, 193, 100, 113, 208, 169, 194, 189, 67, 37, 11, 215, 86, 160, 209, 194, 149, 135, 10, 10, 187, 2, 14, 17, 150, 12, 228, 35, 172, 38, 40, 75, 216, 102, 176, 156, 5, 8, 49, 10, 59, 19, 46, 221, 160, 250, 139, 219, 11, 160, 192, 199, 249, 243, 241, 184, 126, 62, 92, 135, 175, 15, 215, 45, 124, 75, 184, 85, 159, 2, 78, 71, 248, 224, 112, 160, 194, 199, 141, 49, 8, 15, 9, 195, 19, 30, 45, 70, 94, 56, 22, 136, 75, 225, 60, 33, 106, 133, 227, 40, 144, 212, 34, 3, 141, 172, 155, 44, 6, 58, 147, 100, 199, 80, 191, 4, 165, 69, 165, 91, 96, 4, 248, 98, 12, 168, 167, 128, 164, 166, 3, 21, 142, 1, 159, 238, 8, 184, 200, 14, 184, 235, 137, 224, 144, 11, 140, 99, 12, 12, 87, 96, 250, 0, 225, 65, 180, 64, 6, 18, 89, 53, 153, 109, 129, 228, 23, 217, 17, 212, 199, 184, 101, 40, 96, 225, 146, 10, 244, 87, 184, 224, 2, 221, 23, 150, 3, 164, 81, 216, 42, 176, 141, 176, 139, 224, 40, 97, 131, 193, 108, 150, 30, 100, 40, 236, 73, 248, 211, 106, 133, 114, 173, 98, 40, 218, 234, 134, 210, 33, 252, 189, 95, 242, 155, 191, 39, 240, 167, 248, 28, 63, 22, 158, 195, 207, 141, 107, 242, 181, 226, 30, 132, 111, 15, 183, 237, 19, 193, 73, 9, 31, 34, 14, 87, 248, 232, 49, 18, 225, 129, 97, 144, 133, 135, 141, 16, 136, 76, 9, 2, 84, 56, 97, 8, 95, 225, 128, 10, 100, 215, 56, 229, 40, 64, 146, 109, 65, 151, 146, 236, 30, 106, 9, 80, 105, 20, 190, 5, 190, 16, 112, 74, 7, 72, 42, 129, 212, 230, 1, 159, 238, 8, 184, 200, 217, 224, 196, 12, 14, 185, 3, 6, 39, 48, 220, 65, 144, 16, 228, 39, 201, 212, 9, 100, 50, 201, 24, 35, 225, 198, 117, 16, 104, 138, 113, 167, 80, 183, 194, 149, 20, 104, 107, 225, 70, 163, 236, 133, 109, 0, 75, 8, 107, 4, 122, 17, 150, 143, 128, 151, 172, 44, 168, 76, 88, 116, 16, 160, 176, 27, 225, 76, 235, 20, 154, 181, 126, 161, 101, 235, 26, 26, 23, 240, 188, 204, 191, 247, 253, 191, 233, 197, 218, 1, 59, 181, 6, 4, 14, 206, 103, 138, 179, 22, 57, 9, 12, 73, 120, 132, 24, 173, 240, 224, 5, 50, 33, 28, 26, 129, 60, 21, 206, 28, 226, 88, 56, 178, 2, 105, 54, 25, 125, 180, 194, 100, 133, 4, 10, 150, 160, 150, 40, 45, 64, 219, 225, 130, 65, 224, 148, 2, 234, 89, 10, 164, 6, 160, 194, 59, 21, 220, 53, 192, 137, 45, 5, 19, 17, 24, 220, 32, 8, 128, 64, 66, 0, 210, 133, 236, 37, 25, 87, 132, 217, 100, 242, 81, 10, 147, 13, 66, 185, 10, 23, 80, 160, 155, 133, 251, 139, 106, 23, 238, 62, 180, 80, 216, 27, 240, 137, 176, 109, 32, 34, 97, 77, 65, 95, 194, 102, 131, 244, 132, 125, 8, 79, 90, 161, 80, 171, 149, 11, 21, 139, 233, 234, 47, 22, 11, 160, 24, 220, 1, 2, 15, 116, 4, 107, 64, 248, 176, 112, 136, 194, 71, 140, 163, 23, 30, 12, 6, 38, 60, 78, 140, 185, 112, 20, 16, 145, 194, 49, 66, 188, 140, 83, 136, 128, 154, 140, 50, 82, 110, 178, 18, 104, 139, 201, 106, 9, 20, 47, 65, 93, 81, 230, 22, 184, 64, 192, 23, 99, 64, 61, 5, 12, 53, 29, 168, 176, 3, 148, 186, 11, 224, 10, 59, 224, 174, 39, 130, 67, 54, 152, 200, 24, 152, 175, 64, 6, 0, 34, 132, 128, 129, 140, 37, 66, 155, 100, 200, 145, 127, 147, 101, 65, 143, 10, 215, 77, 160, 137, 133, 11, 139, 34, 23, 46, 187, 128, 7, 132, 69, 1, 129, 20, 54, 12, 204, 35, 236, 37, 248, 74, 216, 102, 176, 156, 5, 40, 224, 70, 107, 19, 58, 181, 102, 161, 95, 97, 51, 195, 216, 240, 185, 213, 95, 218, 191, 189, 0, 132, 255, 14, 159, 131, 71, 20, 126, 50, 92, 132, 175, 15, 215, 45, 124, 75, 184, 85, 31, 1, 78, 71, 248, 224, 112, 160, 194, 199, 141, 49, 8, 15, 9, 195, 43, 60, 96, 12, 190, 112, 50, 16, 154, 194, 193, 66, 224, 140, 115, 137, 200, 154, 12, 55, 114, 111, 178, 36, 2, 21, 50, 89, 57, 129, 66, 2, 148, 25, 85, 111, 129, 41, 10, 8, 165, 3, 12, 149, 64, 106, 179, 129, 82, 119, 1, 92, 225, 108, 112, 98, 6, 135, 220, 7, 179, 19, 24, 113, 11, 66, 34, 144, 162, 4, 241, 67, 56, 147, 12, 51, 162, 110, 178, 23, 168, 140, 113, 185, 4, 122, 87, 184, 158, 2, 205, 21, 174, 182, 64, 235, 133, 181, 32, 96, 12, 97, 165, 64, 53, 194, 34, 18, 112, 148, 245, 37, 96, 54, 75, 15, 50, 20, 246, 36, 252, 105, 181, 66, 185, 194, 54, 134, 165, 161, 113, 235, 61, 157, 191, 247, 139, 127, 227, 11, 249, 123, 225, 143, 195, 231, 227, 209, 133, 159, 24, 23, 228, 107, 197, 61, 8, 223, 30, 110, 219, 39, 130, 147, 18, 62, 68, 156, 175, 200, 211, 199, 96, 132, 199, 134, 113, 138, 156, 55, 162, 32, 50, 43, 136, 81, 145, 81, 67, 10, 139, 12, 43, 114, 108, 50, 244, 232, 131, 201, 242, 8, 84, 43, 65, 33, 81, 87, 128, 158, 67, 4, 99, 64, 40, 2, 210, 153, 2, 164, 6, 160, 194, 59, 18, 220, 114, 11, 78, 108, 41, 24, 74, 129, 217, 13, 130, 24, 8, 228, 4, 32, 99, 72, 96, 146, 161, 69, 164, 147, 172, 0, 218, 97, 178, 74, 104, 89, 145, 101, 68, 79, 11, 119, 25, 53, 47, 236, 1, 40, 162, 176, 67, 224, 22, 97, 243, 64, 74, 194, 202, 130, 202, 132, 69, 7, 1, 10, 187, 17, 206, 180, 78, 161, 89, 97, 3, 195, 204, 80, 183, 149, 14, 213, 139, 197, 2, 40, 240, 23, 254, 28, 60, 22, 158, 73, 248, 34, 112, 113, 190, 110, 220, 143, 240, 173, 226, 8, 132, 15, 8, 7, 39, 124, 172, 56, 110, 225, 97, 96, 72, 194, 35, 20, 152, 174, 240, 248, 5, 146, 33, 28, 29, 129, 84, 21, 25, 62, 228, 178, 200, 248, 34, 217, 38, 107, 32, 80, 18, 147, 165, 18, 168, 92, 130, 162, 162, 198, 45, 176, 128, 128, 41, 198, 128, 116, 12, 12, 53, 29, 168, 176, 15, 196, 122, 188, 224, 218, 58, 224, 150, 87, 2, 231, 92, 96, 40, 99, 96, 196, 2, 49, 104, 65, 144, 16, 51, 144, 225, 68, 116, 147, 140, 58, 138, 96, 178, 53, 40, 148, 113, 239, 80, 73, 227, 230, 162, 212, 133, 91, 15, 33, 20, 54, 6, 100, 34, 172, 26, 1, 11, 9, 59, 10, 238, 18, 54, 27, 140, 39, 236, 67, 120, 210, 10, 133, 90, 133, 173, 11, 27, 67, 215, 98, 76, 253, 165, 253, 189, 95, 244, 27, 190, 43, 238, 176, 53, 32, 48, 54, 225, 161, 98, 216, 133, 3, 129, 160, 20, 14, 147, 64, 206, 10, 199, 81, 32, 169, 38, 99, 141, 196, 155, 172, 7, 154, 147, 100, 217, 4, 170, 8, 80, 99, 148, 124, 16, 152, 66, 192, 38, 125, 96, 168, 4, 70, 91, 7, 136, 245, 120, 193, 181, 173, 3, 78, 44, 193, 57, 119, 192, 248, 10, 76, 185, 5, 81, 65, 144, 0, 66, 136, 136, 38, 153, 106, 4, 62, 201, 130, 160, 59, 69, 182, 12, 5, 52, 238, 41, 42, 92, 184, 230, 2, 6, 16, 86, 132, 128, 61, 132, 221, 2, 237, 8, 75, 73, 192, 87, 194, 54, 131, 229, 44, 64, 1, 55, 90, 155, 208, 169, 176, 105, 97, 96, 40, 90, 244, 213, 47, 100, 254, 131, 5, 112, 100, 107, 64, 224, 86, 125, 4, 56, 29, 225, 131, 195, 129, 138, 60, 113, 12, 67, 120, 84, 24, 97, 225, 25, 99, 252, 133, 243, 129, 232, 20, 142, 151, 64, 242, 140, 51, 138, 248, 154, 12, 58, 58, 144, 100, 109, 208, 40, 128, 42, 162, 168, 0, 37, 23, 176, 192, 32, 80, 73, 1, 233, 76, 1, 70, 3, 80, 225, 29, 9, 110, 185, 5, 39, 54, 5, 204, 69, 96, 124, 99, 32, 9, 136, 74, 11, 146, 134, 28, 38, 153, 94, 4, 59, 201, 46, 160, 38, 198, 133, 18, 232, 90, 145, 173, 68, 97, 11, 151, 90, 160, 239, 133, 157, 0, 87, 8, 203, 68, 192, 51, 194, 22, 130, 160, 132, 245, 5, 173, 9, 75, 15, 50, 20, 246, 36, 20, 42, 108, 87, 88, 23, 90, 22, 54, 54, 76, 110, 195, 219, 249, 135, 22, 64, 225, 15, 194, 39, 251, 65, 241, 100, 184, 26, 225, 11, 197, 13, 8, 223, 30, 110, 219, 39, 34, 112, 88, 194, 71, 137, 35, 22, 30, 0, 6, 35, 114, 114, 24, 170, 240, 200, 5, 210, 80, 56, 49, 8, 147, 113, 230, 16, 71, 147, 193, 69, 166, 77, 22, 0, 221, 72, 178, 78, 2, 101, 75, 80, 81, 20, 184, 5, 10, 16, 112, 68, 7, 72, 199, 64, 79, 211, 129, 10, 251, 64, 172, 199, 8, 46, 172, 15, 110, 121, 37, 112, 206, 6, 115, 25, 3, 131, 22, 8, 67, 11, 226, 132, 176, 129, 140, 40, 2, 156, 100, 230, 81, 135, 36, 235, 131, 102, 21, 46, 160, 64, 55, 11, 87, 88, 160, 221, 133, 13, 0, 57, 20, 182, 7, 196, 34, 172, 29, 1, 35, 9, 251, 10, 30, 19, 182, 28, 4, 40, 236, 70, 56, 211, 58, 21, 48, 45, 84, 44, 108, 105, 216, 219, 86, 135, 237, 247, 190, 239, 71, 159, 23, 248, 83, 225, 79, 192, 3, 249, 9, 240, 196, 184, 50, 225, 139, 198, 253, 8, 223, 42, 142, 64, 248, 128, 112, 112, 194, 199, 138, 227, 22, 57, 15, 140, 74, 120, 144, 24, 112, 225, 16, 8, 228, 163, 112, 134, 16, 47, 147, 65, 68, 70, 139, 140, 178, 64, 208, 77, 22, 3, 157, 73, 178, 102, 2, 37, 4, 40, 176, 64, 195, 91, 224, 136, 2, 42, 233, 3, 61, 25, 232, 108, 77, 32, 214, 99, 4, 23, 182, 38, 56, 180, 4, 231, 220, 7, 19, 20, 24, 244, 32, 72, 11, 226, 4, 16, 69, 4, 53, 201, 108, 11, 36, 223, 100, 77, 80, 34, 147, 117, 67, 19, 11, 23, 86, 160, 203, 133, 251, 14, 21, 20, 214, 5, 52, 82, 216, 51, 80, 144, 176, 160, 4, 220, 37, 108, 54, 24, 79, 216, 135, 240, 164, 21, 10, 181, 10, 232, 87, 216, 204, 48, 182, 77, 14, 195, 151, 249, 247, 126, 225, 175, 255, 78, 253, 127, 39, 110, 13, 8, 12, 64, 120, 60, 24, 91, 225, 209, 98, 228, 133, 99, 33, 144, 152, 34, 131, 133, 204, 21, 25, 77, 164, 214, 100, 196, 145, 254, 36, 219, 130, 46, 1, 148, 16, 21, 5, 168, 183, 64, 255, 199, 128, 74, 10, 24, 103, 41, 208, 89, 11, 84, 120, 71, 130, 91, 110, 193, 161, 77, 1, 115, 41, 48, 193, 49, 144, 7, 4, 166, 5, 121, 67, 26, 147, 204, 176, 64, 194, 77, 54, 2, 101, 49, 217, 44, 148, 206, 100, 61, 209, 220, 194, 237, 70, 241, 11, 203, 65, 192, 27, 194, 98, 17, 112, 142, 176, 145, 32, 43, 97, 149, 65, 113, 194, 2, 132, 24, 133, 181, 9, 157, 10, 40, 87, 216, 198, 176, 180, 237, 13, 171, 91, 248, 146, 255, 98, 1, 20, 254, 83, 124, 180, 240, 3, 225, 9, 252, 196, 184, 32, 129, 139, 246, 253, 8, 220, 170, 79, 65, 224, 128, 132, 143, 15, 199, 42, 124, 232, 24, 70, 225, 105, 97, 144, 133, 39, 141, 16, 20, 14, 138, 64, 134, 138, 140, 26, 82, 104, 50, 178, 72, 179, 201, 232, 163, 21, 9, 138, 132, 154, 37, 40, 167, 64, 123, 91, 208, 127, 1, 65, 140, 1, 221, 24, 184, 105, 37, 160, 194, 165, 192, 173, 199, 2, 46, 105, 41, 184, 229, 149, 192, 81, 27, 140, 166, 3, 102, 45, 144, 135, 22, 36, 10, 145, 3, 25, 84, 196, 56, 201, 228, 11, 244, 194, 100, 137, 208, 47, 227, 38, 162, 164, 198, 93, 70, 205, 11, 171, 64, 192, 18, 133, 77, 2, 195, 8, 43, 72, 192, 78, 194, 238, 130, 211, 132, 141, 7, 25, 10, 123, 18, 10, 21, 112, 172, 245, 11, 45, 11, 27, 27, 38, 183, 228, 173, 253, 219, 11, 160, 240, 71, 224, 51, 133, 31, 20, 79, 230, 235, 192, 245, 9, 220, 128, 240, 237, 225, 182, 133, 15, 5, 135, 37, 124, 148, 56, 226, 194, 51, 192, 120, 132, 135, 39, 48, 215, 194, 179, 71, 44, 10, 71, 71, 32, 85, 133, 195, 39, 144, 75, 147, 33, 70, 190, 147, 236, 3, 218, 146, 100, 193, 4, 234, 7, 80, 93, 129, 110, 15, 2, 65, 8, 72, 164, 15, 220, 148, 64, 103, 235, 3, 183, 30, 11, 184, 164, 245, 193, 161, 37, 56, 234, 62, 24, 98, 129, 89, 15, 130, 204, 32, 84, 0, 129, 68, 92, 147, 76, 184, 64, 254, 77, 246, 5, 85, 50, 217, 59, 84, 210, 184, 185, 40, 117, 225, 226, 11, 56, 161, 176, 55, 160, 148, 194, 206, 129, 139, 132, 101, 5, 137, 21, 182, 28, 236, 39, 236, 70, 56, 83, 192, 171, 86, 46, 84, 44, 108, 105, 216, 219, 98, 135, 240, 247, 126, 193, 175, 123, 78, 224, 79, 253, 209, 120, 20, 225, 39, 192, 19, 251, 154, 112, 173, 2, 55, 35, 124, 171, 56, 2, 225, 3, 194, 193, 21, 62, 92, 28, 186, 240, 72, 4, 166, 37, 60, 78, 129, 73, 23, 78, 3, 130, 82, 56, 76, 2, 57, 51, 25, 74, 228, 213, 100, 184, 145, 251, 36, 123, 130, 22, 1, 212, 15, 229, 108, 65, 183, 209, 252, 49, 32, 145, 2, 186, 153, 2, 116, 54, 8, 108, 120, 231, 129]);
fileData4.push.apply(fileData4, [251, 109, 193, 161, 77, 1, 163, 41, 48, 196, 49, 16, 9, 129, 204, 180, 32, 117, 200, 100, 146, 73, 22, 200, 185, 201, 94, 136, 255, 127, 187, 118, 222, 110, 217, 218, 95, 5, 121, 127, 17, 81, 20, 53, 54, 160, 38, 16, 120, 33, 33, 33, 64, 128, 132, 23, 65, 81, 84, 84, 208, 111, 135, 98, 223, 68, 69, 176, 67, 177, 239, 219, 111, 227, 175, 234, 57, 103, 236, 81, 247, 156, 107, 174, 185, 214, 94, 187, 186, 179, 174, 235, 254, 35, 111, 157, 218, 123, 175, 249, 60, 99, 140, 121, 170, 78, 104, 77, 116, 197, 104, 223, 210, 61, 165, 194, 75, 106, 62, 88, 128, 37, 43, 193, 128, 44, 89, 24, 198, 103, 201, 58, 177, 90, 35, 179, 198, 220, 141, 140, 33, 35, 57, 24, 210, 145, 153, 101, 126, 71, 150, 153, 197, 206, 152, 51, 242, 63, 31, 255, 234, 255, 247, 242, 103, 255, 149, 255, 119, 189, 3, 30, 251, 26, 24, 124, 116, 158, 109, 228, 201, 7, 135, 50, 114, 100, 28, 229, 200, 65, 115, 1, 75, 46, 137, 203, 91, 114, 193, 92, 124, 36, 31, 68, 39, 146, 48, 194, 23, 29, 83, 18, 220, 58, 241, 244, 161, 81, 33, 10, 6, 154, 73, 111, 183, 104, 254, 96, 29, 14, 48, 55, 193, 54, 221, 138, 53, 188, 138, 121, 253, 204, 248, 48, 103, 240, 188, 55, 225, 168, 131, 171, 57, 192, 117, 15, 34, 177, 139, 92, 145, 58, 144, 88, 242, 220, 186, 2, 180, 35, 186, 77, 20, 45, 82, 201, 65, 91, 151, 148, 122, 208, 247, 37, 179, 48, 88, 140, 145, 73, 25, 172, 205, 200, 28, 49, 83, 75, 118, 140, 125, 27, 89, 63, 134, 113, 48, 158, 35, 187, 202, 228, 142, 172, 49, 43, 157, 1, 103, 216, 215, 244, 47, 31, 94, 0, 75, 126, 137, 223, 157, 239, 194, 119, 31, 249, 193, 124, 160, 145, 143, 203, 99, 12, 30, 117, 228, 32, 56, 160, 145, 227, 227, 88, 151, 28, 61, 87, 178, 228, 206, 184, 206, 37, 247, 77, 20, 34, 137, 33, 76, 209, 177, 35, 145, 209, 241, 37, 217, 173, 155, 64, 73, 26, 213, 162, 120, 160, 180, 131, 86, 239, 98, 29, 22, 70, 228, 24, 219, 212, 152, 179, 135, 96, 94, 63, 51, 62, 204, 67, 112, 104, 141, 163, 190, 138, 123, 28, 92, 247, 46, 98, 51, 136, 22, 136, 37, 161, 109, 157, 243, 65, 11, 90, 23, 135, 78, 69, 23, 144, 110, 46, 169, 240, 160, 221, 75, 70, 96, 176, 15, 35, 3, 50, 216, 150, 145, 241, 25, 236, 210, 200, 112, 49, 104, 75, 22, 143, 37, 28, 172, 229, 200, 150, 178, 177, 153, 223, 193, 50, 103, 180, 25, 243, 158, 254, 53, 251, 175, 47, 128, 37, 255, 152, 175, 204, 119, 28, 252, 176, 124, 8, 62, 223, 200, 71, 231, 145, 6, 143, 61, 114, 40, 28, 214, 146, 3, 229, 160, 71, 223, 4, 151, 52, 250, 22, 185, 224, 37, 9, 32, 28, 209, 49, 34, 97, 75, 7, 145, 140, 182, 206, 52, 113, 111, 221, 16, 250, 3, 138, 71, 45, 183, 104, 245, 160, 249, 151, 48, 34, 11, 91, 115, 6, 115, 182, 139, 53, 252, 206, 240, 176, 187, 56, 180, 147, 184, 157, 133, 123, 188, 132, 84, 12, 146, 179, 69, 246, 72, 102, 235, 60, 15, 210, 222, 186, 32, 116, 39, 186, 107, 212, 48, 186, 176, 116, 121, 73, 229, 7, 107, 176, 100, 49, 24, 147, 37, 107, 195, 16, 45, 89, 42, 22, 108, 100, 226, 152, 190, 193, 60, 142, 140, 231, 96, 87, 51, 185, 76, 241, 200, 74, 51, 224, 219, 233, 95, 94, 126, 251, 175, 254, 63, 163, 127, 105, 228, 183, 242, 93, 70, 126, 0, 63, 56, 159, 137, 207, 58, 242, 24, 60, 225, 224, 20, 150, 28, 19, 199, 55, 114, 184, 131, 115, 31, 185, 24, 46, 108, 201, 165, 14, 238, 123, 233, 88, 144, 152, 165, 131, 69, 230, 162, 3, 74, 118, 163, 131, 62, 168, 65, 163, 60, 84, 11, 116, 146, 198, 110, 209, 249, 133, 105, 56, 192, 214, 4, 195, 116, 43, 214, 240, 36, 118, 246, 243, 224, 51, 156, 193, 195, 222, 138, 163, 110, 220, 206, 1, 110, 124, 16, 140, 93, 164, 139, 236, 129, 220, 146, 234, 214, 69, 160, 38, 173, 107, 69, 227, 34, 221, 164, 182, 209, 5, 167, 251, 75, 246, 129, 233, 88, 50, 47, 204, 206, 146, 93, 98, 178, 150, 108, 26, 91, 55, 152, 196, 145, 193, 100, 72, 71, 102, 150, 249, 29, 89, 102, 22, 59, 99, 206, 200, 143, 89, 254, 151, 223, 250, 43, 255, 247, 122, 7, 60, 228, 53, 48, 242, 17, 249, 232, 35, 15, 198, 3, 15, 14, 101, 228, 200, 56, 202, 37, 199, 205, 53, 44, 185, 42, 174, 112, 201, 53, 15, 18, 176, 116, 80, 200, 80, 36, 109, 164, 176, 117, 106, 9, 116, 116, 1, 6, 245, 104, 148, 138, 202, 109, 209, 88, 250, 124, 9, 211, 48, 152, 143, 171, 24, 166, 198, 156, 61, 16, 59, 251, 121, 240, 25, 30, 133, 67, 3, 167, 125, 140, 171, 92, 184, 241, 93, 132, 103, 144, 46, 16, 78, 162, 139, 14, 60, 117, 104, 93, 31, 154, 21, 169, 225, 160, 161, 145, 46, 83, 243, 200, 26, 48, 20, 75, 198, 100, 176, 51, 35, 67, 52, 216, 168, 145, 17, 99, 220, 22, 54, 112, 100, 33, 89, 206, 145, 93, 101, 111, 71, 214, 152, 149, 206, 128, 51, 236, 35, 155, 255, 225, 5, 176, 228, 151, 248, 173, 249, 46, 124, 247, 145, 31, 204, 7, 26, 249, 184, 60, 198, 200, 67, 242, 240, 131, 3, 90, 114, 136, 28, 238, 146, 211, 231, 98, 150, 220, 28, 151, 186, 228, 226, 7, 153, 88, 18, 157, 65, 170, 162, 35, 72, 58, 163, 163, 60, 8, 122, 235, 110, 80, 27, 80, 57, 10, 185, 69, 159, 7, 157, 191, 132, 249, 8, 182, 230, 12, 182, 108, 23, 107, 248, 157, 225, 97, 119, 113, 104, 39, 113, 59, 11, 87, 121, 9, 193, 24, 132, 103, 139, 248, 13, 242, 217, 58, 213, 131, 204, 183, 174, 9, 37, 138, 110, 220, 160, 143, 75, 55, 151, 82, 71, 186, 207, 44, 44, 153, 142, 193, 170, 44, 89, 30, 22, 105, 100, 178, 6, 107, 54, 24, 189, 145, 73, 100, 42, 71, 134, 116, 176, 177, 153, 95, 102, 249, 210, 223, 246, 44, 217, 249, 53, 251, 175, 47, 128, 37, 255, 152, 47, 203, 119, 28, 252, 188, 124, 14, 62, 223, 200, 71, 231, 169, 70, 158, 121, 112, 28, 131, 35, 27, 125, 166, 28, 247, 200, 101, 12, 238, 105, 201, 93, 114, 205, 75, 162, 48, 72, 73, 116, 164, 72, 91, 116, 46, 73, 109, 116, 196, 7, 5, 104, 212, 134, 82, 129, 54, 82, 215, 93, 116, 126, 176, 11, 199, 216, 154, 96, 152, 110, 197, 26, 158, 199, 212, 190, 55, 126, 250, 73, 60, 236, 29, 56, 237, 224, 118, 14, 112, 233, 11, 217, 216, 34, 96, 131, 4, 130, 244, 146, 237, 214, 117, 160, 44, 173, 203, 69, 239, 162, 75, 74, 127, 151, 110, 58, 35, 176, 100, 40, 6, 27, 178, 100, 103, 152, 160, 37, 27, 197, 124, 45, 172, 220, 200, 6, 50, 143, 35, 227, 201, 168, 142, 76, 46, 83, 124, 211, 244, 47, 47, 127, 230, 95, 254, 191, 250, 127, 47, 249, 173, 124, 139, 145, 31, 192, 207, 30, 249, 88, 124, 220, 145, 135, 225, 33, 71, 142, 128, 163, 89, 56, 193, 145, 35, 230, 232, 151, 92, 207, 224, 230, 150, 220, 46, 23, 31, 201, 7, 209, 137, 14, 25, 249, 139, 14, 235, 32, 202, 209, 209, 31, 20, 163, 81, 39, 202, 182, 69, 87, 7, 125, 222, 197, 40, 44, 204, 199, 85, 12, 19, 152, 179, 7, 98, 106, 223, 27, 63, 253, 129, 56, 49, 112, 218, 87, 113, 155, 131, 75, 191, 132, 252, 12, 50, 6, 34, 74, 128, 209, 177, 167, 20, 173, 75, 68, 197, 162, 251, 72, 85, 35, 165, 30, 244, 125, 201, 44, 12, 22, 99, 201, 170, 48, 56, 75, 70, 137, 177, 90, 216, 180, 145, 209, 27, 236, 225, 200, 90, 178, 162, 35, 27, 203, 246, 30, 76, 127, 198, 124, 176, 243, 51, 254, 31, 94, 0, 193, 63, 206, 151, 241, 29, 71, 126, 24, 159, 99, 228, 35, 242, 209, 71, 30, 140, 7, 94, 114, 34, 28, 214, 224, 64, 151, 28, 58, 151, 177, 228, 194, 6, 119, 185, 228, 190, 137, 66, 116, 104, 200, 83, 116, 248, 200, 101, 116, 136, 7, 17, 143, 174, 196, 160, 48, 160, 108, 84, 113, 139, 38, 15, 218, 126, 128, 249, 88, 88, 153, 243, 152, 179, 93, 12, 226, 247, 132, 39, 221, 197, 137, 157, 196, 5, 5, 183, 121, 9, 241, 24, 68, 104, 139, 16, 18, 81, 16, 111, 194, 223, 186, 44, 84, 169, 117, 245, 104, 101, 116, 133, 105, 247, 146, 17, 24, 236, 195, 146, 13, 97, 94, 150, 76, 208, 96, 157, 6, 35, 182, 100, 229, 88, 191, 145, 121, 100, 54, 71, 70, 117, 176, 183, 153, 226, 193, 74, 103, 192, 25, 246, 145, 205, 127, 249, 211, 255, 210, 255, 185, 228, 151, 248, 173, 249, 46, 124, 247, 145, 31, 204, 103, 26, 249, 184, 60, 201, 146, 71, 229, 8, 70, 14, 136, 131, 91, 56, 226, 37, 119, 192, 245, 44, 185, 194, 193, 237, 46, 29, 2, 242, 177, 116, 140, 72, 88, 116, 28, 73, 106, 235, 112, 15, 162, 223, 40, 12, 117, 2, 85, 164, 168, 187, 104, 251, 194, 40, 28, 96, 101, 26, 195, 116, 7, 6, 241, 60, 214, 246, 157, 240, 67, 111, 194, 147, 222, 129, 211, 14, 46, 232, 24, 247, 62, 136, 199, 46, 98, 54, 200, 33, 200, 48, 9, 111, 93, 10, 42, 211, 186, 101, 20, 48, 186, 173, 20, 57, 186, 242, 172, 193, 146, 197, 96, 76, 150, 12, 206, 96, 139, 22, 86, 107, 100, 214, 152, 187, 37, 123, 200, 78, 142, 12, 41, 3, 123, 199, 223, 246, 44, 217, 249, 53, 251, 175, 47, 128, 37, 255, 152, 47, 27, 249, 166, 252, 176, 145, 143, 194, 167, 28, 121, 0, 30, 108, 228, 177, 57, 142, 37, 71, 198, 81, 46, 156, 248, 146, 91, 225, 194, 150, 92, 234, 224, 190, 151, 142, 5, 137, 137, 142, 23, 201, 139, 142, 41, 9, 110, 29, 250, 65, 37, 26, 69, 162, 102, 91, 180, 116, 208, 228, 75, 24, 133, 193, 112, 156, 193, 48, 129, 57, 123, 44, 214, 246, 157, 240, 67, 31, 142, 19, 3, 167, 125, 21, 23, 186, 112, 239, 151, 144, 34, 98, 182, 69, 80, 137, 49, 58, 252, 84, 163, 117, 155, 40, 90, 235, 98, 210, 217, 72, 187, 41, 126, 100, 31, 152, 142, 37, 243, 50, 88, 158, 133, 141, 26, 25, 177, 193, 190, 141, 12, 32, 195, 184, 100, 57, 89, 212, 71, 77, 255, 242, 242, 167, 254, 197, 255, 163, 255, 247, 146, 223, 202, 183, 24, 249, 1, 252, 224, 145, 143, 197, 39, 30, 121, 24, 30, 114, 201, 65, 112, 64, 163, 79, 144, 195, 93, 184, 131, 209, 247, 196, 21, 46, 185, 230, 65, 2, 150, 4, 101, 144, 161, 232, 192, 145, 197, 214, 241, 37, 217, 173, 203, 48, 168, 10, 168, 25, 37, 220, 69, 147, 7, 85, 191, 132, 225, 8, 86, 230, 60, 230, 108, 23, 131, 248, 221, 224, 49, 47, 225, 196, 78, 226, 130, 130, 11, 61, 64, 66, 6, 41, 218, 34, 138, 4, 21, 132, 156, 10, 180, 110, 205, 160, 83, 209, 29, 164, 158, 209, 93, 166, 230, 145, 53, 96, 40, 150, 222, 19, 166, 102, 97, 145, 150, 172, 22, 131, 182, 100, 241, 88, 194, 145, 169, 100, 66, 71, 6, 118, 176, 189, 35, 203, 204, 98, 103, 204, 7, 59, 63, 227, 255, 225, 5, 16, 252, 227, 124, 25, 223, 113, 228, 135, 241, 33, 70, 62, 34, 159, 126, 201, 227, 241, 216, 35, 135, 50, 56, 175, 145, 3, 29, 156, 245, 224, 74, 150, 190, 57, 46, 117, 201, 197, 15, 50, 17, 29, 32, 178, 21, 29, 68, 50, 218, 58, 211, 36, 30, 84, 133, 34, 129, 18, 14, 90, 186, 139, 170, 15, 230, 224, 24, 43, 211, 24, 166, 59, 48, 136, 183, 98, 118, 31, 139, 159, 117, 19, 30, 243, 62, 156, 118, 227, 142, 14, 112, 245, 11, 9, 217, 69, 210, 136, 226, 22, 73, 38, 231, 173, 219, 49, 232, 78, 116, 215, 168, 97, 235, 218, 210, 232, 165, 187, 207, 44, 44, 189, 30, 12, 203, 194, 4, 45, 217, 40, 230, 107, 201, 190, 49, 125, 75, 182, 145, 205, 124, 236, 191, 242, 47, 217, 252, 151, 223, 252, 203, 255, 251, 146, 95, 226, 183, 230, 187, 12, 126, 64, 126, 246, 224, 99, 141, 124, 104, 158, 103, 228, 81, 57, 130, 37, 199, 196, 241, 45, 57, 98, 142, 126, 225, 146, 34, 119, 201, 53, 71, 7, 130, 172, 44, 29, 41, 210, 214, 58, 160, 100, 183, 17, 119, 202, 208, 168, 208, 160, 99, 160, 162, 131, 14, 95, 194, 28, 44, 12, 199, 25, 172, 18, 152, 179, 247, 192, 236, 62, 22, 63, 235, 61, 112, 98, 224, 180, 175, 226, 66, 23, 174, 254, 18, 130, 52, 8, 219, 22, 89, 37, 204, 232, 10, 80, 144, 214, 157, 26, 52, 46, 186, 161, 148, 55, 186, 230, 44, 192, 146, 161, 24, 108, 200, 194, 224, 44, 25, 165, 193, 94, 141, 12, 218, 96, 235, 70, 198, 144, 145, 28, 239, 58, 253, 107, 246, 95, 95, 0, 75, 254, 49, 95, 54, 242, 77, 249, 97, 35, 31, 133, 143, 56, 242, 0, 60, 219, 146, 135, 231, 80, 150, 156, 26, 7, 186, 228, 196, 185, 140, 133, 107, 139, 220, 46, 23, 31, 29, 17, 210, 19, 29, 53, 82, 216, 58, 181, 100, 186, 117, 13, 6, 37, 1, 5, 27, 52, 112, 139, 14, 15, 122, 126, 128, 225, 8, 86, 230, 60, 230, 236, 18, 54, 241, 251, 192, 51, 94, 194, 137, 157, 199, 29, 5, 119, 122, 9, 33, 25, 4, 105, 23, 105, 36, 174, 32, 234, 20, 161, 117, 119, 6, 205, 138, 110, 34, 37, 141, 110, 52, 101, 143, 204, 194, 96, 49, 22, 230, 101, 201, 4, 13, 214, 105, 100, 190, 6, 203, 54, 50, 125, 131, 85, 60, 185, 251, 131, 29, 30, 89, 105, 214, 123, 100, 219, 123, 240, 95, 254, 228, 191, 240, 191, 245, 255, 94, 242, 91, 249, 22, 35, 63, 128, 31, 60, 250, 147, 241, 161, 71, 30, 137, 167, 29, 125, 22, 28, 211, 232, 115, 228, 136, 151, 220, 1, 215, 19, 220, 229, 210, 87, 78, 26, 162, 163, 67, 170, 162, 35, 72, 58, 91, 167, 153, 172, 131, 146, 80, 33, 80, 191, 65, 63, 119, 209, 243, 133, 57, 56, 198, 196, 52, 86, 233, 62, 108, 226, 29, 24, 223, 183, 227, 251, 223, 129, 103, 188, 15, 167, 221, 184, 163, 99, 220, 254, 32, 36, 151, 144, 55, 2, 185, 69, 158, 73, 123, 235, 142, 12, 26, 20, 221, 184, 65, 31, 163, 203, 75, 175, 163, 71, 128, 125, 88, 88, 146, 37, 131, 51, 216, 162, 37, 123, 197, 148, 45, 217, 58, 102, 112, 100, 36, 7, 251, 57, 178, 174, 12, 239, 200, 44, 51, 215, 35, 99, 206, 200, 143, 25, 255, 15, 47, 128, 224, 31, 231, 43, 7, 223, 52, 63, 111, 240, 81, 70, 62, 40, 15, 48, 250, 9, 121, 248, 145, 163, 25, 156, 218, 200, 177, 14, 78, 124, 201, 173, 112, 97, 193, 237, 46, 29, 2, 242, 17, 29, 38, 114, 214, 58, 151, 164, 182, 17, 116, 106, 0, 250, 67, 187, 182, 232, 231, 160, 192, 151, 48, 7, 11, 171, 113, 6, 171, 4, 230, 236, 253, 48, 190, 111, 199, 247, 127, 63, 156, 24, 56, 237, 51, 184, 211, 133, 219, 191, 132, 44, 13, 242, 182, 69, 98, 201, 51, 186, 8, 212, 164, 117, 179, 6, 189, 139, 238, 41, 21, 142, 238, 59, 83, 16, 236, 198, 146, 121, 25, 44, 207, 146, 117, 98, 184, 150, 44, 27, 163, 55, 62, 231, 191, 242, 47, 217, 252, 151, 63, 241, 207, 255, 175, 75, 126, 137, 223, 58, 242, 141, 248, 1, 35, 63, 158, 143, 53, 250, 115, 243, 72, 35, 15, 204, 89, 44, 57, 44, 14, 113, 201, 65, 15, 238, 96, 233, 171, 226, 22, 23, 238, 59, 58, 28, 228, 38, 58, 100, 228, 175, 117, 94, 73, 115, 235, 2, 12, 234, 1, 170, 53, 232, 222, 22, 237, 93, 40, 249, 1, 86, 35, 152, 152, 243, 152, 179, 75, 216, 196, 239, 0, 15, 120, 128, 19, 59, 143, 59, 10, 238, 244, 0, 57, 25, 196, 105, 23, 153, 36, 180, 32, 240, 212, 161, 117, 131, 6, 253, 106, 93, 73, 218, 26, 93, 109, 90, 31, 172, 196, 210, 99, 194, 206, 44, 217, 34, 102, 106, 201, 148, 13, 86, 110, 100, 6, 7, 11, 57, 178, 159, 76, 235, 200, 240, 14, 54, 121, 100, 177, 89, 242, 145, 157, 95, 179, 255, 250, 2, 88, 242, 143, 249, 178, 145, 111, 202, 15, 27, 253, 105, 248, 160, 35, 143, 193, 227, 45, 121, 126, 142, 102, 201, 217, 113, 172, 75, 142, 126, 112, 43, 75, 95, 30, 247, 186, 144, 128, 232, 184, 144, 164, 214, 201, 35, 148, 173, 115, 76, 202, 65, 61, 40, 207, 22, 221, 163, 153, 151, 80, 242, 193, 16, 92, 197, 196, 4, 147, 116, 55, 54, 241, 110, 172, 240, 29, 248, 134, 119, 227, 1, 239, 198, 129, 55, 238, 232, 24, 1, 88, 200, 201, 46, 34, 55, 200, 228, 22, 169, 38, 243, 173, 155, 50, 232, 81, 235, 234, 209, 202, 232, 22, 83, 240, 96, 16, 34, 187, 193, 164, 68, 150, 135, 81, 90, 50, 92, 131, 77, 27, 25, 189, 193, 30, 142, 12, 230, 96, 75, 71, 150, 150, 17, 30, 153, 104, 166, 123, 100, 216, 25, 252, 151, 63, 254, 207, 253, 47, 131, 95, 205, 239, 30, 124, 163, 145, 31, 195, 143, 31, 249, 112, 124, 232, 37, 79, 197, 3, 143, 62, 17, 14, 107, 201, 105, 114, 208, 75, 46, 99, 112, 79, 75, 174, 115, 112, 211, 65, 50, 162, 99, 68, 194, 90, 39, 146, 176, 54, 34, 78, 1, 64, 115, 232, 213, 22, 205, 28, 180, 247, 18, 134, 96, 97, 50, 206, 96, 146, 182, 152, 179, 247, 198, 10, 223, 129, 111, 248, 222, 56, 174, 45, 14, 252, 12, 174, 117, 33, 0, 7, 72, 20, 145, 219, 69, 110, 73, 53, 104, 4, 125, 105, 93, 49, 218, 215, 186, 176, 116, 57, 232, 254, 210, 43, 193, 128, 68, 118, 134, 9, 90, 50, 83, 131, 5, 27, 199, 127, 213, 51, 178, 144, 44, 231, 200, 180, 14, 86, 119, 100, 147, 217, 234, 145, 37, 103, 228, 199, 44, 255, 203, 111, 252, 165, 255, 121, 189, 3, 182, 175, 129, 145, 47, 230, 155, 142, 252, 72, 62, 202, 232, 207, 202, 99, 140, 60, 228, 224, 249, 71, 14, 104, 112, 124, 75, 206, 151, 163, 95, 114, 61, 131, 155, 139, 220, 49, 215, 31, 100, 165, 117, 182, 136, 93, 235, 164, 18, 226, 70, 244, 41, 198, 22, 189, 162, 117, 187, 104, 239, 160, 222, 7, 152, 140, 96, 95, 110, 194, 156, 29, 96, 25, 191, 117, 60, 221, 37, 28, 215, 77, 184, 166, 224, 90, 15, 16, 149, 133, 68, 109, 17, 203, 65, 110, 65, 236, 41, 69, 235, 30, 13, 90, 214, 186, 152, 116, 54, 168, 121, 100, 16, 6, 91, 177, 244, 170, 48, 56, 75, 70, 105, 176, 87, 227, 45, 187, 63, 178, 165, 204, 236, 200, 8, 15, 246, 121, 100, 189, 89, 245, 145, 205, 255, 240, 2, 88, 242, 75, 252, 214, 145, 111, 196, 15, 24, 253, 9, 248, 112, 35, 31, 157, 71, 90, 242, 216, 28, 199, 146, 35, 27, 28, 232, 146, 19, 231, 50, 34, 119, 198, 117, 70, 95, 60, 153, 8, 50, 20, 29, 184, 65, 28, 91, 39, 152, 124, 131, 98, 80, 155, 45, 90, 55, 104, 230, 46, 234, 189, 48, 4, 199, 216, 151, 198, 36, 189, 5, 203, 248, 70, 204, 241, 85, 124, 249, 219, 241, 116, 119, 227, 192, 27, 215, 116, 21, 25, 88, 72, 203, 46, 82, 55, 72, 38, 8, 246, 32, 249, 173, 251, 50, 104, 83, 235, 2, 82, 207, 70, 163, 163, 235, 207, 50, 44, 25, 144, 193, 182, 44, 153, 160, 193, 58, 141, 243, 187, 63, 216, 198, 145, 241, 100, 84, 151, 172, 46, 131, 60, 50, 215, 204, 248, 200, 200, 143, 53, 251, 175, 47, 128, 165, 127, 7, 95, 60, 242, 173, 249, 145, 35, 31, 136, 15, 186, 228, 97, 120, 200, 37, 167, 192, 1, 45, 57, 196, 193, 17, 47, 185, 3, 174, 39, 250, 34, 185, 227, 165, 163, 64, 74, 26, 193, 138, 14, 226, 32, 166, 141, 112, 19, 125, 208, 25, 74, 181, 69, 39, 7, 189, 61, 192, 10, 44, 236, 197, 25, 76, 210, 22, 115, 246, 217, 48, 199, 87, 241, 229, 159, 13, 199, 181, 197, 129, 159, 193, 181, 6, 25, 184, 132, 80, 13, 130, 183, 69, 116, 7, 217, 6, 189, 160, 53, 173, 139, 70, 13, 27, 205, 141, 110, 58, 35, 16, 61, 23, 44, 201, 146, 193, 25, 108, 209, 232, 221, 31, 172, 217, 200, 220, 13, 150, 112, 100, 42, 7, 43, 58, 50, 179, 204, 239, 146, 125, 102, 183, 71, 86, 157, 193, 127, 249, 99, 255, 236, 255, 52, 248, 213, 145, 47, 224, 27, 141, 252, 24, 126, 252, 146, 143, 200, 71, 31, 253, 108, 60, 246, 146, 115, 225, 200, 150, 62, 86, 14, 125, 233, 139, 225, 206, 150, 190, 90, 110, 61, 58, 34, 164, 167, 17, 184, 232, 128, 14, 226, 219, 8, 61, 149, 216, 162, 81, 84, 110, 23, 189, 93, 168, 247, 1, 246, 34, 216, 151, 155, 48, 103, 199, 24, 199, 111, 23, 207, 117, 128, 227, 186, 9, 215, 212, 184, 217, 3, 164, 101, 16, 170, 93, 132, 115, 144, 94, 16, 126, 170, 129, 46, 20, 117, 107, 52, 52, 186, 209, 148, 61, 122, 25, 24, 141, 232, 121, 97, 121, 198, 213, 221, 31, 217, 55, 118, 111, 201, 54, 50, 155, 75, 118, 149, 189, 29, 25, 100, 134, 122, 201, 146, 179, 240, 191, 241, 151, 62, 44, 255, 203, 175, 255, 51, 255, 227, 122, 7, 124, 124, 13, 248, 38, 200, 23, 243, 77, 151, 252, 96, 62, 208, 200, 199, 29, 60, 201, 200, 163, 14, 78, 97, 228, 152, 6, 39, 184, 244, 65, 115, 13, 75, 95, 21, 183, 24, 125, 229, 164, 33, 58, 58, 164, 170, 17, 196, 214, 217, 37, 214, 160, 18, 20, 102, 139, 190, 13, 58, 185, 139, 110, 47, 76, 192, 85, 140, 75, 99, 146, 222, 136, 113, 124, 32, 6, 122, 240, 27, 30, 139, 231, 122, 11, 14, 188, 113, 77, 87, 17, 131, 133, 192, 92, 66, 246, 8, 231, 22, 241, 38, 252, 232, 214, 12, 58, 213, 104, 98, 235, 242, 210, 235, 232, 17, 96, 31, 34, 75, 194, 200, 44, 87, 255, 158, 103, 100, 205, 24, 186, 37, 75, 200, 72, 46, 89, 81, 6, 118, 201, 2, 179, 204, 35, 211, 205, 164, 143, 12, 254, 248, 240, 2, 88, 250, 87, 249, 130, 145, 111, 199, 143, 25, 249, 16, 124, 184, 37, 15, 192, 131, 45, 121, 120, 14, 101, 201, 193, 13, 206, 116, 201, 209, 15, 46, 102, 201, 229, 13, 238, 53, 58, 4, 228, 163, 117, 158, 136, 90, 35, 160, 141, 88, 19, 122, 80, 24, 234, 180, 139, 78, 14, 74, 123, 9, 19, 16, 236, 197, 25, 76, 210, 46, 22, 237, 139, 96, 160, 7, 191, 225, 75, 225, 172, 182, 56, 240, 147, 184, 217, 133, 24, 28, 32, 87, 131, 236, 109, 17, 224, 65, 194, 65, 59, 232, 78, 163, 113, 173, 75, 74, 127, 163, 251, 206, 20, 68, 239, 6, 147, 178, 60, 112, 247, 7, 171, 56, 50, 155, 131, 69, 29, 153, 92, 166, 120, 201, 86, 179, 225, 235, 95, 249, 151, 204, 254, 235, 11, 32, 242, 155, 30, 248, 7, 130, 145, 231, 225, 81, 151, 156, 5, 199, 180, 228, 40, 7, 167, 188, 228, 50, 6, 87, 21, 125, 169, 220, 119, 116, 56, 200, 77, 116, 200, 6, 17, 108, 4, 183, 17, 119, 202, 176, 69, 151, 6, 125, 219, 69, 105, 7, 197, 62, 198, 94, 4, 227, 114, 43, 22, 237, 0, 227, 248, 141, 226, 161, 142, 113, 86, 55, 225, 154, 26, 55, 123, 128, 192, 44, 228, 106, 23, 249, 28, 100, 24, 84, 128, 130, 128, 102, 181, 46, 35, 85, 109, 93, 109, 90, 31, 61, 17, 172, 199, 210, 59, 195, 4, 69, 150, 138, 17, 91, 50, 116, 131, 13, 28, 25, 201, 193, 126, 142, 12, 236, 96, 123, 71, 198, 153, 209, 254, 104, 103, 250, 151, 151, 95, 251, 139, 255, 195, 224, 87, 71, 190, 96, 251, 26, 24, 249, 97, 124, 136, 209, 159, 146, 7, 24, 253, 132, 60, 252, 146, 211, 225, 224, 150, 28, 238, 224, 220, 35, 55, 196, 229, 69, 95, 51, 9, 136, 142, 203, 32, 76, 209, 225, 27, 68, 179, 17, 104, 80, 6, 170, 178, 69, 211, 6, 109, 188, 132, 98, 47, 76, 192, 85, 140, 75, 99, 146, 222, 136, 113, 252, 70, 241, 80, 111, 196, 129, 131, 155, 186, 138, 36, 44, 100, 102, 23, 241, 27, 68, 116, 139, 144, 83, 1, 80, 31, 116, 233, 168, 100, 235, 10, 83, 240, 232, 53, 96, 40, 34, 147, 50, 88, 155, 165, 119, 137, 201, 90, 50, 107, 131, 197, 91, 178, 138, 12, 230, 146, 69, 101, 108, 151, 172, 49, 43, 125, 176, 251, 99, 45, 255, 203, 31, 253, 167, 255, 251, 95, 251, 139, 227, 195, 255, 184, 245, 77, 144, 31, 60, 248, 76, 35, 31, 122, 240, 60, 35, 15, 60, 56, 139, 37, 231, 197, 81, 70, 78, 156, 203, 136, 190, 54, 110, 52, 250, 250, 73, 70, 116, 140, 6, 33, 107, 157, 75, 34, 11, 226, 14, 170, 66, 145, 118, 209, 198, 65, 99, 15, 208, 255, 96, 44, 206, 96, 143, 118, 177, 104, 79, 141, 179, 218, 226, 192, 79, 226, 102, 131, 36, 92, 66, 180, 6, 241, 219, 69, 140, 9, 249, 22, 29, 105, 221, 172, 65, 239, 90, 87, 149, 34, 183, 46, 62, 155, 176, 220, 244, 31, 117, 7, 235, 180, 100, 196, 6, 251, 182, 100, 3, 153, 199, 37, 251, 201, 180, 46, 217, 94, 102, 249, 163, 235, 211, 63, 179, 63, 227, 255, 225, 5, 16, 103, 94, 3, 99, 243, 195, 30, 243, 87, 67, 131, 211, 89, 114, 130, 28, 110, 244, 53, 112, 67, 75, 95, 36, 215, 28, 29, 136, 65, 92, 162, 227, 53, 8, 95, 35, 178, 4, 26, 52, 1, 20, 105, 208, 180, 93, 52, 118, 161, 216, 7, 88, 138, 198, 184, 220, 138, 69, 59, 198, 62, 126, 139, 120, 162, 99, 156, 213, 173, 184, 169, 224, 114, 143, 145, 153, 65, 180, 46, 33, 165, 196, 120, 139, 22, 128, 6, 209, 175, 214, 149, 164, 176, 173, 11, 78, 253, 163, 183, 130, 25, 137, 30, 28, 182, 104, 201, 100, 13, 214, 108, 201, 226, 49, 134, 75, 6, 115, 176, 165, 35, 99, 59, 216, 225, 115, 187, 255, 195, 244, 47, 159, 188, 0, 150, 187, 255, 64, 48, 242, 201, 248, 208, 75, 158, 138, 7, 94, 114, 40, 131, 243, 90, 250, 88, 57, 241, 165, 47, 134, 59, 139, 190, 96, 238, 62, 58, 40, 131, 24, 69, 199, 110, 16, 202, 70, 148, 9, 58, 40, 201, 46, 154, 54, 168, 226, 46, 90, 29, 244, 255, 42, 198, 165, 177, 71, 111, 199, 62, 126, 139, 120, 162, 55, 226, 192, 193, 77, 93, 69, 18, 22, 98, 115, 9, 9, 28, 164, 116, 139, 168, 131, 154, 80, 34, 116, 245, 40, 102, 235, 34, 83, 243, 56, 243, 47, 251, 35, 219, 194, 236, 68, 15, 20, 219, 181, 100, 223, 152, 190, 37, 243, 56, 88, 206, 145, 105, 29, 172, 238, 200, 44, 15, 22, 123, 100, 207, 153, 250, 241, 242, 171, 255, 212, 127, 183, 240, 15, 70, 190, 140, 111, 55, 250, 231, 241, 81, 70, 127, 86, 30, 99, 201, 115, 114, 4, 75, 142, 105, 112, 130, 75, 31, 52, 119, 16, 185, 45, 110, 49, 250, 202, 7, 153, 136, 14, 208, 32, 94, 209, 113, 28, 132, 21, 4, 157, 26, 108, 209, 162, 45, 122, 184, 80, 215, 75, 40, 127, 176, 20, 39, 177, 71, 187, 88, 180, 167, 224, 160, 118, 113, 224, 39, 113, 185, 65, 24, 14, 144, 174, 65, 8, 119, 145, 228, 45, 186, 64, 83, 26, 21, 163, 128, 173, 11, 75, 157, 91, 215, 159, 113, 136, 204, 200, 96, 97, 34, 91, 196, 76, 69, 214, 140, 161, 91, 50, 134, 131, 157, 92, 178, 165, 204, 236, 71, 175, 59, 204, 68, 143, 12, 120, 255, 43, 127, 172, 217, 127, 249, 149, 191, 240, 223, 142, 195, 215, 192, 119, 242, 38, 24, 220, 110, 116, 20, 72, 73, 235, 96, 13, 98, 215, 8, 43, 81, 6, 29, 160, 33, 91, 116, 108, 23, 93, 93, 168, 244, 49, 150, 162, 49, 46, 183, 98, 209, 174, 98, 37, 191, 45, 60, 203, 49, 14, 234, 14, 220, 84, 112, 185, 199, 136, 205, 66, 192, 118, 17, 212, 93, 164, 157, 46, 128, 30, 209, 178, 214, 197, 164, 182, 173, 155, 206, 8, 180, 30, 13, 246, 100, 233, 229, 97, 148, 34, 219, 197, 172, 45, 153, 190, 193, 42, 46, 89, 78, 70, 245, 163, 215, 213, 101, 144, 151, 171, 187, 191, 204, 242, 255, 240, 2, 224, 53, 48, 248, 178, 145, 55, 1, 63, 108, 201, 7, 58, 254, 171, 161, 193, 115, 46, 57, 11, 142, 105, 201, 81, 14, 78, 57, 250, 74, 184, 173, 232, 123, 229, 202, 163, 35, 66, 122, 90, 7, 110, 16, 199, 70, 136, 137, 248, 22, 13, 161, 63, 187, 232, 225, 37, 84, 122, 161, 252, 103, 48, 46, 96, 146, 222, 142, 149, 252, 182, 240, 44, 111, 199, 105, 131, 155, 186, 138, 48, 44, 196, 230, 0, 57, 220, 34, 204, 131, 180, 131, 178, 80, 37, 116, 1, 169, 103, 235, 70, 83, 246, 214, 227, 192, 110, 68, 143, 12, 251, 179, 244, 82, 49, 98, 75, 134, 110, 176, 129, 75, 118, 146, 9, 93, 50, 179, 131, 5, 30, 63, 238, 254, 206, 95, 245, 140, 108, 123, 111, 254, 203, 175, 252, 249, 191, 211, 255, 123, 201, 111, 229, 91, 44, 249, 49, 252, 248, 37, 159, 239, 142, 255, 72, 48, 114, 58, 28, 92, 228, 124, 57, 250, 232, 75, 226, 254, 162, 47, 155, 28, 180, 142, 14, 169, 106, 29, 196, 65, 76, 65, 196, 41, 192, 22, 253, 25, 116, 108, 23, 69, 61, 64, 249, 131, 165, 56, 143, 73, 218, 98, 209, 158, 130, 131, 218, 197, 105, 159, 199, 253, 46, 132, 225, 0, 1, 187, 132, 172, 14, 242, 12, 234, 48, 232, 75, 163, 104, 212, 176, 117, 115, 7, 189, 142, 222, 1, 38, 34, 122, 79, 152, 154, 200, 40, 13, 246, 106, 201, 172, 13, 22, 111, 201, 48, 14, 54, 115, 100, 84, 7, 123, 59, 50, 200, 103, 254, 149, 31, 47, 127, 228, 207, 255, 157, 229, 87, 254, 194, 109, 111, 130, 227, 191, 26, 26, 249, 196, 239, 253, 38, 24, 220, 71, 244, 229, 113, 175, 209, 33, 32, 31, 237, 147, 72, 109, 2, 215, 136, 41, 33, 6, 233, 167, 30, 91, 180, 107, 161, 132, 151, 80, 233, 99, 44, 69, 99, 89, 110, 197, 162, 157, 193, 80, 126, 43, 120, 138, 171, 56, 168, 59, 112, 83, 141, 251, 61, 70, 114, 46, 33, 135, 131, 184, 110, 17, 248, 65, 35, 64, 155, 232, 90, 251, 164, 161, 231, 70, 127, 176, 6, 209, 211, 193, 170, 68, 79, 16, 235, 180, 100, 196, 6, 251, 182, 100, 6, 7, 11, 249, 209, 209, 238, 143, 44, 48, 227, 188, 100, 189, 89, 245, 145, 217, 127, 249, 195, 255, 228, 127, 179, 228, 151, 248, 173, 35, 223, 104, 240, 51, 198, 91, 254, 35, 193, 232, 35, 224, 116, 150, 62, 68, 206, 119, 233, 107, 224, 134, 162, 175, 147, 155, 110, 157, 12, 114, 211, 136, 26, 65, 108, 196, 151, 112, 111, 209, 13, 202, 179, 139, 6, 46, 20, 245, 0, 205, 63, 131, 101, 1, 147, 244, 16, 12, 229, 183, 130, 167, 120, 8, 78, 27, 220, 212, 25, 228, 225, 0, 25, 27, 68, 113, 23, 145, 30, 100, 30, 84, 134, 66, 161, 107, 72, 73, 91, 247, 122, 208, 250, 232, 149, 96, 64, 162, 215, 134, 33, 138, 158, 44, 214, 108, 233, 209, 99, 15, 63, 122, 221, 76, 230, 116, 201, 222, 50, 197, 75, 182, 154, 25, 95, 178, 243, 107, 246, 95, 95, 0, 75, 254, 241, 173, 127, 32, 24, 39, 255, 35, 193, 216, 60, 240, 7, 125, 40, 156, 215, 210, 199, 202, 137, 71, 95, 15, 55, 23, 125, 205, 36, 160, 117, 98, 200, 83, 235, 8, 14, 2, 10, 194, 77, 244, 183, 104, 206, 160, 93, 151, 80, 212, 65, 153, 175, 98, 38, 206, 99, 146, 118, 49, 106, 79, 11, 167, 180, 139, 211, 62, 143, 251, 61, 70, 120, 22, 50, 182, 139, 184, 14, 34, 189, 69, 41, 168, 12, 168, 27, 101, 108, 221, 223, 65, 187, 163, 215, 96, 176, 21, 209, 195, 194, 230, 68, 214, 137, 225, 138, 236, 27, 211, 247, 163, 215, 133, 100, 60, 151, 236, 254, 29, 127, 213, 147, 97, 103, 240, 95, 126, 246, 231, 254, 107, 126, 105, 201, 23, 220, 245, 38, 248, 225, 131, 242, 0, 75, 30, 114, 108, 142, 224, 131, 28, 211, 224, 4, 35, 103, 205, 29, 68, 95, 24, 119, 217, 250, 238, 73, 70, 235, 36, 145, 51, 16, 80, 226, 11, 162, 79, 49, 118, 209, 174, 65, 3, 47, 161, 204, 65, 243, 207, 96, 89, 238, 192, 168, 157, 193, 86, 126, 253, 248, 252, 103, 112, 74, 119, 224, 166, 206, 32, 15, 11, 225, 57, 64, 26, 7, 137, 221, 34, 246, 131, 94, 52, 254, 159, 244, 7, 141, 107, 221, 211, 65, 139, 163, 91, 63, 216, 132, 232, 13, 97, 94, 34, 67, 52, 216, 168, 200, 154, 49, 116, 63, 122, 221, 67, 166, 114, 201, 156, 190, 101, 247, 7, 11, 191, 188, 252, 236, 231, 127, 123, 222, 1, 11, 255, 108, 244, 215, 243, 173, 71, 255, 108, 62, 214, 146, 143, 206, 35, 45, 121, 236, 177, 57, 148, 15, 114, 112, 131, 51, 141, 190, 0, 238, 38, 250, 34, 185, 227, 214, 153, 32, 49, 141, 144, 17, 193, 70, 112, 143, 255, 203, 193, 160, 21, 131, 230, 236, 162, 126, 131, 138, 30, 163, 249, 193, 76, 156, 199, 36, 61, 10, 91, 249, 245, 227, 243, 63, 10, 167, 125, 30, 247, 27, 228, 225, 0, 49, 91, 72, 227, 46, 82, 77, 236, 183, 40, 14, 181, 66, 151, 145, 170, 182, 110, 247, 160, 251, 209, 91, 49, 88, 146, 232, 217, 97, 145, 150, 222, 46, 102, 109, 233, 245, 99, 24, 151, 140, 231, 238, 238, 143, 108, 47, 179, 188, 100, 183, 153, 244, 37, 155, 255, 242, 135, 126, 254, 183, 151, 159, 253, 185, 47, 246, 38, 24, 57, 139, 221, 255, 98, 60, 250, 64, 57, 235, 165, 175, 132, 219, 106, 125, 187, 220, 125, 235, 172, 144, 164, 79, 84, 248, 6, 209, 4, 177, 126, 167, 247, 193, 160, 162, 11, 101, 190, 138, 153, 104, 44, 203, 29, 24, 181, 167, 193, 17, 221, 135, 155, 106, 220, 239, 49, 194, 179, 16, 179, 75, 8, 237, 32, 216, 91, 84, 131, 226, 160, 27, 55, 172, 100, 233, 22, 15, 58, 222, 122, 22, 88, 140, 232, 133, 97, 124, 162, 103, 138, 5, 91, 50, 116, 131, 13, 92, 50, 149, 239, 186, 251, 153, 253, 215, 23, 64, 228, 77, 192, 23, 47, 249, 1, 199, 127, 53, 52, 248, 220, 75, 30, 143, 199, 142, 156, 206, 221, 111, 130, 209, 87, 197, 45, 182, 190, 117, 2, 209, 58, 67, 36, 12, 68, 147, 224, 130, 208, 15, 90, 177, 69, 175, 6, 221, 59, 64, 153, 23, 106, 127, 18, 203, 2, 38, 233, 81, 152, 203, 175, 28, 31, 254, 129, 56, 109, 112, 83, 103, 16, 137, 32, 63, 151, 16, 200, 65, 104, 183, 110, 250, 91, 157, 165, 107, 53, 255, 214, 69, 239, 90, 183, 117, 208, 229, 214, 245, 103, 25, 162, 151, 132, 145, 137, 94, 36, 198, 42, 50, 107, 131, 197, 91, 50, 140, 111, 220, 253, 193, 98, 143, 236, 254, 207, 126, 254, 58, 253, 203, 203, 31, 252, 179, 255, 213, 224, 87, 151, 124, 25, 223, 110, 201, 207, 123, 227, 155, 96, 112, 22, 75, 31, 25, 167, 25, 125, 244, 220, 74, 244, 21, 114, 187, 209, 81, 24, 4, 165, 17, 47, 194, 247, 137, 138, 236, 66, 166, 65, 37, 62, 216, 52, 103, 139, 238, 45, 84, 244, 0, 157, 15, 54, 226, 38, 76, 210, 46, 70, 237, 105, 112, 68, 151, 112, 218, 231, 113, 197, 65, 36, 142, 145, 180, 65, 32, 119, 25, 236, 27, 23, 127, 88, 174, 79, 209, 74, 58, 219, 186, 230, 140, 64, 235, 209, 96, 79, 162, 199, 135, 93, 250, 209, 235, 130, 13, 246, 109, 169, 25, 116, 33, 151, 172, 40, 3, 187, 100, 132, 7, 251, 60, 50, 224, 219, 221, 31, 107, 249, 95, 126, 249, 183, 255, 203, 245, 127, 45, 252, 166, 113, 252, 87, 67, 35, 159, 224, 27, 122, 19, 12, 174, 188, 117, 74, 8, 80, 35, 118, 132, 82, 159, 6, 122, 144, 248, 45, 58, 243, 193, 166, 90, 187, 168, 232, 66, 147, 143, 177, 17, 141, 89, 185, 15, 163, 118, 18, 139, 249, 213, 226, 99, 159, 196, 17, 221, 135, 203, 106, 92, 241, 85, 228, 103, 33, 105, 187, 182, 255, 130, 63, 200, 246, 22, 237, 176, 62, 159, 162, 122, 20, 179, 117, 151, 7, 77, 111, 61, 14, 76, 71, 244, 206, 48, 65, 209, 123, 197, 148, 69, 22, 143, 49, 140, 108, 38, 115, 186, 100, 114, 7, 107, 188, 100, 177, 25, 243, 37, 107, 63, 227, 255, 225, 5, 16, 249, 7, 131, 175, 25, 239, 255, 38, 184, 225, 47, 136, 6, 231, 30, 125, 73, 220, 95, 244, 101, 15, 162, 208, 58, 61, 100, 11, 132, 146, 200, 234, 211, 184, 15, 250, 176, 139, 82, 125, 176, 169, 223, 46, 106, 28, 116, 254, 12, 102, 101, 139, 73, 122, 32, 22, 243, 171, 197, 199, 126, 44, 78, 27, 92, 214, 25, 68, 34, 136, 208, 174, 15, 91, 127, 215, 220, 15, 242, 111, 65, 54, 232, 23, 237, 107, 221, 217, 65, 163, 91, 143, 0, 19, 209, 122, 82, 88, 155, 232, 105, 98, 181, 150, 140, 219, 96, 250, 34, 11, 201, 120, 46, 25, 216, 193, 246, 46, 217, 103, 166, 123, 201, 182, 247, 230, 127, 242, 2, 136, 252, 86, 190, 197, 114, 252, 31, 9, 70, 62, 229, 125, 111, 130, 145, 147, 226, 16, 163, 143, 155, 155, 136, 190, 182, 193, 165, 70, 135, 96, 16, 145, 70, 176, 136, 29, 200, 43, 105, 222, 162, 15, 180, 229, 18, 138, 247, 193, 199, 78, 82, 212, 75, 232, 124, 176, 17, 55, 97, 146, 46, 97, 215, 158, 56, 159, 75, 56, 237, 243, 184, 226, 70, 42, 46, 217, 221, 250, 65, 38, 119, 17, 239, 227, 191, 199, 95, 104, 16, 253, 2, 221, 164, 185, 173, 203, 206, 20, 180, 158, 14, 134, 37, 122, 133, 24, 168, 200, 148, 13, 86, 110, 233, 61, 100, 42, 151, 204, 233, 96, 105, 151, 147, 187, 63, 216, 249, 241, 242, 7, 126, 235, 191, 88, 126, 249, 183, 135, 255, 56, 95, 201, 55, 93, 242, 131, 249, 64, 145, 207, 189, 251, 38, 24, 121, 114, 14, 37, 250, 248, 56, 217, 232, 107, 224, 134, 162, 175, 115, 112, 217, 209, 225, 24, 68, 167, 17, 56, 226, 8, 162, 60, 200, 250, 142, 79, 11, 51, 104, 212, 37, 148, 243, 7, 183, 188, 21, 6, 3, 209, 152, 149, 187, 177, 107, 39, 49, 154, 95, 33, 62, 240, 121, 156, 207, 125, 184, 172, 198, 21, 31, 123, 203, 214, 15, 162, 59, 140, 247, 30, 58, 66, 137, 64, 1, 169, 39, 186, 212, 84, 190, 245, 68, 48, 32, 229, 117, 109, 6, 91, 20, 53, 92, 110, 218, 146, 233, 27, 172, 226, 146, 241, 28, 236, 234, 146, 249, 61, 248, 43, 254, 133, 85, 31, 153, 253, 151, 223, 255, 103, 254, 243, 145, 255, 61, 248, 173, 163, 191, 23, 63, 102, 201, 71, 225, 35, 70, 158, 228, 234, 155, 96, 112, 82, 203, 173, 127, 65, 52, 54, 55, 247, 131, 190, 230, 65, 8, 90, 231, 134, 72, 129, 56, 18, 214, 45, 178, 78, 19, 246, 109, 74, 69, 235, 14, 80, 227, 87, 55, 190, 24, 6, 179, 178, 197, 36, 61, 22, 163, 249, 21, 226, 3, 63, 22, 71, 189, 197, 101, 93, 181, 2, 96, 42, 62, 34, 66, 7, 136, 229, 184, 227, 95, 240, 7, 29, 217, 162, 101, 116, 176, 117, 115, 7, 189, 110, 61, 5, 12, 69, 235, 97, 97, 118, 34, 3, 53, 152, 175, 232, 161, 99, 3, 151, 76, 229, 96, 69, 151, 140, 237, 238, 238, 143, 108, 53, 51, 190, 100, 231, 215, 242, 255, 240, 2, 136, 252, 227, 193, 87, 142, 124, 235, 193, 79, 93, 94, 63, 220, 181, 255, 78, 48, 120, 242, 165, 15, 136, 179, 139, 62, 104, 238, 32, 250, 194, 46, 253, 127, 148, 142, 190, 254, 65, 56, 26, 145, 34, 112, 32, 169, 228, 120, 139, 38, 12, 218, 178, 111, 83, 188, 65, 57, 143, 209, 249, 87, 63, 78, 3, 123, 113, 6, 147, 116, 9, 211, 246, 19, 199, 225, 92, 194, 81, 159, 116, 176, 242, 11, 169, 56, 70, 222, 206, 108, 253, 66, 194, 7, 45, 216, 162, 71, 180, 12, 52, 148, 254, 182, 174, 60, 131, 208, 122, 67, 152, 151, 86, 115, 228, 82, 69, 54, 141, 185, 139, 30, 70, 54, 115, 121, 157, 214, 71, 236, 126, 188, 252, 210, 159, 254, 207, 248, 165, 37, 95, 112, 252, 87, 67, 131, 207, 177, 188, 126, 220, 247, 125, 19, 60, 236, 239, 136, 70, 199, 98, 16, 154, 70, 212, 8, 226, 22, 57, 38, 229, 91, 244, 100, 161, 78, 23, 125, 218, 207, 133, 14, 95, 197, 64, 124, 34, 131, 178, 25, 154, 155, 48, 109, 55, 97, 61, 191, 30, 124, 206, 243, 56, 156, 91, 189, 94, 10, 151, 85, 184, 226, 51, 72, 209, 135, 173, 127, 207, 185, 31, 52, 133, 30, 129, 26, 82, 82, 116, 181, 41, 126, 235, 173, 96, 70, 90, 207, 14, 163, 20, 189, 96, 140, 91, 100, 3, 153, 199, 120, 29, 210, 183, 237, 254, 96, 225, 151, 121, 1, 252, 173, 121, 7, 44, 252, 179, 37, 95, 127, 239, 155, 224, 202, 95, 16, 229, 8, 6, 167, 19, 125, 148, 156, 114, 244, 149, 112, 91, 173, 47, 152, 187, 71, 39, 134, 48, 129, 32, 18, 211, 45, 82, 78, 7, 118, 209, 165, 133, 202, 29, 249, 88, 93, 250, 60, 40, 252, 25, 204, 202, 142, 222, 163, 205, 84, 61, 4, 235, 249, 245, 224, 115, 62, 196, 39, 231, 201, 81, 111, 112, 89, 39, 145, 138, 113, 211, 214, 15, 146, 57, 8, 240, 46, 138, 48, 104, 10, 40, 218, 160, 137, 173, 251, 59, 104, 119, 235, 77, 96, 46, 90, 47, 12, 227, 211, 122, 172, 216, 177, 165, 23, 143, 49, 140, 108, 38, 115, 26, 89, 93, 6, 121, 201, 104, 15, 246, 124, 100, 240, 199, 203, 47, 254, 169, 191, 181, 124, 241, 55, 193, 232, 163, 225, 212, 162, 207, 151, 163, 143, 190, 42, 110, 177, 245, 197, 15, 98, 209, 8, 19, 81, 3, 25, 37, 196, 91, 116, 96, 208, 147, 75, 168, 220, 160, 150, 87, 252, 216, 115, 202, 63, 24, 136, 155, 48, 73, 71, 88, 183, 205, 246, 125, 151, 120, 228, 31, 112, 50, 23, 112, 212, 183, 226, 150, 199, 173, 67, 63, 136, 220, 66, 50, 47, 33, 231, 20, 97, 139, 42, 13, 186, 6, 122, 74, 139, 91, 23, 159, 89, 104, 189, 36, 103, 254, 134, 103, 176, 87, 209, 227, 198, 238, 45, 153, 199, 193, 120, 70, 54, 150, 249, 93, 50, 209, 131, 245, 94, 178, 240, 153, 253, 215, 23, 64, 188, 247, 155, 96, 228, 57, 57, 130, 232, 195, 226, 28, 163, 15, 157, 251, 104, 125, 133, 220, 110, 235, 64, 12, 226, 210, 8, 25, 17, 220, 34, 193, 68, 124, 23, 61, 25, 20, 233, 18, 106, 25, 116, 248, 186, 247, 121, 55, 128, 117, 187, 13, 3, 250, 53, 224, 19, 222, 130, 147, 185, 27, 151, 181, 228, 54, 189, 229, 107, 72, 209, 66, 228, 14, 144, 225, 65, 206, 183, 40, 203, 160, 77, 160, 140, 84, 21, 93, 112, 234, 223, 122, 49, 6, 123, 18, 189, 63, 76, 83, 244, 142, 49, 113, 145, 49, 28, 236, 228, 210, 139, 202, 216, 46, 25, 228, 193, 86, 47, 217, 115, 166, 126, 188, 252, 19, 191, 249, 55, 63, 216, 252, 131, 241, 198, 55, 193, 200, 231, 230, 145, 162, 31, 158, 115, 137, 62, 68, 206, 55, 250, 50, 184, 167, 214, 247, 202, 173, 183, 14, 202, 32, 70, 32, 130, 4, 116, 139, 124, 15, 58, 176, 139, 34, 13, 202, 118, 128, 2, 7, 109, 63, 171, 6, 133, 161, 9, 86, 233, 61, 48, 160, 95, 3, 62, 225, 123, 224, 156, 227, 245, 82, 184, 172, 115, 8, 70, 16, 164, 3, 132, 115, 33, 195, 187, 232, 194, 160, 47, 160, 110, 148, 17, 20, 153, 154, 183, 94, 134, 193, 110, 68, 239, 204, 96, 133, 162, 39, 139, 53, 139, 215, 233, 187, 246, 151, 251, 131, 93, 93, 50, 191, 131, 101, 94, 178, 222, 12, 251, 178, 150, 255, 229, 31, 255, 147, 255, 233, 248, 225, 53, 240, 254, 111, 130, 193, 115, 46, 143, 250, 11, 162, 209, 55, 196, 253, 181, 190, 111, 210, 0, 98, 68, 200, 64, 64, 137, 239, 22, 233, 31, 52, 228, 18, 202, 182, 80, 203, 99, 180, 189, 49, 16, 55, 171, 73, 98, 170, 26, 235, 246, 147, 197, 177, 160, 15, 211, 115, 190, 17, 183, 28, 4, 227, 42, 82, 55, 8, 231, 37, 68, 125, 80, 135, 45, 10, 53, 104, 220, 167, 62, 169, 234, 160, 203, 173, 23, 224, 228, 95, 239, 12, 214, 38, 122, 157, 24, 174, 200, 196, 13, 6, 48, 122, 42, 89, 209, 37, 99, 59, 216, 225, 37, 91, 205, 140, 47, 175, 83, 255, 155, 127, 115, 150, 255, 135, 23, 64, 188, 254, 227, 205, 87, 142, 243, 111, 130, 193, 231, 94, 250, 241, 120, 242, 232, 99, 226, 4, 163, 143, 155, 155, 104, 125, 115, 220, 107, 251, 52, 10, 55, 253, 225, 224, 193, 239, 131, 65, 67, 6, 45, 58, 64, 45, 23, 218, 123, 6, 3, 209, 216, 148, 55, 97, 221, 62, 98, 254, 14, 48, 163, 95, 16, 31, 236, 0, 15, 251, 3, 142, 229, 13, 184, 44, 112, 203, 87, 17, 164, 32, 117, 151, 16, 227, 65, 212, 119, 81, 153, 65, 167, 64, 37, 41, 44, 186, 230, 140, 64, 235, 221, 24, 172, 74, 244, 10, 13, 54, 42, 94, 7, 237, 194, 191, 236, 143, 172, 34, 131, 25, 61, 173, 172, 238, 146, 101, 102, 180, 151, 215, 97, 255, 184, 251, 49, 47, 128, 191, 209, 255, 59, 94, 191, 96, 243, 189, 198, 231, 122, 19, 92, 255, 99, 193, 232, 59, 224, 134, 90, 223, 40, 247, 221, 78, 254, 191, 150, 46, 132, 239, 214, 247, 193, 32, 253, 187, 104, 209, 66, 217, 14, 208, 222, 160, 237, 39, 177, 41, 187, 88, 165, 247, 194, 140, 126, 65, 124, 176, 119, 195, 57, 111, 113, 89, 39, 17, 140, 32, 72, 199, 200, 231, 32, 198, 151, 208, 8, 42, 179, 69, 233, 168, 36, 186, 203, 131, 178, 183, 222, 135, 193, 122, 180, 30, 28, 182, 40, 50, 92, 131, 89, 139, 222, 64, 230, 49, 178, 162, 12, 108, 100, 135, 153, 232, 229, 117, 198, 63, 221, 253, 120, 249, 199, 254, 196, 223, 88, 118, 223, 4, 253, 245, 239, 244, 38, 24, 125, 16, 156, 81, 244, 129, 114, 214, 173, 239, 134, 107, 107, 125, 211, 228, 0, 4, 136, 120, 129, 104, 94, 125, 31, 12, 210, 63, 168, 199, 37, 148, 109, 161, 147, 199, 104, 123, 99, 32, 110, 197, 42, 29, 96, 224, 126, 130, 56, 144, 99, 156, 243, 173, 184, 229, 70, 54, 142, 145, 186, 133, 124, 94, 66, 218, 7, 141, 216, 248, 164, 83, 131, 210, 109, 125, 218, 89, 27, 221, 122, 7, 6, 43, 209, 122, 88, 216, 156, 232, 141, 58, 243, 47, 251, 131, 37, 92, 122, 51, 153, 211, 200, 234, 50, 200, 75, 239, 54, 147, 190, 100, 246, 95, 126, 223, 31, 255, 79, 150, 252, 210, 59, 189, 9, 70, 63, 24, 207, 188, 244, 209, 112, 106, 173, 15, 154, 59, 104, 125, 103, 92, 103, 35, 4, 68, 164, 241, 135, 131, 65, 242, 64, 112, 199, 38, 220, 59, 168, 199, 160, 66, 151, 80, 200, 160, 189, 103, 176, 14, 96, 86, 222, 130, 129, 187, 3, 123, 250, 153, 241, 97, 238, 192, 129, 188, 17, 55, 5, 110, 249, 12, 178, 180, 16, 188, 3, 36, 121, 144, 246, 61, 182, 134, 90, 109, 209, 74, 106, 139, 46, 59, 83, 128, 30, 16, 182, 165, 245, 28, 177, 84, 209, 203, 198, 232, 69, 207, 35, 203, 185, 100, 96, 7, 243, 187, 244, 74, 51, 224, 75, 70, 126, 172, 217, 127, 125, 1, 68, 126, 199, 125, 127, 59, 52, 242, 41, 121, 128, 232, 71, 229, 20, 162, 143, 140, 211, 140, 254, 59, 162, 193, 197, 180, 190, 75, 174, 185, 117, 56, 6, 209, 193, 77, 127, 89, 52, 136, 245, 56, 243, 71, 132, 65, 133, 6, 53, 59, 70, 123, 131, 170, 159, 199, 172, 108, 177, 74, 239, 138, 61, 253, 204, 248, 48, 239, 138, 67, 222, 197, 77, 157, 71, 54, 130, 44, 29, 32, 162, 11, 73, 222, 99, 41, 6, 197, 217, 234, 222, 13, 138, 9, 74, 77, 229, 91, 175, 196, 96, 67, 90, 207, 14, 163, 20, 189, 96, 140, 91, 203, 18, 50, 146, 145, 57, 29, 44, 237, 242, 58, 200, 167, 119, 63, 94, 126, 239, 111, 252, 199, 131, 95, 93, 242, 53, 111, 127, 19, 12, 158, 42, 242, 252, 131, 163, 137, 62, 74, 78, 57, 250, 74, 6, 23, 214, 250, 142, 73, 0, 136, 14, 193, 194, 173, 127, 62, 24, 228, 126, 220, 253, 74, 24, 20, 242, 42, 170, 222, 88, 135, 91, 177, 74, 199, 152, 185, 159, 26, 78, 227, 0, 135, 124, 7, 110, 185, 145, 141, 99, 4, 111, 33, 162, 23, 24, 248, 65, 41, 118, 209, 44, 170, 183, 69, 115, 233, 117, 235, 53, 24, 108, 69, 235, 121, 97, 124, 90, 143, 21, 59, 22, 61, 122, 236, 97, 244, 120, 178, 171, 203, 235, 252, 222, 190, 251, 203, 44, 255, 203, 63, 250, 199, 254, 163, 223, 251, 27, 227, 195, 107, 224, 234, 155, 96, 240, 51, 150, 254, 40, 124, 202, 229, 33, 127, 65, 52, 250, 112, 7, 71, 31, 125, 85, 131, 139, 108, 92, 63, 225, 0, 169, 34, 115, 184, 227, 125, 48, 232, 198, 56, 249, 74, 24, 20, 50, 104, 239, 25, 172, 3, 152, 149, 55, 98, 230, 238, 195, 170, 126, 6, 124, 128, 187, 113, 26, 111, 196, 77, 129, 91, 62, 131, 44, 5, 217, 187, 192, 48, 47, 100, 126, 215, 167, 221, 177, 92, 91, 116, 147, 230, 162, 43, 207, 32, 160, 103, 132, 145, 105, 61, 74, 76, 86, 244, 190, 49, 125, 145, 145, 28, 76, 104, 244, 216, 178, 195, 75, 207, 53, 75, 190, 100, 237, 103, 249, 63, 188, 0, 226, 51, 188, 9, 70, 63, 36, 207, 31, 125, 88, 156, 99, 244, 161, 15, 174, 36, 126, 246, 243, 215, 43, 28, 92, 112, 235, 88, 12, 66, 3, 2, 55, 72, 228, 214, 163, 94, 9, 227, 237, 111, 133, 65, 213, 207, 99, 86, 182, 88, 165, 207, 128, 85, 253, 12, 248, 0, 159, 1, 135, 188, 139, 155, 58, 143, 108, 4, 113, 186, 236, 67, 38, 73, 233, 32, 204, 151, 208, 139, 119, 93, 252, 65, 241, 91, 111, 197, 96, 76, 90, 143, 15, 211, 212, 122, 202, 88, 185, 232, 73, 100, 45, 35, 187, 202, 228, 70, 150, 153, 209, 142, 108, 123, 111, 254, 39, 47, 128, 184, 250, 38, 248, 125, 183, 188, 9, 30, 245, 23, 68, 131, 195, 141, 190, 140, 193, 85, 181, 190, 93, 238, 30, 132, 134, 72, 129, 56, 14, 242, 186, 117, 223, 251, 96, 161, 102, 203, 249, 183, 194, 66, 213, 27, 235, 112, 43, 86, 233, 24, 51, 247, 147, 194, 81, 28, 227, 144, 239, 192, 45, 55, 178, 113, 104, 127, 235, 7, 41, 189, 132, 216, 159, 153, 251, 65, 191, 40, 224, 22, 253, 165, 221, 173, 55, 97, 176, 24, 173, 71, 134, 9, 106, 61, 89, 12, 90, 244, 250, 49, 140, 209, 43, 202, 192, 70, 118, 216, 137, 254, 81, 150, 156, 145, 95, 94, 254, 145, 95, 255, 157, 31, 108, 254, 217, 184, 241, 77, 240, 57, 255, 88, 240, 224, 151, 193, 32, 22, 32, 79, 164, 109, 139, 188, 146, 230, 93, 219, 87, 194, 160, 60, 7, 104, 227, 178, 234, 186, 233, 240, 21, 172, 3, 152, 149, 55, 98, 230, 222, 130, 121, 125, 39, 252, 208, 183, 224, 40, 222, 142, 155, 2, 183, 124, 205, 197, 161, 31, 100, 239, 0, 121, 190, 111, 238, 7, 253, 218, 162, 161, 244, 23, 159, 116, 255, 242, 255, 203, 230, 232, 49, 97, 106, 90, 175, 19, 195, 213, 122, 232, 216, 192, 232, 193, 100, 75, 151, 76, 238, 112, 144, 63, 202, 104, 15, 38, 125, 201, 236, 191, 252, 195, 191, 246, 31, 46, 249, 165, 221, 55, 193, 200, 119, 228, 135, 69, 127, 44, 62, 241, 210, 15, 118, 249, 143, 5, 15, 251, 59, 162, 209, 151, 55, 184, 218, 118, 254, 111, 138, 22, 210, 70, 22, 183, 72, 243, 32, 241, 151, 188, 229, 15, 10, 131, 222, 198, 143, 47, 134, 155, 223, 13, 131, 89, 217, 197, 48, 125, 30, 204, 235, 59, 225, 135, 126, 54, 156, 240, 46, 110, 234, 156, 199, 12, 253, 32, 168, 31, 153, 231, 75, 104, 7, 245, 217, 69, 7, 105, 40, 186, 221, 131, 250, 163, 71, 131, 73, 105, 189, 66, 12, 84, 235, 65, 99, 238, 162, 183, 145, 217, 140, 30, 88, 182, 119, 201, 68, 15, 214, 123, 121, 29, 249, 95, 255, 157, 53, 251, 175, 47, 128, 120, 253, 77, 155, 175, 95, 242, 51, 248, 241, 209, 31, 148, 103, 136, 126, 96, 206, 34, 250, 224, 56, 211, 214, 215, 48, 184, 164, 214, 247, 202, 149, 131, 184, 16, 166, 45, 178, 72, 82, 119, 145, 248, 65, 37, 46, 249, 248, 74, 120, 211, 91, 97, 208, 243, 246, 150, 119, 67, 48, 76, 199, 88, 186, 159, 8, 14, 225, 42, 78, 248, 22, 63, 92, 40, 23, 221, 136, 199, 85, 196, 239, 35, 131, 122, 128, 228, 15, 218, 177, 69, 197, 6, 29, 4, 21, 166, 224, 232, 101, 24, 236, 70, 235, 169, 97, 136, 90, 111, 23, 179, 214, 122, 6, 89, 200, 200, 150, 50, 179, 145, 65, 30, 108, 245, 242, 58, 233, 63, 238, 126, 188, 252, 67, 127, 244, 63, 24, 252, 234, 242, 250, 101, 155, 239, 184, 244, 15, 230, 51, 253, 224, 147, 55, 193, 137, 63, 22, 124, 161, 151, 193, 32, 16, 32, 76, 68, 109, 139, 164, 14, 210, 188, 139, 74, 12, 106, 115, 96, 247, 173, 48, 232, 237, 25, 76, 195, 86, 6, 229, 35, 182, 230, 30, 44, 221, 219, 49, 181, 143, 194, 79, 121, 35, 14, 225, 13, 94, 175, 131, 155, 2, 23, 125, 18, 137, 250, 200, 248, 29, 32, 210, 11, 201, 223, 69, 131, 6, 45, 219, 250, 164, 167, 135, 127, 177, 51, 88, 0, 246, 161, 245, 164, 48, 56, 173, 55, 106, 176, 96, 209, 115, 199, 24, 70, 102, 115, 56, 170, 63, 234, 249, 101, 153, 151, 215, 1, 223, 236, 254, 50, 203, 255, 242, 11, 191, 250, 239, 255, 194, 199, 119, 192, 169, 55, 193, 175, 255, 14, 63, 99, 185, 254, 159, 10, 30, 247, 199, 130, 209, 167, 204, 29, 180, 190, 182, 193, 165, 54, 162, 64, 80, 182, 62, 201, 217, 187, 189, 15, 6, 181, 89, 40, 216, 177, 7, 190, 24, 130, 89, 217, 213, 171, 244, 17, 155, 245, 190, 152, 218, 71, 225, 167, 188, 179, 79, 14, 144, 227, 189, 132, 155, 58, 143, 120, 252, 232, 67, 120, 72, 212, 49, 178, 58, 136, 244, 37, 20, 100, 80, 162, 45, 106, 248, 192, 197, 255, 229, 223, 250, 2, 163, 63, 122, 36, 217, 207, 37, 51, 59, 24, 225, 232, 185, 102, 201, 151, 172, 253, 47, 252, 234, 122, 1, 196, 155, 223, 4, 163, 63, 34, 159, 62, 250, 57, 57, 130, 232, 35, 227, 52, 91, 159, 62, 119, 131, 190, 209, 185, 96, 175, 188, 16, 20, 98, 180, 69, 16, 137, 233, 46, 178, 62, 232, 195, 1, 10, 182, 208, 195, 171, 126, 124, 49, 60, 248, 221, 16, 12, 211, 85, 236, 93, 97, 22, 191, 57, 60, 206, 43, 78, 224, 24, 199, 123, 31, 46, 250, 71, 55, 175, 252, 32, 126, 65, 86, 47, 33, 252, 131, 130, 236, 162, 104, 143, 92, 252, 79, 255, 53, 127, 176, 30, 173, 55, 103, 176, 72, 209, 11, 54, 216, 183, 232, 49, 100, 39, 163, 71, 149, 189, 141, 44, 51, 163, 29, 217, 246, 222, 252, 79, 95, 0, 113, 237, 77, 48, 242, 243, 238, 255, 11, 162, 115, 111, 130, 209, 231, 200, 41, 55, 46, 134, 107, 107, 92, 54, 81, 0, 49, 34, 100, 91, 252, 247, 228, 65, 142, 119, 209, 135, 133, 218, 28, 160, 135, 65, 111, 207, 56, 120, 55, 44, 204, 202, 67, 176, 119, 143, 194, 230, 222, 135, 239, 249, 40, 156, 192, 67, 112, 83, 63, 250, 225, 66, 185, 232, 147, 72, 84, 144, 192, 3, 164, 122, 16, 254, 75, 232]);
fileData4.push.apply(fileData4, [17, 69, 219, 162, 170, 131, 46, 127, 226, 211, 127, 205, 31, 172, 68, 235, 97, 97, 118, 90, 47, 213, 96, 199, 162, 119, 143, 73, 140, 222, 79, 166, 53, 94, 71, 248, 198, 221, 143, 151, 127, 240, 87, 254, 189, 133, 127, 240, 131, 79, 222, 4, 95, 254, 143, 5, 163, 207, 151, 211, 111, 125, 97, 131, 235, 108, 132, 224, 248, 15, 7, 131, 132, 17, 193, 93, 247, 189, 18, 6, 181, 25, 84, 235, 42, 74, 27, 148, 252, 38, 25, 148, 143, 216, 154, 31, 48, 76, 95, 10, 155, 123, 31, 190, 231, 23, 193, 241, 126, 234, 245, 58, 184, 169, 243, 136, 71, 35, 81, 199, 136, 235, 66, 170, 47, 161, 35, 87, 255, 5, 127, 80, 198, 65, 91, 65, 217, 153, 2, 244, 128, 48, 47, 173, 23, 105, 176, 87, 209, 251, 54, 88, 191, 232, 169, 100, 69, 163, 39, 151, 53, 94, 50, 218, 195, 73, 255, 40, 179, 255, 242, 15, 252, 145, 127, 119, 201, 47, 241, 91, 163, 191, 41, 63, 111, 233, 143, 197, 39, 142, 126, 60, 158, 188, 245, 73, 113, 142, 173, 207, 157, 91, 65, 223, 37, 215, 12, 34, 114, 235, 251, 96, 144, 209, 173, 237, 251, 96, 80, 134, 75, 168, 86, 208, 195, 171, 40, 121, 99, 26, 238, 211, 171, 244, 35, 102, 75, 76, 222, 247, 141, 103, 223, 243, 201, 233, 113, 188, 247, 225, 162, 27, 241, 56, 131, 4, 46, 196, 245, 0, 249, 63, 51, 247, 131, 174, 81, 198, 45, 234, 76, 217, 209, 43, 49, 216, 144, 214, 203, 51, 216, 165, 232, 29, 27, 172, 92, 244, 42, 50, 152, 209, 235, 202, 240, 70, 79, 52, 235, 189, 100, 228, 199, 154, 253, 215, 23, 64, 244, 111, 226, 235, 151, 254, 49, 124, 130, 232, 143, 203, 147, 68, 63, 54, 39, 210, 250, 4, 57, 223, 214, 247, 193, 109, 129, 107, 38, 4, 32, 64, 239, 241, 62, 88, 238, 254, 83, 194, 66, 15, 23, 26, 123, 18, 211, 176, 197, 172, 60, 10, 147, 87, 88, 198, 59, 49, 193, 199, 248, 218, 123, 241, 32, 175, 120, 246, 135, 224, 154, 182, 184, 232, 147, 8, 85, 144, 192, 3, 4, 251, 131, 187, 230, 126, 80, 183, 45, 10, 75, 157, 183, 88, 3, 182, 162, 245, 194, 12, 246, 167, 245, 100, 177, 102, 209, 235, 55, 216, 198, 232, 33, 101, 99, 35, 107, 204, 80, 71, 79, 58, 107, 255, 242, 247, 255, 225, 127, 103, 240, 171, 75, 127, 25, 223, 241, 7, 159, 188, 9, 174, 255, 177, 224, 210, 127, 45, 24, 125, 22, 156, 84, 235, 147, 229, 208, 27, 87, 197, 69, 130, 4, 144, 15, 16, 175, 65, 254, 182, 72, 240, 32, 229, 151, 188, 229, 15, 10, 11, 141, 109, 148, 252, 38, 204, 202, 37, 204, 211, 23, 199, 4, 31, 227, 107, 191, 56, 206, 118, 23, 215, 116, 43, 18, 18, 132, 234, 24, 113, 253, 224, 220, 214, 15, 106, 178, 208, 38, 221, 242, 247, 248, 11, 125, 103, 13, 208, 51, 194, 200, 180, 222, 165, 193, 106, 181, 30, 58, 54, 48, 122, 51, 153, 211, 200, 240, 14, 103, 249, 71, 89, 111, 134, 61, 102, 249, 95, 126, 207, 207, 254, 237, 245, 14, 56, 124, 19, 60, 224, 47, 136, 70, 63, 24, 207, 220, 250, 140, 56, 190, 214, 39, 206, 125, 160, 111, 145, 11, 6, 225, 32, 58, 91, 132, 111, 92, 253, 35, 194, 32, 226, 131, 38, 28, 120, 251, 91, 97, 161, 228, 141, 93, 184, 27, 243, 116, 21, 147, 247, 29, 227, 193, 207, 224, 108, 239, 195, 69, 131, 132, 92, 69, 8, 63, 152, 112, 190, 235, 220, 143, 207, 184, 248, 131, 37, 105, 189, 63, 131, 117, 106, 61, 104, 108, 93, 244, 54, 14, 150, 51, 122, 102, 89, 224, 37, 67, 61, 152, 241, 232, 193, 255, 240, 2, 136, 254, 7, 124, 77, 244, 15, 224, 103, 255, 160, 62, 226, 165, 63, 22, 140, 126, 90, 206, 34, 250, 224, 6, 199, 218, 250, 38, 184, 39, 112, 193, 92, 63, 136, 14, 193, 218, 69, 58, 135, 9, 222, 67, 13, 22, 10, 115, 96, 21, 207, 54, 222, 245, 98, 24, 236, 194, 22, 179, 242, 40, 76, 222, 119, 140, 7, 127, 20, 174, 105, 139, 139, 62, 137, 80, 125, 112, 203, 208, 47, 100, 123, 80, 129, 125, 155, 185, 31, 52, 110, 139, 218, 82, 234, 45, 54, 129, 197, 104, 189, 51, 131, 21, 106, 61, 92, 204, 90, 235, 25, 100, 33, 35, 115, 58, 28, 219, 31, 245, 44, 179, 216, 75, 111, 123, 111, 254, 39, 47, 128, 246, 250, 5, 155, 239, 181, 244, 143, 228, 211, 68, 127, 116, 158, 42, 250, 8, 6, 7, 20, 125, 160, 131, 227, 110, 92, 18, 87, 8, 238, 158, 100, 128, 96, 13, 146, 183, 69, 118, 199, 135, 63, 34, 156, 248, 83, 194, 160, 48, 11, 189, 58, 118, 233, 197, 48, 40, 249, 77, 152, 149, 75, 152, 167, 167, 187, 113, 176, 151, 112, 77, 183, 34, 33, 31, 220, 62, 244, 131, 196, 46, 100, 123, 223, 93, 115, 63, 104, 37, 181, 221, 162, 245, 108, 2, 122, 76, 152, 26, 244, 64, 49, 95, 173, 231, 142, 49, 140, 94, 206, 193, 174, 70, 22, 152, 113, 142, 215, 25, 255, 116, 247, 227, 229, 239, 251, 67, 255, 214, 242, 123, 126, 54, 252, 199, 163, 191, 5, 223, 61, 242, 57, 6, 31, 49, 250, 121, 120, 218, 232, 163, 25, 28, 92, 235, 179, 230, 26, 90, 95, 222, 224, 106, 65, 44, 6, 185, 1, 177, 27, 228, 114, 23, 249, 94, 222, 242, 74, 24, 52, 240, 140, 119, 122, 55, 52, 230, 233, 12, 134, 239, 187, 196, 35, 159, 193, 193, 222, 141, 139, 254, 193, 74, 194, 131, 134, 126, 16, 218, 139, 30, 52, 247, 131, 98, 110, 209, 107, 138, 15, 70, 131, 73, 105, 189, 66, 131, 141, 106, 61, 107, 140, 94, 235, 145, 100, 63, 163, 199, 150, 29, 142, 30, 109, 246, 124, 201, 236, 191, 252, 189, 127, 240, 223, 92, 242, 75, 131, 223, 189, 244, 55, 229, 231, 69, 127, 56, 62, 247, 171, 122, 200, 193, 17, 68, 31, 217, 224, 64, 91, 223, 1, 55, 4, 174, 150, 139, 7, 161, 25, 164, 106, 139, 92, 14, 178, 123, 9, 53, 24, 231, 255, 160, 48, 104, 96, 208, 216, 147, 178, 8, 31, 48, 22, 31, 49, 43, 15, 196, 240, 125, 151, 120, 228, 7, 226, 154, 94, 253, 120, 155, 92, 244, 121, 228, 42, 200, 225, 69, 123, 91, 63, 104, 193, 37, 116, 106, 208, 187, 45, 154, 75, 181, 183, 122, 22, 24, 13, 244, 218, 12, 182, 168, 245, 124, 49, 110, 173, 199, 208, 169, 252, 81, 239, 42, 147, 27, 189, 207, 76, 119, 244, 200, 175, 217, 127, 125, 1, 68, 255, 38, 190, 62, 250, 135, 241, 57, 162, 63, 52, 207, 19, 253, 240, 131, 163, 137, 62, 202, 193, 65, 55, 174, 135, 203, 67, 223, 250, 32, 19, 32, 82, 131, 204, 237, 34, 184, 131, 112, 95, 66, 85, 150, 155, 222, 10, 131, 186, 54, 26, 126, 147, 12, 202, 15, 152, 155, 194, 66, 61, 221, 135, 83, 253, 68, 93, 4, 215, 116, 43, 18, 210, 200, 213, 145, 183, 109, 253, 160, 47, 131, 78, 237, 162, 155, 148, 119, 139, 238, 179, 12, 232, 73, 97, 112, 208, 51, 197, 136, 181, 30, 61, 38, 177, 245, 132, 178, 174, 209, 83, 204, 74, 71, 246, 156, 169, 31, 47, 191, 251, 151, 255, 141, 193, 175, 46, 249, 178, 241, 182, 191, 32, 250, 50, 47, 131, 209, 55, 199, 165, 110, 145, 9, 18, 179, 69, 230, 6, 161, 220, 69, 184, 7, 5, 56, 64, 169, 226, 214, 23, 195, 160, 225, 141, 93, 120, 139, 158, 167, 15, 24, 175, 61, 108, 223, 119, 134, 135, 221, 199, 161, 189, 121, 217, 131, 139, 6, 9, 185, 226, 99, 228, 200, 225, 66, 104, 15, 80, 132, 133, 190, 236, 162, 119, 131, 110, 110, 209, 110, 186, 143, 222, 141, 193, 170, 52, 230, 136, 177, 106, 61, 110, 76, 95, 235, 169, 100, 72, 163, 87, 151, 65, 142, 94, 111, 134, 61, 102, 249, 95, 254, 158, 63, 240, 215, 127, 247, 47, 143, 15, 175, 129, 75, 111, 130, 209, 223, 142, 159, 20, 253, 177, 248, 196, 209, 143, 199, 147, 183, 62, 172, 193, 81, 182, 62, 125, 238, 6, 92, 42, 87, 14, 226, 50, 200, 211, 22, 137, 28, 164, 246, 18, 10, 176, 80, 149, 99, 52, 48, 238, 120, 49, 12, 118, 97, 23, 203, 242, 64, 108, 223, 14, 230, 242, 107, 195, 167, 253, 20, 15, 251, 88, 220, 209, 22, 23, 125, 221, 202, 207, 133, 161, 31, 228, 240, 24, 9, 95, 232, 194, 46, 106, 53, 168, 222, 46, 250, 75, 193, 193, 56, 48, 29, 232, 205, 25, 44, 82, 235, 17, 99, 226, 90, 175, 34, 131, 217, 122, 96, 217, 222, 232, 161, 102, 195, 151, 76, 253, 71, 127, 253, 195, 11, 160, 229, 159, 241, 101, 209, 63, 224, 204, 31, 11, 6, 143, 17, 253, 216, 156, 72, 235, 67, 28, 28, 113, 227, 98, 184, 54, 112, 229, 4, 98, 139, 60, 145, 182, 93, 164, 118, 144, 236, 3, 244, 100, 161, 81, 87, 81, 215, 118, 223, 187, 33, 88, 150, 75, 88, 168, 167, 59, 112, 164, 7, 184, 163, 179, 174, 173, 252, 32, 87, 87, 145, 219, 133, 132, 95, 66, 101, 6, 181, 218, 69, 61, 7, 253, 221, 98, 1, 216, 7, 244, 176, 48, 59, 232, 177, 98, 202, 90, 175, 31, 195, 216, 122, 72, 153, 217, 232, 77, 102, 174, 35, 195, 62, 122, 240, 125, 1, 68, 127, 1, 223, 43, 250, 7, 243, 153, 162, 31, 128, 103, 107, 125, 28, 156, 84, 235, 195, 29, 28, 61, 250, 206, 184, 206, 45, 210, 64, 86, 182, 72, 219, 32, 145, 187, 72, 246, 66, 1, 14, 208, 168, 133, 238, 157, 68, 195, 145, 81, 112, 44, 110, 196, 66, 157, 196, 2, 126, 55, 120, 204, 147, 56, 210, 123, 156, 152, 248, 65, 66, 206, 32, 138, 65, 110, 15, 208, 133, 65, 101, 46, 161, 125, 212, 115, 23, 29, 103, 1, 208, 235, 49, 216, 22, 244, 40, 49, 89, 173, 87, 110, 176, 129, 209, 155, 201, 156, 182, 158, 95, 150, 57, 178, 225, 204, 123, 188, 252, 221, 191, 255, 95, 15, 254, 217, 114, 235, 95, 16, 13, 62, 104, 244, 131, 241, 204, 173, 207, 136, 19, 68, 159, 59, 87, 2, 174, 147, 203, 222, 34, 43, 36, 105, 23, 137, 28, 68, 118, 23, 233, 95, 40, 201, 49, 186, 215, 168, 235, 121, 76, 195, 86, 54, 229, 3, 230, 230, 205, 88, 192, 239, 6, 143, 249, 0, 125, 11, 215, 246, 125, 112, 203, 231, 145, 171, 32, 138, 199, 8, 249, 66, 29, 46, 161, 89, 131, 246, 109, 81, 225, 65, 199, 193, 68, 48, 32, 232, 229, 25, 236, 82, 235, 53, 27, 108, 93, 244, 54, 14, 150, 51, 122, 102, 25, 225, 200, 92, 15, 198, 60, 178, 249, 47, 191, 235, 151, 254, 181, 37, 191, 52, 248, 221, 209, 223, 154, 159, 26, 253, 17, 249, 244, 173, 159, 150, 179, 104, 28, 31, 135, 219, 184, 18, 46, 12, 92, 54, 81, 216, 34, 73, 131, 180, 109, 145, 215, 133, 88, 95, 66, 73, 130, 70, 93, 69, 93, 27, 13, 191, 21, 203, 114, 128, 145, 250, 128, 21, 123, 106, 156, 213, 137, 89, 15, 238, 232, 86, 36, 164, 145, 171, 171, 200, 237, 66, 200, 15, 208, 154, 65, 185, 118, 209, 208, 65, 139, 193, 8, 12, 86, 2, 61, 47, 140, 15, 122, 178, 24, 180, 214, 27, 56, 88, 200, 232, 69, 101, 108, 91, 143, 51, 187, 189, 244, 194, 103, 246, 95, 95, 0, 173, 127, 43, 223, 37, 250, 231, 241, 81, 162, 63, 58, 79, 213, 250, 20, 56, 163, 214, 199, 58, 56, 116, 244, 109, 13, 238, 18, 228, 128, 160, 108, 145, 179, 65, 22, 47, 33, 214, 131, 232, 31, 160, 78, 65, 247, 78, 162, 225, 96, 26, 222, 130, 145, 58, 137, 17, 188, 136, 245, 252, 82, 248, 84, 123, 120, 192, 243, 56, 207, 183, 224, 150, 65, 66, 206, 32, 138, 65, 116, 15, 80, 135, 133, 214, 236, 162, 128, 131, 146, 110, 81, 243, 193, 14, 128, 13, 97, 97, 208, 211, 196, 112, 181, 222, 186, 193, 18, 70, 47, 231, 96, 87, 163, 71, 152, 125, 142, 30, 115, 118, 126, 188, 252, 93, 191, 248, 215, 198, 239, 250, 165, 225, 63, 27, 253, 197, 124, 223, 232, 15, 193, 231, 107, 253, 60, 60, 109, 235, 211, 225, 236, 208, 39, 206, 101, 128, 139, 228, 154, 183, 72, 9, 49, 218, 69, 22, 7, 121, 189, 132, 232, 47, 148, 228, 24, 221, 11, 186, 122, 19, 166, 97, 139, 101, 121, 56, 70, 240, 59, 192, 3, 62, 28, 23, 180, 139, 91, 62, 143, 104, 5, 81, 188, 138, 156, 47, 52, 98, 23, 229, 90, 232, 224, 22, 69, 30, 52, 29, 12, 5, 51, 130, 222, 159, 193, 58, 181, 222, 180, 193, 226, 69, 47, 228, 96, 63, 163, 247, 150, 41, 142, 222, 109, 38, 61, 214, 242, 255, 240, 2, 104, 252, 190, 232, 111, 202, 207, 139, 254, 112, 124, 238, 214, 207, 201, 41, 52, 14, 142, 99, 109, 92, 6, 87, 5, 174, 153, 16, 108, 145, 161, 65, 206, 118, 17, 214, 65, 166, 15, 208, 144, 133, 46, 93, 69, 87, 27, 245, 190, 3, 203, 114, 128, 157, 122, 186, 9, 135, 121, 128, 11, 186, 3, 33, 105, 68, 235, 42, 162, 27, 228, 252, 18, 138, 179, 208, 175, 93, 244, 148, 34, 111, 49, 5, 12, 197, 86, 143, 12, 19, 132, 30, 46, 102, 173, 245, 18, 14, 118, 50, 122, 87, 7, 171, 27, 61, 209, 172, 119, 176, 246, 59, 47, 128, 224, 43, 163, 127, 12, 159, 160, 245, 39, 230, 121, 90, 63, 63, 167, 211, 250, 64, 7, 199, 141, 190, 167, 193, 45, 130, 16, 16, 145, 93, 228, 108, 16, 196, 93, 4, 122, 33, 250, 7, 232, 82, 208, 189, 51, 168, 247, 22, 211, 240, 22, 236, 212, 77, 88, 195, 111, 23, 207, 117, 30, 135, 249, 70, 220, 50, 8, 201, 73, 164, 113, 33, 186, 199, 104, 196, 160, 56, 151, 208, 193, 65, 79, 183, 40, 251, 96, 13, 192, 146, 176, 51, 232, 129, 98, 190, 90, 47, 222, 96, 15, 91, 79, 40, 235, 26, 189, 198, 12, 117, 48, 236, 237, 232, 5, 208, 248, 142, 209, 63, 158, 79, 214, 250, 73, 120, 200, 214, 231, 194, 169, 161, 207, 154, 107, 0, 87, 200, 5, 111, 145, 143, 65, 134, 182, 72, 225, 32, 169, 7, 136, 254, 66, 67, 142, 209, 189, 160, 168, 55, 97, 26, 182, 88, 150, 119, 194, 26, 126, 187, 120, 174, 247, 192, 5, 237, 226, 150, 207, 35, 90, 141, 52, 30, 35, 231, 11, 141, 184, 132, 138, 13, 106, 184, 139, 46, 83, 246, 45, 230, 130, 49, 65, 175, 208, 96, 163, 90, 47, 219, 96, 247, 90, 79, 37, 43, 26, 189, 186, 131, 77, 14, 54, 124, 215, 217, 23, 64, 92, 250, 175, 5, 163, 63, 19, 159, 184, 245, 19, 242, 240, 141, 35, 227, 64, 27, 215, 192, 37, 129, 11, 230, 250, 183, 8, 208, 32, 97, 187, 72, 234, 66, 160, 47, 161, 30, 65, 151, 174, 162, 168, 141, 122, 223, 129, 101, 57, 198, 84, 61, 157, 199, 73, 30, 224, 130, 238, 64, 72, 26, 209, 58, 131, 244, 46, 68, 253, 0, 221, 25, 84, 108, 23, 85, 29, 212, 121, 139, 65, 96, 46, 182, 122, 106, 24, 34, 176, 96, 236, 91, 235, 73, 100, 45, 91, 15, 44, 219, 27, 204, 245, 85, 55, 191, 0, 26, 63, 59, 250, 131, 14, 30, 163, 245, 147, 115, 40, 141, 163, 228, 160, 209, 55, 52, 184, 63, 112, 253, 131, 124, 108, 145, 176, 65, 10, 119, 145, 230, 133, 208, 31, 163, 75, 65, 241, 206, 160, 222, 91, 76, 195, 27, 49, 85, 55, 97, 16, 191, 69, 60, 209, 77, 56, 201, 55, 226, 150, 65, 72, 78, 34, 141, 65, 122, 15, 80, 138, 133, 250, 92, 66, 19, 7, 109, 221, 162, 239, 12, 194, 22, 123, 194, 218, 160, 103, 138, 17, 107, 189, 123, 131, 85, 108, 61, 164, 204, 108, 48, 203, 55, 121, 211, 11, 160, 241, 153, 162, 31, 96, 240, 120, 173, 79, 132, 243, 66, 159, 50, 23, 0, 46, 111, 112, 187, 32, 28, 131, 244, 236, 34, 130, 131, 152, 94, 66, 232, 23, 234, 113, 21, 197, 11, 138, 122, 19, 166, 97, 23, 227, 242, 78, 24, 196, 111, 17, 79, 244, 78, 184, 157, 93, 220, 242, 121, 68, 171, 145, 198, 99, 68, 125, 161, 20, 7, 104, 217, 160, 137, 187, 104, 52, 149, 223, 98, 49, 152, 20, 244, 22, 13, 150, 170, 245, 190, 13, 214, 175, 245, 96, 50, 167, 141, 5, 190, 207, 195, 94, 0, 141, 15, 26, 253, 96, 131, 199, 110, 125, 82, 156, 35, 184, 0, 174, 7, 92, 237, 224, 238, 183, 72, 15, 217, 186, 132, 152, 14, 162, 124, 128, 122, 44, 20, 233, 12, 138, 218, 168, 247, 125, 24, 151, 3, 76, 213, 211, 73, 28, 227, 49, 110, 231, 14, 132, 164, 17, 173, 51, 8, 112, 144, 246, 75, 168, 207, 66, 203, 118, 81, 216, 65, 163, 183, 216, 4, 70, 3, 12, 14, 115, 132, 222, 177, 193, 202, 181, 30, 70, 102, 179, 177, 180, 111, 247, 46, 47, 128, 198, 3, 68, 63, 240, 224, 56, 26, 135, 200, 17, 131, 235, 225, 242, 192, 197, 15, 146, 177, 69, 182, 6, 249, 187, 132, 40, 47, 132, 254, 0, 45, 10, 90, 119, 18, 245, 222, 98, 26, 222, 136, 169, 186, 21, 179, 248, 13, 225, 65, 110, 197, 49, 190, 29, 183, 12, 66, 114, 18, 129, 12, 2, 124, 140, 94, 44, 52, 104, 23, 101, 28, 20, 118, 23, 173, 103, 22, 182, 88, 21, 54, 7, 61, 86, 76, 25, 122, 0, 153, 199, 198, 162, 62, 214, 187, 191, 0, 26, 15, 214, 250, 44, 56, 38, 244, 249, 114, 244, 224, 218, 6, 247, 186, 69, 50, 200, 205, 46, 242, 55, 200, 232, 1, 18, 191, 208, 141, 99, 180, 174, 81, 212, 155, 48, 13, 187, 24, 151, 247, 195, 44, 126, 67, 120, 144, 247, 195, 213, 92, 194, 45, 223, 132, 116, 5, 129, 188, 138, 180, 47, 244, 226, 18, 138, 54, 40, 227, 46, 74, 61, 104, 253, 22, 187, 193, 176, 160, 23, 105, 176, 87, 173, 87, 110, 176, 129, 141, 229, 124, 63, 159, 245, 5, 208, 120, 224, 214, 103, 196, 9, 130, 163, 231, 98, 192, 165, 14, 110, 125, 139, 220, 12, 178, 181, 139, 140, 46, 68, 249, 0, 221, 88, 104, 209, 25, 20, 181, 209, 237, 251, 48, 46, 199, 24, 172, 167, 171, 56, 192, 99, 92, 205, 125, 8, 9, 72, 215, 85, 4, 56, 72, 251, 1, 26, 52, 40, 218, 37, 116, 118, 208, 235, 45, 150, 129, 233, 0, 179, 195, 40, 161, 215, 108, 176, 117, 141, 133, 252, 60, 190, 216, 11, 160, 113, 16, 141, 227, 227, 112, 193, 197, 112, 109, 91, 220, 58, 153, 216, 69, 176, 6, 225, 219, 69, 142, 23, 226, 126, 140, 22, 5, 173, 59, 137, 110, 111, 49, 13, 111, 199, 96, 221, 129, 125, 252, 250, 241, 249, 111, 197, 1, 190, 29, 87, 188, 69, 72, 78, 34, 144, 65, 128, 143, 81, 141, 133, 18, 93, 66, 31, 7, 157, 221, 162, 248, 131, 101, 216, 98, 91, 88, 30, 244, 100, 49, 104, 96, 9, 63, 191, 175, 226, 5, 208, 56, 32, 244, 201, 114, 232, 91, 220, 25, 55, 186, 69, 38, 8, 205, 46, 146, 183, 16, 208, 75, 136, 251, 66, 49, 174, 162, 117, 141, 162, 222, 132, 105, 216, 197, 190, 188, 55, 246, 241, 235, 199, 231, 127, 87, 92, 205, 46, 174, 248, 86, 164, 43, 8, 228, 85, 4, 126, 161, 26, 7, 232, 218, 160, 146, 187, 168, 246, 160, 251, 91, 172, 7, 219, 130, 222, 165, 193, 106, 53, 230, 238, 139, 251, 234, 94, 0, 141, 179, 3, 135, 206, 149, 108, 113, 163, 220, 247, 22, 137, 25, 164, 234, 18, 2, 58, 8, 241, 1, 138, 17, 180, 232, 12, 138, 218, 232, 246, 125, 216, 151, 171, 216, 172, 167, 99, 156, 222, 49, 174, 230, 62, 132, 4, 164, 235, 12, 50, 188, 16, 248, 3, 148, 104, 161, 107, 187, 168, 237, 160, 218, 187, 216, 7, 214, 3, 140, 15, 211, 4, 102, 237, 171, 242, 85, 191, 0, 192, 177, 130, 43, 225, 194, 182, 184, 111, 210, 176, 139, 84, 13, 146, 119, 9, 33, 94, 136, 251, 49, 90, 20, 84, 238, 36, 186, 189, 197, 52, 60, 4, 155, 117, 7, 38, 242, 171, 197, 199, 190, 15, 167, 247, 118, 92, 241, 22, 33, 57, 143, 76, 6, 25, 62, 70, 59, 22, 122, 180, 139, 74, 46, 52, 119, 139, 250, 15, 246, 1, 204, 203, 96, 127, 192, 118, 125, 181, 190, 165, 23, 0, 56, 113, 112, 91, 92, 231, 22, 105, 24, 36, 102, 23, 177, 27, 164, 243, 0, 89, 95, 104, 197, 85, 84, 174, 209, 210, 155, 48, 13, 151, 48, 49, 239, 141, 137, 252, 106, 241, 177, 63, 3, 238, 101, 23, 87, 124, 43, 210, 213, 200, 228, 85, 100, 126, 161, 29, 151, 80, 183, 133, 86, 238, 162, 221, 212, 127, 139, 1, 25, 44, 12, 88, 167, 111, 197, 55, 252, 2, 104, 92, 198, 22, 119, 201, 101, 239, 34, 49, 228, 233, 18, 162, 185, 16, 226, 3, 180, 34, 168, 208, 25, 180, 180, 209, 237, 187, 49, 49, 199, 216, 172, 167, 3, 28, 221, 85, 220, 203, 125, 8, 9, 72, 215, 25, 100, 56, 200, 252, 1, 122, 180, 208, 184, 93, 148, 119, 208, 238, 45, 38, 98, 176, 33, 96, 130, 190, 81, 223, 201, 11, 0, 92, 213, 22, 55, 61, 72, 195, 22, 121, 26, 100, 238, 18, 226, 187, 16, 244, 171, 168, 80, 80, 185, 147, 232, 246, 22, 211, 240, 16, 108, 214, 221, 216, 202, 175, 10, 31, 245, 110, 28, 221, 67, 112, 197, 91, 132, 228, 60, 50, 25, 100, 248, 24, 5, 89, 168, 210, 37, 20, 115, 80, 222, 93, 44, 192, 96, 37, 192, 200, 124, 31, 190, 207, 23, 0, 184, 200, 45, 114, 48, 200, 202, 46, 50, 183, 16, 205, 75, 8, 122, 208, 138, 171, 168, 92, 163, 165, 55, 97, 26, 46, 97, 98, 62, 15, 182, 242, 171, 194, 71, 253, 60, 184, 148, 75, 184, 226, 91, 145, 174, 70, 38, 175, 34, 243, 11, 5, 57, 64, 227, 6, 197, 220, 69, 193, 7, 35, 176, 197, 140, 124, 151, 126, 18, 47, 0, 112, 205, 187, 200, 202, 32, 79, 187, 200, 229, 66, 124, 143, 209, 138, 133, 254, 156, 68, 75, 27, 221, 190, 27, 19, 115, 21, 203, 245, 180, 139, 67, 187, 138, 75, 185, 27, 33, 1, 233, 58, 131, 24, 7, 153, 63, 64, 149, 22, 74, 119, 9, 253, 29, 116, 124, 139, 161, 248, 41, 248, 41, 190, 0, 182, 200, 193, 46, 194, 52, 8, 220, 37, 196, 119, 33, 232, 199, 232, 79, 163, 114, 39, 209, 237, 93, 64, 124, 206, 18, 0, 0, 2, 149, 73, 68, 65, 84, 172, 195, 67, 176, 92, 111, 193, 104, 126, 13, 248, 132, 119, 227, 208, 30, 133, 251, 221, 34, 36, 231, 145, 201, 32, 198, 199, 40, 72, 208, 166, 75, 232, 230, 160, 191, 187, 216, 129, 159, 160, 231, 11, 96, 7, 41, 185, 132, 192, 13, 66, 121, 128, 148, 47, 84, 226, 12, 42, 215, 104, 233, 173, 88, 135, 75, 88, 153, 207, 134, 209, 252, 26, 240, 9, 63, 27, 110, 228, 18, 238, 247, 86, 164, 171, 145, 201, 171, 136, 125, 208, 145, 75, 40, 221, 66, 55, 119, 81, 243, 167, 241, 124, 1, 156, 66, 146, 46, 33, 148, 11, 241, 61, 64, 31, 130, 254, 156, 68, 75, 65, 189, 239, 198, 202, 92, 197, 120, 61, 109, 113, 98, 87, 113, 35, 119, 35, 33, 32, 93, 103, 16, 227, 32, 246, 199, 104, 211, 66, 239, 118, 81, 225, 167, 93, 207, 23, 192, 157, 72, 219, 1, 178, 187, 144, 242, 99, 244, 39, 232, 219, 77, 168, 247, 22, 235, 240, 40, 140, 215, 27, 49, 157, 95, 10, 159, 234, 141, 56, 177, 71, 225, 126, 183, 72, 200, 121, 196, 178, 145, 228, 99, 116, 100, 161, 77, 151, 80, 207, 167, 147, 158, 47, 128, 71, 34, 148, 151, 16, 241, 160, 15, 87, 81, 54, 208, 210, 91, 177, 14, 151, 176, 50, 159, 25, 211, 249, 165, 240, 169, 62, 39, 174, 227, 0, 247, 123, 43, 210, 213, 136, 229, 25, 36, 127, 161, 38, 7, 232, 221, 211, 221, 158, 47, 128, 247, 69, 112, 143, 209, 135, 160, 60, 103, 80, 209, 45, 234, 125, 55, 86, 230, 12, 38, 236, 169, 113, 86, 87, 113, 29, 111, 65, 66, 64, 192, 78, 34, 201, 65, 242, 15, 80, 168, 167, 199, 122, 190, 0, 190, 0, 34, 126, 21, 229, 9, 202, 118, 19, 234, 189, 197, 58, 60, 16, 19, 246, 118, 108, 232, 103, 195, 199, 120, 8, 206, 234, 81, 184, 220, 93, 36, 228, 60, 98, 217, 72, 242, 49, 106, 242, 244, 25, 60, 95, 0, 95, 17, 250, 112, 21, 101, 107, 84, 244, 14, 172, 195, 37, 12, 205, 23, 193, 134, 126, 54, 124, 140, 47, 130, 235, 184, 132, 203, 189, 3, 1, 107, 196, 242, 12, 146, 255, 244, 165, 60, 95, 0, 223, 0, 202, 115, 6, 21, 221, 162, 222, 119, 99, 104, 78, 98, 197, 158, 22, 78, 233, 12, 174, 227, 45, 72, 8, 8, 216, 73, 36, 249, 233, 107, 243, 124, 1, 124, 195, 40, 219, 77, 168, 247, 22, 235, 240, 88, 172, 216, 163, 176, 167, 239, 132, 31, 250, 64, 156, 210, 3, 113, 185, 187, 72, 200, 121, 196, 242, 233, 27, 242, 124, 1, 124, 159, 168, 232, 29, 88, 135, 3, 108, 205, 23, 196, 158, 190, 19, 126, 232, 151, 197, 93, 92, 194, 229, 222, 129, 128, 61, 125, 31, 158, 47, 128, 159, 40, 234, 253, 22, 108, 205, 73, 12, 217, 19, 231, 115, 18, 119, 241, 22, 36, 228, 233, 167, 224, 249, 2, 120, 218, 199, 58, 60, 28, 67, 246, 88, 108, 235, 67, 240, 35, 30, 142, 243, 121, 44, 46, 247, 233, 105, 121, 190, 0, 158, 222, 138, 173, 249, 26, 176, 173, 15, 193, 143, 248, 26, 112, 17, 79, 79, 183, 122, 190, 0, 158, 190, 12, 182, 236, 39, 142, 195, 121, 122, 250, 60, 158, 47, 128, 167, 239, 25, 59, 123, 7, 190, 225, 211, 211, 247, 228, 249, 2, 120, 122, 122, 122, 250, 137, 122, 190, 0, 158, 158, 158, 158, 126, 162, 158, 47, 128, 167, 167, 167, 167, 159, 168, 231, 11, 224, 233, 233, 233, 233, 39, 234, 249, 2, 120, 122, 122, 122, 250, 137, 122, 190, 0, 158, 158, 158, 158, 126, 146, 126, 241, 175, 253, 255, 6, 10, 84, 86, 49, 249, 57, 124, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/textures', 'air_hockey_surface.png', fileData4, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 24336;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,63,0,0,0,191,205,204,76,191,0,0,0,0,102,102,102,63,0,0,0,63,205,204,76,191,0,0,128,63,102,102,102,63,0,0,0,63,205,204,76,63,0,0,128,63,205,204,204,61,0,0,0,191,205,204,76,63,0,0,0,0,205,204,204,61,0,0,0,191,205,204,76,191,0,0,0,0,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,205,204,76,63,205,204,76,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,250,0,0,232,128,0,0,48,117,0,0,96,234,0,0,152,58,0,0,112,23,0,0,38,122,0,0,132,128,0,0,23,161,0,0,16,83,0,0,141,7,0,0,174,139,0,0,93,23,1,0,143,46,0,0,128,70,0,0,51,28,0,0,77,115,1,0,246,217,63,10,185,114,135,59,232,11,0,0,222,61,248,41,174,85,242,175,228,250,66,120,13,57,131,202,1,0,0,0,225,229,9,73,33,187,126,66,236,11,0,0,55,214,91,201,59,138,93,233,153,143,243,13,137,3,50,193,1,0,1,0,161,68,33,253,174,216,111,48,60,238,0,0,120,51,102,252,107,136,226,55,131,233,114,253,184,241,40,130,1,0,0,0,210,53,156,32,18,120,239,187,32,238,0,0,191,42,86,52,6,205,76,153,33,87,44,109,93,140,214,208,1,0,0,0,98,215,84,160,206,41,81,93,208,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,251,243,132,247,82,165,46,24,72,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,252,243,152,3,109,82,158,242,72,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,240,240,240,240,204,204,204,204,170,170,170,170,0,255,0,255,240,240,240,240,204,204,204,204,0,0,255,255,0,255,0,255,240,240,240,240,15,15,15,15,51,51,51,51,85,85,85,85,0,255,0,255,15,15,15,15,51,51,51,51,0,0,255,255,0,255,0,255,15,15,15,15,1,1,1,1,16,16,16,16,17,17,17,17,68,68,68,68,85,85,85,85,170,170,170,170,3,0,3,0,0,3,0,3,3,3,3,3,48,48,48,48,51,51,51,51,204,204,204,204,15,0,0,0,0,0,15,0,15,0,15,0,0,15,0,15,15,15,15,15,240,240,240,240,128,128,128,128,8,8,8,8,136,136,136,136,34,34,34,34,170,170,170,170,85,85,85,85,192,0,192,0,0,192,0,192,192,192,192,192,12,12,12,12,204,204,204,204,51,51,51,51,240,0,0,0,0,0,240,0,240,0,240,0,0,240,0,240,240,240,240,240,15,15,15,15,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,204,34,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,8,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,35,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,16,91,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,35,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,72,0,78,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,103,108,102,119,73,110,105,116,40,41,32,102,97,105,108,101,100,10,0,103,108,102,119,79,112,101,110,87,105,110,100,111,119,40,41,32,102,97,105,108,101,100,10,0,112,108,97,116,102,111,114,109,95,97,115,115,101,116,95,117,116,105,108,115,46,99,0,103,101,116,95,97,115,115,101,116,95,100,97,116,97,0,114,101,108,101,97,115,101,95,97,115,115,101,116,95,100,97,116,97,0,40,86,69,82,66,79,83,69,41,32,37,115,58,32,0,40,68,69,66,85,71,41,32,37,115,58,32,0,40,69,82,82,79,82,41,32,37,115,58,32,0,112,97,116,104,32,33,61,32,78,85,76,76,0,46,46,47,99,111,109,109,111,110,47,112,108,97,116,102,111,114,109,95,102,105,108,101,95,117,116,105,108,115,46,99,0,103,101,116,95,102,105,108,101,95,100,97,116,97,0,114,0,115,116,114,101,97,109,32,33,61,32,78,85,76,76,0,102,101,114,114,111,114,40,115,116,114,101,97,109,41,32,61,61,32,48,0,102,105,108,101,95,100,97,116,97,32,33,61,32,78,85,76,76,0,114,101,108,101,97,115,101,95,102,105,108,101,95,100,97,116,97,0,102,105,108,101,95,100,97,116,97,45,62,100,97,116,97,32,33,61,32,78,85,76,76,0,114,101,108,97,116,105,118,101,95,112,97,116,104,32,33,61,32,78,85,76,76,0,46,46,47,46,46,47,99,111,114,101,47,97,115,115,101,116,95,117,116,105,108,115,46,99,0,108,111,97,100,95,112,110,103,95,97,115,115,101,116,95,105,110,116,111,95,116,101,120,116,117,114,101,0,118,101,114,116,101,120,95,115,104,97,100,101,114,95,112,97,116,104,32,33,61,32,78,85,76,76,0,98,117,105,108,100,95,112,114,111,103,114,97,109,95,102,114,111,109,95,97,115,115,101,116,115,0,102,114,97,103,109,101,110,116,95,115,104,97,100,101,114,95,112,97,116,104,32,33,61,32,78,85,76,76,0,46,46,47,46,46,47,99,111,114,101,47,98,117,102,102,101,114,46,99,0,99,114,101,97,116,101,95,118,98,111,0,118,98,111,95,111,98,106,101,99,116,32,33,61,32,48,0,116,101,120,116,117,114,101,115,47,97,105,114,95,104,111,99,107,101,121,95,115,117,114,102,97,99,101,46,112,110,103,0,115,104,97,100,101,114,115,47,116,101,120,116,117,114,101,95,115,104,97,100,101,114,46,118,115,104,0,115,104,97,100,101,114,115,47,116,101,120,116,117,114,101,95,115,104,97,100,101,114,46,102,115,104,0,115,104,97,100,101,114,115,47,99,111,108,111,114,95,115,104,97,100,101,114,46,118,115,104,0,115,104,97,100,101,114,115,47,99,111,108,111,114,95,115,104,97,100,101,114,46,102,115,104,0,112,110,103,95,100,97,116,97,32,33,61,32,78,85,76,76,32,38,38,32,112,110,103,95,100,97,116,97,95,115,105,122,101,32,62,32,56,0,46,46,47,46,46,47,99,111,114,101,47,105,109,97,103,101,46,99,0,103,101,116,95,114,97,119,95,105,109,97,103,101,95,100,97,116,97,95,102,114,111,109,95,112,110,103,0,112,110,103,95,99,104,101,99,107,95,115,105,103,40,40,118,111,105,100,42,41,112,110,103,95,100,97,116,97,44,32,56,41,0,112,110,103,95,112,116,114,32,33,61,32,78,85,76,76,0,105,110,102,111,95,112,116,114,32,33,61,32,78,85,76,76,0,65,115,115,101,114,116,0,34,69,114,114,111,114,32,114,101,97,100,105,110,103,32,80,78,71,32,102,105,108,101,33,34,0,114,111,119,95,115,105,122,101,32,62,32,48,0,114,101,97,100,95,101,110,116,105,114,101,95,112,110,103,95,105,109,97,103,101,0,114,97,119,95,105,109,97,103,101,32,33,61,32,78,85,76,76,0,112,110,103,95,99,111,108,111,114,95,102,111,114,109,97,116,32,61,61,32,80,78,71,95,67,79,76,79,82,95,84,89,80,69,95,71,82,65,89,32,124,124,32,112,110,103,95,99,111,108,111,114,95,102,111,114,109,97,116,32,61,61,32,80,78,71,95,67,79,76,79,82,95,84,89,80,69,95,82,71,66,95,65,76,80,72,65,32,124,124,32,112,110,103,95,99,111,108,111,114,95,102,111,114,109,97,116,32,61,61,32,80,78,71,95,67,79,76,79,82,95,84,89,80,69,95,71,82,65,89,95,65,76,80,72,65,0,103,101,116,95,103,108,95,99,111,108,111,114,95,102,111,114,109,97,116,0,100,97,116,97,32,33,61,32,78,85,76,76,0,114,101,108,101,97,115,101,95,114,97,119,95,105,109,97,103,101,95,100,97,116,97,0,97,95,80,111,115,105,116,105,111,110,0,97,95,84,101,120,116,117,114,101,67,111,111,114,100,105,110,97,116,101,115,0,117,95,77,118,112,77,97,116,114,105,120,0,117,95,84,101,120,116,117,114,101,85,110,105,116,0,117,95,67,111,108,111,114,0,115,111,117,114,99,101,32,33,61,32,78,85,76,76,0,46,46,47,46,46,47,99,111,114,101,47,115,104,97,100,101,114,46,99,0,99,111,109,112,105,108,101,95,115,104,97,100,101,114,0,115,104,97,100,101,114,95,111,98,106,101,99,116,95,105,100,32,33,61,32,48,0,115,104,97,100,101,114,115,0,37,115,58,37,100,58,37,115,40,41,58,32,37,115,0,82,101,115,117,108,116,115,32,111,102,32,99,111,109,112,105,108,105,110,103,32,115,104,97,100,101,114,32,115,111,117,114,99,101,58,0,108,111,103,95,118,95,102,105,120,101,100,95,108,101,110,103,116,104,0,108,111,103,95,115,104,97,100,101,114,95,105,110,102,111,95,108,111,103,0,99,111,109,112,105,108,101,95,115,116,97,116,117,115,32,33,61,32,48,0,112,114,111,103,114,97,109,95,111,98,106,101,99,116,95,105,100,32,33,61,32,48,0,108,105,110,107,95,112,114,111,103,114,97,109,0,82,101,115,117,108,116,115,32,111,102,32,108,105,110,107,105,110,103,32,112,114,111,103,114,97,109,58,0,108,111,103,95,112,114,111,103,114,97,109,95,105,110,102,111,95,108,111,103,0,108,105,110,107,95,115,116,97,116,117,115,32,33,61,32,48,0,118,101,114,116,101,120,95,115,104,97,100,101,114,95,115,111,117,114,99,101,32,33,61,32,78,85,76,76,0,98,117,105,108,100,95,112,114,111,103,114,97,109,0,102,114,97,103,109,101,110,116,95,115,104,97,100,101,114,95,115,111,117,114,99,101,32,33,61,32,78,85,76,76,0,116,101,120,116,117,114,101,95,111,98,106,101,99,116,95,105,100,32,33,61,32,48,0,46,46,47,46,46,47,99,111,114,101,47,116,101,120,116,117,114,101,46,99,0,108,111,97,100,95,116,101,120,116,117,114,101,0,137,80,78,71,13,10,26,10,80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0,49,46,54,46,50,50,0,65,112,112,108,105,99,97,116,105,111,110,32,98,117,105,108,116,32,119,105,116,104,32,108,105,98,112,110,103,45,0,32,98,117,116,32,114,117,110,110,105,110,103,32,119,105,116,104,32,0,117,110,101,120,112,101,99,116,101,100,32,122,108,105,98,32,114,101,116,117,114,110,32,99,111,100,101,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,76,90,32,115,116,114,101,97,109,0,109,105,115,115,105,110,103,32,76,90,32,100,105,99,116,105,111,110,97,114,121,0,122,108,105,98,32,73,79,32,101,114,114,111,114,0,98,97,100,32,112,97,114,97,109,101,116,101,114,115,32,116,111,32,122,108,105,98,0,100,97,109,97,103,101,100,32,76,90,32,115,116,114,101,97,109,0,117,110,115,117,112,112,111,114,116,101,100,32,122,108,105,98,32,118,101,114,115,105,111,110,0,117,110,101,120,112,101,99,116,101,100,32,122,108,105,98,32,114,101,116,117,114,110,0,103,97,109,109,97,32,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,103,97,109,109,97,32,118,97,108,117,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,115,82,71,66,0,103,97,109,109,97,32,118,97,108,117,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,108,105,98,112,110,103,32,101,115,116,105,109,97,116,101,0,105,110,99,111,110,115,105,115,116,101,110,116,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0,105,110,118,97,108,105,100,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,99,104,101,99,107,105,110,103,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0,115,82,71,66,0,105,110,118,97,108,105,100,32,115,82,71,66,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,0,112,114,111,102,105,108,101,32,39,0,39,58,32,0,104,58,32,0,105,110,99,111,110,115,105,115,116,101,110,116,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,115,0,100,117,112,108,105,99,97,116,101,32,115,82,71,66,32,105,110,102,111,114,109,97,116,105,111,110,32,105,103,110,111,114,101,100,0,99,72,82,77,32,99,104,117,110,107,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,115,82,71,66,0,108,101,110,103,116,104,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,112,114,111,102,105,108,101,0,105,110,118,97,108,105,100,32,108,101,110,103,116,104,0,116,97,103,32,99,111,117,110,116,32,116,111,111,32,108,97,114,103,101,0,105,110,118,97,108,105,100,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,0,105,110,116,101,110,116,32,111,117,116,115,105,100,101,32,100,101,102,105,110,101,100,32,114,97,110,103,101,0,105,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,0,0,0,246,214,0,1,0,0,0,0,211,45,80,67,83,32,105,108,108,117,109,105,110,97,110,116,32,105,115,32,110,111,116,32,68,53,48,0,82,71,66,32,99,111,108,111,114,32,115,112,97,99,101,32,110,111,116,32,112,101,114,109,105,116,116,101,100,32,111,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,71,114,97,121,32,99,111,108,111,114,32,115,112,97,99,101,32,110,111,116,32,112,101,114,109,105,116,116,101,100,32,111,110,32,82,71,66,32,80,78,71,0,105,110,118,97,108,105,100,32,73,67,67,32,112,114,111,102,105,108,101,32,99,111,108,111,114,32,115,112,97,99,101,0,105,110,118,97,108,105,100,32,101,109,98,101,100,100,101,100,32,65,98,115,116,114,97,99,116,32,73,67,67,32,112,114,111,102,105,108,101,0,117,110,101,120,112,101,99,116,101,100,32,68,101,118,105,99,101,76,105,110,107,32,73,67,67,32,112,114,111,102,105,108,101,32,99,108,97,115,115,0,117,110,101,120,112,101,99,116,101,100,32,78,97,109,101,100,67,111,108,111,114,32,73,67,67,32,112,114,111,102,105,108,101,32,99,108,97,115,115,0,117,110,114,101,99,111,103,110,105,122,101,100,32,73,67,67,32,112,114,111,102,105,108,101,32,99,108,97,115,115,0,117,110,101,120,112,101,99,116,101,100,32,73,67,67,32,80,67,83,32,101,110,99,111,100,105,110,103,0,73,67,67,32,112,114,111,102,105,108,101,32,116,97,103,32,115,116,97,114,116,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,52,0,73,67,67,32,112,114,111,102,105,108,101,32,116,97,103,32,111,117,116,115,105,100,101,32,112,114,111,102,105,108,101,0,107,110,111,119,110,32,105,110,99,111,114,114,101,99,116,32,115,82,71,66,32,112,114,111,102,105,108,101,0,111,117,116,45,111,102,45,100,97,116,101,32,115,82,71,66,32,112,114,111,102,105,108,101,32,119,105,116,104,32,110,111,32,115,105,103,110,97,116,117,114,101,0,78,111,116,32,114,101,99,111,103,110,105,122,105,110,103,32,107,110,111,119,110,32,115,82,71,66,32,112,114,111,102,105,108,101,32,116,104,97,116,32,104,97,115,32,98,101,101,110,32,101,100,105,116,101,100,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,32,99,72,82,77,32,99,111,101,102,102,105,99,105,101,110,116,115,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,32,99,72,82,77,45,62,88,89,90,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,105,110,32,73,72,68,82,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,116,104,105,115,32,97,114,99,104,105,116,101,99,116,117,114,101,0,73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,105,110,32,73,72,68,82,0,73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0,85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0,85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0,103,97,109,109,97,32,116,97,98,108,101,32,98,101,105,110,103,32,114,101,98,117,105,108,116,0,117,110,100,101,102,105,110,101,100,0,108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0,10,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0,76,105,98,112,110,103,32,106,109,112,95,98,117,102,32,115,116,105,108,108,32,97,108,108,111,99,97,116,101,100,0,65,112,112,108,105,99,97,116,105,111,110,32,106,109,112,95,98,117,102,32,115,105,122,101,32,99,104,97,110,103,101,100,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,97,114,114,97,121,32,97,108,108,111,99,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,97,114,114,97,121,32,114,101,97,108,108,111,99,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,73,68,65,84,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,73,68,65,84,0,84,111,111,32,109,97,110,121,32,73,68,65,84,115,32,102,111,117,110,100,0,112,110,103,95,114,101,97,100,95,117,112,100,97,116,101,95,105,110,102,111,47,112,110,103,95,115,116,97,114,116,95,114,101,97,100,95,105,109,97,103,101,58,32,100,117,112,108,105,99,97,116,101,32,99,97,108,108,0,112,110,103,95,115,116,97,114,116,95,114,101,97,100,95,105,109,97,103,101,47,112,110,103,95,114,101,97,100,95,117,112,100,97,116,101,95,105,110,102,111,58,32,100,117,112,108,105,99,97,116,101,32,99,97,108,108,0,73,110,118,97,108,105,100,32,97,116,116,101,109,112,116,32,116,111,32,114,101,97,100,32,114,111,119,32,100,97,116,97,0,98,97,100,32,97,100,97,112,116,105,118,101,32,102,105,108,116,101,114,32,118,97,108,117,101,0,115,101,113,117,101,110,116,105,97,108,32,114,111,119,32,111,118,101,114,102,108,111,119,0,105,110,116,101,114,110,97,108,32,115,101,113,117,101,110,116,105,97,108,32,114,111,119,32,115,105,122,101,32,99,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,0,73,110,116,101,114,108,97,99,101,32,104,97,110,100,108,105,110,103,32,115,104,111,117,108,100,32,98,101,32,116,117,114,110,101,100,32,111,110,32,119,104,101,110,32,117,115,105,110,103,32,112,110,103,95,114,101,97,100,95,105,109,97,103,101,0,82,101,97,100,32,112,97,108,101,116,116,101,32,105,110,100,101,120,32,101,120,99,101,101,100,105,110,103,32,110,117,109,95,112,97,108,101,116,116,101,0,67,97,108,108,32,116,111,32,78,85,76,76,32,114,101,97,100,32,102,117,110,99,116,105,111,110,0,82,101,97,100,32,69,114,114,111,114,0,67,97,110,39,116,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,0,105,110,118,97,108,105,100,32,97,102,116,101,114,32,112,110,103,95,115,116,97,114,116,95,114,101,97,100,95,105,109,97,103,101,32,111,114,32,112,110,103,95,114,101,97,100,95,117,112,100,97,116,101,95,105,110,102,111,0,105,110,118,97,108,105,100,32,98,101,102,111,114,101,32,116,104,101,32,80,78,71,32,104,101,97,100,101,114,32,104,97,115,32,98,101,101,110,32,114,101,97,100,0,108,105,98,112,110,103,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,103,97,109,109,97,43,98,97,99,107,103,114,111,117,110,100,43,114,103,98,95,116,111,95,103,114,97,121,0,105,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,103,97,109,109,97,32,116,121,112,101,0,80,97,108,101,116,116,101,32,105,115,32,78,85,76,76,32,105,110,32,105,110,100,101,120,101,100,32,105,109,97,103,101,0,78,85,76,76,32,114,111,119,32,98,117,102,102,101,114,0,85,110,105,110,105,116,105,97,108,105,122,101,100,32,114,111,119,0,112,110,103,95,100,111,95,114,103,98,95,116,111,95,103,114,97,121,32,102,111,117,110,100,32,110,111,110,103,114,97,121,32,112,105,120,101,108,0,112,110,103,95,100,111,95,101,110,99,111,100,101,95,97,108,112,104,97,58,32,117,110,101,120,112,101,99,116,101,100,32,99,97,108,108,0,112,110,103,95,100,111,95,113,117,97,110,116,105,122,101,32,114,101,116,117,114,110,101,100,32,114,111,119,98,121,116,101,115,61,48,0,80,78,71,32,117,110,115,105,103,110,101,100,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,78,111,116,32,97,32,80,78,71,32,102,105,108,101,0,80,78,71,32,102,105,108,101,32,99,111,114,114,117,112,116,101,100,32,98,121,32,65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,0,105,110,118,97,108,105,100,32,99,104,117,110,107,32,116,121,112,101,0,67,82,67,32,101,114,114,111,114,0,111,117,116,32,111,102,32,112,108,97,99,101,0,105,110,118,97,108,105,100,0,109,105,115,115,105,110,103,32,73,72,68,82,0,100,117,112,108,105,99,97,116,101,0,105,103,110,111,114,101,100,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,116,82,78,83,32,109,117,115,116,32,98,101,32,97,102,116,101,114,0,104,73,83,84,32,109,117,115,116,32,98,101,32,97,102,116,101,114,0,98,75,71,68,32,109,117,115,116,32,98,101,32,97,102,116,101,114,0,80,78,71,32,102,105,120,101,100,32,112,111,105,110,116,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,105,110,118,97,108,105,100,32,118,97,108,117,101,115,0,116,111,111,32,109,97,110,121,32,112,114,111,102,105,108,101,115,0,116,111,111,32,115,104,111,114,116,0,32,117,115,105,110,103,32,122,115,116,114,101,97,109,0,122,115,116,114,101,97,109,32,117,110,99,108,97,105,109,101,100,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,99,104,117,110,107,0,101,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,116,114,117,110,99,97,116,101,100,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,98,97,100,32,107,101,121,119,111,114,100,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,115,80,76,84,0,109,97,108,102,111,114,109,101,100,32,115,80,76,84,32,99,104,117,110,107,0,115,80,76,84,32,99,104,117,110,107,32,104,97,115,32,98,97,100,32,108,101,110,103,116,104,0,115,80,76,84,32,99,104,117,110,107,32,116,111,111,32,108,111,110,103,0,115,80,76,84,32,99,104,117,110,107,32,114,101,113,117,105,114,101,115,32,116,111,111,32,109,117,99,104,32,109,101,109,111,114,121,0,105,110,118,97,108,105,100,32,119,105,116,104,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0,105,110,118,97,108,105,100,32,105,110,100,101,120,0,105,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,32,99,111,117,110,116,0,117,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0,105,110,118,97,108,105,100,32,100,97,116,97,0,105,110,118,97,108,105,100,32,117,110,105,116,0,98,97,100,32,119,105,100,116,104,32,102,111,114,109,97,116,0,110,111,110,45,112,111,115,105,116,105,118,101,32,119,105,100,116,104,0,98,97,100,32,104,101,105,103,104,116,32,102,111,114,109,97,116,0,110,111,110,45,112,111,115,105,116,105,118,101,32,104,101,105,103,104,116,0,110,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,32,105,110,102,111,0,117,110,107,110,111,119,110,32,99,104,117,110,107,32,101,120,99,101,101,100,115,32,109,101,109,111,114,121,32,108,105,109,105,116,115,0,101,114,114,111,114,32,105,110,32,117,115,101,114,32,99,104,117,110,107,0,83,97,118,105,110,103,32,117,110,107,110,111,119,110,32,99,104,117,110,107,58,0,102,111,114,99,105,110,103,32,115,97,118,101,32,111,102,32,97,110,32,117,110,104,97,110,100,108,101,100,32,99,104,117,110,107,59,32,112,108,101,97,115,101,32,99,97,108,108,32,112,110,103,95,115,101,116,95,107,101,101,112,95,117,110,107,110,111,119,110,95,99,104,117,110,107,115,0,117,110,104,97,110,100,108,101,100,32,99,114,105,116,105,99,97,108,32,99,104,117,110,107,0,105,110,116,101,114,110,97,108,32,114,111,119,32,108,111,103,105,99,32,101,114,114,111,114,0,105,110,116,101,114,110,97,108,32,114,111,119,32,115,105,122,101,32,99,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,0,105,110,116,101,114,110,97,108,32,114,111,119,32,119,105,100,116,104,32,101,114,114,111,114,0,105,110,118,97,108,105,100,32,117,115,101,114,32,116,114,97,110,115,102,111,114,109,32,112,105,120,101,108,32,100,101,112,116,104,0,78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0,69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,84,111,111,32,109,117,99,104,32,105,109,97,103,101,32,100,97,116,97,0,8,8,4,4,2,2,1,0,4,0,2,0,1,0,8,8,8,4,4,2,2,0,0,4,0,2,0,1,8,8,8,4,4,2,2,0,0,4,0,2,0,1,8,8,4,4,2,2,1,0,4,0,2,0,1,0,82,111,119,32,104,97,115,32,116,111,111,32,109,97,110,121,32,98,121,116,101,115,32,116,111,32,97,108,108,111,99,97,116,101,32,105,110,32,109,101,109,111,114,121,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,115,105,122,101,44,32,104,73,83,84,32,97,108,108,111,99,97,116,105,111,110,32,115,107,105,112,112,101,100,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,104,73,83,84,32,99,104,117,110,107,32,100,97,116,97,0,73,110,118,97,108,105,100,32,112,67,65,76,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0,73,110,118,97,108,105,100,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,32,99,111,117,110,116,0,73,110,118,97,108,105,100,32,102,111,114,109,97,116,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,117,110,105,116,115,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0,73,110,118,97,108,105,100,32,115,67,65,76,32,117,110,105,116,0,73,110,118,97,108,105,100,32,115,67,65,76,32,119,105,100,116,104,0,73,110,118,97,108,105,100,32,115,67,65,76,32,104,101,105,103,104,116,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,108,101,110,103,116,104,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,0,116,111,111,32,109,97,110,121,32,116,101,120,116,32,99,104,117,110,107,115,0,116,101,120,116,32,99,111,109,112,114,101,115,115,105,111,110,32,109,111,100,101,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,116,101,120,116,32,99,104,117,110,107,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,116,105,109,101,32,118,97,108,117,101,0,116,82,78,83,32,99,104,117,110,107,32,104,97,115,32,111,117,116,45,111,102,45,114,97,110,103,101,32,115,97,109,112,108,101,115,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,116,111,111,32,109,97,110,121,32,115,80,76,84,32,99,104,117,110,107,115,0,112,110,103,95,115,101,116,95,115,80,76,84,58,32,105,110,118,97,108,105,100,32,115,80,76,84,0,115,80,76,84,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,116,111,111,32,109,97,110,121,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,0,112,110,103,95,115,101,116,95,117,110,107,110,111,119,110,95,99,104,117,110,107,115,32,110,111,119,32,101,120,112,101,99,116,115,32,97,32,118,97,108,105,100,32,108,111,99,97,116,105,111,110,0,105,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,112,110,103,95,115,101,116,95,117,110,107,110,111,119,110,95,99,104,117,110,107,115,0,117,110,107,110,111,119,110,32,99,104,117,110,107,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,112,110,103,95,115,101,116,95,102,105,108,108,101,114,32,105,115,32,105,110,118,97,108,105,100,32,102,111,114,32,108,111,119,32,98,105,116,32,100,101,112,116,104,32,103,114,97,121,32,111,117,116,112,117,116,0,112,110,103,95,115,101,116,95,102,105,108,108,101,114,58,32,105,110,97,112,112,114,111,112,114,105,97,116,101,32,99,111,108,111,114,32,116,121,112,101,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255,0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255,49,46,50,46,56,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10241);
/* memory initializer */ allocate([32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20481);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

   
  Module["_i64Add"] = _i64Add;

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___uremdi3"] = ___uremdi3;

  
  
  function _emscripten_get_now() { abort() }
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        var argArray = [arg];
        browserIterationFunc = function() {
          Runtime.dynCall('vi', func, argArray);
        };
      } else {
        browserIterationFunc = function() {
          Runtime.dynCall('v', func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          
          //#define GLFW_KEY_SPECIAL      256
          case 0x1B:return (256+1); // DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x70:return (256+2); // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return (256+3); // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return (256+4); // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return (256+5); // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return (256+6); // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return (256+7); // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return (256+8); // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return (256+9); // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return (256+10); // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return (256+11); // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return (256+12); // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return (256+13); // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return (256+14); // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return (256+15); // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return (256+16); // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return (256+17); // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return (256+18); // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return (256+19); // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return (256+20); // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return (256+21); // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return (256+22); // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return (256+23); // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return (256+24); // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return (256+25); // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return (256+26); // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x27:return (256+27); // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return (256+28); // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return (256+29); // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return (256+30); // DOM_VK_UP -> GLFW_KEY_UP
          case 0x10:return (256+31); // DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          // #define GLFW_KEY_RSHIFT       (GLFW_KEY_SPECIAL+32)
          case 0x11:return (256+33); // DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          // #define GLFW_KEY_RCTRL        (GLFW_KEY_SPECIAL+34)
          case 0x12:return (256+35); // DOM_VK_ALT -> GLFW_KEY_LALT
          // #define GLFW_KEY_RALT         (GLFW_KEY_SPECIAL+36)
          case 0x09:return (256+37); // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x0D:return (256+38); // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x08:return (256+39); // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return (256+40); // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return (256+41); // DOM_VK_DELETE -> GLFW_KEY_DEL
          case 0x21:return (256+42); // DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22:return (256+43); // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24:return (256+44); // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return (256+45); // DOM_VK_END -> GLFW_KEY_END
          case 0x60:return (256+46); // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return (256+47); // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return (256+48); // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return (256+49); // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return (256+50); // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return (256+51); // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return (256+52); // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return (256+53); // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return (256+54); // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return (256+55); // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6F:return (256+56); // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return (256+57); // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return (256+58); // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return (256+59); // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6E:return (256+60); // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          // #define GLFW_KEY_KP_EQUAL     (GLFW_KEY_SPECIAL+61)
          // #define GLFW_KEY_KP_ENTER     (GLFW_KEY_SPECIAL+62)
          case 0x90:return (256+63); // DOM_VK_NUM_LOCK -> GLFW_KEY_KP_NUM_LOCK
          case 0x14:return (256+64); // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return (256+65); // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x13:return (256+66); // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x5B:return (256+67); // DOM_VK_WIN -> GLFW_KEY_LSUPER
          // #define GLFW_KEY_RSUPER       (GLFW_KEY_SPECIAL+68)
          case 0x5D:return (256+69); // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [charCode, 1]);
  
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.keyFunc, [key, status]);
  
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorPosFunc, [Browser.mouseX, Browser.mouseY]);
  
      },onMouseenter:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
      },onMouseleave:function (event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
        Runtime.dynCall('vii', GLFW.active.mouseButtonFunc, [eventButton, status]);
  
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        Runtime.dynCall('vi', GLFW.active.scrollFunc, [GLFW.wheelPos]);
  
  
        event.preventDefault();
      },onCanvasResize:function (width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requestiong fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.windowSizeFunc, [GLFW.active.width, GLFW.active.height]);
  
      },onFramebufferSizeChanged:function () {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
      },requestFullscreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },requestFullScreen:function () {
        Module.printErr('GLFW.requestFullScreen() is deprecated. Please call GLFW.requestFullscreen instead.');
        GLFW.requestFullScreen = function() {
          return GLFW.requestFullscreen();
        }
        return GLFW.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLFW.cancelFullScreen() is deprecated. Please call GLFW.exitFullscreen instead.');
        GLFW.cancelFullScreen = function() {
          return GLFW.exitFullscreen();
        }
        return GLFW.exitFullscreen();
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
       
        // As documented in GLFW2 API (http://www.glfw.org/GLFWReference27.pdf#page=22), when size
        // callback function is set, it will be called with the current window size before this
        // function returns.
        // GLFW3 on the over hand doesn't have this behavior (https://github.com/glfw/glfw/issues/62).
        if (!win.windowSizeFunc) return;
        Runtime.dynCall('vii', win.windowSizeFunc, [win.width, win.height]);
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },onClickRequestPointerLock:function (e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function (winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullscreen();
          } else {
            GLFW.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
        Runtime.dynCall('vii', win.windowSizeFunc, [width, height]);
  
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS 
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwSwapBuffers() {
      GLFW.swapBuffers(GLFW.active.id);
    }

  function _glfwGetMousePos(x, y) {
      GLFW.getMousePos(GLFW.active.id, x, y);
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _glfwGetMouseButton(button) {
      return GLFW.getMouseButton(GLFW.active.id, button);
    }

   
  Module["_memset"] = _memset;

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      GLFW.hints[0x00021001] = redbits;     // GLFW_RED_BITS
      GLFW.hints[0x00021002] = greenbits;   // GLFW_GREEN_BITS
      GLFW.hints[0x00021003] = bluebits;    // GLFW_BLUE_BITS
      GLFW.hints[0x00021004] = alphabits;   // GLFW_ALPHA_BITS
      GLFW.hints[0x00021005] = depthbits;   // GLFW_DEPTH_BITS
      GLFW.hints[0x00021006] = stencilbits; // GLFW_STENCIL_BITS
      GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
      return 1; // GL_TRUE
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for (var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function ___lock() {}

  function ___unlock() {}

  function _glEnable(x0) { GLctx.enable(x0) }

  function _glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }


  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }


  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _glfwPollEvents() {}

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  var _llvm_fabs_f64=Math_abs;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___udivdi3"] = ___udivdi3;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _llvm_trap() {
      abort('trap!');
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init();
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_glGenerateMipmap": _glGenerateMipmap, "_glVertexAttribPointer": _glVertexAttribPointer, "_llvm_pow_f64": _llvm_pow_f64, "_glGetProgramiv": _glGetProgramiv, "_glLinkProgram": _glLinkProgram, "_glfwPollEvents": _glfwPollEvents, "_abort": _abort, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glfwInit": _glfwInit, "_llvm_fabs_f64": _llvm_fabs_f64, "_glDrawArrays": _glDrawArrays, "_glGetProgramInfoLog": _glGetProgramInfoLog, "___setErrNo": ___setErrNo, "_llvm_stackrestore": _llvm_stackrestore, "_glfwOpenWindow": _glfwOpenWindow, "_longjmp": _longjmp, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "___assert_fail": ___assert_fail, "_glViewport": _glViewport, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_glClearColor": _glClearColor, "_sbrk": _sbrk, "_glBindTexture": _glBindTexture, "_glGetAttribLocation": _glGetAttribLocation, "_glClear": _glClear, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_glUniform4fv": _glUniform4fv, "_glUniform1i": _glUniform1i, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_glCreateShader": _glCreateShader, "___syscall221": ___syscall221, "_glAttachShader": _glAttachShader, "_glfwGetMousePos": _glfwGetMousePos, "_glfwGetMouseButton": _glfwGetMouseButton, "_glEnable": _glEnable, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_glGenTextures": _glGenTextures, "___syscall54": ___syscall54, "___unlock": ___unlock, "_glActiveTexture": _glActiveTexture, "_glfwSwapBuffers": _glfwSwapBuffers, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_glfwTerminate": _glfwTerminate, "_glCreateProgram": _glCreateProgram, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall5": ___syscall5, "_glTexParameteri": _glTexParameteri, "_emscripten_longjmp": _emscripten_longjmp, "_glBufferData": _glBufferData, "_glGetShaderiv": _glGetShaderiv, "_glTexImage2D": _glTexImage2D, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _glGenerateMipmap=env._glGenerateMipmap;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glLinkProgram=env._glLinkProgram;
  var _glfwPollEvents=env._glfwPollEvents;
  var _abort=env._abort;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glfwInit=env._glfwInit;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _glDrawArrays=env._glDrawArrays;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var ___setErrNo=env.___setErrNo;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _glfwOpenWindow=env._glfwOpenWindow;
  var _longjmp=env._longjmp;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var ___assert_fail=env.___assert_fail;
  var _glViewport=env._glViewport;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _glClearColor=env._glClearColor;
  var _sbrk=env._sbrk;
  var _glBindTexture=env._glBindTexture;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glClear=env._glClear;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _glUniform4fv=env._glUniform4fv;
  var _glUniform1i=env._glUniform1i;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _glCreateShader=env._glCreateShader;
  var ___syscall221=env.___syscall221;
  var _glAttachShader=env._glAttachShader;
  var _glfwGetMousePos=env._glfwGetMousePos;
  var _glfwGetMouseButton=env._glfwGetMouseButton;
  var _glEnable=env._glEnable;
  var _llvm_stacksave=env._llvm_stacksave;
  var _llvm_trap=env._llvm_trap;
  var _glGenTextures=env._glGenTextures;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _glActiveTexture=env._glActiveTexture;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _glfwTerminate=env._glfwTerminate;
  var _glCreateProgram=env._glCreateProgram;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall5=env.___syscall5;
  var _glTexParameteri=env._glTexParameteri;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _glBufferData=env._glBufferData;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glTexImage2D=env._glTexImage2D;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 0;
 $1 = (_init_gl()|0);
 $2 = ($1|0)==(1);
 if ($2) {
  _on_surface_created();
  _on_surface_changed(480,800);
  _emscripten_set_main_loop((5|0),0,1);
 }
 _shutdown_gl();
 STACKTOP = sp;return 0;
}
function _init_gl() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_glfwInit()|0);
 $2 = ($1|0)!=(1);
 do {
  if ($2) {
   (_printf(11606,$vararg_buffer)|0);
   $0 = 0;
  } else {
   $3 = (_glfwOpenWindow(480,800,8,8,8,8,16,0,65537)|0);
   $4 = ($3|0)!=(1);
   if ($4) {
    (_printf(11625,$vararg_buffer1)|0);
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $5 = $0;
 STACKTOP = sp;return ($5|0);
}
function _do_frame() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _handle_input();
 _on_draw_frame();
 _glfwSwapBuffers();
 return;
}
function _handle_input() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var $left_mouse_button_state = 0, $normalized_x = 0.0, $normalized_y = 0.0, $x_pos = 0, $y_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x_pos = sp + 12|0;
 $y_pos = sp + 8|0;
 _glfwPollEvents();
 $0 = (_glfwGetMouseButton(0)|0);
 $left_mouse_button_state = $0;
 $1 = $left_mouse_button_state;
 $2 = ($1|0)==(1);
 if (!($2)) {
  HEAP32[5549] = 0;
  STACKTOP = sp;return;
 }
 _glfwGetMousePos(($x_pos|0),($y_pos|0));
 $3 = HEAP32[$x_pos>>2]|0;
 $4 = (+($3|0));
 $5 = $4 / 480.0;
 $6 = $5 * 2.0;
 $7 = $6 - 1.0;
 $normalized_x = $7;
 $8 = HEAP32[$y_pos>>2]|0;
 $9 = (+($8|0));
 $10 = $9 / 800.0;
 $11 = $10 * 2.0;
 $12 = $11 - 1.0;
 $13 = -$12;
 $normalized_y = $13;
 $14 = HEAP32[5549]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAP32[5549] = 1;
  $16 = $normalized_x;
  $17 = $normalized_y;
  _on_touch_press($16,$17);
  STACKTOP = sp;return;
 } else {
  $18 = $normalized_x;
  $19 = $normalized_y;
  _on_touch_drag($18,$19);
  STACKTOP = sp;return;
 }
}
function _shutdown_gl() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glfwTerminate();
 return;
}
function _get_asset_data($agg$result,$relative_path) {
 $agg$result = $agg$result|0;
 $relative_path = $relative_path|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $relative_path;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _get_file_data($agg$result,$3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11904|0),(11650|0),8,(11673|0));
  // unreachable;
 }
}
function _release_asset_data($file_data) {
 $file_data = $file_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file_data;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _release_file_data($3);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11844|0),(11650|0),13,(11688|0));
  // unreachable;
 }
}
function __debug_log_v($tag,$fmt,$varargs) {
 $tag = $tag|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg_ptr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $arg_ptr = sp + 16|0;
 $0 = $tag;
 $1 = $fmt;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_printf(11707,$vararg_buffer)|0);
 HEAP32[$arg_ptr>>2] = $varargs;
 $3 = $1;
 (_vprintf($3,$arg_ptr)|0);
 (_printf(15126,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __debug_log_d($tag,$fmt,$varargs) {
 $tag = $tag|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg_ptr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $arg_ptr = sp + 16|0;
 $0 = $tag;
 $1 = $fmt;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_printf(11722,$vararg_buffer)|0);
 HEAP32[$arg_ptr>>2] = $varargs;
 $3 = $1;
 (_vprintf($3,$arg_ptr)|0);
 (_printf(15126,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __debug_log_e($tag,$fmt,$varargs) {
 $tag = $tag|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $arg_ptr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $arg_ptr = sp + 16|0;
 $0 = $tag;
 $1 = $fmt;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_printf(11735,$vararg_buffer)|0);
 HEAP32[$arg_ptr>>2] = $varargs;
 $3 = $1;
 (_vprintf($3,$arg_ptr)|0);
 (_printf(15126,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _get_file_data($agg$result,$path) {
 $agg$result = $agg$result|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $stream = 0, $stream_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((11748|0),(11761|0),7,(11793|0));
  // unreachable;
 }
 $3 = $0;
 $4 = (_fopen($3,11807)|0);
 $stream = $4;
 $5 = $stream;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((11809|0),(11761|0),10,(11793|0));
  // unreachable;
 }
 $7 = $stream;
 (_fseek($7,0,2)|0);
 $8 = $stream;
 $9 = (_ftell($8)|0);
 $stream_size = $9;
 $10 = $stream;
 (_fseek($10,0,0)|0);
 $11 = $stream_size;
 $12 = (_malloc($11)|0);
 $buffer = $12;
 $13 = $buffer;
 $14 = $stream_size;
 $15 = $stream;
 (_fread($13,$14,1,$15)|0);
 $16 = $stream;
 $17 = (_ferror($16)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $stream;
  (_fclose($19)|0);
  $20 = $stream_size;
  HEAP32[$agg$result>>2] = $20;
  $21 = ((($agg$result)) + 4|0);
  $22 = $buffer;
  HEAP32[$21>>2] = $22;
  $23 = ((($agg$result)) + 8|0);
  HEAP32[$23>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11824|0),(11761|0),19,(11793|0));
  // unreachable;
 }
}
function _release_file_data($file_data) {
 $file_data = $file_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $file_data;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  ___assert_fail((11844|0),(11761|0),26,(11862|0));
  // unreachable;
 }
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11880|0),(11761|0),27,(11862|0));
  // unreachable;
 }
}
function _load_png_asset_into_texture($relative_path) {
 $relative_path = $relative_path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_file = 0, $raw_image_data = 0, $texture_object_id = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $png_file = sp + 24|0;
 $raw_image_data = sp + 4|0;
 $0 = $relative_path;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  _get_asset_data($png_file,$3);
  $4 = ((($png_file)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$png_file>>2]|0;
  _get_raw_image_data_from_png($raw_image_data,$5,$6);
  $7 = HEAP32[$raw_image_data>>2]|0;
  $8 = ((($raw_image_data)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($raw_image_data)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($raw_image_data)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_load_texture($7,$9,$11,$13)|0);
  $texture_object_id = $14;
  _release_raw_image_data($raw_image_data);
  _release_asset_data($png_file);
  $15 = $texture_object_id;
  STACKTOP = sp;return ($15|0);
 } else {
  ___assert_fail((11904|0),(11926|0),10,(11951|0));
  // unreachable;
 }
 return (0)|0;
}
function _build_program_from_assets($vertex_shader_path,$fragment_shader_path) {
 $vertex_shader_path = $vertex_shader_path|0;
 $fragment_shader_path = $fragment_shader_path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fragment_shader_source = 0, $program_object_id = 0, $vertex_shader_source = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vertex_shader_source = sp + 16|0;
 $fragment_shader_source = sp + 4|0;
 $0 = $vertex_shader_path;
 $1 = $fragment_shader_path;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((11979|0),(11926|0),24,(12006|0));
  // unreachable;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  _get_asset_data($vertex_shader_source,$6);
  $7 = $1;
  _get_asset_data($fragment_shader_source,$7);
  $8 = ((($vertex_shader_source)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$vertex_shader_source>>2]|0;
  $11 = ((($fragment_shader_source)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$fragment_shader_source>>2]|0;
  $14 = (_build_program($9,$10,$12,$13)|0);
  $program_object_id = $14;
  _release_asset_data($vertex_shader_source);
  _release_asset_data($fragment_shader_source);
  $15 = $program_object_id;
  STACKTOP = sp;return ($15|0);
 } else {
  ___assert_fail((12032|0),(11926|0),25,(12006|0));
  // unreachable;
 }
 return (0)|0;
}
function _create_vbo($size,$data,$usage) {
 $size = $size|0;
 $data = $data|0;
 $usage = $usage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vbo_object = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vbo_object = sp;
 $0 = $size;
 $1 = $data;
 $2 = $usage;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((12639|0),(12061|0),7,(12081|0));
  // unreachable;
 }
 _glGenBuffers(1,($vbo_object|0));
 $5 = HEAP32[$vbo_object>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = HEAP32[$vbo_object>>2]|0;
  _glBindBuffer(34962,($7|0));
  $8 = $0;
  $9 = $1;
  $10 = $2;
  _glBufferData(34962,($8|0),($9|0),($10|0));
  _glBindBuffer(34962,0);
  $11 = HEAP32[$vbo_object>>2]|0;
  STACKTOP = sp;return ($11|0);
 } else {
  ___assert_fail((12092|0),(12061|0),10,(12081|0));
  // unreachable;
 }
 return (0)|0;
}
function _create_table($agg$result,$texture) {
 $agg$result = $agg$result|0;
 $texture = $texture|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $texture;
 $1 = $0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($agg$result)) + 4|0);
 $3 = (_create_vbo(96,8,35044)|0);
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function _draw_table($table,$texture_program,$m) {
 $table = $table|0;
 $texture_program = $texture_program|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $table;
 $1 = $texture_program;
 $2 = $m;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 _glUseProgram(($4|0));
 _glActiveTexture(33984);
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 _glBindTexture(3553,($6|0));
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 _glUniformMatrix4fv(($9|0),1,0,($10|0));
 $11 = $1;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 _glUniform1i(($13|0),0);
 $14 = $0;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 _glBindBuffer(34962,($16|0));
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 _glVertexAttribPointer(($19|0),2,5126,0,16,(0|0));
 $20 = $1;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 _glVertexAttribPointer(($22|0),2,5126,0,16,((8)|0));
 $23 = $1;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 _glEnableVertexAttribArray(($25|0));
 $26 = $1;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 _glEnableVertexAttribArray(($28|0));
 _glDrawArrays(6,0,6);
 _glBindBuffer(34962,0);
 STACKTOP = sp;return;
}
function _create_puck($agg$result,$radius,$height,$num_points,$color) {
 $agg$result = $agg$result|0;
 $radius = +$radius;
 $height = +$height;
 $num_points = $num_points|0;
 $color = $color|0;
 var $$alloca_mul = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $radius;
 $1 = $height;
 $2 = $num_points;
 $3 = $color;
 $5 = $2;
 $6 = (_size_of_circle_in_vertices($5)|0);
 $7 = $2;
 $8 = (_size_of_open_cylinder_in_vertices($7)|0);
 $9 = (($6) + ($8))|0;
 $10 = ($9*3)|0;
 $11 = (_llvm_stacksave()|0);
 $4 = $11;
 $$alloca_mul = $10<<2;
 $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $13 = $1;
 $14 = $13 / 2.0;
 $15 = $0;
 $16 = $2;
 $17 = (_gen_circle($12,0,0.0,$14,0.0,$15,$16)|0);
 $offset = $17;
 $18 = $offset;
 $19 = $1;
 $20 = $0;
 $21 = $2;
 (_gen_cylinder($12,$18,0.0,0.0,0.0,$19,$20,$21)|0);
 $22 = $3;
 $23 = +HEAPF32[$22>>2];
 HEAPF32[$agg$result>>2] = $23;
 $24 = ((($agg$result)) + 4|0);
 $25 = $3;
 $26 = ((($25)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 HEAPF32[$24>>2] = $27;
 $28 = ((($24)) + 4|0);
 $29 = $3;
 $30 = ((($29)) + 8|0);
 $31 = +HEAPF32[$30>>2];
 HEAPF32[$28>>2] = $31;
 $32 = ((($28)) + 4|0);
 $33 = $3;
 $34 = ((($33)) + 12|0);
 $35 = +HEAPF32[$34>>2];
 HEAPF32[$32>>2] = $35;
 $36 = ((($agg$result)) + 16|0);
 $37 = $10<<2;
 $38 = (_create_vbo($37,$12,35044)|0);
 HEAP32[$36>>2] = $38;
 $39 = ((($agg$result)) + 20|0);
 $40 = $2;
 HEAP32[$39>>2] = $40;
 $41 = $4;
 _llvm_stackrestore(($41|0));
 STACKTOP = sp;return;
}
function _size_of_circle_in_vertices($num_points) {
 $num_points = $num_points|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num_points;
 $1 = $0;
 $2 = (($1) + 1)|0;
 $3 = (1 + ($2))|0;
 STACKTOP = sp;return ($3|0);
}
function _size_of_open_cylinder_in_vertices($num_points) {
 $num_points = $num_points|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $num_points;
 $1 = $0;
 $2 = (($1) + 1)|0;
 $3 = $2<<1;
 STACKTOP = sp;return ($3|0);
}
function _gen_circle($out,$offset,$center_x,$center_y,$center_z,$radius,$num_points) {
 $out = $out|0;
 $offset = $offset|0;
 $center_x = +$center_x;
 $center_y = +$center_y;
 $center_z = +$center_z;
 $radius = +$radius;
 $num_points = $num_points|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0.0, $8 = 0, $9 = 0, $angle_in_radians = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $offset;
 $2 = $center_x;
 $3 = $center_y;
 $4 = $center_z;
 $5 = $radius;
 $6 = $num_points;
 $7 = $2;
 $8 = $1;
 $9 = (($8) + 1)|0;
 $1 = $9;
 $10 = $0;
 $11 = (($10) + ($8<<2)|0);
 HEAPF32[$11>>2] = $7;
 $12 = $3;
 $13 = $1;
 $14 = (($13) + 1)|0;
 $1 = $14;
 $15 = $0;
 $16 = (($15) + ($13<<2)|0);
 HEAPF32[$16>>2] = $12;
 $17 = $4;
 $18 = $1;
 $19 = (($18) + 1)|0;
 $1 = $19;
 $20 = $0;
 $21 = (($20) + ($18<<2)|0);
 HEAPF32[$21>>2] = $17;
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = $6;
  $24 = ($22|0)<=($23|0);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = (+($25|0));
  $27 = $6;
  $28 = (+($27|0));
  $29 = $26 / $28;
  $30 = $29 * 6.2831854820251465;
  $angle_in_radians = $30;
  $31 = $2;
  $32 = $31;
  $33 = $5;
  $34 = $33;
  $35 = $angle_in_radians;
  $36 = $35;
  $37 = (+Math_cos((+$36)));
  $38 = $34 * $37;
  $39 = $32 + $38;
  $40 = $39;
  $41 = $1;
  $42 = (($41) + 1)|0;
  $1 = $42;
  $43 = $0;
  $44 = (($43) + ($41<<2)|0);
  HEAPF32[$44>>2] = $40;
  $45 = $3;
  $46 = $1;
  $47 = (($46) + 1)|0;
  $1 = $47;
  $48 = $0;
  $49 = (($48) + ($46<<2)|0);
  HEAPF32[$49>>2] = $45;
  $50 = $4;
  $51 = $50;
  $52 = $5;
  $53 = $52;
  $54 = $angle_in_radians;
  $55 = $54;
  $56 = (+Math_sin((+$55)));
  $57 = $53 * $56;
  $58 = $51 + $57;
  $59 = $58;
  $60 = $1;
  $61 = (($60) + 1)|0;
  $1 = $61;
  $62 = $0;
  $63 = (($62) + ($60<<2)|0);
  HEAPF32[$63>>2] = $59;
  $64 = $i;
  $65 = (($64) + 1)|0;
  $i = $65;
 }
 $66 = $1;
 STACKTOP = sp;return ($66|0);
}
function _gen_cylinder($out,$offset,$center_x,$center_y,$center_z,$height,$radius,$num_points) {
 $out = $out|0;
 $offset = $offset|0;
 $center_x = +$center_x;
 $center_y = +$center_y;
 $center_z = +$center_z;
 $height = +$height;
 $radius = +$radius;
 $num_points = $num_points|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0.0, $9 = 0.0, $angle_in_radians = 0.0, $i = 0;
 var $x_position = 0.0, $y_end = 0.0, $y_start = 0.0, $z_position = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $offset;
 $2 = $center_x;
 $3 = $center_y;
 $4 = $center_z;
 $5 = $height;
 $6 = $radius;
 $7 = $num_points;
 $8 = $3;
 $9 = $5;
 $10 = $9 / 2.0;
 $11 = $8 - $10;
 $y_start = $11;
 $12 = $3;
 $13 = $5;
 $14 = $13 / 2.0;
 $15 = $12 + $14;
 $y_end = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $7;
  $18 = ($16|0)<=($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = (+($19|0));
  $21 = $7;
  $22 = (+($21|0));
  $23 = $20 / $22;
  $24 = $23 * 6.2831854820251465;
  $angle_in_radians = $24;
  $25 = $2;
  $26 = $25;
  $27 = $6;
  $28 = $27;
  $29 = $angle_in_radians;
  $30 = $29;
  $31 = (+Math_cos((+$30)));
  $32 = $28 * $31;
  $33 = $26 + $32;
  $34 = $33;
  $x_position = $34;
  $35 = $4;
  $36 = $35;
  $37 = $6;
  $38 = $37;
  $39 = $angle_in_radians;
  $40 = $39;
  $41 = (+Math_sin((+$40)));
  $42 = $38 * $41;
  $43 = $36 + $42;
  $44 = $43;
  $z_position = $44;
  $45 = $x_position;
  $46 = $1;
  $47 = (($46) + 1)|0;
  $1 = $47;
  $48 = $0;
  $49 = (($48) + ($46<<2)|0);
  HEAPF32[$49>>2] = $45;
  $50 = $y_start;
  $51 = $1;
  $52 = (($51) + 1)|0;
  $1 = $52;
  $53 = $0;
  $54 = (($53) + ($51<<2)|0);
  HEAPF32[$54>>2] = $50;
  $55 = $z_position;
  $56 = $1;
  $57 = (($56) + 1)|0;
  $1 = $57;
  $58 = $0;
  $59 = (($58) + ($56<<2)|0);
  HEAPF32[$59>>2] = $55;
  $60 = $x_position;
  $61 = $1;
  $62 = (($61) + 1)|0;
  $1 = $62;
  $63 = $0;
  $64 = (($63) + ($61<<2)|0);
  HEAPF32[$64>>2] = $60;
  $65 = $y_end;
  $66 = $1;
  $67 = (($66) + 1)|0;
  $1 = $67;
  $68 = $0;
  $69 = (($68) + ($66<<2)|0);
  HEAPF32[$69>>2] = $65;
  $70 = $z_position;
  $71 = $1;
  $72 = (($71) + 1)|0;
  $1 = $72;
  $73 = $0;
  $74 = (($73) + ($71<<2)|0);
  HEAPF32[$74>>2] = $70;
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 $77 = $1;
 STACKTOP = sp;return ($77|0);
}
function _draw_puck($puck,$color_program,$m) {
 $puck = $puck|0;
 $color_program = $color_program|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $circle_vertex_count = 0, $cylinder_vertex_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $puck;
 $1 = $color_program;
 $2 = $m;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 _glUseProgram(($4|0));
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 _glUniformMatrix4fv(($7|0),1,0,($8|0));
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 _glUniform4fv(($11|0),1,($12|0));
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _glBindBuffer(34962,($15|0));
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _glVertexAttribPointer(($18|0),3,5126,0,0,(0|0));
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 _glEnableVertexAttribArray(($21|0));
 $22 = $0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_size_of_circle_in_vertices($24)|0);
 $circle_vertex_count = $25;
 $26 = $0;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_size_of_open_cylinder_in_vertices($28)|0);
 $cylinder_vertex_count = $29;
 $30 = $circle_vertex_count;
 _glDrawArrays(6,0,($30|0));
 $31 = $circle_vertex_count;
 $32 = $cylinder_vertex_count;
 _glDrawArrays(5,($31|0),($32|0));
 _glBindBuffer(34962,0);
 STACKTOP = sp;return;
}
function _create_mallet($agg$result,$radius,$height,$num_points,$color) {
 $agg$result = $agg$result|0;
 $radius = +$radius;
 $height = +$height;
 $num_points = $num_points|0;
 $color = $color|0;
 var $$alloca_mul = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $base_height = 0.0, $handle_height = 0.0, $handle_radius = 0.0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $radius;
 $1 = $height;
 $2 = $num_points;
 $3 = $color;
 $5 = $2;
 $6 = (_size_of_circle_in_vertices($5)|0);
 $7 = $6<<1;
 $8 = $2;
 $9 = (_size_of_open_cylinder_in_vertices($8)|0);
 $10 = $9<<1;
 $11 = (($7) + ($10))|0;
 $12 = ($11*3)|0;
 $13 = (_llvm_stacksave()|0);
 $4 = $13;
 $$alloca_mul = $12<<2;
 $14 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $15 = $1;
 $16 = $15 * 0.25;
 $base_height = $16;
 $17 = $1;
 $18 = $17 * 0.75;
 $handle_height = $18;
 $19 = $0;
 $20 = $19 / 3.0;
 $handle_radius = $20;
 $21 = $base_height;
 $22 = -$21;
 $23 = $0;
 $24 = $2;
 $25 = (_gen_circle($14,0,0.0,$22,0.0,$23,$24)|0);
 $offset = $25;
 $26 = $offset;
 $27 = $1;
 $28 = $27 * 0.5;
 $29 = $handle_radius;
 $30 = $2;
 $31 = (_gen_circle($14,$26,0.0,$28,0.0,$29,$30)|0);
 $offset = $31;
 $32 = $offset;
 $33 = $base_height;
 $34 = -$33;
 $35 = $base_height;
 $36 = $35 / 2.0;
 $37 = $34 - $36;
 $38 = $base_height;
 $39 = $0;
 $40 = $2;
 $41 = (_gen_cylinder($14,$32,0.0,$37,0.0,$38,$39,$40)|0);
 $offset = $41;
 $42 = $offset;
 $43 = $1;
 $44 = $43 * 0.5;
 $45 = $handle_height;
 $46 = $45 / 2.0;
 $47 = $44 - $46;
 $48 = $handle_height;
 $49 = $handle_radius;
 $50 = $2;
 (_gen_cylinder($14,$42,0.0,$47,0.0,$48,$49,$50)|0);
 $51 = $3;
 $52 = +HEAPF32[$51>>2];
 HEAPF32[$agg$result>>2] = $52;
 $53 = ((($agg$result)) + 4|0);
 $54 = $3;
 $55 = ((($54)) + 4|0);
 $56 = +HEAPF32[$55>>2];
 HEAPF32[$53>>2] = $56;
 $57 = ((($53)) + 4|0);
 $58 = $3;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF32[$59>>2];
 HEAPF32[$57>>2] = $60;
 $61 = ((($57)) + 4|0);
 $62 = $3;
 $63 = ((($62)) + 12|0);
 $64 = +HEAPF32[$63>>2];
 HEAPF32[$61>>2] = $64;
 $65 = ((($agg$result)) + 16|0);
 $66 = $12<<2;
 $67 = (_create_vbo($66,$14,35044)|0);
 HEAP32[$65>>2] = $67;
 $68 = ((($agg$result)) + 20|0);
 $69 = $2;
 HEAP32[$68>>2] = $69;
 $70 = $4;
 _llvm_stackrestore(($70|0));
 STACKTOP = sp;return;
}
function _draw_mallet($mallet,$color_program,$m) {
 $mallet = $mallet|0;
 $color_program = $color_program|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $circle_vertex_count = 0, $cylinder_vertex_count = 0, $start_vertex = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $mallet;
 $1 = $color_program;
 $2 = $m;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 _glUseProgram(($4|0));
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 _glUniformMatrix4fv(($7|0),1,0,($8|0));
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 _glUniform4fv(($11|0),1,($12|0));
 $13 = $0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 _glBindBuffer(34962,($15|0));
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 _glVertexAttribPointer(($18|0),3,5126,0,0,(0|0));
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 _glEnableVertexAttribArray(($21|0));
 $22 = $0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_size_of_circle_in_vertices($24)|0);
 $circle_vertex_count = $25;
 $26 = $0;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_size_of_open_cylinder_in_vertices($28)|0);
 $cylinder_vertex_count = $29;
 $start_vertex = 0;
 $30 = $start_vertex;
 $31 = $circle_vertex_count;
 _glDrawArrays(6,($30|0),($31|0));
 $32 = $circle_vertex_count;
 $33 = $start_vertex;
 $34 = (($33) + ($32))|0;
 $start_vertex = $34;
 $35 = $start_vertex;
 $36 = $circle_vertex_count;
 _glDrawArrays(6,($35|0),($36|0));
 $37 = $circle_vertex_count;
 $38 = $start_vertex;
 $39 = (($38) + ($37))|0;
 $start_vertex = $39;
 $40 = $start_vertex;
 $41 = $cylinder_vertex_count;
 _glDrawArrays(5,($40|0),($41|0));
 $42 = $cylinder_vertex_count;
 $43 = $start_vertex;
 $44 = (($43) + ($42))|0;
 $start_vertex = $44;
 $45 = $start_vertex;
 $46 = $cylinder_vertex_count;
 _glDrawArrays(5,($45|0),($46|0));
 _glBindBuffer(34962,0);
 STACKTOP = sp;return;
}
function _on_touch_press($normalized_x,$normalized_y) {
 $normalized_x = +$normalized_x;
 $normalized_y = +$normalized_y;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $mallet_bounding_sphere = 0, $mallet_bounding_sphere$byval_copy = 0, $ray = 0, $ray$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ray$byval_copy = sp + 64|0;
 $mallet_bounding_sphere$byval_copy = sp + 48|0;
 $ray = sp + 16|0;
 $mallet_bounding_sphere = sp;
 $0 = $normalized_x;
 $1 = $normalized_y;
 $2 = $0;
 $3 = $1;
 _convert_normalized_2D_point_to_ray($ray,$2,$3);
 $4 = +HEAPF32[5566];
 HEAPF32[$mallet_bounding_sphere>>2] = $4;
 $5 = ((($mallet_bounding_sphere)) + 4|0);
 $6 = +HEAPF32[(22268)>>2];
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = +HEAPF32[(22272)>>2];
 HEAPF32[$7>>2] = $8;
 $9 = ((($mallet_bounding_sphere)) + 12|0);
 HEAPF32[$9>>2] = 0.075000002980232239;
 ;HEAP32[$mallet_bounding_sphere$byval_copy>>2]=HEAP32[$mallet_bounding_sphere>>2]|0;HEAP32[$mallet_bounding_sphere$byval_copy+4>>2]=HEAP32[$mallet_bounding_sphere+4>>2]|0;HEAP32[$mallet_bounding_sphere$byval_copy+8>>2]=HEAP32[$mallet_bounding_sphere+8>>2]|0;HEAP32[$mallet_bounding_sphere$byval_copy+12>>2]=HEAP32[$mallet_bounding_sphere+12>>2]|0;
 ;HEAP32[$ray$byval_copy>>2]=HEAP32[$ray>>2]|0;HEAP32[$ray$byval_copy+4>>2]=HEAP32[$ray+4>>2]|0;HEAP32[$ray$byval_copy+8>>2]=HEAP32[$ray+8>>2]|0;HEAP32[$ray$byval_copy+12>>2]=HEAP32[$ray+12>>2]|0;HEAP32[$ray$byval_copy+16>>2]=HEAP32[$ray+16>>2]|0;HEAP32[$ray$byval_copy+20>>2]=HEAP32[$ray+20>>2]|0;
 $10 = (_sphere_intersects_ray($mallet_bounding_sphere$byval_copy,$ray$byval_copy)|0);
 HEAP32[5569] = $10;
 STACKTOP = sp;return;
}
function _convert_normalized_2D_point_to_ray($agg$result,$normalized_x,$normalized_y) {
 $agg$result = $agg$result|0;
 $normalized_x = +$normalized_x;
 $normalized_y = +$normalized_y;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $far_point_ndc = 0, $far_point_ray = 0, $far_point_world = 0, $near_point_ndc = 0, $near_point_ray = 0, $near_point_world = 0, $vector_between = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $near_point_ndc = sp + 88|0;
 $far_point_ndc = sp + 72|0;
 $near_point_world = sp + 56|0;
 $far_point_world = sp + 40|0;
 $near_point_ray = sp + 24|0;
 $far_point_ray = sp + 12|0;
 $vector_between = sp;
 $0 = $normalized_x;
 $1 = $normalized_y;
 $2 = $0;
 HEAPF32[$near_point_ndc>>2] = $2;
 $3 = ((($near_point_ndc)) + 4|0);
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 HEAPF32[$5>>2] = -1.0;
 $6 = ((($5)) + 4|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = $0;
 HEAPF32[$far_point_ndc>>2] = $7;
 $8 = ((($far_point_ndc)) + 4|0);
 $9 = $1;
 HEAPF32[$8>>2] = $9;
 $10 = ((($8)) + 4|0);
 HEAPF32[$10>>2] = 1.0;
 $11 = ((($10)) + 4|0);
 HEAPF32[$11>>2] = 1.0;
 _mat4x4_mul_vec4($near_point_world,22200,$near_point_ndc);
 _mat4x4_mul_vec4($far_point_world,22200,$far_point_ndc);
 _divide_by_w($near_point_world);
 _divide_by_w($far_point_world);
 $12 = +HEAPF32[$near_point_world>>2];
 HEAPF32[$near_point_ray>>2] = $12;
 $13 = ((($near_point_ray)) + 4|0);
 $14 = ((($near_point_world)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 HEAPF32[$13>>2] = $15;
 $16 = ((($13)) + 4|0);
 $17 = ((($near_point_world)) + 8|0);
 $18 = +HEAPF32[$17>>2];
 HEAPF32[$16>>2] = $18;
 $19 = +HEAPF32[$far_point_world>>2];
 HEAPF32[$far_point_ray>>2] = $19;
 $20 = ((($far_point_ray)) + 4|0);
 $21 = ((($far_point_world)) + 4|0);
 $22 = +HEAPF32[$21>>2];
 HEAPF32[$20>>2] = $22;
 $23 = ((($20)) + 4|0);
 $24 = ((($far_point_world)) + 8|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[$23>>2] = $25;
 _vec3_sub($vector_between,$far_point_ray,$near_point_ray);
 $26 = +HEAPF32[$near_point_ray>>2];
 HEAPF32[$agg$result>>2] = $26;
 $27 = ((($agg$result)) + 4|0);
 $28 = ((($near_point_ray)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 HEAPF32[$27>>2] = $29;
 $30 = ((($27)) + 4|0);
 $31 = ((($near_point_ray)) + 8|0);
 $32 = +HEAPF32[$31>>2];
 HEAPF32[$30>>2] = $32;
 $33 = ((($agg$result)) + 12|0);
 $34 = +HEAPF32[$vector_between>>2];
 HEAPF32[$33>>2] = $34;
 $35 = ((($33)) + 4|0);
 $36 = ((($vector_between)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 HEAPF32[$35>>2] = $37;
 $38 = ((($35)) + 4|0);
 $39 = ((($vector_between)) + 8|0);
 $40 = +HEAPF32[$39>>2];
 HEAPF32[$38>>2] = $40;
 STACKTOP = sp;return;
}
function _mat4x4_mul_vec4($r,$M,$v) {
 $r = $r|0;
 $M = $M|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $M;
 $2 = $v;
 $j = 0;
 while(1) {
  $3 = $j;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $j;
  $6 = $0;
  $7 = (($6) + ($5<<2)|0);
  HEAPF32[$7>>2] = 0.0;
  $i = 0;
  while(1) {
   $8 = $i;
   $9 = ($8|0)<(4);
   $10 = $j;
   if (!($9)) {
    break;
   }
   $11 = $i;
   $12 = $1;
   $13 = (($12) + ($11<<4)|0);
   $14 = (($13) + ($10<<2)|0);
   $15 = +HEAPF32[$14>>2];
   $16 = $i;
   $17 = $2;
   $18 = (($17) + ($16<<2)|0);
   $19 = +HEAPF32[$18>>2];
   $20 = $15 * $19;
   $21 = $j;
   $22 = $0;
   $23 = (($22) + ($21<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $24 + $20;
   HEAPF32[$23>>2] = $25;
   $26 = $i;
   $27 = (($26) + 1)|0;
   $i = $27;
  }
  $28 = (($10) + 1)|0;
  $j = $28;
 }
 STACKTOP = sp;return;
}
function _divide_by_w($vector) {
 $vector = $vector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vector;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = +HEAPF32[$4>>2];
 $6 = $5 / $3;
 HEAPF32[$4>>2] = $6;
 $7 = $0;
 $8 = ((($7)) + 12|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $12 / $9;
 HEAPF32[$11>>2] = $13;
 $14 = $0;
 $15 = ((($14)) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $0;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $19 / $16;
 HEAPF32[$18>>2] = $20;
 STACKTOP = sp;return;
}
function _vec3_sub($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $a;
 $2 = $b;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $i;
  $10 = $2;
  $11 = (($10) + ($9<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $8 - $12;
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14<<2)|0);
  HEAPF32[$16>>2] = $13;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 STACKTOP = sp;return;
}
function _sphere_intersects_ray($sphere,$ray) {
 $sphere = $sphere|0;
 $ray = $ray|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $ray$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ray$byval_copy = sp + 8|0;
 ;HEAP32[$ray$byval_copy>>2]=HEAP32[$ray>>2]|0;HEAP32[$ray$byval_copy+4>>2]=HEAP32[$ray+4>>2]|0;HEAP32[$ray$byval_copy+8>>2]=HEAP32[$ray+8>>2]|0;HEAP32[$ray$byval_copy+12>>2]=HEAP32[$ray+12>>2]|0;HEAP32[$ray$byval_copy+16>>2]=HEAP32[$ray+16>>2]|0;HEAP32[$ray$byval_copy+20>>2]=HEAP32[$ray+20>>2]|0;
 $1 = (+_distance_between($sphere,$ray$byval_copy));
 $2 = ((($sphere)) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 < $3;
 if ($4) {
  $0 = 1;
  $5 = $0;
  STACKTOP = sp;return ($5|0);
 } else {
  $0 = 0;
  $5 = $0;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function _distance_between($point,$ray) {
 $point = $point|0;
 $ray = $ray|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $area_of_triangle_times_two = 0.0, $cross_product = 0, $distance_from_point_to_ray = 0.0, $length_of_base = 0.0, $p1_to_point = 0, $p2_to_point = 0, $translated_ray_point = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p1_to_point = sp + 48|0;
 $p2_to_point = sp + 36|0;
 $translated_ray_point = sp + 24|0;
 $cross_product = sp + 12|0;
 $0 = $point;
 $1 = $0;
 _vec3_sub($p1_to_point,$1,$ray);
 $2 = ((($ray)) + 12|0);
 _vec3_add($translated_ray_point,$ray,$2);
 $3 = $0;
 _vec3_sub($p2_to_point,$3,$translated_ray_point);
 _vec3_mul_cross($cross_product,$p1_to_point,$p2_to_point);
 $4 = (+_vec3_len($cross_product));
 $area_of_triangle_times_two = $4;
 $5 = ((($ray)) + 12|0);
 $6 = (+_vec3_len($5));
 $length_of_base = $6;
 $7 = $area_of_triangle_times_two;
 $8 = $length_of_base;
 $9 = $7 / $8;
 $distance_from_point_to_ray = $9;
 $10 = $distance_from_point_to_ray;
 STACKTOP = sp;return (+$10);
}
function _vec3_add($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $a;
 $2 = $b;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $i;
  $10 = $2;
  $11 = (($10) + ($9<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $8 + $12;
  $14 = $i;
  $15 = $0;
  $16 = (($15) + ($14<<2)|0);
  HEAPF32[$16>>2] = $13;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 STACKTOP = sp;return;
}
function _vec3_mul_cross($r,$a,$b) {
 $r = $r|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $5 * $8;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $12 * $15;
 $17 = $9 - $16;
 $18 = $0;
 HEAPF32[$18>>2] = $17;
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $2;
 $23 = +HEAPF32[$22>>2];
 $24 = $21 * $23;
 $25 = $1;
 $26 = +HEAPF32[$25>>2];
 $27 = $2;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $26 * $29;
 $31 = $24 - $30;
 $32 = $0;
 $33 = ((($32)) + 4|0);
 HEAPF32[$33>>2] = $31;
 $34 = $1;
 $35 = +HEAPF32[$34>>2];
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $35 * $38;
 $40 = $1;
 $41 = ((($40)) + 4|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $2;
 $44 = +HEAPF32[$43>>2];
 $45 = $42 * $44;
 $46 = $39 - $45;
 $47 = $0;
 $48 = ((($47)) + 8|0);
 HEAPF32[$48>>2] = $46;
 STACKTOP = sp;return;
}
function _vec3_len($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $0;
 $3 = (+_vec3_mul_inner($1,$2));
 $4 = (+Math_sqrt((+$3)));
 STACKTOP = sp;return (+$4);
}
function _vec3_mul_inner($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $i = 0, $p = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $p = 0.0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(3);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = +HEAPF32[$6>>2];
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $7 * $11;
  $13 = $p;
  $14 = $13 + $12;
  $p = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $p;
 STACKTOP = sp;return (+$17);
}
function _on_touch_drag($normalized_x,$normalized_y) {
 $normalized_x = +$normalized_x;
 $normalized_y = +$normalized_y;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $distance = 0.0, $mallet_to_puck = 0, $plane = 0, $plane$byval_copy = 0, $ray = 0, $ray$byval_copy = 0;
 var $touched_point = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $plane$byval_copy = sp + 112|0;
 $ray$byval_copy = sp + 88|0;
 $ray = sp + 56|0;
 $plane = sp + 32|0;
 $touched_point = sp + 16|0;
 $mallet_to_puck = sp + 4|0;
 $0 = $normalized_x;
 $1 = $normalized_y;
 $2 = HEAP32[5569]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $1;
 _convert_normalized_2D_point_to_ray($ray,$4,$5);
 ;HEAP32[$plane>>2]=HEAP32[104>>2]|0;HEAP32[$plane+4>>2]=HEAP32[104+4>>2]|0;HEAP32[$plane+8>>2]=HEAP32[104+8>>2]|0;HEAP32[$plane+12>>2]=HEAP32[104+12>>2]|0;HEAP32[$plane+16>>2]=HEAP32[104+16>>2]|0;HEAP32[$plane+20>>2]=HEAP32[104+20>>2]|0;
 ;HEAP32[$ray$byval_copy>>2]=HEAP32[$ray>>2]|0;HEAP32[$ray$byval_copy+4>>2]=HEAP32[$ray+4>>2]|0;HEAP32[$ray$byval_copy+8>>2]=HEAP32[$ray+8>>2]|0;HEAP32[$ray$byval_copy+12>>2]=HEAP32[$ray+12>>2]|0;HEAP32[$ray$byval_copy+16>>2]=HEAP32[$ray+16>>2]|0;HEAP32[$ray$byval_copy+20>>2]=HEAP32[$ray+20>>2]|0;
 ;HEAP32[$plane$byval_copy>>2]=HEAP32[$plane>>2]|0;HEAP32[$plane$byval_copy+4>>2]=HEAP32[$plane+4>>2]|0;HEAP32[$plane$byval_copy+8>>2]=HEAP32[$plane+8>>2]|0;HEAP32[$plane$byval_copy+12>>2]=HEAP32[$plane+12>>2]|0;HEAP32[$plane$byval_copy+16>>2]=HEAP32[$plane+16>>2]|0;HEAP32[$plane$byval_copy+20>>2]=HEAP32[$plane+20>>2]|0;
 _ray_intersection_point($touched_point,$ray$byval_copy,$plane$byval_copy);
 ;HEAP32[22280>>2]=HEAP32[22264>>2]|0;HEAP32[22280+4>>2]=HEAP32[22264+4>>2]|0;HEAP32[22280+8>>2]=HEAP32[22264+8>>2]|0;
 $6 = +HEAPF32[$touched_point>>2];
 $7 = (+_clamp($6,-0.42000001668930054,0.42000001668930054));
 HEAPF32[5566] = $7;
 HEAPF32[(22268)>>2] = 0.075000002980232239;
 $8 = ((($touched_point)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (+_clamp($9,0.079999998211860657,0.72000002861022949));
 HEAPF32[(22272)>>2] = $10;
 _vec3_sub($mallet_to_puck,22292,22264);
 $11 = (+_vec3_len($mallet_to_puck));
 $distance = $11;
 $12 = $distance;
 $13 = $12 < 0.14000000059604645;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 _vec3_sub(22304,22264,22280);
 STACKTOP = sp;return;
}
function _ray_intersection_point($result,$ray,$plane) {
 $result = $result|0;
 $ray = $ray|0;
 $plane = $plane|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $intersection_point = 0, $ray_to_plane_vector = 0, $scale_factor = 0.0, $scaled_ray_vector = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ray_to_plane_vector = sp + 28|0;
 $intersection_point = sp + 12|0;
 $scaled_ray_vector = sp;
 $0 = $result;
 _vec3_sub($ray_to_plane_vector,$plane,$ray);
 $1 = ((($plane)) + 12|0);
 $2 = (+_vec3_mul_inner($ray_to_plane_vector,$1));
 $3 = ((($ray)) + 12|0);
 $4 = ((($plane)) + 12|0);
 $5 = (+_vec3_mul_inner($3,$4));
 $6 = $2 / $5;
 $scale_factor = $6;
 $7 = ((($ray)) + 12|0);
 $8 = $scale_factor;
 _vec3_scale($scaled_ray_vector,$7,$8);
 _vec3_add($intersection_point,$ray,$scaled_ray_vector);
 $9 = $0;
 ;HEAP32[$9>>2]=HEAP32[$intersection_point>>2]|0;HEAP32[$9+4>>2]=HEAP32[$intersection_point+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$intersection_point+8>>2]|0;
 STACKTOP = sp;return;
}
function _vec3_scale($r,$v,$s) {
 $r = $r|0;
 $v = $v|0;
 $s = +$s;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $v;
 $2 = $s;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(3);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $2;
  $10 = $8 * $9;
  $11 = $i;
  $12 = $0;
  $13 = (($12) + ($11<<2)|0);
  HEAPF32[$13>>2] = $10;
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 STACKTOP = sp;return;
}
function _clamp($value,$min,$max) {
 $value = +$value;
 $min = +$min;
 $max = +$max;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $min;
 $2 = $max;
 $3 = $2;
 $4 = $3;
 $5 = $0;
 $6 = $5;
 $7 = $1;
 $8 = $7;
 $9 = (+_fmax($6,$8));
 $10 = (+_fmin($4,$9));
 $11 = $10;
 STACKTOP = sp;return (+$11);
}
function _on_surface_created() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $blue = 0, $puck_color = 0, $red = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 160|0;
 $puck_color = sp + 144|0;
 $red = sp + 128|0;
 $blue = sp + 112|0;
 $1 = sp + 88|0;
 $2 = sp + 64|0;
 $3 = sp + 40|0;
 $4 = sp + 16|0;
 $5 = sp;
 _glClearColor(0.0,0.0,0.0,0.0);
 _glEnable(2929);
 $6 = (_load_png_asset_into_texture(12108)|0);
 _create_table($0,$6);
 ;HEAP32[22316>>2]=HEAP32[$0>>2]|0;HEAP32[22316+4>>2]=HEAP32[$0+4>>2]|0;
 ;HEAP32[$puck_color>>2]=HEAP32[128>>2]|0;HEAP32[$puck_color+4>>2]=HEAP32[128+4>>2]|0;HEAP32[$puck_color+8>>2]=HEAP32[128+8>>2]|0;HEAP32[$puck_color+12>>2]=HEAP32[128+12>>2]|0;
 ;HEAP32[$red>>2]=HEAP32[144>>2]|0;HEAP32[$red+4>>2]=HEAP32[144+4>>2]|0;HEAP32[$red+8>>2]=HEAP32[144+8>>2]|0;HEAP32[$red+12>>2]=HEAP32[144+12>>2]|0;
 ;HEAP32[$blue>>2]=HEAP32[160>>2]|0;HEAP32[$blue+4>>2]=HEAP32[160+4>>2]|0;HEAP32[$blue+8>>2]=HEAP32[160+8>>2]|0;HEAP32[$blue+12>>2]=HEAP32[160+12>>2]|0;
 _create_puck($1,0.059999998658895493,0.019999999552965164,32,$puck_color);
 ;HEAP32[22324>>2]=HEAP32[$1>>2]|0;HEAP32[22324+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[22324+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[22324+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[22324+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[22324+20>>2]=HEAP32[$1+20>>2]|0;
 _create_mallet($2,0.079999998211860657,0.15000000596046448,32,$red);
 ;HEAP32[22348>>2]=HEAP32[$2>>2]|0;HEAP32[22348+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[22348+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[22348+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[22348+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[22348+20>>2]=HEAP32[$2+20>>2]|0;
 _create_mallet($3,0.079999998211860657,0.15000000596046448,32,$blue);
 ;HEAP32[22372>>2]=HEAP32[$3>>2]|0;HEAP32[22372+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[22372+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[22372+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[22372+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[22372+20>>2]=HEAP32[$3+20>>2]|0;
 HEAPF32[5566] = 0.0;
 HEAPF32[(22268)>>2] = 0.075000002980232239;
 HEAPF32[(22272)>>2] = 0.40000000596046448;
 HEAPF32[5573] = 0.0;
 HEAPF32[(22296)>>2] = 0.0099999997764825821;
 HEAPF32[(22300)>>2] = 0.0;
 HEAPF32[5576] = 0.0;
 HEAPF32[(22308)>>2] = 0.0;
 HEAPF32[(22312)>>2] = 0.0;
 $7 = (_build_program_from_assets(12140,12167)|0);
 _get_texture_program($4,$7);
 ;HEAP32[22396>>2]=HEAP32[$4>>2]|0;HEAP32[22396+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[22396+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[22396+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[22396+16>>2]=HEAP32[$4+16>>2]|0;
 $8 = (_build_program_from_assets(12194,12219)|0);
 _get_color_program($5,$8);
 ;HEAP32[22416>>2]=HEAP32[$5>>2]|0;HEAP32[22416+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[22416+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[22416+12>>2]=HEAP32[$5+12>>2]|0;
 STACKTOP = sp;return;
}
function _on_surface_changed($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $0 = $width;
 $1 = $height;
 $5 = $0;
 $6 = $1;
 _glViewport(0,0,($5|0),($6|0));
 $7 = (+_deg_to_radf(45.0));
 $8 = $0;
 $9 = (+($8|0));
 $10 = $1;
 $11 = (+($10|0));
 $12 = $9 / $11;
 _mat4x4_perspective(22432,$7,$12,1.0,10.0);
 HEAPF32[$2>>2] = 0.0;
 $13 = ((($2)) + 4|0);
 HEAPF32[$13>>2] = 1.2000000476837158;
 $14 = ((($13)) + 4|0);
 HEAPF32[$14>>2] = 2.2000000476837158;
 HEAPF32[$3>>2] = 0.0;
 $15 = ((($3)) + 4|0);
 HEAPF32[$15>>2] = 0.0;
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = 0.0;
 HEAPF32[$4>>2] = 0.0;
 $17 = ((($4)) + 4|0);
 HEAPF32[$17>>2] = 1.0;
 $18 = ((($17)) + 4|0);
 HEAPF32[$18>>2] = 0.0;
 _mat4x4_look_at(22496,$2,$3,$4);
 STACKTOP = sp;return;
}
function _deg_to_radf($deg) {
 $deg = +$deg;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $deg;
 $1 = $0;
 $2 = $1 * 3.1415927410125732;
 $3 = $2 / 180.0;
 STACKTOP = sp;return (+$3);
}
function _mat4x4_perspective($m,$y_fov,$aspect,$n,$f) {
 $m = $m|0;
 $y_fov = +$y_fov;
 $aspect = +$aspect;
 $n = +$n;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $8 = 0.0, $9 = 0.0, $a = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $y_fov;
 $2 = $aspect;
 $3 = $n;
 $4 = $f;
 $5 = $1;
 $6 = $5 / 2.0;
 $7 = $6;
 $8 = (+Math_tan((+$7)));
 $9 = 1.0 / $8;
 $10 = $9;
 $a = $10;
 $11 = $a;
 $12 = $2;
 $13 = $11 / $12;
 $14 = $0;
 HEAPF32[$14>>2] = $13;
 $15 = $0;
 $16 = ((($15)) + 4|0);
 HEAPF32[$16>>2] = 0.0;
 $17 = $0;
 $18 = ((($17)) + 8|0);
 HEAPF32[$18>>2] = 0.0;
 $19 = $0;
 $20 = ((($19)) + 12|0);
 HEAPF32[$20>>2] = 0.0;
 $21 = $0;
 $22 = ((($21)) + 16|0);
 HEAPF32[$22>>2] = 0.0;
 $23 = $a;
 $24 = $0;
 $25 = ((($24)) + 16|0);
 $26 = ((($25)) + 4|0);
 HEAPF32[$26>>2] = $23;
 $27 = $0;
 $28 = ((($27)) + 16|0);
 $29 = ((($28)) + 8|0);
 HEAPF32[$29>>2] = 0.0;
 $30 = $0;
 $31 = ((($30)) + 16|0);
 $32 = ((($31)) + 12|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = $0;
 $34 = ((($33)) + 32|0);
 HEAPF32[$34>>2] = 0.0;
 $35 = $0;
 $36 = ((($35)) + 32|0);
 $37 = ((($36)) + 4|0);
 HEAPF32[$37>>2] = 0.0;
 $38 = $4;
 $39 = $3;
 $40 = $38 + $39;
 $41 = $4;
 $42 = $3;
 $43 = $41 - $42;
 $44 = $40 / $43;
 $45 = -$44;
 $46 = $0;
 $47 = ((($46)) + 32|0);
 $48 = ((($47)) + 8|0);
 HEAPF32[$48>>2] = $45;
 $49 = $0;
 $50 = ((($49)) + 32|0);
 $51 = ((($50)) + 12|0);
 HEAPF32[$51>>2] = -1.0;
 $52 = $0;
 $53 = ((($52)) + 48|0);
 HEAPF32[$53>>2] = 0.0;
 $54 = $0;
 $55 = ((($54)) + 48|0);
 $56 = ((($55)) + 4|0);
 HEAPF32[$56>>2] = 0.0;
 $57 = $4;
 $58 = 2.0 * $57;
 $59 = $3;
 $60 = $58 * $59;
 $61 = $4;
 $62 = $3;
 $63 = $61 - $62;
 $64 = $60 / $63;
 $65 = -$64;
 $66 = $0;
 $67 = ((($66)) + 48|0);
 $68 = ((($67)) + 8|0);
 HEAPF32[$68>>2] = $65;
 $69 = $0;
 $70 = ((($69)) + 48|0);
 $71 = ((($70)) + 12|0);
 HEAPF32[$71>>2] = 0.0;
 STACKTOP = sp;return;
}
function _mat4x4_look_at($m,$eye,$center,$up) {
 $m = $m|0;
 $eye = $eye|0;
 $center = $center|0;
 $up = $up|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $8 = 0, $9 = 0.0, $f = 0, $s = 0, $t = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp + 24|0;
 $s = sp + 12|0;
 $t = sp;
 $0 = $m;
 $1 = $eye;
 $2 = $center;
 $3 = $up;
 $4 = $2;
 $5 = $1;
 _vec3_sub($f,$4,$5);
 _vec3_norm($f,$f);
 $6 = $3;
 _vec3_mul_cross($s,$f,$6);
 _vec3_norm($s,$s);
 _vec3_mul_cross($t,$s,$f);
 $7 = +HEAPF32[$s>>2];
 $8 = $0;
 HEAPF32[$8>>2] = $7;
 $9 = +HEAPF32[$t>>2];
 $10 = $0;
 $11 = ((($10)) + 4|0);
 HEAPF32[$11>>2] = $9;
 $12 = +HEAPF32[$f>>2];
 $13 = -$12;
 $14 = $0;
 $15 = ((($14)) + 8|0);
 HEAPF32[$15>>2] = $13;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 HEAPF32[$17>>2] = 0.0;
 $18 = ((($s)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $0;
 $21 = ((($20)) + 16|0);
 HEAPF32[$21>>2] = $19;
 $22 = ((($t)) + 4|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $0;
 $25 = ((($24)) + 16|0);
 $26 = ((($25)) + 4|0);
 HEAPF32[$26>>2] = $23;
 $27 = ((($f)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 $29 = -$28;
 $30 = $0;
 $31 = ((($30)) + 16|0);
 $32 = ((($31)) + 8|0);
 HEAPF32[$32>>2] = $29;
 $33 = $0;
 $34 = ((($33)) + 16|0);
 $35 = ((($34)) + 12|0);
 HEAPF32[$35>>2] = 0.0;
 $36 = ((($s)) + 8|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $0;
 $39 = ((($38)) + 32|0);
 HEAPF32[$39>>2] = $37;
 $40 = ((($t)) + 8|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $0;
 $43 = ((($42)) + 32|0);
 $44 = ((($43)) + 4|0);
 HEAPF32[$44>>2] = $41;
 $45 = ((($f)) + 8|0);
 $46 = +HEAPF32[$45>>2];
 $47 = -$46;
 $48 = $0;
 $49 = ((($48)) + 32|0);
 $50 = ((($49)) + 8|0);
 HEAPF32[$50>>2] = $47;
 $51 = $0;
 $52 = ((($51)) + 32|0);
 $53 = ((($52)) + 12|0);
 HEAPF32[$53>>2] = 0.0;
 $54 = $0;
 $55 = ((($54)) + 48|0);
 HEAPF32[$55>>2] = 0.0;
 $56 = $0;
 $57 = ((($56)) + 48|0);
 $58 = ((($57)) + 4|0);
 HEAPF32[$58>>2] = 0.0;
 $59 = $0;
 $60 = ((($59)) + 48|0);
 $61 = ((($60)) + 8|0);
 HEAPF32[$61>>2] = 0.0;
 $62 = $0;
 $63 = ((($62)) + 48|0);
 $64 = ((($63)) + 12|0);
 HEAPF32[$64>>2] = 1.0;
 $65 = $0;
 $66 = $1;
 $67 = +HEAPF32[$66>>2];
 $68 = -$67;
 $69 = $1;
 $70 = ((($69)) + 4|0);
 $71 = +HEAPF32[$70>>2];
 $72 = -$71;
 $73 = $1;
 $74 = ((($73)) + 8|0);
 $75 = +HEAPF32[$74>>2];
 $76 = -$75;
 _mat4x4_translate_in_place($65,$68,$72,$76);
 STACKTOP = sp;return;
}
function _vec3_norm($r,$v) {
 $r = $r|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $k = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $v;
 $2 = $1;
 $3 = (+_vec3_len($2));
 $4 = $3;
 $5 = 1.0 / $4;
 $6 = $5;
 $k = $6;
 $7 = $0;
 $8 = $1;
 $9 = $k;
 _vec3_scale($7,$8,$9);
 STACKTOP = sp;return;
}
function _mat4x4_translate_in_place($M,$x,$y,$z) {
 $M = $M|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0.0, $9 = 0, $i = 0, $r = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp + 24|0;
 $r = sp + 8|0;
 $0 = $M;
 $1 = $x;
 $2 = $y;
 $3 = $z;
 $4 = $1;
 HEAPF32[$t>>2] = $4;
 $5 = ((($t)) + 4|0);
 $6 = $2;
 HEAPF32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $3;
 HEAPF32[$7>>2] = $8;
 $9 = ((($7)) + 4|0);
 HEAPF32[$9>>2] = 0.0;
 $i = 0;
 while(1) {
  $10 = $i;
  $11 = ($10|0)<(4);
  if (!($11)) {
   break;
  }
  $12 = $0;
  $13 = $i;
  _mat4x4_row($r,$12,$13);
  $14 = (+_vec4_mul_inner($r,$t));
  $15 = $i;
  $16 = $0;
  $17 = ((($16)) + 48|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 + $14;
  HEAPF32[$18>>2] = $20;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 STACKTOP = sp;return;
}
function _mat4x4_row($r,$M,$i) {
 $r = $r|0;
 $M = $M|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $M;
 $2 = $i;
 $k = 0;
 while(1) {
  $3 = $k;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $2;
  $6 = $k;
  $7 = $1;
  $8 = (($7) + ($6<<4)|0);
  $9 = (($8) + ($5<<2)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $k;
  $12 = $0;
  $13 = (($12) + ($11<<2)|0);
  HEAPF32[$13>>2] = $10;
  $14 = $k;
  $15 = (($14) + 1)|0;
  $k = $15;
 }
 STACKTOP = sp;return;
}
function _vec4_mul_inner($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $i = 0, $p = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $p = 0.0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = +HEAPF32[$6>>2];
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $7 * $11;
  $13 = $p;
  $14 = $13 + $12;
  $p = $14;
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
 }
 $17 = $p;
 STACKTOP = sp;return (+$17);
}
function _on_draw_frame() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0;
 var $8 = 0.0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 _vec3_add(22292,22292,22304);
 $0 = +HEAPF32[5573];
 $1 = $0 < -0.43999999761581421;
 $2 = +HEAPF32[5573];
 $3 = $2 > 0.43999999761581421;
 $or$cond = $1 | $3;
 if ($or$cond) {
  $4 = +HEAPF32[5576];
  $5 = -$4;
  HEAPF32[5576] = $5;
  _vec3_scale(22304,22304,0.89999997615814208);
 }
 $6 = +HEAPF32[(22300)>>2];
 $7 = $6 < -0.74000000953674316;
 $8 = +HEAPF32[(22300)>>2];
 $9 = $8 > 0.74000000953674316;
 $or$cond3 = $7 | $9;
 if ($or$cond3) {
  $10 = +HEAPF32[(22312)>>2];
  $11 = -$10;
  HEAPF32[(22312)>>2] = $11;
  _vec3_scale(22304,22304,0.89999997615814208);
 }
 $12 = +HEAPF32[5573];
 $13 = (+_clamp($12,-0.43999999761581421,0.43999999761581421));
 HEAPF32[5573] = $13;
 $14 = +HEAPF32[(22300)>>2];
 $15 = (+_clamp($14,-0.74000000953674316,0.74000000953674316));
 HEAPF32[(22300)>>2] = $15;
 _vec3_scale(22304,22304,0.99000000953674316);
 _mat4x4_mul(22560,22432,22496);
 _mat4x4_invert(22200,22560);
 _position_table_in_scene();
 _draw_table(22316,22396,22688);
 _position_object_in_scene(0.0,0.075000002980232239,-0.40000000596046448);
 _draw_mallet(22348,22416,22688);
 $16 = +HEAPF32[5566];
 $17 = +HEAPF32[(22268)>>2];
 $18 = +HEAPF32[(22272)>>2];
 _position_object_in_scene($16,$17,$18);
 _draw_mallet(22372,22416,22688);
 $19 = +HEAPF32[5573];
 $20 = +HEAPF32[(22296)>>2];
 $21 = +HEAPF32[(22300)>>2];
 _position_object_in_scene($19,$20,$21);
 _draw_puck(22324,22416,22688);
 return;
}
function _mat4x4_mul($M,$a,$b) {
 $M = $M|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $k = 0;
 var $r = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp + 16|0;
 $0 = $M;
 $1 = $a;
 $2 = $b;
 $c = 0;
 while(1) {
  $3 = $c;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $r = 0;
  while(1) {
   $5 = $r;
   $6 = ($5|0)<(4);
   if (!($6)) {
    break;
   }
   $7 = $r;
   $8 = $c;
   $9 = (($temp) + ($8<<4)|0);
   $10 = (($9) + ($7<<2)|0);
   HEAPF32[$10>>2] = 0.0;
   $k = 0;
   while(1) {
    $11 = $k;
    $12 = ($11|0)<(4);
    $13 = $r;
    if (!($12)) {
     break;
    }
    $14 = $k;
    $15 = $1;
    $16 = (($15) + ($14<<4)|0);
    $17 = (($16) + ($13<<2)|0);
    $18 = +HEAPF32[$17>>2];
    $19 = $k;
    $20 = $c;
    $21 = $2;
    $22 = (($21) + ($20<<4)|0);
    $23 = (($22) + ($19<<2)|0);
    $24 = +HEAPF32[$23>>2];
    $25 = $18 * $24;
    $26 = $r;
    $27 = $c;
    $28 = (($temp) + ($27<<4)|0);
    $29 = (($28) + ($26<<2)|0);
    $30 = +HEAPF32[$29>>2];
    $31 = $30 + $25;
    HEAPF32[$29>>2] = $31;
    $32 = $k;
    $33 = (($32) + 1)|0;
    $k = $33;
   }
   $34 = (($13) + 1)|0;
   $r = $34;
  }
  $35 = $c;
  $36 = (($35) + 1)|0;
  $c = $36;
 }
 $37 = $0;
 _mat4x4_dup($37,$temp);
 STACKTOP = sp;return;
}
function _mat4x4_dup($M,$N) {
 $M = $M|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $M;
 $1 = $N;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $j = 0;
  while(1) {
   $4 = $j;
   $5 = ($4|0)<(4);
   if (!($5)) {
    break;
   }
   $6 = $j;
   $7 = $i;
   $8 = $1;
   $9 = (($8) + ($7<<4)|0);
   $10 = (($9) + ($6<<2)|0);
   $11 = +HEAPF32[$10>>2];
   $12 = $j;
   $13 = $i;
   $14 = $0;
   $15 = (($14) + ($13<<4)|0);
   $16 = (($15) + ($12<<2)|0);
   HEAPF32[$16>>2] = $11;
   $17 = $j;
   $18 = (($17) + 1)|0;
   $j = $18;
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 STACKTOP = sp;return;
}
function _mat4x4_invert($T,$M) {
 $T = $T|0;
 $M = $M|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0.0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0.0;
 var $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0.0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0.0;
 var $387 = 0.0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0.0, $44 = 0;
 var $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0;
 var $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0.0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0;
 var $495 = 0.0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0.0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0.0, $53 = 0;
 var $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0.0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0;
 var $549 = 0.0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0;
 var $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0.0, $584 = 0.0;
 var $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0.0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0;
 var $602 = 0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0, $625 = 0.0, $626 = 0.0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0, $649 = 0.0, $65 = 0.0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0.0, $658 = 0.0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0, $665 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $c = 0, $idet = 0.0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp + 32|0;
 $c = sp + 8|0;
 $0 = $T;
 $1 = $M;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = ((($5)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $3 * $7;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = ((($12)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 * $14;
 $16 = $8 - $15;
 HEAPF32[$s>>2] = $16;
 $17 = $1;
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = ((($19)) + 16|0);
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $18 * $22;
 $24 = $1;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $1;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $26 * $29;
 $31 = $23 - $30;
 $32 = ((($s)) + 4|0);
 HEAPF32[$32>>2] = $31;
 $33 = $1;
 $34 = +HEAPF32[$33>>2];
 $35 = $1;
 $36 = ((($35)) + 16|0);
 $37 = ((($36)) + 12|0);
 $38 = +HEAPF32[$37>>2];
 $39 = $34 * $38;
 $40 = $1;
 $41 = ((($40)) + 16|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $1;
 $44 = ((($43)) + 12|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $42 * $45;
 $47 = $39 - $46;
 $48 = ((($s)) + 8|0);
 HEAPF32[$48>>2] = $47;
 $49 = $1;
 $50 = ((($49)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $1;
 $53 = ((($52)) + 16|0);
 $54 = ((($53)) + 8|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $51 * $55;
 $57 = $1;
 $58 = ((($57)) + 16|0);
 $59 = ((($58)) + 4|0);
 $60 = +HEAPF32[$59>>2];
 $61 = $1;
 $62 = ((($61)) + 8|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $60 * $63;
 $65 = $56 - $64;
 $66 = ((($s)) + 12|0);
 HEAPF32[$66>>2] = $65;
 $67 = $1;
 $68 = ((($67)) + 4|0);
 $69 = +HEAPF32[$68>>2];
 $70 = $1;
 $71 = ((($70)) + 16|0);
 $72 = ((($71)) + 12|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $69 * $73;
 $75 = $1;
 $76 = ((($75)) + 16|0);
 $77 = ((($76)) + 4|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $1;
 $80 = ((($79)) + 12|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $78 * $81;
 $83 = $74 - $82;
 $84 = ((($s)) + 16|0);
 HEAPF32[$84>>2] = $83;
 $85 = $1;
 $86 = ((($85)) + 8|0);
 $87 = +HEAPF32[$86>>2];
 $88 = $1;
 $89 = ((($88)) + 16|0);
 $90 = ((($89)) + 12|0);
 $91 = +HEAPF32[$90>>2];
 $92 = $87 * $91;
 $93 = $1;
 $94 = ((($93)) + 16|0);
 $95 = ((($94)) + 8|0);
 $96 = +HEAPF32[$95>>2];
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $96 * $99;
 $101 = $92 - $100;
 $102 = ((($s)) + 20|0);
 HEAPF32[$102>>2] = $101;
 $103 = $1;
 $104 = ((($103)) + 32|0);
 $105 = +HEAPF32[$104>>2];
 $106 = $1;
 $107 = ((($106)) + 48|0);
 $108 = ((($107)) + 4|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $105 * $109;
 $111 = $1;
 $112 = ((($111)) + 48|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $1;
 $115 = ((($114)) + 32|0);
 $116 = ((($115)) + 4|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $113 * $117;
 $119 = $110 - $118;
 HEAPF32[$c>>2] = $119;
 $120 = $1;
 $121 = ((($120)) + 32|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $1;
 $124 = ((($123)) + 48|0);
 $125 = ((($124)) + 8|0);
 $126 = +HEAPF32[$125>>2];
 $127 = $122 * $126;
 $128 = $1;
 $129 = ((($128)) + 48|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $1;
 $132 = ((($131)) + 32|0);
 $133 = ((($132)) + 8|0);
 $134 = +HEAPF32[$133>>2];
 $135 = $130 * $134;
 $136 = $127 - $135;
 $137 = ((($c)) + 4|0);
 HEAPF32[$137>>2] = $136;
 $138 = $1;
 $139 = ((($138)) + 32|0);
 $140 = +HEAPF32[$139>>2];
 $141 = $1;
 $142 = ((($141)) + 48|0);
 $143 = ((($142)) + 12|0);
 $144 = +HEAPF32[$143>>2];
 $145 = $140 * $144;
 $146 = $1;
 $147 = ((($146)) + 48|0);
 $148 = +HEAPF32[$147>>2];
 $149 = $1;
 $150 = ((($149)) + 32|0);
 $151 = ((($150)) + 12|0);
 $152 = +HEAPF32[$151>>2];
 $153 = $148 * $152;
 $154 = $145 - $153;
 $155 = ((($c)) + 8|0);
 HEAPF32[$155>>2] = $154;
 $156 = $1;
 $157 = ((($156)) + 32|0);
 $158 = ((($157)) + 4|0);
 $159 = +HEAPF32[$158>>2];
 $160 = $1;
 $161 = ((($160)) + 48|0);
 $162 = ((($161)) + 8|0);
 $163 = +HEAPF32[$162>>2];
 $164 = $159 * $163;
 $165 = $1;
 $166 = ((($165)) + 48|0);
 $167 = ((($166)) + 4|0);
 $168 = +HEAPF32[$167>>2];
 $169 = $1;
 $170 = ((($169)) + 32|0);
 $171 = ((($170)) + 8|0);
 $172 = +HEAPF32[$171>>2];
 $173 = $168 * $172;
 $174 = $164 - $173;
 $175 = ((($c)) + 12|0);
 HEAPF32[$175>>2] = $174;
 $176 = $1;
 $177 = ((($176)) + 32|0);
 $178 = ((($177)) + 4|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $1;
 $181 = ((($180)) + 48|0);
 $182 = ((($181)) + 12|0);
 $183 = +HEAPF32[$182>>2];
 $184 = $179 * $183;
 $185 = $1;
 $186 = ((($185)) + 48|0);
 $187 = ((($186)) + 4|0);
 $188 = +HEAPF32[$187>>2];
 $189 = $1;
 $190 = ((($189)) + 32|0);
 $191 = ((($190)) + 12|0);
 $192 = +HEAPF32[$191>>2];
 $193 = $188 * $192;
 $194 = $184 - $193;
 $195 = ((($c)) + 16|0);
 HEAPF32[$195>>2] = $194;
 $196 = $1;
 $197 = ((($196)) + 32|0);
 $198 = ((($197)) + 8|0);
 $199 = +HEAPF32[$198>>2];
 $200 = $1;
 $201 = ((($200)) + 48|0);
 $202 = ((($201)) + 12|0);
 $203 = +HEAPF32[$202>>2];
 $204 = $199 * $203;
 $205 = $1;
 $206 = ((($205)) + 48|0);
 $207 = ((($206)) + 8|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $1;
 $210 = ((($209)) + 32|0);
 $211 = ((($210)) + 12|0);
 $212 = +HEAPF32[$211>>2];
 $213 = $208 * $212;
 $214 = $204 - $213;
 $215 = ((($c)) + 20|0);
 HEAPF32[$215>>2] = $214;
 $216 = +HEAPF32[$s>>2];
 $217 = ((($c)) + 20|0);
 $218 = +HEAPF32[$217>>2];
 $219 = $216 * $218;
 $220 = ((($s)) + 4|0);
 $221 = +HEAPF32[$220>>2];
 $222 = ((($c)) + 16|0);
 $223 = +HEAPF32[$222>>2];
 $224 = $221 * $223;
 $225 = $219 - $224;
 $226 = ((($s)) + 8|0);
 $227 = +HEAPF32[$226>>2];
 $228 = ((($c)) + 12|0);
 $229 = +HEAPF32[$228>>2];
 $230 = $227 * $229;
 $231 = $225 + $230;
 $232 = ((($s)) + 12|0);
 $233 = +HEAPF32[$232>>2];
 $234 = ((($c)) + 8|0);
 $235 = +HEAPF32[$234>>2];
 $236 = $233 * $235;
 $237 = $231 + $236;
 $238 = ((($s)) + 16|0);
 $239 = +HEAPF32[$238>>2];
 $240 = ((($c)) + 4|0);
 $241 = +HEAPF32[$240>>2];
 $242 = $239 * $241;
 $243 = $237 - $242;
 $244 = ((($s)) + 20|0);
 $245 = +HEAPF32[$244>>2];
 $246 = +HEAPF32[$c>>2];
 $247 = $245 * $246;
 $248 = $243 + $247;
 $249 = 1.0 / $248;
 $idet = $249;
 $250 = $1;
 $251 = ((($250)) + 16|0);
 $252 = ((($251)) + 4|0);
 $253 = +HEAPF32[$252>>2];
 $254 = ((($c)) + 20|0);
 $255 = +HEAPF32[$254>>2];
 $256 = $253 * $255;
 $257 = $1;
 $258 = ((($257)) + 16|0);
 $259 = ((($258)) + 8|0);
 $260 = +HEAPF32[$259>>2];
 $261 = ((($c)) + 16|0);
 $262 = +HEAPF32[$261>>2];
 $263 = $260 * $262;
 $264 = $256 - $263;
 $265 = $1;
 $266 = ((($265)) + 16|0);
 $267 = ((($266)) + 12|0);
 $268 = +HEAPF32[$267>>2];
 $269 = ((($c)) + 12|0);
 $270 = +HEAPF32[$269>>2];
 $271 = $268 * $270;
 $272 = $264 + $271;
 $273 = $idet;
 $274 = $272 * $273;
 $275 = $0;
 HEAPF32[$275>>2] = $274;
 $276 = $1;
 $277 = ((($276)) + 4|0);
 $278 = +HEAPF32[$277>>2];
 $279 = -$278;
 $280 = ((($c)) + 20|0);
 $281 = +HEAPF32[$280>>2];
 $282 = $279 * $281;
 $283 = $1;
 $284 = ((($283)) + 8|0);
 $285 = +HEAPF32[$284>>2];
 $286 = ((($c)) + 16|0);
 $287 = +HEAPF32[$286>>2];
 $288 = $285 * $287;
 $289 = $282 + $288;
 $290 = $1;
 $291 = ((($290)) + 12|0);
 $292 = +HEAPF32[$291>>2];
 $293 = ((($c)) + 12|0);
 $294 = +HEAPF32[$293>>2];
 $295 = $292 * $294;
 $296 = $289 - $295;
 $297 = $idet;
 $298 = $296 * $297;
 $299 = $0;
 $300 = ((($299)) + 4|0);
 HEAPF32[$300>>2] = $298;
 $301 = $1;
 $302 = ((($301)) + 48|0);
 $303 = ((($302)) + 4|0);
 $304 = +HEAPF32[$303>>2];
 $305 = ((($s)) + 20|0);
 $306 = +HEAPF32[$305>>2];
 $307 = $304 * $306;
 $308 = $1;
 $309 = ((($308)) + 48|0);
 $310 = ((($309)) + 8|0);
 $311 = +HEAPF32[$310>>2];
 $312 = ((($s)) + 16|0);
 $313 = +HEAPF32[$312>>2];
 $314 = $311 * $313;
 $315 = $307 - $314;
 $316 = $1;
 $317 = ((($316)) + 48|0);
 $318 = ((($317)) + 12|0);
 $319 = +HEAPF32[$318>>2];
 $320 = ((($s)) + 12|0);
 $321 = +HEAPF32[$320>>2];
 $322 = $319 * $321;
 $323 = $315 + $322;
 $324 = $idet;
 $325 = $323 * $324;
 $326 = $0;
 $327 = ((($326)) + 8|0);
 HEAPF32[$327>>2] = $325;
 $328 = $1;
 $329 = ((($328)) + 32|0);
 $330 = ((($329)) + 4|0);
 $331 = +HEAPF32[$330>>2];
 $332 = -$331;
 $333 = ((($s)) + 20|0);
 $334 = +HEAPF32[$333>>2];
 $335 = $332 * $334;
 $336 = $1;
 $337 = ((($336)) + 32|0);
 $338 = ((($337)) + 8|0);
 $339 = +HEAPF32[$338>>2];
 $340 = ((($s)) + 16|0);
 $341 = +HEAPF32[$340>>2];
 $342 = $339 * $341;
 $343 = $335 + $342;
 $344 = $1;
 $345 = ((($344)) + 32|0);
 $346 = ((($345)) + 12|0);
 $347 = +HEAPF32[$346>>2];
 $348 = ((($s)) + 12|0);
 $349 = +HEAPF32[$348>>2];
 $350 = $347 * $349;
 $351 = $343 - $350;
 $352 = $idet;
 $353 = $351 * $352;
 $354 = $0;
 $355 = ((($354)) + 12|0);
 HEAPF32[$355>>2] = $353;
 $356 = $1;
 $357 = ((($356)) + 16|0);
 $358 = +HEAPF32[$357>>2];
 $359 = -$358;
 $360 = ((($c)) + 20|0);
 $361 = +HEAPF32[$360>>2];
 $362 = $359 * $361;
 $363 = $1;
 $364 = ((($363)) + 16|0);
 $365 = ((($364)) + 8|0);
 $366 = +HEAPF32[$365>>2];
 $367 = ((($c)) + 8|0);
 $368 = +HEAPF32[$367>>2];
 $369 = $366 * $368;
 $370 = $362 + $369;
 $371 = $1;
 $372 = ((($371)) + 16|0);
 $373 = ((($372)) + 12|0);
 $374 = +HEAPF32[$373>>2];
 $375 = ((($c)) + 4|0);
 $376 = +HEAPF32[$375>>2];
 $377 = $374 * $376;
 $378 = $370 - $377;
 $379 = $idet;
 $380 = $378 * $379;
 $381 = $0;
 $382 = ((($381)) + 16|0);
 HEAPF32[$382>>2] = $380;
 $383 = $1;
 $384 = +HEAPF32[$383>>2];
 $385 = ((($c)) + 20|0);
 $386 = +HEAPF32[$385>>2];
 $387 = $384 * $386;
 $388 = $1;
 $389 = ((($388)) + 8|0);
 $390 = +HEAPF32[$389>>2];
 $391 = ((($c)) + 8|0);
 $392 = +HEAPF32[$391>>2];
 $393 = $390 * $392;
 $394 = $387 - $393;
 $395 = $1;
 $396 = ((($395)) + 12|0);
 $397 = +HEAPF32[$396>>2];
 $398 = ((($c)) + 4|0);
 $399 = +HEAPF32[$398>>2];
 $400 = $397 * $399;
 $401 = $394 + $400;
 $402 = $idet;
 $403 = $401 * $402;
 $404 = $0;
 $405 = ((($404)) + 16|0);
 $406 = ((($405)) + 4|0);
 HEAPF32[$406>>2] = $403;
 $407 = $1;
 $408 = ((($407)) + 48|0);
 $409 = +HEAPF32[$408>>2];
 $410 = -$409;
 $411 = ((($s)) + 20|0);
 $412 = +HEAPF32[$411>>2];
 $413 = $410 * $412;
 $414 = $1;
 $415 = ((($414)) + 48|0);
 $416 = ((($415)) + 8|0);
 $417 = +HEAPF32[$416>>2];
 $418 = ((($s)) + 8|0);
 $419 = +HEAPF32[$418>>2];
 $420 = $417 * $419;
 $421 = $413 + $420;
 $422 = $1;
 $423 = ((($422)) + 48|0);
 $424 = ((($423)) + 12|0);
 $425 = +HEAPF32[$424>>2];
 $426 = ((($s)) + 4|0);
 $427 = +HEAPF32[$426>>2];
 $428 = $425 * $427;
 $429 = $421 - $428;
 $430 = $idet;
 $431 = $429 * $430;
 $432 = $0;
 $433 = ((($432)) + 16|0);
 $434 = ((($433)) + 8|0);
 HEAPF32[$434>>2] = $431;
 $435 = $1;
 $436 = ((($435)) + 32|0);
 $437 = +HEAPF32[$436>>2];
 $438 = ((($s)) + 20|0);
 $439 = +HEAPF32[$438>>2];
 $440 = $437 * $439;
 $441 = $1;
 $442 = ((($441)) + 32|0);
 $443 = ((($442)) + 8|0);
 $444 = +HEAPF32[$443>>2];
 $445 = ((($s)) + 8|0);
 $446 = +HEAPF32[$445>>2];
 $447 = $444 * $446;
 $448 = $440 - $447;
 $449 = $1;
 $450 = ((($449)) + 32|0);
 $451 = ((($450)) + 12|0);
 $452 = +HEAPF32[$451>>2];
 $453 = ((($s)) + 4|0);
 $454 = +HEAPF32[$453>>2];
 $455 = $452 * $454;
 $456 = $448 + $455;
 $457 = $idet;
 $458 = $456 * $457;
 $459 = $0;
 $460 = ((($459)) + 16|0);
 $461 = ((($460)) + 12|0);
 HEAPF32[$461>>2] = $458;
 $462 = $1;
 $463 = ((($462)) + 16|0);
 $464 = +HEAPF32[$463>>2];
 $465 = ((($c)) + 16|0);
 $466 = +HEAPF32[$465>>2];
 $467 = $464 * $466;
 $468 = $1;
 $469 = ((($468)) + 16|0);
 $470 = ((($469)) + 4|0);
 $471 = +HEAPF32[$470>>2];
 $472 = ((($c)) + 8|0);
 $473 = +HEAPF32[$472>>2];
 $474 = $471 * $473;
 $475 = $467 - $474;
 $476 = $1;
 $477 = ((($476)) + 16|0);
 $478 = ((($477)) + 12|0);
 $479 = +HEAPF32[$478>>2];
 $480 = +HEAPF32[$c>>2];
 $481 = $479 * $480;
 $482 = $475 + $481;
 $483 = $idet;
 $484 = $482 * $483;
 $485 = $0;
 $486 = ((($485)) + 32|0);
 HEAPF32[$486>>2] = $484;
 $487 = $1;
 $488 = +HEAPF32[$487>>2];
 $489 = -$488;
 $490 = ((($c)) + 16|0);
 $491 = +HEAPF32[$490>>2];
 $492 = $489 * $491;
 $493 = $1;
 $494 = ((($493)) + 4|0);
 $495 = +HEAPF32[$494>>2];
 $496 = ((($c)) + 8|0);
 $497 = +HEAPF32[$496>>2];
 $498 = $495 * $497;
 $499 = $492 + $498;
 $500 = $1;
 $501 = ((($500)) + 12|0);
 $502 = +HEAPF32[$501>>2];
 $503 = +HEAPF32[$c>>2];
 $504 = $502 * $503;
 $505 = $499 - $504;
 $506 = $idet;
 $507 = $505 * $506;
 $508 = $0;
 $509 = ((($508)) + 32|0);
 $510 = ((($509)) + 4|0);
 HEAPF32[$510>>2] = $507;
 $511 = $1;
 $512 = ((($511)) + 48|0);
 $513 = +HEAPF32[$512>>2];
 $514 = ((($s)) + 16|0);
 $515 = +HEAPF32[$514>>2];
 $516 = $513 * $515;
 $517 = $1;
 $518 = ((($517)) + 48|0);
 $519 = ((($518)) + 4|0);
 $520 = +HEAPF32[$519>>2];
 $521 = ((($s)) + 8|0);
 $522 = +HEAPF32[$521>>2];
 $523 = $520 * $522;
 $524 = $516 - $523;
 $525 = $1;
 $526 = ((($525)) + 48|0);
 $527 = ((($526)) + 12|0);
 $528 = +HEAPF32[$527>>2];
 $529 = +HEAPF32[$s>>2];
 $530 = $528 * $529;
 $531 = $524 + $530;
 $532 = $idet;
 $533 = $531 * $532;
 $534 = $0;
 $535 = ((($534)) + 32|0);
 $536 = ((($535)) + 8|0);
 HEAPF32[$536>>2] = $533;
 $537 = $1;
 $538 = ((($537)) + 32|0);
 $539 = +HEAPF32[$538>>2];
 $540 = -$539;
 $541 = ((($s)) + 16|0);
 $542 = +HEAPF32[$541>>2];
 $543 = $540 * $542;
 $544 = $1;
 $545 = ((($544)) + 32|0);
 $546 = ((($545)) + 4|0);
 $547 = +HEAPF32[$546>>2];
 $548 = ((($s)) + 8|0);
 $549 = +HEAPF32[$548>>2];
 $550 = $547 * $549;
 $551 = $543 + $550;
 $552 = $1;
 $553 = ((($552)) + 32|0);
 $554 = ((($553)) + 12|0);
 $555 = +HEAPF32[$554>>2];
 $556 = +HEAPF32[$s>>2];
 $557 = $555 * $556;
 $558 = $551 - $557;
 $559 = $idet;
 $560 = $558 * $559;
 $561 = $0;
 $562 = ((($561)) + 32|0);
 $563 = ((($562)) + 12|0);
 HEAPF32[$563>>2] = $560;
 $564 = $1;
 $565 = ((($564)) + 16|0);
 $566 = +HEAPF32[$565>>2];
 $567 = -$566;
 $568 = ((($c)) + 12|0);
 $569 = +HEAPF32[$568>>2];
 $570 = $567 * $569;
 $571 = $1;
 $572 = ((($571)) + 16|0);
 $573 = ((($572)) + 4|0);
 $574 = +HEAPF32[$573>>2];
 $575 = ((($c)) + 4|0);
 $576 = +HEAPF32[$575>>2];
 $577 = $574 * $576;
 $578 = $570 + $577;
 $579 = $1;
 $580 = ((($579)) + 16|0);
 $581 = ((($580)) + 8|0);
 $582 = +HEAPF32[$581>>2];
 $583 = +HEAPF32[$c>>2];
 $584 = $582 * $583;
 $585 = $578 - $584;
 $586 = $idet;
 $587 = $585 * $586;
 $588 = $0;
 $589 = ((($588)) + 48|0);
 HEAPF32[$589>>2] = $587;
 $590 = $1;
 $591 = +HEAPF32[$590>>2];
 $592 = ((($c)) + 12|0);
 $593 = +HEAPF32[$592>>2];
 $594 = $591 * $593;
 $595 = $1;
 $596 = ((($595)) + 4|0);
 $597 = +HEAPF32[$596>>2];
 $598 = ((($c)) + 4|0);
 $599 = +HEAPF32[$598>>2];
 $600 = $597 * $599;
 $601 = $594 - $600;
 $602 = $1;
 $603 = ((($602)) + 8|0);
 $604 = +HEAPF32[$603>>2];
 $605 = +HEAPF32[$c>>2];
 $606 = $604 * $605;
 $607 = $601 + $606;
 $608 = $idet;
 $609 = $607 * $608;
 $610 = $0;
 $611 = ((($610)) + 48|0);
 $612 = ((($611)) + 4|0);
 HEAPF32[$612>>2] = $609;
 $613 = $1;
 $614 = ((($613)) + 48|0);
 $615 = +HEAPF32[$614>>2];
 $616 = -$615;
 $617 = ((($s)) + 12|0);
 $618 = +HEAPF32[$617>>2];
 $619 = $616 * $618;
 $620 = $1;
 $621 = ((($620)) + 48|0);
 $622 = ((($621)) + 4|0);
 $623 = +HEAPF32[$622>>2];
 $624 = ((($s)) + 4|0);
 $625 = +HEAPF32[$624>>2];
 $626 = $623 * $625;
 $627 = $619 + $626;
 $628 = $1;
 $629 = ((($628)) + 48|0);
 $630 = ((($629)) + 8|0);
 $631 = +HEAPF32[$630>>2];
 $632 = +HEAPF32[$s>>2];
 $633 = $631 * $632;
 $634 = $627 - $633;
 $635 = $idet;
 $636 = $634 * $635;
 $637 = $0;
 $638 = ((($637)) + 48|0);
 $639 = ((($638)) + 8|0);
 HEAPF32[$639>>2] = $636;
 $640 = $1;
 $641 = ((($640)) + 32|0);
 $642 = +HEAPF32[$641>>2];
 $643 = ((($s)) + 12|0);
 $644 = +HEAPF32[$643>>2];
 $645 = $642 * $644;
 $646 = $1;
 $647 = ((($646)) + 32|0);
 $648 = ((($647)) + 4|0);
 $649 = +HEAPF32[$648>>2];
 $650 = ((($s)) + 4|0);
 $651 = +HEAPF32[$650>>2];
 $652 = $649 * $651;
 $653 = $645 - $652;
 $654 = $1;
 $655 = ((($654)) + 32|0);
 $656 = ((($655)) + 8|0);
 $657 = +HEAPF32[$656>>2];
 $658 = +HEAPF32[$s>>2];
 $659 = $657 * $658;
 $660 = $653 + $659;
 $661 = $idet;
 $662 = $660 * $661;
 $663 = $0;
 $664 = ((($663)) + 48|0);
 $665 = ((($664)) + 12|0);
 HEAPF32[$665>>2] = $662;
 STACKTOP = sp;return;
}
function _position_table_in_scene() {
 var $0 = 0.0, $rotated_model_matrix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rotated_model_matrix = sp;
 _mat4x4_identity(22624);
 $0 = (+_deg_to_radf(-90.0));
 _mat4x4_rotate_X($rotated_model_matrix,22624,$0);
 _mat4x4_mul(22688,22560,$rotated_model_matrix);
 STACKTOP = sp;return;
}
function _mat4x4_identity($M) {
 $M = $M|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $i = 0, $j = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $M;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(4);
  if (!($2)) {
   break;
  }
  $j = 0;
  while(1) {
   $3 = $j;
   $4 = ($3|0)<(4);
   $5 = $i;
   if (!($4)) {
    break;
   }
   $6 = $j;
   $7 = ($5|0)==($6|0);
   $8 = $7 ? 1.0 : 0.0;
   $9 = $j;
   $10 = $i;
   $11 = $0;
   $12 = (($11) + ($10<<4)|0);
   $13 = (($12) + ($9<<2)|0);
   HEAPF32[$13>>2] = $8;
   $14 = $j;
   $15 = (($14) + 1)|0;
   $j = $15;
  }
  $16 = (($5) + 1)|0;
  $i = $16;
 }
 STACKTOP = sp;return;
}
function _mat4x4_rotate_X($Q,$M,$angle) {
 $Q = $Q|0;
 $M = $M|0;
 $angle = +$angle;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $R = 0, $c = 0.0, $s = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $R = sp;
 $0 = $Q;
 $1 = $M;
 $2 = $angle;
 $3 = $2;
 $4 = (+Math_sin((+$3)));
 $s = $4;
 $5 = $2;
 $6 = (+Math_cos((+$5)));
 $c = $6;
 HEAPF32[$R>>2] = 1.0;
 $7 = ((($R)) + 4|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = ((($7)) + 4|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = ((($8)) + 4|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = ((($R)) + 16|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = ((($10)) + 4|0);
 $12 = $c;
 HEAPF32[$11>>2] = $12;
 $13 = ((($11)) + 4|0);
 $14 = $s;
 HEAPF32[$13>>2] = $14;
 $15 = ((($13)) + 4|0);
 HEAPF32[$15>>2] = 0.0;
 $16 = ((($10)) + 16|0);
 HEAPF32[$16>>2] = 0.0;
 $17 = ((($16)) + 4|0);
 $18 = $s;
 $19 = -$18;
 HEAPF32[$17>>2] = $19;
 $20 = ((($17)) + 4|0);
 $21 = $c;
 HEAPF32[$20>>2] = $21;
 $22 = ((($20)) + 4|0);
 HEAPF32[$22>>2] = 0.0;
 $23 = ((($16)) + 16|0);
 HEAPF32[$23>>2] = 0.0;
 $24 = ((($23)) + 4|0);
 HEAPF32[$24>>2] = 0.0;
 $25 = ((($24)) + 4|0);
 HEAPF32[$25>>2] = 0.0;
 $26 = ((($25)) + 4|0);
 HEAPF32[$26>>2] = 1.0;
 $27 = $0;
 $28 = $1;
 _mat4x4_mul($27,$28,$R);
 STACKTOP = sp;return;
}
function _position_object_in_scene($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $y;
 $2 = $z;
 _mat4x4_identity(22624);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _mat4x4_translate_in_place(22624,$3,$4,$5);
 _mat4x4_mul(22688,22560,22624);
 STACKTOP = sp;return;
}
function _get_raw_image_data_from_png($agg$result,$png_data,$png_data_size) {
 $agg$result = $agg$result|0;
 $png_data = $png_data|0;
 $png_data_size = $png_data_size|0;
 var $$reg2mem54$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $cond = 0, $cond59 = 0, $cond60 = 0, $cond61 = 0, $cond62 = 0, $cond63 = 0, $cond64 = 0, $cond65 = 0, $cond66 = 0, $cond67 = 0, $cond68 = 0, $cond69 = 0, $info_ptr = 0;
 var $or$cond = 0, $png_data_handle = 0, $png_info = 0, $png_ptr = 0, $raw_image = 0, $vararg_buffer = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $png_ptr = sp + 52|0;
 $info_ptr = sp + 48|0;
 $png_data_handle = sp + 36|0;
 $png_info = sp + 24|0;
 $raw_image = sp + 16|0;
 $0 = ($png_data|0)!=(0|0);
 $1 = ($png_data_size|0)>(8);
 $or$cond = $0 & $1;
 do {
  if ($or$cond) {
   __THREW__ = 0;
   $5 = (invoke_iiii(7,($png_data|0),0,8)|0);
   $6 = __THREW__; __THREW__ = 0;
   if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = (threwValue); } else { $7 = -1; };
   $8 = tempRet0;
   $cond64 = ($7|0)==(1);
   if ($cond64) {
    $$reg2mem54$0 = $8;
   } else {
    $9 = ($5|0)!=(0);
    if ($9) {
     __THREW__ = 0;
     invoke_viiii(6,(12329|0),(12282|0),33,(12301|0));
     $10 = __THREW__; __THREW__ = 0;
     if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
     $12 = tempRet0;
     $$reg2mem54$0 = $12;
     break;
    }
    __THREW__ = 0;
    $13 = (invoke_iiiii(8,(13207|0),(0|0),(0|0),(0|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
    $16 = tempRet0;
    $cond65 = ($15|0)==(1);
    if ($cond65) {
     $$reg2mem54$0 = $16;
    } else {
     HEAP32[$png_ptr>>2] = $13;
     $17 = HEAP32[$png_ptr>>2]|0;
     $18 = ($17|0)!=(0|0);
     if (!($18)) {
      __THREW__ = 0;
      invoke_viiii(6,(12363|0),(12282|0),36,(12301|0));
      $19 = __THREW__; __THREW__ = 0;
      if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
      $21 = tempRet0;
      $$reg2mem54$0 = $21;
      break;
     }
     $22 = HEAP32[$png_ptr>>2]|0;
     __THREW__ = 0;
     $23 = (invoke_ii(9,($22|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     if ((($24|0) != 0) & ((threwValue|0) != 0)) { $25 = _testSetjmp(HEAP32[$24>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($25|0) == 0) { _longjmp($24|0, threwValue|0); } tempRet0 = (threwValue); } else { $25 = -1; };
     $26 = tempRet0;
     $cond66 = ($25|0)==(1);
     if ($cond66) {
      $$reg2mem54$0 = $26;
     } else {
      HEAP32[$info_ptr>>2] = $23;
      $27 = HEAP32[$info_ptr>>2]|0;
      $28 = ($27|0)!=(0|0);
      if (!($28)) {
       __THREW__ = 0;
       invoke_viiii(6,(12379|0),(12282|0),38,(12301|0));
       $29 = __THREW__; __THREW__ = 0;
       if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = (threwValue); } else { $30 = -1; };
       $31 = tempRet0;
       $$reg2mem54$0 = $31;
       break;
      }
      HEAP32[$png_data_handle>>2] = $png_data;
      $32 = ((($png_data_handle)) + 4|0);
      HEAP32[$32>>2] = $png_data_size;
      $33 = ((($png_data_handle)) + 8|0);
      HEAP32[$33>>2] = 0;
      $34 = HEAP32[$png_ptr>>2]|0;
      __THREW__ = 0;
      invoke_viii(10,($34|0),($png_data_handle|0),(11|0));
      $35 = __THREW__; __THREW__ = 0;
      if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = (threwValue); } else { $36 = -1; };
      $37 = tempRet0;
      $cond67 = ($36|0)==(1);
      if ($cond67) {
       $$reg2mem54$0 = $37;
      } else {
       $38 = HEAP32[$png_ptr>>2]|0;
       __THREW__ = 0;
       $39 = (invoke_iiii(12,($38|0),(13|0),156)|0);
       $40 = __THREW__; __THREW__ = 0;
       if ((($40|0) != 0) & ((threwValue|0) != 0)) { $41 = _testSetjmp(HEAP32[$40>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($41|0) == 0) { _longjmp($40|0, threwValue|0); } tempRet0 = (threwValue); } else { $41 = -1; };
       $42 = tempRet0;
       $cond68 = ($41|0)==(1);
       if ($cond68) {
        $$reg2mem54$0 = $42;
       } else {
        _setjmpTable = _saveSetjmp($39,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
        __THREW__ = 0;
        $43 = __THREW__; __THREW__ = 0;
        if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = (threwValue); } else { $44 = -1; };
        $45 = tempRet0;
        $cond69 = ($44|0)==(1);
        if ($cond69) {
         $$reg2mem54$0 = $45;
        } else {
         $$reg2mem54$0 = 0;
        }
       }
      }
     }
    }
   }
  } else {
   __THREW__ = 0;
   invoke_viiii(6,(12244|0),(12282|0),32,(12301|0));
   $2 = __THREW__; __THREW__ = 0;
   if ((($2|0) != 0) & ((threwValue|0) != 0)) { $3 = _testSetjmp(HEAP32[$2>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($3|0) == 0) { _longjmp($2|0, threwValue|0); } tempRet0 = (threwValue); } else { $3 = -1; };
   $4 = tempRet0;
   $$reg2mem54$0 = $4;
  }
 } while(0);
 while(1) {
  $46 = ($$reg2mem54$0|0)!=(0);
  if ($46) {
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = 12282;
   $vararg_ptr56 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr56>>2] = 44;
   $vararg_ptr57 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr57>>2] = 12301;
   $vararg_ptr58 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr58>>2] = 12403;
   invoke_viii(14,(12396|0),(12821|0),($vararg_buffer|0));
   $47 = __THREW__; __THREW__ = 0;
   if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = (threwValue); } else { $48 = -1; };
   $49 = tempRet0;
   $cond63 = ($48|0)==(1);
   if ($cond63) {
    $$reg2mem54$0 = $49;
    continue;
   } else {
    label = 18;
    break;
   }
  }
  $50 = HEAP32[$png_ptr>>2]|0;
  $51 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_viii(15,($png_info|0),($50|0),($51|0));
  $52 = __THREW__; __THREW__ = 0;
  if ((($52|0) != 0) & ((threwValue|0) != 0)) { $53 = _testSetjmp(HEAP32[$52>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($53|0) == 0) { _longjmp($52|0, threwValue|0); } tempRet0 = (threwValue); } else { $53 = -1; };
  $54 = tempRet0;
  $cond = ($53|0)==(1);
  if ($cond) {
   $$reg2mem54$0 = $54;
   continue;
  }
  $55 = HEAP32[$png_ptr>>2]|0;
  $56 = HEAP32[$info_ptr>>2]|0;
  $57 = ((($png_info)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  __THREW__ = 0;
  invoke_viiii(16,($raw_image|0),($55|0),($56|0),($58|0));
  $59 = __THREW__; __THREW__ = 0;
  if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = (threwValue); } else { $60 = -1; };
  $61 = tempRet0;
  $cond59 = ($60|0)==(1);
  if ($cond59) {
   $$reg2mem54$0 = $61;
   continue;
  }
  $62 = HEAP32[$png_ptr>>2]|0;
  $63 = HEAP32[$info_ptr>>2]|0;
  __THREW__ = 0;
  invoke_vii(17,($62|0),($63|0));
  $64 = __THREW__; __THREW__ = 0;
  if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = (threwValue); } else { $65 = -1; };
  $66 = tempRet0;
  $cond60 = ($65|0)==(1);
  if ($cond60) {
   $$reg2mem54$0 = $66;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(18,($png_ptr|0),($info_ptr|0),(0|0));
  $67 = __THREW__; __THREW__ = 0;
  if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = (threwValue); } else { $68 = -1; };
  $69 = tempRet0;
  $cond61 = ($68|0)==(1);
  if ($cond61) {
   $$reg2mem54$0 = $69;
   continue;
  }
  $70 = HEAP32[$png_info>>2]|0;
  HEAP32[$agg$result>>2] = $70;
  $71 = ((($agg$result)) + 4|0);
  $72 = ((($png_info)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$71>>2] = $73;
  $74 = ((($agg$result)) + 8|0);
  $75 = ((($raw_image)) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$74>>2] = $76;
  $77 = ((($agg$result)) + 12|0);
  $78 = ((($png_info)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  __THREW__ = 0;
  $80 = (invoke_ii(19,($79|0))|0);
  $81 = __THREW__; __THREW__ = 0;
  if ((($81|0) != 0) & ((threwValue|0) != 0)) { $82 = _testSetjmp(HEAP32[$81>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($82|0) == 0) { _longjmp($81|0, threwValue|0); } tempRet0 = (threwValue); } else { $82 = -1; };
  $83 = tempRet0;
  $cond62 = ($82|0)==(1);
  if ($cond62) {
   $$reg2mem54$0 = $83;
  } else {
   label = 24;
   break;
  }
 }
 if ((label|0) == 18) {
  _llvm_trap();
  // unreachable;
 }
 else if ((label|0) == 24) {
  HEAP32[$77>>2] = $80;
  $84 = ((($agg$result)) + 16|0);
  $85 = HEAP32[$raw_image>>2]|0;
  HEAP32[$84>>2] = $85;
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
}
function _read_png_data_callback($png_ptr,$raw_data,$read_length) {
 $png_ptr = $png_ptr|0;
 $raw_data = $raw_data|0;
 $read_length = $read_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $handle = 0;
 var $png_src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $raw_data;
 $2 = $read_length;
 $3 = $0;
 $4 = (_png_get_io_ptr($3)|0);
 $handle = $4;
 $5 = $handle;
 $6 = HEAP32[$5>>2]|0;
 $7 = $handle;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + ($9)|0);
 $png_src = $10;
 $11 = $1;
 $12 = $png_src;
 $13 = $2;
 _memcpy(($11|0),($12|0),($13|0))|0;
 $14 = $2;
 $15 = $handle;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($14))|0;
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _read_and_update_info($agg$result,$png_ptr,$info_ptr) {
 $agg$result = $agg$result|0;
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bit_depth = 0, $color_type = 0, $height = 0, $or$cond = 0, $or$cond3 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $width = sp + 12|0;
 $height = sp + 8|0;
 $bit_depth = sp + 4|0;
 $color_type = sp;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = $1;
 _png_read_info($2,$3);
 $4 = $0;
 $5 = $1;
 (_png_get_IHDR($4,$5,$width,$height,$bit_depth,$color_type,0,0,0)|0);
 $6 = $0;
 $7 = $1;
 $8 = (_png_get_valid($6,$7,16)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $0;
  _png_set_tRNS_to_alpha($10);
 }
 $11 = HEAP32[$color_type>>2]|0;
 $12 = ($11|0)==(0);
 $13 = HEAP32[$bit_depth>>2]|0;
 $14 = ($13|0)<(8);
 $or$cond = $12 & $14;
 if ($or$cond) {
  $15 = $0;
  _png_set_expand_gray_1_2_4_to_8($15);
 }
 $16 = HEAP32[$color_type>>2]|0;
 $17 = ($16|0)==(3);
 if ($17) {
  $18 = $0;
  _png_set_palette_to_rgb($18);
 }
 $19 = HEAP32[$color_type>>2]|0;
 $20 = ($19|0)==(3);
 $21 = HEAP32[$color_type>>2]|0;
 $22 = ($21|0)==(2);
 $or$cond3 = $20 | $22;
 if ($or$cond3) {
  $23 = $0;
  _png_set_add_alpha($23,255,1);
 }
 $24 = HEAP32[$bit_depth>>2]|0;
 $25 = ($24|0)<(8);
 if ($25) {
  $26 = $0;
  _png_set_packing($26);
 } else {
  $27 = HEAP32[$bit_depth>>2]|0;
  $28 = ($27|0)==(16);
  if ($28) {
   $29 = $0;
   _png_set_scale_16($29);
  }
 }
 $30 = $0;
 $31 = $1;
 _png_read_update_info($30,$31);
 $32 = $0;
 $33 = $1;
 $34 = (_png_get_color_type($32,$33)|0);
 $35 = $34&255;
 HEAP32[$color_type>>2] = $35;
 $36 = HEAP32[$width>>2]|0;
 HEAP32[$agg$result>>2] = $36;
 $37 = ((($agg$result)) + 4|0);
 $38 = HEAP32[$height>>2]|0;
 HEAP32[$37>>2] = $38;
 $39 = ((($agg$result)) + 8|0);
 $40 = HEAP32[$color_type>>2]|0;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function _read_entire_png_image($agg$result,$png_ptr,$info_ptr,$height) {
 $agg$result = $agg$result|0;
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $height = $height|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data_length = 0, $i = 0, $raw_image = 0;
 var $row_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $height;
 $4 = $0;
 $5 = $1;
 $6 = (_png_get_rowbytes($4,$5)|0);
 $row_size = $6;
 $7 = $row_size;
 $8 = $2;
 $9 = Math_imul($7, $8)|0;
 $data_length = $9;
 $10 = $row_size;
 $11 = ($10>>>0)>(0);
 if (!($11)) {
  ___assert_fail((12429|0),(12282|0),114,(12442|0));
  // unreachable;
 }
 $12 = $data_length;
 $13 = (_malloc($12)|0);
 $raw_image = $13;
 $14 = $raw_image;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((12464|0),(12282|0),117,(12442|0));
  // unreachable;
 }
 $16 = $2;
 $17 = (_llvm_stacksave()|0);
 $3 = $17;
 $$alloca_mul = $16<<2;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = $2;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $raw_image;
  $23 = $i;
  $24 = $row_size;
  $25 = Math_imul($23, $24)|0;
  $26 = (($22) + ($25)|0);
  $27 = $i;
  $28 = (($18) + ($27<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $0;
 _png_read_image($31,$18);
 $32 = $raw_image;
 HEAP32[$agg$result>>2] = $32;
 $33 = ((($agg$result)) + 4|0);
 $34 = $data_length;
 HEAP32[$33>>2] = $34;
 $35 = $3;
 _llvm_stackrestore(($35|0));
 STACKTOP = sp;return;
}
function _get_gl_color_format($png_color_format) {
 $png_color_format = $png_color_format|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_color_format;
 $2 = $1;
 $3 = ($2|0)==(0);
 $4 = $1;
 $5 = ($4|0)==(6);
 $or$cond = $3 | $5;
 $6 = $1;
 $7 = ($6|0)==(4);
 $or$cond3 = $or$cond | $7;
 if (!($or$cond3)) {
  ___assert_fail((12482|0),(12282|0),134,(12619|0));
  // unreachable;
 }
 $8 = $1;
 switch ($8|0) {
 case 0:  {
  $0 = 6409;
  break;
 }
 case 6:  {
  $0 = 6408;
  break;
 }
 case 4:  {
  $0 = 6410;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 $9 = $0;
 STACKTOP = sp;return ($9|0);
}
function _release_raw_image_data($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = ((($3)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((12639|0),(12282|0),62,(12652|0));
  // unreachable;
 }
}
function _get_texture_program($agg$result,$program) {
 $agg$result = $agg$result|0;
 $program = $program|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $program;
 $1 = $0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($agg$result)) + 4|0);
 $3 = $0;
 $4 = (_glGetAttribLocation(($3|0),(12675|0))|0);
 HEAP32[$2>>2] = $4;
 $5 = ((($agg$result)) + 8|0);
 $6 = $0;
 $7 = (_glGetAttribLocation(($6|0),(12686|0))|0);
 HEAP32[$5>>2] = $7;
 $8 = ((($agg$result)) + 12|0);
 $9 = $0;
 $10 = (_glGetUniformLocation(($9|0),(12707|0))|0);
 HEAP32[$8>>2] = $10;
 $11 = ((($agg$result)) + 16|0);
 $12 = $0;
 $13 = (_glGetUniformLocation(($12|0),(12719|0))|0);
 HEAP32[$11>>2] = $13;
 STACKTOP = sp;return;
}
function _get_color_program($agg$result,$program) {
 $agg$result = $agg$result|0;
 $program = $program|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $program;
 $1 = $0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($agg$result)) + 4|0);
 $3 = $0;
 $4 = (_glGetAttribLocation(($3|0),(12675|0))|0);
 HEAP32[$2>>2] = $4;
 $5 = ((($agg$result)) + 8|0);
 $6 = $0;
 $7 = (_glGetUniformLocation(($6|0),(12707|0))|0);
 HEAP32[$5>>2] = $7;
 $8 = ((($agg$result)) + 12|0);
 $9 = $0;
 $10 = (_glGetUniformLocation(($9|0),(12733|0))|0);
 HEAP32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function _compile_shader($type,$source,$length) {
 $type = $type|0;
 $source = $source|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compile_status = 0, $shader_object_id = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $compile_status = sp + 16|0;
 $0 = $type;
 HEAP32[$1>>2] = $source;
 HEAP32[$2>>2] = $length;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((12741|0),(12756|0),43,(12776|0));
  // unreachable;
 }
 $5 = $0;
 $6 = (_glCreateShader(($5|0))|0);
 $shader_object_id = $6;
 $7 = $shader_object_id;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  ___assert_fail((12791|0),(12756|0),47,(12776|0));
  // unreachable;
 }
 $9 = $shader_object_id;
 _glShaderSource(($9|0),1,($1|0),($2|0));
 $10 = $shader_object_id;
 _glCompileShader(($10|0));
 $11 = $shader_object_id;
 _glGetShaderiv(($11|0),35713,($compile_status|0));
 HEAP32[$vararg_buffer>>2] = 12756;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 54;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 12776;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 12836;
 __debug_log_d(12813,12821,$vararg_buffer);
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 _log_v_fixed_length($12,$13);
 $14 = $shader_object_id;
 _log_shader_info_log($14);
 $15 = HEAP32[$compile_status>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $shader_object_id;
  STACKTOP = sp;return ($17|0);
 } else {
  ___assert_fail((12911|0),(12756|0),59,(12776|0));
  // unreachable;
 }
 return (0)|0;
}
function _log_v_fixed_length($source,$length) {
 $source = $source|0;
 $length = $length|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $source;
 $1 = $length;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $5 = (_llvm_stacksave()|0);
 $2 = $5;
 $$alloca_mul = $4;
 $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $7 = $0;
 $8 = $1;
 _memcpy(($6|0),($7|0),($8|0))|0;
 $9 = $1;
 $10 = (($6) + ($9)|0);
 HEAP8[$10>>0] = 0;
 HEAP32[$vararg_buffer>>2] = 12756;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 12872;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 __debug_log_v(12813,12821,$vararg_buffer);
 $11 = $2;
 _llvm_stackrestore(($11|0));
 STACKTOP = sp;return;
}
function _log_shader_info_log($shader_object_id) {
 $shader_object_id = $shader_object_id|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $log_length = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $log_length = sp + 20|0;
 $0 = $shader_object_id;
 $2 = $0;
 _glGetShaderiv(($2|0),35716,($log_length|0));
 $3 = HEAP32[$log_length>>2]|0;
 $4 = (_llvm_stacksave()|0);
 $1 = $4;
 $$alloca_mul = $3;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = $0;
 $7 = HEAP32[$log_length>>2]|0;
 _glGetShaderInfoLog(($6|0),($7|0),(0|0),($5|0));
 HEAP32[$vararg_buffer>>2] = 12756;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 27;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 12891;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $5;
 __debug_log_v(12813,12821,$vararg_buffer);
 $8 = $1;
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return;
}
function _link_program($vertex_shader,$fragment_shader) {
 $vertex_shader = $vertex_shader|0;
 $fragment_shader = $fragment_shader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $link_status = 0, $program_object_id = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $link_status = sp + 16|0;
 $0 = $vertex_shader;
 $1 = $fragment_shader;
 $2 = (_glCreateProgram()|0);
 $program_object_id = $2;
 $3 = $program_object_id;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  ___assert_fail((12931|0),(12756|0),68,(12954|0));
  // unreachable;
 }
 $5 = $program_object_id;
 $6 = $0;
 _glAttachShader(($5|0),($6|0));
 $7 = $program_object_id;
 $8 = $1;
 _glAttachShader(($7|0),($8|0));
 $9 = $program_object_id;
 _glLinkProgram(($9|0));
 $10 = $program_object_id;
 _glGetProgramiv(($10|0),35714,($link_status|0));
 HEAP32[$vararg_buffer>>2] = 12756;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 76;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 12954;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 12967;
 __debug_log_d(12813,12821,$vararg_buffer);
 $11 = $program_object_id;
 _log_program_info_log($11);
 $12 = HEAP32[$link_status>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $program_object_id;
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((13016|0),(12756|0),80,(12954|0));
  // unreachable;
 }
 return (0)|0;
}
function _log_program_info_log($program_object_id) {
 $program_object_id = $program_object_id|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $log_length = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $log_length = sp + 20|0;
 $0 = $program_object_id;
 $2 = $0;
 _glGetProgramiv(($2|0),35716,($log_length|0));
 $3 = HEAP32[$log_length>>2]|0;
 $4 = (_llvm_stacksave()|0);
 $1 = $4;
 $$alloca_mul = $3;
 $5 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
 $6 = $0;
 $7 = HEAP32[$log_length>>2]|0;
 _glGetProgramInfoLog(($6|0),($7|0),(0|0),($5|0));
 HEAP32[$vararg_buffer>>2] = 12756;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 38;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 12995;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $5;
 __debug_log_v(12813,12821,$vararg_buffer);
 $8 = $1;
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return;
}
function _build_program($vertex_shader_source,$vertex_shader_source_length,$fragment_shader_source,$fragment_shader_source_length) {
 $vertex_shader_source = $vertex_shader_source|0;
 $vertex_shader_source_length = $vertex_shader_source_length|0;
 $fragment_shader_source = $fragment_shader_source|0;
 $fragment_shader_source_length = $fragment_shader_source_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fragment_shader = 0, $vertex_shader = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $vertex_shader_source;
 $1 = $vertex_shader_source_length;
 $2 = $fragment_shader_source;
 $3 = $fragment_shader_source_length;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((13033|0),(12756|0),88,(13062|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $0;
  $9 = $1;
  $10 = (_compile_shader(35633,$8,$9)|0);
  $vertex_shader = $10;
  $11 = $2;
  $12 = $3;
  $13 = (_compile_shader(35632,$11,$12)|0);
  $fragment_shader = $13;
  $14 = $vertex_shader;
  $15 = $fragment_shader;
  $16 = (_link_program($14,$15)|0);
  STACKTOP = sp;return ($16|0);
 } else {
  ___assert_fail((13076|0),(12756|0),89,(13062|0));
  // unreachable;
 }
 return (0)|0;
}
function _load_texture($width,$height,$type,$pixels) {
 $width = $width|0;
 $height = $height|0;
 $type = $type|0;
 $pixels = $pixels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $texture_object_id = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $texture_object_id = sp;
 $0 = $width;
 $1 = $height;
 $2 = $type;
 $3 = $pixels;
 _glGenTextures(1,($texture_object_id|0));
 $4 = HEAP32[$texture_object_id>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$texture_object_id>>2]|0;
  _glBindTexture(3553,($6|0));
  _glTexParameteri(3553,10241,9987);
  _glTexParameteri(3553,10240,9729);
  $7 = $2;
  $8 = $0;
  $9 = $1;
  $10 = $2;
  $11 = $3;
  _glTexImage2D(3553,0,($7|0),($8|0),($9|0),0,($10|0),5121,($11|0));
  _glGenerateMipmap(3553);
  _glBindTexture(3553,0);
  $12 = HEAP32[$texture_object_id>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  ___assert_fail((13107|0),(13130|0),10,(13151|0));
  // unreachable;
 }
 return (0)|0;
}
function _png_sig_cmp($sig,$start,$num_to_check) {
 $sig = $sig|0;
 $start = $start|0;
 $num_to_check = $num_to_check|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_signature = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $png_signature = sp + 16|0;
 $1 = $sig;
 $2 = $start;
 $3 = $num_to_check;
 ;HEAP8[$png_signature>>0]=HEAP8[13164>>0]|0;HEAP8[$png_signature+1>>0]=HEAP8[13164+1>>0]|0;HEAP8[$png_signature+2>>0]=HEAP8[13164+2>>0]|0;HEAP8[$png_signature+3>>0]=HEAP8[13164+3>>0]|0;HEAP8[$png_signature+4>>0]=HEAP8[13164+4>>0]|0;HEAP8[$png_signature+5>>0]=HEAP8[13164+5>>0]|0;HEAP8[$png_signature+6>>0]=HEAP8[13164+6>>0]|0;HEAP8[$png_signature+7>>0]=HEAP8[13164+7>>0]|0;
 $4 = $3;
 $5 = ($4>>>0)>(8);
 if ($5) {
  $3 = 8;
 } else {
  $6 = $3;
  $7 = ($6>>>0)<(1);
  if ($7) {
   $0 = -1;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 }
 $8 = $2;
 $9 = ($8>>>0)>(7);
 if ($9) {
  $0 = -1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $10 = $2;
 $11 = $3;
 $12 = (($10) + ($11))|0;
 $13 = ($12>>>0)>(8);
 if ($13) {
  $14 = $2;
  $15 = (8 - ($14))|0;
  $3 = $15;
 }
 $16 = $2;
 $17 = $1;
 $18 = (($17) + ($16)|0);
 $19 = $2;
 $20 = (($png_signature) + ($19)|0);
 $21 = $3;
 $22 = (_memcmp($18,$20,$21)|0);
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _png_zalloc($png_ptr,$items,$size) {
 $png_ptr = $png_ptr|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num_bytes = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $items;
 $3 = $size;
 $4 = $3;
 $num_bytes = $4;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 $7 = $2;
 $8 = $3;
 $9 = (4294967295 / ($8>>>0))&-1;
 $10 = ($7>>>0)>=($9>>>0);
 if ($10) {
  $11 = $1;
  _png_warning($11,13172);
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 } else {
  $12 = $2;
  $13 = $num_bytes;
  $14 = Math_imul($13, $12)|0;
  $num_bytes = $14;
  $15 = $1;
  $16 = $num_bytes;
  $17 = (_png_malloc_warn($15,$16)|0);
  $0 = $17;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _png_zfree($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $0;
 $3 = $1;
 _png_free($2,$3);
 STACKTOP = sp;return;
}
function _png_reset_crc($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = (_crc32(0,0,0)|0);
 $2 = $0;
 $3 = ((($2)) + 404|0);
 HEAP32[$3>>2] = $1;
 STACKTOP = sp;return;
}
function _png_calculate_crc($png_ptr,$ptr,$length) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 $length = $length|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $crc = 0, $need_crc = 0, $or$cond = 0, $safe_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $length;
 $need_crc = 1;
 $3 = $0;
 $4 = ((($3)) + 376|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 29;
 $7 = 1 & $6;
 $8 = ($7|0)!=(0);
 $9 = $0;
 $10 = ((($9)) + 212|0);
 $11 = HEAP32[$10>>2]|0;
 if ($8) {
  $12 = $11 & 768;
  $13 = ($12|0)==(768);
  if ($13) {
   $need_crc = 0;
  }
 } else {
  $14 = $11 & 2048;
  $15 = ($14|0)!=(0);
  if ($15) {
   $need_crc = 0;
  }
 }
 $16 = $need_crc;
 $17 = ($16|0)!=(0);
 $18 = $2;
 $19 = ($18>>>0)>(0);
 $or$cond = $17 & $19;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $20 = $0;
 $21 = ((($20)) + 404|0);
 $22 = HEAP32[$21>>2]|0;
 $crc = $22;
 while(1) {
  $23 = $2;
  $safe_length = $23;
  $24 = $safe_length;
  $25 = ($24|0)==(0);
  $$ = $25 ? -1 : $23;
  $safe_length = $$;
  $26 = $crc;
  $27 = $1;
  $28 = $safe_length;
  $29 = (_crc32($26,$27,$28)|0);
  $crc = $29;
  $30 = $safe_length;
  $31 = $1;
  $32 = (($31) + ($30)|0);
  $1 = $32;
  $33 = $safe_length;
  $34 = $2;
  $35 = (($34) - ($33))|0;
  $2 = $35;
  $36 = $2;
  $37 = ($36>>>0)>(0);
  if (!($37)) {
   break;
  }
 }
 $38 = $crc;
 $39 = $0;
 $40 = ((($39)) + 404|0);
 HEAP32[$40>>2] = $38;
 STACKTOP = sp;return;
}
function _png_user_version_check($png_ptr,$user_png_ver) {
 $png_ptr = $png_ptr|0;
 $user_png_ver = $user_png_ver|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $found_dots = 0, $i = 0, $m = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp + 24|0;
 $1 = $png_ptr;
 $2 = $user_png_ver;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 L1: do {
  if ($4) {
   $i = -1;
   $found_dots = 0;
   while(1) {
    $5 = $i;
    $6 = (($5) + 1)|0;
    $i = $6;
    $7 = $i;
    $8 = $2;
    $9 = (($8) + ($7)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10 << 24 >> 24;
    $12 = $i;
    $13 = (13207 + ($12)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    $16 = ($11|0)!=($15|0);
    if ($16) {
     $17 = $1;
     $18 = ((($17)) + 212|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $19 | 131072;
     HEAP32[$18>>2] = $20;
    }
    $21 = $i;
    $22 = $2;
    $23 = (($22) + ($21)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24 << 24 >> 24;
    $26 = ($25|0)==(46);
    if ($26) {
     $27 = $found_dots;
     $28 = (($27) + 1)|0;
     $found_dots = $28;
    }
    $29 = $found_dots;
    $30 = ($29|0)<(2);
    if (!($30)) {
     break L1;
    }
    $31 = $i;
    $32 = $2;
    $33 = (($32) + ($31)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = ($35|0)!=(0);
    if (!($36)) {
     break L1;
    }
    $37 = $i;
    $38 = (13207 + ($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
   }
  } else {
   $42 = $1;
   $43 = ((($42)) + 212|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 | 131072;
   HEAP32[$43>>2] = $45;
  }
 } while(0);
 $46 = $1;
 $47 = ((($46)) + 212|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & 131072;
 $50 = ($49|0)!=(0);
 if ($50) {
  $pos = 0;
  $51 = $pos;
  $52 = (_png_safecat($m,128,$51,13214)|0);
  $pos = $52;
  $53 = $pos;
  $54 = $2;
  $55 = (_png_safecat($m,128,$53,$54)|0);
  $pos = $55;
  $56 = $pos;
  $57 = (_png_safecat($m,128,$56,13245)|0);
  $pos = $57;
  $58 = $pos;
  $59 = (_png_safecat($m,128,$58,13207)|0);
  $pos = $59;
  $60 = $1;
  _png_warning($60,$m);
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 } else {
  $0 = 1;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _png_create_png_struct($user_png_ver,$error_ptr,$error_fn,$warn_fn,$mem_ptr,$malloc_fn,$free_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $$0 = 0, $$reg2mem16$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond18 = 0;
 var $cond19 = 0, $cond20 = 0, $cond21 = 0, $create_jmp_buf = 0, $create_struct = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $create_struct = sp + 156|0;
 $create_jmp_buf = sp;
 _memset(($create_struct|0),0,868)|0;
 $0 = ((($create_struct)) + 716|0);
 HEAP32[$0>>2] = 1000000;
 $1 = ((($create_struct)) + 720|0);
 HEAP32[$1>>2] = 1000000;
 $2 = ((($create_struct)) + 724|0);
 HEAP32[$2>>2] = 1000;
 $3 = ((($create_struct)) + 728|0);
 HEAP32[$3>>2] = 8000000;
 __THREW__ = 0;
 invoke_viiii(20,($create_struct|0),($mem_ptr|0),($malloc_fn|0),($free_fn|0));
 $4 = __THREW__; __THREW__ = 0;
 if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = (threwValue); } else { $5 = -1; };
 $6 = tempRet0;
 $cond = ($5|0)==(1);
 if ($cond) {
  $$reg2mem16$0 = $6;
 } else {
  __THREW__ = 0;
  invoke_viiii(21,($create_struct|0),($error_ptr|0),($error_fn|0),($warn_fn|0));
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond18 = ($8|0)==(1);
  if ($cond18) {
   $$reg2mem16$0 = $9;
  } else {
   _setjmpTable = _saveSetjmp($create_jmp_buf,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
   $12 = tempRet0;
   $cond19 = ($11|0)==(1);
   if ($cond19) {
    $$reg2mem16$0 = $12;
   } else {
    $$reg2mem16$0 = 0;
   }
  }
 }
 while(1) {
  $13 = ($$reg2mem16$0|0)!=(0);
  if ($13) {
   break;
  }
  $14 = ((($create_struct)) + 160|0);
  HEAP32[$14>>2] = $create_jmp_buf;
  $15 = ((($create_struct)) + 164|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($create_struct)) + 156|0);
  HEAP32[$16>>2] = 13;
  __THREW__ = 0;
  $17 = (invoke_iii(22,($create_struct|0),($user_png_ver|0))|0);
  $18 = __THREW__; __THREW__ = 0;
  if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
  $20 = tempRet0;
  $cond20 = ($19|0)==(1);
  if ($cond20) {
   $$reg2mem16$0 = $20;
   continue;
  }
  $21 = ($17|0)!=(0);
  if (!($21)) {
   break;
  }
  __THREW__ = 0;
  $22 = (invoke_iii(23,($create_struct|0),868)|0);
  $23 = __THREW__; __THREW__ = 0;
  if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = (threwValue); } else { $24 = -1; };
  $25 = tempRet0;
  $cond21 = ($24|0)==(1);
  if ($cond21) {
   $$reg2mem16$0 = $25;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $26 = ($22|0)!=(0|0);
  if ($26) {
   $27 = ((($create_struct)) + 224|0);
   $28 = ((($27)) + 32|0);
   HEAP32[$28>>2] = 24;
   $29 = ((($create_struct)) + 224|0);
   $30 = ((($29)) + 36|0);
   HEAP32[$30>>2] = 25;
   $31 = ((($create_struct)) + 224|0);
   $32 = ((($31)) + 40|0);
   HEAP32[$32>>2] = $22;
   $33 = ((($create_struct)) + 160|0);
   HEAP32[$33>>2] = 0;
   $34 = ((($create_struct)) + 164|0);
   HEAP32[$34>>2] = 0;
   $35 = ((($create_struct)) + 156|0);
   HEAP32[$35>>2] = 0;
   _memcpy(($22|0),($create_struct|0),868)|0;
   $$0 = $22;
   _free(_setjmpTable|0);
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$0|0);
}
function _png_create_info_struct($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 $4 = $1;
 $5 = (_png_malloc_base($4,268)|0);
 $info_ptr = $5;
 $6 = $info_ptr;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $info_ptr;
  _memset(($8|0),0,268)|0;
 }
 $9 = $info_ptr;
 $0 = $9;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _png_destroy_info_struct($png_ptr,$info_ptr_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr_ptr = $info_ptr_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr_ptr;
 $info_ptr = 0;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $info_ptr = $7;
 }
 $8 = $info_ptr;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $1;
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = $info_ptr;
 _png_free_data($11,$12,32767,-1);
 $13 = $info_ptr;
 _memset(($13|0),0,268)|0;
 $14 = $0;
 $15 = $info_ptr;
 _png_free($14,$15);
 STACKTOP = sp;return;
}
function _png_free_data($png_ptr,$info_ptr,$mask,$num) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $mask = $mask|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $i2 = 0, $i3 = 0, $or$cond = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $mask;
 $3 = $num;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 $6 = $1;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 136|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 do {
  if ($11) {
   $12 = $2;
   $13 = $12 & 16384;
   $14 = $1;
   $15 = ((($14)) + 232|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $13 & $16;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $3;
    $20 = ($19|0)!=(-1);
    if ($20) {
     $21 = $0;
     $22 = $3;
     $23 = $1;
     $24 = ((($23)) + 136|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($25) + (($22*28)|0)|0);
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     _png_free($21,$28);
     $29 = $3;
     $30 = $1;
     $31 = ((($30)) + 136|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (($32) + (($29*28)|0)|0);
     $34 = ((($33)) + 4|0);
     HEAP32[$34>>2] = 0;
     break;
    }
    $i = 0;
    while(1) {
     $35 = $i;
     $36 = $1;
     $37 = ((($36)) + 128|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($35|0)<($38|0);
     $40 = $0;
     if (!($39)) {
      break;
     }
     $41 = $i;
     $42 = $1;
     $43 = ((($42)) + 136|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (($44) + (($41*28)|0)|0);
     $46 = ((($45)) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     _png_free($40,$47);
     $48 = $i;
     $49 = (($48) + 1)|0;
     $i = $49;
    }
    $50 = $1;
    $51 = ((($50)) + 136|0);
    $52 = HEAP32[$51>>2]|0;
    _png_free($40,$52);
    $53 = $1;
    $54 = ((($53)) + 136|0);
    HEAP32[$54>>2] = 0;
    $55 = $1;
    $56 = ((($55)) + 128|0);
    HEAP32[$56>>2] = 0;
   }
  }
 } while(0);
 $57 = $2;
 $58 = $57 & 8192;
 $59 = $1;
 $60 = ((($59)) + 232|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $58 & $61;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $1;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & -17;
  HEAP32[$65>>2] = $67;
  $68 = $0;
  $69 = $1;
  $70 = ((($69)) + 156|0);
  $71 = HEAP32[$70>>2]|0;
  _png_free($68,$71);
  $72 = $1;
  $73 = ((($72)) + 156|0);
  HEAP32[$73>>2] = 0;
  $74 = $1;
  $75 = ((($74)) + 22|0);
  HEAP16[$75>>1] = 0;
 }
 $76 = $2;
 $77 = $76 & 256;
 $78 = $1;
 $79 = ((($78)) + 232|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $77 & $80;
 $82 = ($81|0)!=(0);
 if ($82) {
  $83 = $0;
  $84 = $1;
  $85 = ((($84)) + 256|0);
  $86 = HEAP32[$85>>2]|0;
  _png_free($83,$86);
  $87 = $0;
  $88 = $1;
  $89 = ((($88)) + 260|0);
  $90 = HEAP32[$89>>2]|0;
  _png_free($87,$90);
  $91 = $1;
  $92 = ((($91)) + 256|0);
  HEAP32[$92>>2] = 0;
  $93 = $1;
  $94 = ((($93)) + 260|0);
  HEAP32[$94>>2] = 0;
  $95 = $1;
  $96 = ((($95)) + 8|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $97 & -16385;
  HEAP32[$96>>2] = $98;
 }
 $99 = $2;
 $100 = $99 & 128;
 $101 = $1;
 $102 = ((($101)) + 232|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100 & $103;
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $0;
  $107 = $1;
  $108 = ((($107)) + 208|0);
  $109 = HEAP32[$108>>2]|0;
  _png_free($106,$109);
  $110 = $0;
  $111 = $1;
  $112 = ((($111)) + 220|0);
  $113 = HEAP32[$112>>2]|0;
  _png_free($110,$113);
  $114 = $1;
  $115 = ((($114)) + 208|0);
  HEAP32[$115>>2] = 0;
  $116 = $1;
  $117 = ((($116)) + 220|0);
  HEAP32[$117>>2] = 0;
  $118 = $1;
  $119 = ((($118)) + 224|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)!=(0|0);
  if ($121) {
   $i1 = 0;
   while(1) {
    $122 = $i1;
    $123 = $1;
    $124 = ((($123)) + 229|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = ($122|0)<($126|0);
    $128 = $0;
    if (!($127)) {
     break;
    }
    $129 = $i1;
    $130 = $1;
    $131 = ((($130)) + 224|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($129<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    _png_free($128,$134);
    $135 = $i1;
    $136 = (($135) + 1)|0;
    $i1 = $136;
   }
   $137 = $1;
   $138 = ((($137)) + 224|0);
   $139 = HEAP32[$138>>2]|0;
   _png_free($128,$139);
   $140 = $1;
   $141 = ((($140)) + 224|0);
   HEAP32[$141>>2] = 0;
  }
  $142 = $1;
  $143 = ((($142)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 & -1025;
  HEAP32[$143>>2] = $145;
 }
 $146 = $2;
 $147 = $146 & 16;
 $148 = $1;
 $149 = ((($148)) + 232|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $147 & $150;
 $152 = ($151|0)!=(0);
 if ($152) {
  $153 = $0;
  $154 = $1;
  $155 = ((($154)) + 116|0);
  $156 = HEAP32[$155>>2]|0;
  _png_free($153,$156);
  $157 = $0;
  $158 = $1;
  $159 = ((($158)) + 120|0);
  $160 = HEAP32[$159>>2]|0;
  _png_free($157,$160);
  $161 = $1;
  $162 = ((($161)) + 116|0);
  HEAP32[$162>>2] = 0;
  $163 = $1;
  $164 = ((($163)) + 120|0);
  HEAP32[$164>>2] = 0;
  $165 = $1;
  $166 = ((($165)) + 8|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $167 & -4097;
  HEAP32[$166>>2] = $168;
 }
 $169 = $1;
 $170 = ((($169)) + 244|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)!=(0|0);
 do {
  if ($172) {
   $173 = $2;
   $174 = $173 & 32;
   $175 = $1;
   $176 = ((($175)) + 232|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = $174 & $177;
   $179 = ($178|0)!=(0);
   if ($179) {
    $180 = $3;
    $181 = ($180|0)!=(-1);
    if ($181) {
     $182 = $0;
     $183 = $3;
     $184 = $1;
     $185 = ((($184)) + 244|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + ($183<<4)|0);
     $188 = HEAP32[$187>>2]|0;
     _png_free($182,$188);
     $189 = $0;
     $190 = $3;
     $191 = $1;
     $192 = ((($191)) + 244|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + ($190<<4)|0);
     $195 = ((($194)) + 8|0);
     $196 = HEAP32[$195>>2]|0;
     _png_free($189,$196);
     $197 = $3;
     $198 = $1;
     $199 = ((($198)) + 244|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = (($200) + ($197<<4)|0);
     HEAP32[$201>>2] = 0;
     $202 = $3;
     $203 = $1;
     $204 = ((($203)) + 244|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = (($205) + ($202<<4)|0);
     $207 = ((($206)) + 8|0);
     HEAP32[$207>>2] = 0;
     break;
    }
    $i2 = 0;
    while(1) {
     $208 = $i2;
     $209 = $1;
     $210 = ((($209)) + 248|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($208|0)<($211|0);
     $213 = $0;
     if (!($212)) {
      break;
     }
     $214 = $i2;
     $215 = $1;
     $216 = ((($215)) + 244|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = (($217) + ($214<<4)|0);
     $219 = HEAP32[$218>>2]|0;
     _png_free($213,$219);
     $220 = $0;
     $221 = $i2;
     $222 = $1;
     $223 = ((($222)) + 244|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($221<<4)|0);
     $226 = ((($225)) + 8|0);
     $227 = HEAP32[$226>>2]|0;
     _png_free($220,$227);
     $228 = $i2;
     $229 = (($228) + 1)|0;
     $i2 = $229;
    }
    $230 = $1;
    $231 = ((($230)) + 244|0);
    $232 = HEAP32[$231>>2]|0;
    _png_free($213,$232);
    $233 = $1;
    $234 = ((($233)) + 244|0);
    HEAP32[$234>>2] = 0;
    $235 = $1;
    $236 = ((($235)) + 248|0);
    HEAP32[$236>>2] = 0;
    $237 = $1;
    $238 = ((($237)) + 8|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8193;
    HEAP32[$238>>2] = $240;
   }
  }
 } while(0);
 $241 = $1;
 $242 = ((($241)) + 236|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)!=(0|0);
 do {
  if ($244) {
   $245 = $2;
   $246 = $245 & 512;
   $247 = $1;
   $248 = ((($247)) + 232|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $246 & $249;
   $251 = ($250|0)!=(0);
   if ($251) {
    $252 = $3;
    $253 = ($252|0)!=(-1);
    if ($253) {
     $254 = $0;
     $255 = $3;
     $256 = $1;
     $257 = ((($256)) + 236|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + (($255*20)|0)|0);
     $260 = ((($259)) + 8|0);
     $261 = HEAP32[$260>>2]|0;
     _png_free($254,$261);
     $262 = $3;
     $263 = $1;
     $264 = ((($263)) + 236|0);
     $265 = HEAP32[$264>>2]|0;
     $266 = (($265) + (($262*20)|0)|0);
     $267 = ((($266)) + 8|0);
     HEAP32[$267>>2] = 0;
     break;
    }
    $i3 = 0;
    while(1) {
     $268 = $i3;
     $269 = $1;
     $270 = ((($269)) + 240|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($268|0)<($271|0);
     $273 = $0;
     if (!($272)) {
      break;
     }
     $274 = $i3;
     $275 = $1;
     $276 = ((($275)) + 236|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = (($277) + (($274*20)|0)|0);
     $279 = ((($278)) + 8|0);
     $280 = HEAP32[$279>>2]|0;
     _png_free($273,$280);
     $281 = $i3;
     $282 = (($281) + 1)|0;
     $i3 = $282;
    }
    $283 = $1;
    $284 = ((($283)) + 236|0);
    $285 = HEAP32[$284>>2]|0;
    _png_free($273,$285);
    $286 = $1;
    $287 = ((($286)) + 236|0);
    HEAP32[$287>>2] = 0;
    $288 = $1;
    $289 = ((($288)) + 240|0);
    HEAP32[$289>>2] = 0;
   }
  }
 } while(0);
 $290 = $2;
 $291 = $290 & 8;
 $292 = $1;
 $293 = ((($292)) + 232|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = $291 & $294;
 $296 = ($295|0)!=(0);
 if ($296) {
  $297 = $0;
  $298 = $1;
  $299 = ((($298)) + 204|0);
  $300 = HEAP32[$299>>2]|0;
  _png_free($297,$300);
  $301 = $1;
  $302 = ((($301)) + 204|0);
  HEAP32[$302>>2] = 0;
  $303 = $1;
  $304 = ((($303)) + 8|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = $305 & -65;
  HEAP32[$304>>2] = $306;
 }
 $307 = $2;
 $308 = $307 & 4096;
 $309 = $1;
 $310 = ((($309)) + 232|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $308 & $311;
 $313 = ($312|0)!=(0);
 if ($313) {
  $314 = $0;
  $315 = $1;
  $316 = ((($315)) + 16|0);
  $317 = HEAP32[$316>>2]|0;
  _png_free($314,$317);
  $318 = $1;
  $319 = ((($318)) + 16|0);
  HEAP32[$319>>2] = 0;
  $320 = $1;
  $321 = ((($320)) + 8|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = $322 & -9;
  HEAP32[$321>>2] = $323;
  $324 = $1;
  $325 = ((($324)) + 20|0);
  HEAP16[$325>>1] = 0;
 }
 $326 = $2;
 $327 = $326 & 64;
 $328 = $1;
 $329 = ((($328)) + 232|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = $327 & $330;
 $332 = ($331|0)!=(0);
 if ($332) {
  $333 = $1;
  $334 = ((($333)) + 264|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = ($335|0)!=(0|0);
  if ($336) {
   $row = 0;
   while(1) {
    $337 = $row;
    $338 = $1;
    $339 = ((($338)) + 4|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = ($337>>>0)<($340>>>0);
    $342 = $0;
    if (!($341)) {
     break;
    }
    $343 = $row;
    $344 = $1;
    $345 = ((($344)) + 264|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = (($346) + ($343<<2)|0);
    $348 = HEAP32[$347>>2]|0;
    _png_free($342,$348);
    $349 = $row;
    $350 = (($349) + 1)|0;
    $row = $350;
   }
   $351 = $1;
   $352 = ((($351)) + 264|0);
   $353 = HEAP32[$352>>2]|0;
   _png_free($342,$353);
   $354 = $1;
   $355 = ((($354)) + 264|0);
   HEAP32[$355>>2] = 0;
  }
  $356 = $1;
  $357 = ((($356)) + 8|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = $358 & -32769;
  HEAP32[$357>>2] = $359;
 }
 $360 = $3;
 $361 = ($360|0)!=(-1);
 if ($361) {
  $362 = $2;
  $363 = $362 & -16929;
  $2 = $363;
 }
 $364 = $2;
 $365 = $364 ^ -1;
 $366 = $1;
 $367 = ((($366)) + 232|0);
 $368 = HEAP32[$367>>2]|0;
 $369 = $368 & $365;
 HEAP32[$367>>2] = $369;
 STACKTOP = sp;return;
}
function _png_get_io_ptr($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $0 = 0;
 } else {
  $4 = $1;
  $5 = ((($4)) + 188|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _png_handle_as_unknown($png_ptr,$chunk_name) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $p = 0, $p_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $chunk_name;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 $5 = $2;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  $7 = $1;
  $8 = ((($7)) + 660|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = $1;
   $12 = ((($11)) + 664|0);
   $13 = HEAP32[$12>>2]|0;
   $p_end = $13;
   $14 = $p_end;
   $15 = $1;
   $16 = ((($15)) + 660|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17*5)|0;
   $19 = (($14) + ($18)|0);
   $p = $19;
   while(1) {
    $20 = $p;
    $21 = ((($20)) + -5|0);
    $p = $21;
    $22 = $2;
    $23 = $p;
    $24 = (_memcmp($22,$23,4)|0);
    $25 = ($24|0)==(0);
    $26 = $p;
    if ($25) {
     label = 6;
     break;
    }
    $30 = $p_end;
    $31 = ($26>>>0)>($30>>>0);
    if (!($31)) {
     label = 8;
     break;
    }
   }
   if ((label|0) == 6) {
    $27 = ((($26)) + 4|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $0 = $29;
    $32 = $0;
    STACKTOP = sp;return ($32|0);
   }
   else if ((label|0) == 8) {
    $0 = 0;
    $32 = $0;
    STACKTOP = sp;return ($32|0);
   }
  }
 }
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _png_chunk_unknown_handling($png_ptr,$chunk_name) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $chunk_string = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $chunk_string = sp + 8|0;
 $0 = $png_ptr;
 $1 = $chunk_name;
 $2 = $1;
 $3 = $2 >>> 24;
 $4 = $3 & 255;
 $5 = $4&255;
 HEAP8[$chunk_string>>0] = $5;
 $6 = $1;
 $7 = $6 >>> 16;
 $8 = $7 & 255;
 $9 = $8&255;
 $10 = ((($chunk_string)) + 1|0);
 HEAP8[$10>>0] = $9;
 $11 = $1;
 $12 = $11 >>> 8;
 $13 = $12 & 255;
 $14 = $13&255;
 $15 = ((($chunk_string)) + 2|0);
 HEAP8[$15>>0] = $14;
 $16 = $1;
 $17 = $16 & 255;
 $18 = $17&255;
 $19 = ((($chunk_string)) + 3|0);
 HEAP8[$19>>0] = $18;
 $20 = ((($chunk_string)) + 4|0);
 HEAP8[$20>>0] = 0;
 $21 = $0;
 $22 = (_png_handle_as_unknown($21,$chunk_string)|0);
 STACKTOP = sp;return ($22|0);
}
function _png_zstream_error($png_ptr,$ret) {
 $png_ptr = $png_ptr|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ret;
 $2 = $0;
 $3 = ((($2)) + 224|0);
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if ($6) {
   $7 = $1;
   do {
    switch ($7|0) {
    case -7:  {
     $35 = $0;
     $36 = ((($35)) + 224|0);
     $37 = ((($36)) + 24|0);
     HEAP32[$37>>2] = 13422;
     break L1;
     break;
    }
    case 1:  {
     $11 = $0;
     $12 = ((($11)) + 224|0);
     $13 = ((($12)) + 24|0);
     HEAP32[$13>>2] = 13292;
     break L1;
     break;
    }
    case 2:  {
     $14 = $0;
     $15 = ((($14)) + 224|0);
     $16 = ((($15)) + 24|0);
     HEAP32[$16>>2] = 13320;
     break L1;
     break;
    }
    case -1:  {
     $17 = $0;
     $18 = ((($17)) + 224|0);
     $19 = ((($18)) + 24|0);
     HEAP32[$19>>2] = 13342;
     break L1;
     break;
    }
    case -2:  {
     $20 = $0;
     $21 = ((($20)) + 224|0);
     $22 = ((($21)) + 24|0);
     HEAP32[$22>>2] = 13356;
     break L1;
     break;
    }
    case -3:  {
     $23 = $0;
     $24 = ((($23)) + 224|0);
     $25 = ((($24)) + 24|0);
     HEAP32[$25>>2] = 13379;
     break L1;
     break;
    }
    case -4:  {
     $26 = $0;
     $27 = ((($26)) + 224|0);
     $28 = ((($27)) + 24|0);
     HEAP32[$28>>2] = 17084;
     break L1;
     break;
    }
    case -5:  {
     $29 = $0;
     $30 = ((($29)) + 224|0);
     $31 = ((($30)) + 24|0);
     HEAP32[$31>>2] = 16620;
     break L1;
     break;
    }
    case -6:  {
     $32 = $0;
     $33 = ((($32)) + 224|0);
     $34 = ((($33)) + 24|0);
     HEAP32[$34>>2] = 13397;
     break L1;
     break;
    }
    default: {
     $8 = $0;
     $9 = ((($8)) + 224|0);
     $10 = ((($9)) + 24|0);
     HEAP32[$10>>2] = 13264;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _png_colorspace_set_gamma($png_ptr,$colorspace,$gAMA) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $gAMA = $gAMA|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $errmsg = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $colorspace;
 $2 = $gAMA;
 $3 = $2;
 $4 = ($3|0)<(16);
 $5 = $2;
 $6 = ($5|0)>(625000000);
 $or$cond = $4 | $6;
 do {
  if ($or$cond) {
   $errmsg = 13445;
  } else {
   $7 = $0;
   $8 = ((($7)) + 208|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 32768;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = $1;
    $13 = ((($12)) + 74|0);
    $14 = HEAP16[$13>>1]|0;
    $15 = $14&65535;
    $16 = $15 & 8;
    $17 = ($16|0)!=(0);
    if ($17) {
     $errmsg = 16345;
     break;
    }
   }
   $18 = $1;
   $19 = ((($18)) + 74|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = $21 & 32768;
   $23 = ($22|0)!=(0);
   if ($23) {
    STACKTOP = sp;return;
   }
   $24 = $0;
   $25 = $1;
   $26 = $2;
   $27 = (_png_colorspace_check_gamma($24,$25,$26,1)|0);
   $28 = ($27|0)!=(0);
   if (!($28)) {
    STACKTOP = sp;return;
   }
   $29 = $2;
   $30 = $1;
   HEAP32[$30>>2] = $29;
   $31 = $1;
   $32 = ((($31)) + 74|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33&65535;
   $35 = $34 | 9;
   $36 = $35&65535;
   HEAP16[$32>>1] = $36;
   STACKTOP = sp;return;
  }
 } while(0);
 $37 = $1;
 $38 = ((($37)) + 74|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = $40 | 32768;
 $42 = $41&65535;
 HEAP16[$38>>1] = $42;
 $43 = $0;
 $44 = $errmsg;
 _png_chunk_report($43,$44,1);
 STACKTOP = sp;return;
}
function _png_colorspace_check_gamma($png_ptr,$colorspace,$gAMA,$from) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $gAMA = $gAMA|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gtest = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gtest = sp;
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $gAMA;
 $4 = $from;
 $5 = $2;
 $6 = ((($5)) + 74|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = $8 & 1;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $2;
   $12 = HEAP32[$11>>2]|0;
   $13 = $3;
   $14 = (_png_muldiv($gtest,$12,100000,$13)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = HEAP32[$gtest>>2]|0;
    $17 = (_png_gamma_significant($16)|0);
    $18 = ($17|0)!=(0);
    if (!($18)) {
     break;
    }
   }
   $19 = $2;
   $20 = ((($19)) + 74|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21&65535;
   $23 = $22 & 32;
   $24 = ($23|0)!=(0);
   $25 = $4;
   $26 = ($25|0)==(2);
   $or$cond = $24 | $26;
   $27 = $1;
   if ($or$cond) {
    _png_chunk_report($27,13470,2);
    $28 = $4;
    $29 = ($28|0)==(2);
    $30 = $29&1;
    $0 = $30;
    $34 = $0;
    STACKTOP = sp;return ($34|0);
   } else {
    _png_chunk_report($27,13502,0);
    $31 = $4;
    $32 = ($31|0)==(1);
    $33 = $32&1;
    $0 = $33;
    $34 = $0;
    STACKTOP = sp;return ($34|0);
   }
  }
 } while(0);
 $0 = 1;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _png_muldiv($res,$a,$times,$divisor) {
 $res = $res|0;
 $a = $a|0;
 $times = $times|0;
 $divisor = $divisor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $res;
 $2 = $a;
 $3 = $times;
 $4 = $divisor;
 $5 = $4;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = ($7|0)==(0);
  $9 = $3;
  $10 = ($9|0)==(0);
  $or$cond = $8 | $10;
  if ($or$cond) {
   $11 = $1;
   HEAP32[$11>>2] = 0;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
  $12 = $2;
  $13 = (+($12|0));
  $r = $13;
  $14 = $3;
  $15 = (+($14|0));
  $16 = $r;
  $17 = $16 * $15;
  $r = $17;
  $18 = $4;
  $19 = (+($18|0));
  $20 = $r;
  $21 = $20 / $19;
  $r = $21;
  $22 = $r;
  $23 = $22 + 0.5;
  $24 = (+Math_floor((+$23)));
  $r = $24;
  $25 = $r;
  $26 = $25 <= 2147483647.0;
  $27 = $r;
  $28 = $27 >= -2147483648.0;
  $or$cond3 = $26 & $28;
  if ($or$cond3) {
   $29 = $r;
   $30 = (~~(($29)));
   $31 = $1;
   HEAP32[$31>>2] = $30;
   $0 = 1;
   $32 = $0;
   STACKTOP = sp;return ($32|0);
  }
 }
 $0 = 0;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _png_gamma_significant($gamma_val) {
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $gamma_val;
 $1 = $0;
 $2 = ($1|0)<(95000);
 $3 = $0;
 $4 = ($3|0)>(105000);
 $5 = $2 ? 1 : $4;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _png_colorspace_sync_info($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $1;
 $3 = ((($2)) + 40|0);
 $4 = ((($3)) + 74|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 & 32768;
 $8 = ($7|0)!=(0);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & -6150;
  HEAP32[$10>>2] = $12;
  $13 = $0;
  $14 = $1;
  _png_free_data($13,$14,16,-1);
  STACKTOP = sp;return;
 }
 $15 = ((($9)) + 40|0);
 $16 = ((($15)) + 74|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = $18 & 128;
 $20 = ($19|0)!=(0);
 $21 = $1;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 if ($20) {
  $24 = $23 | 2048;
  HEAP32[$22>>2] = $24;
 } else {
  $25 = $23 & -2049;
  HEAP32[$22>>2] = $25;
 }
 $26 = $1;
 $27 = ((($26)) + 40|0);
 $28 = ((($27)) + 74|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = $30 & 2;
 $32 = ($31|0)!=(0);
 $33 = $1;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 if ($32) {
  $36 = $35 | 4;
  HEAP32[$34>>2] = $36;
 } else {
  $37 = $35 & -5;
  HEAP32[$34>>2] = $37;
 }
 $38 = $1;
 $39 = ((($38)) + 40|0);
 $40 = ((($39)) + 74|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41&65535;
 $43 = $42 & 1;
 $44 = ($43|0)!=(0);
 $45 = $1;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 if ($44) {
  $48 = $47 | 1;
  HEAP32[$46>>2] = $48;
  STACKTOP = sp;return;
 } else {
  $49 = $47 & -2;
  HEAP32[$46>>2] = $49;
  STACKTOP = sp;return;
 }
}
function _png_colorspace_sync($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 40|0);
 $6 = $0;
 $7 = ((($6)) + 792|0);
 dest=$5; src=$7; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = $0;
 $9 = $1;
 _png_colorspace_sync_info($8,$9);
 STACKTOP = sp;return;
}
function _png_colorspace_set_chromaticities($png_ptr,$colorspace,$xy,$preferred) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $xy = $xy|0;
 $preferred = $preferred|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $XYZ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $XYZ = sp;
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $xy;
 $4 = $preferred;
 $5 = $3;
 $6 = (_png_colorspace_check_xy($XYZ,$5)|0);
 switch ($6|0) {
 case 0:  {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = $4;
  $11 = (_png_colorspace_set_xy_and_XYZ($7,$8,$9,$XYZ,$10)|0);
  $0 = $11;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
  break;
 }
 case 1:  {
  $12 = $2;
  $13 = ((($12)) + 74|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = $15 | 32768;
  $17 = $16&65535;
  HEAP16[$13>>1] = $17;
  $18 = $1;
  _png_benign_error($18,13573);
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
  break;
 }
 default: {
  $19 = $2;
  $20 = ((($19)) + 74|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $22 | 32768;
  $24 = $23&65535;
  HEAP16[$20>>1] = $24;
  $25 = $1;
  _png_error($25,13596);
  // unreachable;
 }
 }
 return (0)|0;
}
function _png_colorspace_check_xy($XYZ,$xy) {
 $XYZ = $XYZ|0;
 $xy = $xy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $xy_test = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xy_test = sp;
 $1 = $XYZ;
 $2 = $xy;
 $3 = $1;
 $4 = $2;
 $5 = (_png_XYZ_from_xy($3,$4)|0);
 $result = $5;
 $6 = $result;
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = $result;
   $0 = $8;
  } else {
   $9 = $1;
   $10 = (_png_xy_from_XYZ($xy_test,$9)|0);
   $result = $10;
   $11 = $result;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = $result;
    $0 = $13;
    break;
   }
   $14 = $2;
   $15 = (_png_colorspace_endpoints_match($14,$xy_test,5)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $0 = 0;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _png_XYZ_from_xy($XYZ,$xy) {
 $XYZ = $XYZ|0;
 $xy = $xy|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $blue_scale = 0, $denominator = 0, $green_inverse = 0, $left = 0, $red_inverse = 0, $right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $red_inverse = sp + 20|0;
 $green_inverse = sp + 16|0;
 $left = sp + 8|0;
 $right = sp + 4|0;
 $1 = $XYZ;
 $2 = $xy;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(100000);
  if (!($8)) {
   $9 = $2;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)<(0);
   if (!($12)) {
    $13 = $2;
    $14 = ((($13)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $2;
    $17 = HEAP32[$16>>2]|0;
    $18 = (100000 - ($17))|0;
    $19 = ($15|0)>($18|0);
    if (!($19)) {
     $20 = $2;
     $21 = ((($20)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)<(0);
     if (!($23)) {
      $24 = $2;
      $25 = ((($24)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)>(100000);
      if (!($27)) {
       $28 = $2;
       $29 = ((($28)) + 12|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)<(0);
       if (!($31)) {
        $32 = $2;
        $33 = ((($32)) + 12|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = $2;
        $36 = ((($35)) + 8|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (100000 - ($37))|0;
        $39 = ($34|0)>($38|0);
        if (!($39)) {
         $40 = $2;
         $41 = ((($40)) + 16|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = ($42|0)<(0);
         if (!($43)) {
          $44 = $2;
          $45 = ((($44)) + 16|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = ($46|0)>(100000);
          if (!($47)) {
           $48 = $2;
           $49 = ((($48)) + 20|0);
           $50 = HEAP32[$49>>2]|0;
           $51 = ($50|0)<(0);
           if (!($51)) {
            $52 = $2;
            $53 = ((($52)) + 20|0);
            $54 = HEAP32[$53>>2]|0;
            $55 = $2;
            $56 = ((($55)) + 16|0);
            $57 = HEAP32[$56>>2]|0;
            $58 = (100000 - ($57))|0;
            $59 = ($54|0)>($58|0);
            if (!($59)) {
             $60 = $2;
             $61 = ((($60)) + 24|0);
             $62 = HEAP32[$61>>2]|0;
             $63 = ($62|0)<(0);
             do {
              if (!($63)) {
               $64 = $2;
               $65 = ((($64)) + 24|0);
               $66 = HEAP32[$65>>2]|0;
               $67 = ($66|0)>(100000);
               if ($67) {
                break;
               }
               $68 = $2;
               $69 = ((($68)) + 28|0);
               $70 = HEAP32[$69>>2]|0;
               $71 = ($70|0)<(5);
               do {
                if (!($71)) {
                 $72 = $2;
                 $73 = ((($72)) + 28|0);
                 $74 = HEAP32[$73>>2]|0;
                 $75 = $2;
                 $76 = ((($75)) + 24|0);
                 $77 = HEAP32[$76>>2]|0;
                 $78 = (100000 - ($77))|0;
                 $79 = ($74|0)>($78|0);
                 if ($79) {
                  break;
                 }
                 $80 = $2;
                 $81 = ((($80)) + 8|0);
                 $82 = HEAP32[$81>>2]|0;
                 $83 = $2;
                 $84 = ((($83)) + 16|0);
                 $85 = HEAP32[$84>>2]|0;
                 $86 = (($82) - ($85))|0;
                 $87 = $2;
                 $88 = ((($87)) + 4|0);
                 $89 = HEAP32[$88>>2]|0;
                 $90 = $2;
                 $91 = ((($90)) + 20|0);
                 $92 = HEAP32[$91>>2]|0;
                 $93 = (($89) - ($92))|0;
                 $94 = (_png_muldiv($left,$86,$93,7)|0);
                 $95 = ($94|0)==(0);
                 if ($95) {
                  $0 = 2;
                  $301 = $0;
                  STACKTOP = sp;return ($301|0);
                 }
                 $96 = $2;
                 $97 = ((($96)) + 12|0);
                 $98 = HEAP32[$97>>2]|0;
                 $99 = $2;
                 $100 = ((($99)) + 20|0);
                 $101 = HEAP32[$100>>2]|0;
                 $102 = (($98) - ($101))|0;
                 $103 = $2;
                 $104 = HEAP32[$103>>2]|0;
                 $105 = $2;
                 $106 = ((($105)) + 16|0);
                 $107 = HEAP32[$106>>2]|0;
                 $108 = (($104) - ($107))|0;
                 $109 = (_png_muldiv($right,$102,$108,7)|0);
                 $110 = ($109|0)==(0);
                 if ($110) {
                  $0 = 2;
                  $301 = $0;
                  STACKTOP = sp;return ($301|0);
                 }
                 $111 = HEAP32[$left>>2]|0;
                 $112 = HEAP32[$right>>2]|0;
                 $113 = (($111) - ($112))|0;
                 $denominator = $113;
                 $114 = $2;
                 $115 = ((($114)) + 8|0);
                 $116 = HEAP32[$115>>2]|0;
                 $117 = $2;
                 $118 = ((($117)) + 16|0);
                 $119 = HEAP32[$118>>2]|0;
                 $120 = (($116) - ($119))|0;
                 $121 = $2;
                 $122 = ((($121)) + 28|0);
                 $123 = HEAP32[$122>>2]|0;
                 $124 = $2;
                 $125 = ((($124)) + 20|0);
                 $126 = HEAP32[$125>>2]|0;
                 $127 = (($123) - ($126))|0;
                 $128 = (_png_muldiv($left,$120,$127,7)|0);
                 $129 = ($128|0)==(0);
                 if ($129) {
                  $0 = 2;
                  $301 = $0;
                  STACKTOP = sp;return ($301|0);
                 }
                 $130 = $2;
                 $131 = ((($130)) + 12|0);
                 $132 = HEAP32[$131>>2]|0;
                 $133 = $2;
                 $134 = ((($133)) + 20|0);
                 $135 = HEAP32[$134>>2]|0;
                 $136 = (($132) - ($135))|0;
                 $137 = $2;
                 $138 = ((($137)) + 24|0);
                 $139 = HEAP32[$138>>2]|0;
                 $140 = $2;
                 $141 = ((($140)) + 16|0);
                 $142 = HEAP32[$141>>2]|0;
                 $143 = (($139) - ($142))|0;
                 $144 = (_png_muldiv($right,$136,$143,7)|0);
                 $145 = ($144|0)==(0);
                 if ($145) {
                  $0 = 2;
                  $301 = $0;
                  STACKTOP = sp;return ($301|0);
                 }
                 $146 = $2;
                 $147 = ((($146)) + 28|0);
                 $148 = HEAP32[$147>>2]|0;
                 $149 = $denominator;
                 $150 = HEAP32[$left>>2]|0;
                 $151 = HEAP32[$right>>2]|0;
                 $152 = (($150) - ($151))|0;
                 $153 = (_png_muldiv($red_inverse,$148,$149,$152)|0);
                 $154 = ($153|0)==(0);
                 do {
                  if (!($154)) {
                   $155 = HEAP32[$red_inverse>>2]|0;
                   $156 = $2;
                   $157 = ((($156)) + 28|0);
                   $158 = HEAP32[$157>>2]|0;
                   $159 = ($155|0)<=($158|0);
                   if ($159) {
                    break;
                   }
                   $160 = $2;
                   $161 = ((($160)) + 4|0);
                   $162 = HEAP32[$161>>2]|0;
                   $163 = $2;
                   $164 = ((($163)) + 20|0);
                   $165 = HEAP32[$164>>2]|0;
                   $166 = (($162) - ($165))|0;
                   $167 = $2;
                   $168 = ((($167)) + 24|0);
                   $169 = HEAP32[$168>>2]|0;
                   $170 = $2;
                   $171 = ((($170)) + 16|0);
                   $172 = HEAP32[$171>>2]|0;
                   $173 = (($169) - ($172))|0;
                   $174 = (_png_muldiv($left,$166,$173,7)|0);
                   $175 = ($174|0)==(0);
                   if ($175) {
                    $0 = 2;
                    $301 = $0;
                    STACKTOP = sp;return ($301|0);
                   }
                   $176 = $2;
                   $177 = HEAP32[$176>>2]|0;
                   $178 = $2;
                   $179 = ((($178)) + 16|0);
                   $180 = HEAP32[$179>>2]|0;
                   $181 = (($177) - ($180))|0;
                   $182 = $2;
                   $183 = ((($182)) + 28|0);
                   $184 = HEAP32[$183>>2]|0;
                   $185 = $2;
                   $186 = ((($185)) + 20|0);
                   $187 = HEAP32[$186>>2]|0;
                   $188 = (($184) - ($187))|0;
                   $189 = (_png_muldiv($right,$181,$188,7)|0);
                   $190 = ($189|0)==(0);
                   if ($190) {
                    $0 = 2;
                    $301 = $0;
                    STACKTOP = sp;return ($301|0);
                   }
                   $191 = $2;
                   $192 = ((($191)) + 28|0);
                   $193 = HEAP32[$192>>2]|0;
                   $194 = $denominator;
                   $195 = HEAP32[$left>>2]|0;
                   $196 = HEAP32[$right>>2]|0;
                   $197 = (($195) - ($196))|0;
                   $198 = (_png_muldiv($green_inverse,$193,$194,$197)|0);
                   $199 = ($198|0)==(0);
                   do {
                    if (!($199)) {
                     $200 = HEAP32[$green_inverse>>2]|0;
                     $201 = $2;
                     $202 = ((($201)) + 28|0);
                     $203 = HEAP32[$202>>2]|0;
                     $204 = ($200|0)<=($203|0);
                     if ($204) {
                      break;
                     }
                     $205 = $2;
                     $206 = ((($205)) + 28|0);
                     $207 = HEAP32[$206>>2]|0;
                     $208 = (_png_reciprocal($207)|0);
                     $209 = HEAP32[$red_inverse>>2]|0;
                     $210 = (_png_reciprocal($209)|0);
                     $211 = (($208) - ($210))|0;
                     $212 = HEAP32[$green_inverse>>2]|0;
                     $213 = (_png_reciprocal($212)|0);
                     $214 = (($211) - ($213))|0;
                     $blue_scale = $214;
                     $215 = $blue_scale;
                     $216 = ($215|0)<=(0);
                     if ($216) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $217 = $1;
                     $218 = $2;
                     $219 = HEAP32[$218>>2]|0;
                     $220 = HEAP32[$red_inverse>>2]|0;
                     $221 = (_png_muldiv($217,$219,100000,$220)|0);
                     $222 = ($221|0)==(0);
                     if ($222) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $223 = $1;
                     $224 = ((($223)) + 4|0);
                     $225 = $2;
                     $226 = ((($225)) + 4|0);
                     $227 = HEAP32[$226>>2]|0;
                     $228 = HEAP32[$red_inverse>>2]|0;
                     $229 = (_png_muldiv($224,$227,100000,$228)|0);
                     $230 = ($229|0)==(0);
                     if ($230) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $231 = $1;
                     $232 = ((($231)) + 8|0);
                     $233 = $2;
                     $234 = HEAP32[$233>>2]|0;
                     $235 = (100000 - ($234))|0;
                     $236 = $2;
                     $237 = ((($236)) + 4|0);
                     $238 = HEAP32[$237>>2]|0;
                     $239 = (($235) - ($238))|0;
                     $240 = HEAP32[$red_inverse>>2]|0;
                     $241 = (_png_muldiv($232,$239,100000,$240)|0);
                     $242 = ($241|0)==(0);
                     if ($242) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $243 = $1;
                     $244 = ((($243)) + 12|0);
                     $245 = $2;
                     $246 = ((($245)) + 8|0);
                     $247 = HEAP32[$246>>2]|0;
                     $248 = HEAP32[$green_inverse>>2]|0;
                     $249 = (_png_muldiv($244,$247,100000,$248)|0);
                     $250 = ($249|0)==(0);
                     if ($250) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $251 = $1;
                     $252 = ((($251)) + 16|0);
                     $253 = $2;
                     $254 = ((($253)) + 12|0);
                     $255 = HEAP32[$254>>2]|0;
                     $256 = HEAP32[$green_inverse>>2]|0;
                     $257 = (_png_muldiv($252,$255,100000,$256)|0);
                     $258 = ($257|0)==(0);
                     if ($258) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $259 = $1;
                     $260 = ((($259)) + 20|0);
                     $261 = $2;
                     $262 = ((($261)) + 8|0);
                     $263 = HEAP32[$262>>2]|0;
                     $264 = (100000 - ($263))|0;
                     $265 = $2;
                     $266 = ((($265)) + 12|0);
                     $267 = HEAP32[$266>>2]|0;
                     $268 = (($264) - ($267))|0;
                     $269 = HEAP32[$green_inverse>>2]|0;
                     $270 = (_png_muldiv($260,$268,100000,$269)|0);
                     $271 = ($270|0)==(0);
                     if ($271) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $272 = $1;
                     $273 = ((($272)) + 24|0);
                     $274 = $2;
                     $275 = ((($274)) + 16|0);
                     $276 = HEAP32[$275>>2]|0;
                     $277 = $blue_scale;
                     $278 = (_png_muldiv($273,$276,$277,100000)|0);
                     $279 = ($278|0)==(0);
                     if ($279) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $280 = $1;
                     $281 = ((($280)) + 28|0);
                     $282 = $2;
                     $283 = ((($282)) + 20|0);
                     $284 = HEAP32[$283>>2]|0;
                     $285 = $blue_scale;
                     $286 = (_png_muldiv($281,$284,$285,100000)|0);
                     $287 = ($286|0)==(0);
                     if ($287) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                     $288 = $1;
                     $289 = ((($288)) + 32|0);
                     $290 = $2;
                     $291 = ((($290)) + 16|0);
                     $292 = HEAP32[$291>>2]|0;
                     $293 = (100000 - ($292))|0;
                     $294 = $2;
                     $295 = ((($294)) + 20|0);
                     $296 = HEAP32[$295>>2]|0;
                     $297 = (($293) - ($296))|0;
                     $298 = $blue_scale;
                     $299 = (_png_muldiv($289,$297,$298,100000)|0);
                     $300 = ($299|0)==(0);
                     if ($300) {
                      $0 = 1;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     } else {
                      $0 = 0;
                      $301 = $0;
                      STACKTOP = sp;return ($301|0);
                     }
                    }
                   } while(0);
                   $0 = 1;
                   $301 = $0;
                   STACKTOP = sp;return ($301|0);
                  }
                 } while(0);
                 $0 = 1;
                 $301 = $0;
                 STACKTOP = sp;return ($301|0);
                }
               } while(0);
               $0 = 1;
               $301 = $0;
               STACKTOP = sp;return ($301|0);
              }
             } while(0);
             $0 = 1;
             $301 = $0;
             STACKTOP = sp;return ($301|0);
            }
           }
           $0 = 1;
           $301 = $0;
           STACKTOP = sp;return ($301|0);
          }
         }
         $0 = 1;
         $301 = $0;
         STACKTOP = sp;return ($301|0);
        }
       }
       $0 = 1;
       $301 = $0;
       STACKTOP = sp;return ($301|0);
      }
     }
     $0 = 1;
     $301 = $0;
     STACKTOP = sp;return ($301|0);
    }
   }
   $0 = 1;
   $301 = $0;
   STACKTOP = sp;return ($301|0);
  }
 }
 $0 = 1;
 $301 = $0;
 STACKTOP = sp;return ($301|0);
}
function _png_reciprocal($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $1;
 $3 = (+($2|0));
 $4 = 1.0E+10 / $3;
 $5 = $4 + 0.5;
 $6 = (+Math_floor((+$5)));
 $r = $6;
 $7 = $r;
 $8 = $7 <= 2147483647.0;
 $9 = $r;
 $10 = $9 >= -2147483648.0;
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $r;
  $12 = (~~(($11)));
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _png_xy_from_XYZ($xy,$XYZ) {
 $xy = $xy|0;
 $XYZ = $XYZ|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $dwhite = 0, $whiteX = 0, $whiteY = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xy;
 $2 = $XYZ;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($7))|0;
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) + ($11))|0;
 $d = $12;
 $13 = $1;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $d;
 $17 = (_png_muldiv($13,$15,100000,$16)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = $2;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $d;
 $25 = (_png_muldiv($20,$23,100000,$24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $27 = $d;
 $dwhite = $27;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $whiteX = $29;
 $30 = $2;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $whiteY = $32;
 $33 = $2;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($35) + ($38))|0;
 $40 = $2;
 $41 = ((($40)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($39) + ($42))|0;
 $d = $43;
 $44 = $1;
 $45 = ((($44)) + 8|0);
 $46 = $2;
 $47 = ((($46)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $d;
 $50 = (_png_muldiv($45,$48,100000,$49)|0);
 $51 = ($50|0)==(0);
 if ($51) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $52 = $1;
 $53 = ((($52)) + 12|0);
 $54 = $2;
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $d;
 $58 = (_png_muldiv($53,$56,100000,$57)|0);
 $59 = ($58|0)==(0);
 if ($59) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $60 = $d;
 $61 = $dwhite;
 $62 = (($61) + ($60))|0;
 $dwhite = $62;
 $63 = $2;
 $64 = ((($63)) + 12|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $whiteX;
 $67 = (($66) + ($65))|0;
 $whiteX = $67;
 $68 = $2;
 $69 = ((($68)) + 16|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $whiteY;
 $72 = (($71) + ($70))|0;
 $whiteY = $72;
 $73 = $2;
 $74 = ((($73)) + 24|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $2;
 $77 = ((($76)) + 28|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($75) + ($78))|0;
 $80 = $2;
 $81 = ((($80)) + 32|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($79) + ($82))|0;
 $d = $83;
 $84 = $1;
 $85 = ((($84)) + 16|0);
 $86 = $2;
 $87 = ((($86)) + 24|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $d;
 $90 = (_png_muldiv($85,$88,100000,$89)|0);
 $91 = ($90|0)==(0);
 if ($91) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $92 = $1;
 $93 = ((($92)) + 20|0);
 $94 = $2;
 $95 = ((($94)) + 28|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $d;
 $98 = (_png_muldiv($93,$96,100000,$97)|0);
 $99 = ($98|0)==(0);
 if ($99) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $100 = $d;
 $101 = $dwhite;
 $102 = (($101) + ($100))|0;
 $dwhite = $102;
 $103 = $2;
 $104 = ((($103)) + 24|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $whiteX;
 $107 = (($106) + ($105))|0;
 $whiteX = $107;
 $108 = $2;
 $109 = ((($108)) + 28|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $whiteY;
 $112 = (($111) + ($110))|0;
 $whiteY = $112;
 $113 = $1;
 $114 = ((($113)) + 24|0);
 $115 = $whiteX;
 $116 = $dwhite;
 $117 = (_png_muldiv($114,$115,100000,$116)|0);
 $118 = ($117|0)==(0);
 if ($118) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 $119 = $1;
 $120 = ((($119)) + 28|0);
 $121 = $whiteY;
 $122 = $dwhite;
 $123 = (_png_muldiv($120,$121,100000,$122)|0);
 $124 = ($123|0)==(0);
 if ($124) {
  $0 = 1;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 } else {
  $0 = 0;
  $125 = $0;
  STACKTOP = sp;return ($125|0);
 }
 return (0)|0;
}
function _png_colorspace_endpoints_match($xy1,$xy2,$delta) {
 $xy1 = $xy1|0;
 $xy2 = $xy2|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $xy1;
 $2 = $xy2;
 $3 = $delta;
 $4 = $1;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = (($9) - ($10))|0;
 $12 = ($6|0)<($11|0);
 if (!($12)) {
  $13 = $1;
  $14 = ((($13)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = (($18) + ($19))|0;
  $21 = ($15|0)>($20|0);
  if (!($21)) {
   $22 = $1;
   $23 = ((($22)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $2;
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $3;
   $29 = (($27) - ($28))|0;
   $30 = ($24|0)<($29|0);
   if (!($30)) {
    $31 = $1;
    $32 = ((($31)) + 28|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $2;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $3;
    $38 = (($36) + ($37))|0;
    $39 = ($33|0)>($38|0);
    if (!($39)) {
     $40 = $1;
     $41 = HEAP32[$40>>2]|0;
     $42 = $2;
     $43 = HEAP32[$42>>2]|0;
     $44 = $3;
     $45 = (($43) - ($44))|0;
     $46 = ($41|0)<($45|0);
     if (!($46)) {
      $47 = $1;
      $48 = HEAP32[$47>>2]|0;
      $49 = $2;
      $50 = HEAP32[$49>>2]|0;
      $51 = $3;
      $52 = (($50) + ($51))|0;
      $53 = ($48|0)>($52|0);
      if (!($53)) {
       $54 = $1;
       $55 = ((($54)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = $2;
       $58 = ((($57)) + 4|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = $3;
       $61 = (($59) - ($60))|0;
       $62 = ($56|0)<($61|0);
       if (!($62)) {
        $63 = $1;
        $64 = ((($63)) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = $2;
        $67 = ((($66)) + 4|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = $3;
        $70 = (($68) + ($69))|0;
        $71 = ($65|0)>($70|0);
        if (!($71)) {
         $72 = $1;
         $73 = ((($72)) + 8|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = $2;
         $76 = ((($75)) + 8|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = $3;
         $79 = (($77) - ($78))|0;
         $80 = ($74|0)<($79|0);
         if (!($80)) {
          $81 = $1;
          $82 = ((($81)) + 8|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = $2;
          $85 = ((($84)) + 8|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = $3;
          $88 = (($86) + ($87))|0;
          $89 = ($83|0)>($88|0);
          if (!($89)) {
           $90 = $1;
           $91 = ((($90)) + 12|0);
           $92 = HEAP32[$91>>2]|0;
           $93 = $2;
           $94 = ((($93)) + 12|0);
           $95 = HEAP32[$94>>2]|0;
           $96 = $3;
           $97 = (($95) - ($96))|0;
           $98 = ($92|0)<($97|0);
           if (!($98)) {
            $99 = $1;
            $100 = ((($99)) + 12|0);
            $101 = HEAP32[$100>>2]|0;
            $102 = $2;
            $103 = ((($102)) + 12|0);
            $104 = HEAP32[$103>>2]|0;
            $105 = $3;
            $106 = (($104) + ($105))|0;
            $107 = ($101|0)>($106|0);
            if (!($107)) {
             $108 = $1;
             $109 = ((($108)) + 16|0);
             $110 = HEAP32[$109>>2]|0;
             $111 = $2;
             $112 = ((($111)) + 16|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = $3;
             $115 = (($113) - ($114))|0;
             $116 = ($110|0)<($115|0);
             if (!($116)) {
              $117 = $1;
              $118 = ((($117)) + 16|0);
              $119 = HEAP32[$118>>2]|0;
              $120 = $2;
              $121 = ((($120)) + 16|0);
              $122 = HEAP32[$121>>2]|0;
              $123 = $3;
              $124 = (($122) + ($123))|0;
              $125 = ($119|0)>($124|0);
              if (!($125)) {
               $126 = $1;
               $127 = ((($126)) + 20|0);
               $128 = HEAP32[$127>>2]|0;
               $129 = $2;
               $130 = ((($129)) + 20|0);
               $131 = HEAP32[$130>>2]|0;
               $132 = $3;
               $133 = (($131) - ($132))|0;
               $134 = ($128|0)<($133|0);
               if (!($134)) {
                $135 = $1;
                $136 = ((($135)) + 20|0);
                $137 = HEAP32[$136>>2]|0;
                $138 = $2;
                $139 = ((($138)) + 20|0);
                $140 = HEAP32[$139>>2]|0;
                $141 = $3;
                $142 = (($140) + ($141))|0;
                $143 = ($137|0)>($142|0);
                if (!($143)) {
                 $0 = 1;
                 $144 = $0;
                 STACKTOP = sp;return ($144|0);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _png_colorspace_set_xy_and_XYZ($png_ptr,$colorspace,$xy,$XYZ,$preferred) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $xy = $xy|0;
 $XYZ = $XYZ|0;
 $preferred = $preferred|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $xy;
 $4 = $XYZ;
 $5 = $preferred;
 $6 = $2;
 $7 = ((($6)) + 74|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = $9 & 32768;
 $11 = ($10|0)!=(0);
 if ($11) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;return ($57|0);
 }
 $12 = $5;
 $13 = ($12|0)<(2);
 if ($13) {
  $14 = $2;
  $15 = ((($14)) + 74|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16&65535;
  $18 = $17 & 2;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $3;
   $21 = $2;
   $22 = ((($21)) + 4|0);
   $23 = (_png_colorspace_endpoints_match($20,$22,100)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $2;
    $26 = ((($25)) + 74|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27&65535;
    $29 = $28 | 32768;
    $30 = $29&65535;
    HEAP16[$26>>1] = $30;
    $31 = $1;
    _png_benign_error($31,13545);
    $0 = 0;
    $57 = $0;
    STACKTOP = sp;return ($57|0);
   }
   $32 = $5;
   $33 = ($32|0)==(0);
   if ($33) {
    $0 = 1;
    $57 = $0;
    STACKTOP = sp;return ($57|0);
   }
  }
 }
 $34 = $2;
 $35 = ((($34)) + 4|0);
 $36 = $3;
 ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$36+16>>2]|0;HEAP32[$35+20>>2]=HEAP32[$36+20>>2]|0;HEAP32[$35+24>>2]=HEAP32[$36+24>>2]|0;HEAP32[$35+28>>2]=HEAP32[$36+28>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 36|0);
 $39 = $4;
 dest=$38; src=$39; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $40 = $2;
 $41 = ((($40)) + 74|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = $43 | 2;
 $45 = $44&65535;
 HEAP16[$41>>1] = $45;
 $46 = $3;
 $47 = (_png_colorspace_endpoints_match($46,176,1000)|0);
 $48 = ($47|0)!=(0);
 $49 = $2;
 $50 = ((($49)) + 74|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 if ($48) {
  $53 = $52 | 64;
  $54 = $53&65535;
  HEAP16[$50>>1] = $54;
 } else {
  $55 = $52 & 65471;
  $56 = $55&65535;
  HEAP16[$50>>1] = $56;
 }
 $0 = 2;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _png_colorspace_set_sRGB($png_ptr,$colorspace,$intent) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $intent = $intent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $intent;
 $4 = $2;
 $5 = ((($4)) + 74|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 & 32768;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $10 = $3;
 $11 = ($10|0)<(0);
 $12 = $3;
 $13 = ($12|0)>=(4);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $1;
  $15 = $2;
  $16 = $3;
  $17 = (_png_icc_profile_error($14,$15,13635,$16,13640)|0);
  $0 = $17;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $18 = $2;
 $19 = ((($18)) + 74|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $21 & 4;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $2;
  $25 = ((($24)) + 72|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = $3;
  $29 = ($27|0)!=($28|0);
  if ($29) {
   $30 = $1;
   $31 = $2;
   $32 = $3;
   $33 = (_png_icc_profile_error($30,$31,13635,$32,13688)|0);
   $0 = $33;
   $87 = $0;
   STACKTOP = sp;return ($87|0);
  }
 }
 $34 = $2;
 $35 = ((($34)) + 74|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = $37 & 32;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = $1;
  _png_benign_error($40,13719);
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 $41 = $2;
 $42 = ((($41)) + 74|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = $44 & 2;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $2;
  $48 = ((($47)) + 4|0);
  $49 = (_png_colorspace_endpoints_match(176,$48,100)|0);
  $50 = ($49|0)!=(0);
  if (!($50)) {
   $51 = $1;
   _png_chunk_report($51,13754,2);
  }
 }
 $52 = $1;
 $53 = $2;
 (_png_colorspace_check_gamma($52,$53,45455,2)|0);
 $54 = $3;
 $55 = $54&65535;
 $56 = $2;
 $57 = ((($56)) + 72|0);
 HEAP16[$57>>1] = $55;
 $58 = $2;
 $59 = ((($58)) + 74|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60&65535;
 $62 = $61 | 4;
 $63 = $62&65535;
 HEAP16[$59>>1] = $63;
 $64 = $2;
 $65 = ((($64)) + 4|0);
 ;HEAP32[$65>>2]=HEAP32[176>>2]|0;HEAP32[$65+4>>2]=HEAP32[176+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[176+8>>2]|0;HEAP32[$65+12>>2]=HEAP32[176+12>>2]|0;HEAP32[$65+16>>2]=HEAP32[176+16>>2]|0;HEAP32[$65+20>>2]=HEAP32[176+20>>2]|0;HEAP32[$65+24>>2]=HEAP32[176+24>>2]|0;HEAP32[$65+28>>2]=HEAP32[176+28>>2]|0;
 $66 = $2;
 $67 = ((($66)) + 36|0);
 dest=$67; src=208; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $68 = $2;
 $69 = ((($68)) + 74|0);
 $70 = HEAP16[$69>>1]|0;
 $71 = $70&65535;
 $72 = $71 | 66;
 $73 = $72&65535;
 HEAP16[$69>>1] = $73;
 $74 = $2;
 HEAP32[$74>>2] = 45455;
 $75 = $2;
 $76 = ((($75)) + 74|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = $77&65535;
 $79 = $78 | 1;
 $80 = $79&65535;
 HEAP16[$76>>1] = $80;
 $81 = $2;
 $82 = ((($81)) + 74|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = $83&65535;
 $85 = $84 | 160;
 $86 = $85&65535;
 HEAP16[$82>>1] = $86;
 $0 = 1;
 $87 = $0;
 STACKTOP = sp;return ($87|0);
}
function _png_icc_profile_error($png_ptr,$colorspace,$name,$value,$reason) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $name = $name|0;
 $value = $value|0;
 $reason = $reason|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $message = 0, $number = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $message = sp + 48|0;
 $number = sp + 24|0;
 $0 = $png_ptr;
 $1 = $colorspace;
 $2 = $name;
 $3 = $value;
 $4 = $reason;
 $5 = $1;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = ((($7)) + 74|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = $10 | 32768;
  $12 = $11&65535;
  HEAP16[$8>>1] = $12;
 }
 $13 = (_png_safecat($message,196,0,13670)|0);
 $pos = $13;
 $14 = $pos;
 $15 = (($14) + 79)|0;
 $16 = $pos;
 $17 = $2;
 $18 = (_png_safecat($message,$15,$16,$17)|0);
 $pos = $18;
 $19 = $pos;
 $20 = (_png_safecat($message,196,$19,13680)|0);
 $pos = $20;
 $21 = $3;
 $22 = (_is_ICC_signature($21)|0);
 $23 = ($22|0)!=(0);
 $24 = $pos;
 if ($23) {
  $25 = (($message) + ($24)|0);
  $26 = $3;
  _png_icc_tag_name($25,$26);
  $27 = $pos;
  $28 = (($27) + 6)|0;
  $pos = $28;
  $29 = $pos;
  $30 = (($29) + 1)|0;
  $pos = $30;
  $31 = (($message) + ($29)|0);
  HEAP8[$31>>0] = 58;
  $32 = $pos;
  $33 = (($32) + 1)|0;
  $pos = $33;
  $34 = (($message) + ($32)|0);
  HEAP8[$34>>0] = 32;
  $41 = $pos;
  $42 = $4;
  $43 = (_png_safecat($message,196,$41,$42)|0);
  $pos = $43;
  $44 = $0;
  $45 = $1;
  $46 = ($45|0)!=(0|0);
  $47 = $46 ? 2 : 1;
  _png_chunk_report($44,$message,$47);
  STACKTOP = sp;return 0;
 } else {
  $35 = ((($number)) + 24|0);
  $36 = $3;
  $37 = (_png_format_number($number,$35,3,$36)|0);
  $38 = (_png_safecat($message,196,$24,$37)|0);
  $pos = $38;
  $39 = $pos;
  $40 = (_png_safecat($message,196,$39,13684)|0);
  $pos = $40;
  $41 = $pos;
  $42 = $4;
  $43 = (_png_safecat($message,196,$41,$42)|0);
  $pos = $43;
  $44 = $0;
  $45 = $1;
  $46 = ($45|0)!=(0|0);
  $47 = $46 ? 2 : 1;
  _png_chunk_report($44,$message,$47);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _is_ICC_signature($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $it;
 $1 = $0;
 $2 = $1 >>> 24;
 $3 = (_is_ICC_signature_char($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = $5 >>> 16;
  $7 = $6 & 255;
  $8 = (_is_ICC_signature_char($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $0;
   $11 = $10 >>> 8;
   $12 = $11 & 255;
   $13 = (_is_ICC_signature_char($12)|0);
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $0;
    $16 = $15 & 255;
    $17 = (_is_ICC_signature_char($16)|0);
    $18 = ($17|0)!=(0);
    $20 = $18;
   } else {
    $20 = 0;
   }
  } else {
   $20 = 0;
  }
 } else {
  $20 = 0;
 }
 $19 = $20&1;
 STACKTOP = sp;return ($19|0);
}
function _is_ICC_signature_char($it) {
 $it = $it|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $it;
 $1 = $0;
 $2 = ($1|0)==(32);
 if ($2) {
  $17 = 1;
 } else {
  $3 = $0;
  $4 = ($3>>>0)>=(48);
  $5 = $0;
  $6 = ($5>>>0)<=(57);
  $or$cond = $4 & $6;
  if ($or$cond) {
   $17 = 1;
  } else {
   $7 = $0;
   $8 = ($7>>>0)>=(65);
   $9 = $0;
   $10 = ($9>>>0)<=(90);
   $or$cond3 = $8 & $10;
   if ($or$cond3) {
    $17 = 1;
   } else {
    $11 = $0;
    $12 = ($11>>>0)>=(97);
    $13 = $0;
    $14 = ($13>>>0)<=(122);
    $15 = $12 ? $14 : 0;
    $17 = $15;
   }
  }
 }
 $16 = $17&1;
 STACKTOP = sp;return ($16|0);
}
function _png_icc_tag_name($name,$tag) {
 $name = $name|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = $tag;
 $2 = $0;
 HEAP8[$2>>0] = 39;
 $3 = $1;
 $4 = $3 >>> 24;
 $5 = (_png_icc_tag_char($4)|0);
 $6 = $0;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $5;
 $8 = $1;
 $9 = $8 >>> 16;
 $10 = (_png_icc_tag_char($9)|0);
 $11 = $0;
 $12 = ((($11)) + 2|0);
 HEAP8[$12>>0] = $10;
 $13 = $1;
 $14 = $13 >>> 8;
 $15 = (_png_icc_tag_char($14)|0);
 $16 = $0;
 $17 = ((($16)) + 3|0);
 HEAP8[$17>>0] = $15;
 $18 = $1;
 $19 = (_png_icc_tag_char($18)|0);
 $20 = $0;
 $21 = ((($20)) + 4|0);
 HEAP8[$21>>0] = $19;
 $22 = $0;
 $23 = ((($22)) + 5|0);
 HEAP8[$23>>0] = 39;
 STACKTOP = sp;return;
}
function _png_icc_tag_char($byte) {
 $byte = $byte|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $byte;
 $2 = $1;
 $3 = $2 & 255;
 $1 = $3;
 $4 = $1;
 $5 = ($4>>>0)>=(32);
 $6 = $1;
 $7 = ($6>>>0)<=(126);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = $1;
  $9 = $8&255;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 63;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _png_icc_check_length($png_ptr,$colorspace,$name,$profile_length) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $name = $name|0;
 $profile_length = $profile_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $name;
 $4 = $profile_length;
 $5 = $4;
 $6 = ($5>>>0)<(132);
 if ($6) {
  $7 = $1;
  $8 = $2;
  $9 = $3;
  $10 = $4;
  $11 = (_png_icc_profile_error($7,$8,$9,$10,16507)|0);
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _png_icc_check_header($png_ptr,$colorspace,$name,$profile_length,$profile,$color_type) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $name = $name|0;
 $profile_length = $profile_length|0;
 $profile = $profile|0;
 $color_type = $color_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $switch$split102D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split2D = 0, $switch$split72D = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $name;
 $4 = $profile_length;
 $5 = $profile;
 $6 = $color_type;
 $7 = $5;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 24;
 $11 = $5;
 $12 = ((($11)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 16;
 $16 = (($10) + ($15))|0;
 $17 = $5;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $22 = (($16) + ($21))|0;
 $23 = $5;
 $24 = ((($23)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = (($22) + ($26))|0;
 $temp = $27;
 $28 = $temp;
 $29 = $4;
 $30 = ($28|0)!=($29|0);
 if ($30) {
  $31 = $1;
  $32 = $2;
  $33 = $3;
  $34 = $temp;
  $35 = (_png_icc_profile_error($31,$32,$33,$34,13785)|0);
  $0 = $35;
  $282 = $0;
  STACKTOP = sp;return ($282|0);
 }
 $36 = $5;
 $37 = ((($36)) + 8|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $temp = $39;
 $40 = $temp;
 $41 = ($40>>>0)>(3);
 if ($41) {
  $42 = $4;
  $43 = $42 & 3;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = $1;
   $46 = $2;
   $47 = $3;
   $48 = $4;
   $49 = (_png_icc_profile_error($45,$46,$47,$48,13815)|0);
   $0 = $49;
   $282 = $0;
   STACKTOP = sp;return ($282|0);
  }
 }
 $50 = $5;
 $51 = ((($50)) + 128|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53 << 24;
 $55 = $5;
 $56 = ((($55)) + 128|0);
 $57 = ((($56)) + 1|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 << 16;
 $61 = (($54) + ($60))|0;
 $62 = $5;
 $63 = ((($62)) + 128|0);
 $64 = ((($63)) + 2|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = $66 << 8;
 $68 = (($61) + ($67))|0;
 $69 = $5;
 $70 = ((($69)) + 128|0);
 $71 = ((($70)) + 3|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = (($68) + ($73))|0;
 $temp = $74;
 $75 = $temp;
 $76 = ($75>>>0)>(357913930);
 if (!($76)) {
  $77 = $4;
  $78 = $temp;
  $79 = ($78*12)|0;
  $80 = (132 + ($79))|0;
  $81 = ($77>>>0)<($80>>>0);
  if (!($81)) {
   $87 = $5;
   $88 = ((($87)) + 64|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = $90 << 24;
   $92 = $5;
   $93 = ((($92)) + 64|0);
   $94 = ((($93)) + 1|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = $96 << 16;
   $98 = (($91) + ($97))|0;
   $99 = $5;
   $100 = ((($99)) + 64|0);
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $103 << 8;
   $105 = (($98) + ($104))|0;
   $106 = $5;
   $107 = ((($106)) + 64|0);
   $108 = ((($107)) + 3|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = (($105) + ($110))|0;
   $temp = $111;
   $112 = $temp;
   $113 = ($112>>>0)>=(65535);
   if ($113) {
    $114 = $1;
    $115 = $2;
    $116 = $3;
    $117 = $temp;
    $118 = (_png_icc_profile_error($114,$115,$116,$117,13850)|0);
    $0 = $118;
    $282 = $0;
    STACKTOP = sp;return ($282|0);
   }
   $119 = $temp;
   $120 = ($119>>>0)>=(4);
   if ($120) {
    $121 = $1;
    $122 = $3;
    $123 = $temp;
    (_png_icc_profile_error($121,0,$122,$123,13875)|0);
   }
   $124 = $5;
   $125 = ((($124)) + 36|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = $127 << 24;
   $129 = $5;
   $130 = ((($129)) + 36|0);
   $131 = ((($130)) + 1|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = $133 << 16;
   $135 = (($128) + ($134))|0;
   $136 = $5;
   $137 = ((($136)) + 36|0);
   $138 = ((($137)) + 2|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = $139&255;
   $141 = $140 << 8;
   $142 = (($135) + ($141))|0;
   $143 = $5;
   $144 = ((($143)) + 36|0);
   $145 = ((($144)) + 3|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = (($142) + ($147))|0;
   $temp = $148;
   $149 = $temp;
   $150 = ($149|0)!=(1633907568);
   if ($150) {
    $151 = $1;
    $152 = $2;
    $153 = $3;
    $154 = $temp;
    $155 = (_png_icc_profile_error($151,$152,$153,$154,13904)|0);
    $0 = $155;
    $282 = $0;
    STACKTOP = sp;return ($282|0);
   }
   $156 = $5;
   $157 = ((($156)) + 68|0);
   $158 = (_memcmp($157,13922,12)|0);
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $1;
    $161 = $3;
    (_png_icc_profile_error($160,0,$161,0,13934)|0);
   }
   $162 = $5;
   $163 = ((($162)) + 16|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = $165 << 24;
   $167 = $5;
   $168 = ((($167)) + 16|0);
   $169 = ((($168)) + 1|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = $171 << 16;
   $173 = (($166) + ($172))|0;
   $174 = $5;
   $175 = ((($174)) + 16|0);
   $176 = ((($175)) + 2|0);
   $177 = HEAP8[$176>>0]|0;
   $178 = $177&255;
   $179 = $178 << 8;
   $180 = (($173) + ($179))|0;
   $181 = $5;
   $182 = ((($181)) + 16|0);
   $183 = ((($182)) + 3|0);
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = (($180) + ($185))|0;
   $temp = $186;
   $187 = $temp;
   $switch$split2D = ($187|0)<(1380401696);
   L27: do {
    if ($switch$split2D) {
     switch ($187|0) {
     case 1196573017:  {
      break;
     }
     default: {
      label = 22;
      break L27;
     }
     }
     $196 = $6;
     $197 = $196 & 2;
     $198 = ($197|0)!=(0);
     if ($198) {
      $199 = $1;
      $200 = $2;
      $201 = $3;
      $202 = $temp;
      $203 = (_png_icc_profile_error($199,$200,$201,$202,14007)|0);
      $0 = $203;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
     }
    } else {
     switch ($187|0) {
     case 1380401696:  {
      break;
     }
     default: {
      label = 22;
      break L27;
     }
     }
     $188 = $6;
     $189 = $188 & 2;
     $190 = ($189|0)==(0);
     if ($190) {
      $191 = $1;
      $192 = $2;
      $193 = $3;
      $194 = $temp;
      $195 = (_png_icc_profile_error($191,$192,$193,$194,13960)|0);
      $0 = $195;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
     }
    }
   } while(0);
   if ((label|0) == 22) {
    $204 = $1;
    $205 = $2;
    $206 = $3;
    $207 = $temp;
    $208 = (_png_icc_profile_error($204,$205,$206,$207,14049)|0);
    $0 = $208;
    $282 = $0;
    STACKTOP = sp;return ($282|0);
   }
   $209 = $5;
   $210 = ((($209)) + 12|0);
   $211 = HEAP8[$210>>0]|0;
   $212 = $211&255;
   $213 = $212 << 24;
   $214 = $5;
   $215 = ((($214)) + 12|0);
   $216 = ((($215)) + 1|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = $218 << 16;
   $220 = (($213) + ($219))|0;
   $221 = $5;
   $222 = ((($221)) + 12|0);
   $223 = ((($222)) + 2|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224&255;
   $226 = $225 << 8;
   $227 = (($220) + ($226))|0;
   $228 = $5;
   $229 = ((($228)) + 12|0);
   $230 = ((($229)) + 3|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = (($227) + ($232))|0;
   $temp = $233;
   $234 = $temp;
   $switch$split72D = ($234|0)<(1852662636);
   L40: do {
    if ($switch$split72D) {
     $switch$split132D = ($234|0)<(1818848875);
     if ($switch$split132D) {
      switch ($234|0) {
      case 1633842036:  {
       break;
      }
      default: {
       label = 27;
       break L40;
      }
      }
      $235 = $1;
      $236 = $2;
      $237 = $3;
      $238 = $temp;
      $239 = (_png_icc_profile_error($235,$236,$237,$238,14081)|0);
      $0 = $239;
      $282 = $0;
      STACKTOP = sp;return ($282|0);
     }
     $switch$split192D = ($234|0)<(1835955314);
     if (!($switch$split192D)) {
      switch ($234|0) {
      case 1835955314:  {
       break L40;
       break;
      }
      default: {
       label = 27;
       break L40;
      }
      }
     }
     switch ($234|0) {
     case 1818848875:  {
      break;
     }
     default: {
      label = 27;
      break L40;
     }
     }
     $240 = $1;
     $241 = $2;
     $242 = $3;
     $243 = $temp;
     $244 = (_png_icc_profile_error($240,$241,$242,$243,14119)|0);
     $0 = $244;
     $282 = $0;
     STACKTOP = sp;return ($282|0);
    } else {
     $switch$split162D = ($234|0)<(1935896178);
     if (!($switch$split162D)) {
      $switch$split252D = ($234|0)<(1936744803);
      if ($switch$split252D) {
       switch ($234|0) {
       case 1935896178:  {
        break L40;
        break;
       }
       default: {
        label = 27;
        break L40;
       }
       }
      } else {
       switch ($234|0) {
       case 1936744803:  {
        break L40;
        break;
       }
       default: {
        label = 27;
        break L40;
       }
       }
      }
     }
     $switch$split222D = ($234|0)<(1886549106);
     if (!($switch$split222D)) {
      switch ($234|0) {
      case 1886549106:  {
       break L40;
       break;
      }
      default: {
       label = 27;
       break L40;
      }
      }
     }
     switch ($234|0) {
     case 1852662636:  {
      break;
     }
     default: {
      label = 27;
      break L40;
     }
     }
     $245 = $1;
     $246 = $3;
     $247 = $temp;
     (_png_icc_profile_error($245,0,$246,$247,14159)|0);
    }
   } while(0);
   if ((label|0) == 27) {
    $248 = $1;
    $249 = $3;
    $250 = $temp;
    (_png_icc_profile_error($248,0,$249,$250,14199)|0);
   }
   $251 = $5;
   $252 = ((($251)) + 20|0);
   $253 = HEAP8[$252>>0]|0;
   $254 = $253&255;
   $255 = $254 << 24;
   $256 = $5;
   $257 = ((($256)) + 20|0);
   $258 = ((($257)) + 1|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = $259&255;
   $261 = $260 << 16;
   $262 = (($255) + ($261))|0;
   $263 = $5;
   $264 = ((($263)) + 20|0);
   $265 = ((($264)) + 2|0);
   $266 = HEAP8[$265>>0]|0;
   $267 = $266&255;
   $268 = $267 << 8;
   $269 = (($262) + ($268))|0;
   $270 = $5;
   $271 = ((($270)) + 20|0);
   $272 = ((($271)) + 3|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&255;
   $275 = (($269) + ($274))|0;
   $temp = $275;
   $276 = $temp;
   $switch$split102D = ($276|0)<(1482250784);
   if ($switch$split102D) {
    switch ($276|0) {
    case 1281450528:  {
     label = 30;
     break;
    }
    default: {
     label = 29;
    }
    }
   } else {
    switch ($276|0) {
    case 1482250784:  {
     label = 30;
     break;
    }
    default: {
     label = 29;
    }
    }
   }
   if ((label|0) == 29) {
    $277 = $1;
    $278 = $2;
    $279 = $3;
    $280 = $temp;
    $281 = (_png_icc_profile_error($277,$278,$279,$280,14230)|0);
    $0 = $281;
    $282 = $0;
    STACKTOP = sp;return ($282|0);
   }
   else if ((label|0) == 30) {
    $0 = 1;
    $282 = $0;
    STACKTOP = sp;return ($282|0);
   }
  }
 }
 $82 = $1;
 $83 = $2;
 $84 = $3;
 $85 = $temp;
 $86 = (_png_icc_profile_error($82,$83,$84,$85,13830)|0);
 $0 = $86;
 $282 = $0;
 STACKTOP = sp;return ($282|0);
}
function _png_icc_check_tag_table($png_ptr,$colorspace,$name,$profile_length,$profile) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $name = $name|0;
 $profile_length = $profile_length|0;
 $profile = $profile|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $itag = 0, $tag = 0, $tag_count = 0, $tag_id = 0, $tag_length = 0, $tag_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $colorspace;
 $3 = $name;
 $4 = $profile_length;
 $5 = $profile;
 $6 = $5;
 $7 = ((($6)) + 128|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 24;
 $11 = $5;
 $12 = ((($11)) + 128|0);
 $13 = ((($12)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 16;
 $17 = (($10) + ($16))|0;
 $18 = $5;
 $19 = ((($18)) + 128|0);
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = (($17) + ($23))|0;
 $25 = $5;
 $26 = ((($25)) + 128|0);
 $27 = ((($26)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (($24) + ($29))|0;
 $tag_count = $30;
 $31 = $5;
 $32 = ((($31)) + 132|0);
 $tag = $32;
 $itag = 0;
 while(1) {
  $33 = $itag;
  $34 = $tag_count;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   label = 9;
   break;
  }
  $36 = $tag;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 << 24;
  $40 = $tag;
  $41 = ((($40)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 << 16;
  $45 = (($39) + ($44))|0;
  $46 = $tag;
  $47 = ((($46)) + 2|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $49 << 8;
  $51 = (($45) + ($50))|0;
  $52 = $tag;
  $53 = ((($52)) + 3|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($51) + ($55))|0;
  $tag_id = $56;
  $57 = $tag;
  $58 = ((($57)) + 4|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60 << 24;
  $62 = $tag;
  $63 = ((($62)) + 4|0);
  $64 = ((($63)) + 1|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $66 << 16;
  $68 = (($61) + ($67))|0;
  $69 = $tag;
  $70 = ((($69)) + 4|0);
  $71 = ((($70)) + 2|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 << 8;
  $75 = (($68) + ($74))|0;
  $76 = $tag;
  $77 = ((($76)) + 4|0);
  $78 = ((($77)) + 3|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = (($75) + ($80))|0;
  $tag_start = $81;
  $82 = $tag;
  $83 = ((($82)) + 8|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $85 << 24;
  $87 = $tag;
  $88 = ((($87)) + 8|0);
  $89 = ((($88)) + 1|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 << 16;
  $93 = (($86) + ($92))|0;
  $94 = $tag;
  $95 = ((($94)) + 8|0);
  $96 = ((($95)) + 2|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = (($93) + ($99))|0;
  $101 = $tag;
  $102 = ((($101)) + 8|0);
  $103 = ((($102)) + 3|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = (($100) + ($105))|0;
  $tag_length = $106;
  $107 = $tag_start;
  $108 = $107 & 3;
  $109 = ($108|0)!=(0);
  if ($109) {
   $110 = $1;
   $111 = $3;
   $112 = $tag_id;
   (_png_icc_profile_error($110,0,$111,$112,14258)|0);
  }
  $113 = $tag_start;
  $114 = $4;
  $115 = ($113>>>0)>($114>>>0);
  if ($115) {
   label = 7;
   break;
  }
  $116 = $tag_length;
  $117 = $4;
  $118 = $tag_start;
  $119 = (($117) - ($118))|0;
  $120 = ($116>>>0)>($119>>>0);
  if ($120) {
   label = 7;
   break;
  }
  $126 = $itag;
  $127 = (($126) + 1)|0;
  $itag = $127;
  $128 = $tag;
  $129 = ((($128)) + 12|0);
  $tag = $129;
 }
 if ((label|0) == 7) {
  $121 = $1;
  $122 = $2;
  $123 = $3;
  $124 = $tag_id;
  $125 = (_png_icc_profile_error($121,$122,$123,$124,14300)|0);
  $0 = $125;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $130 = $0;
  STACKTOP = sp;return ($130|0);
 }
 return (0)|0;
}
function _png_icc_set_sRGB($png_ptr,$colorspace,$profile,$adler) {
 $png_ptr = $png_ptr|0;
 $colorspace = $colorspace|0;
 $profile = $profile|0;
 $adler = $adler|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $colorspace;
 $2 = $profile;
 $3 = $adler;
 $4 = $0;
 $5 = $2;
 $6 = $3;
 $7 = (_png_compare_ICC_profile_with_sRGB($4,$5,$6)|0);
 $8 = ($7|0)!=(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = ((($11)) + 64|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 24;
 $16 = $2;
 $17 = ((($16)) + 64|0);
 $18 = ((($17)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 16;
 $22 = (($15) + ($21))|0;
 $23 = $2;
 $24 = ((($23)) + 64|0);
 $25 = ((($24)) + 2|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $29 = (($22) + ($28))|0;
 $30 = $2;
 $31 = ((($30)) + 64|0);
 $32 = ((($31)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = (($29) + ($34))|0;
 (_png_colorspace_set_sRGB($9,$10,$35)|0);
 STACKTOP = sp;return;
}
function _png_compare_ICC_profile_with_sRGB($png_ptr,$profile,$adler) {
 $png_ptr = $png_ptr|0;
 $profile = $profile|0;
 $adler = $adler|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $crc = 0, $i = 0, $intent = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $profile;
 $3 = $adler;
 $length = 0;
 $intent = 65536;
 $crc = 0;
 $4 = $1;
 $5 = ((($4)) + 612|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 >> 4;
 $9 = $8 & 3;
 $10 = ($9|0)==(3);
 if ($10) {
  $0 = 0;
  $245 = $0;
  STACKTOP = sp;return ($245|0);
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11>>>0)<(7);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = ((($13)) + 84|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 24;
  $18 = $2;
  $19 = ((($18)) + 84|0);
  $20 = ((($19)) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 16;
  $24 = (($17) + ($23))|0;
  $25 = $2;
  $26 = ((($25)) + 84|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 8;
  $31 = (($24) + ($30))|0;
  $32 = $2;
  $33 = ((($32)) + 84|0);
  $34 = ((($33)) + 3|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($31) + ($36))|0;
  $38 = $i;
  $39 = (244 + ($38<<5)|0);
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($37|0)==($41|0);
  if ($42) {
   $43 = $2;
   $44 = ((($43)) + 88|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $46 << 24;
   $48 = $2;
   $49 = ((($48)) + 88|0);
   $50 = ((($49)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << 16;
   $54 = (($47) + ($53))|0;
   $55 = $2;
   $56 = ((($55)) + 88|0);
   $57 = ((($56)) + 2|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $59 << 8;
   $61 = (($54) + ($60))|0;
   $62 = $2;
   $63 = ((($62)) + 88|0);
   $64 = ((($63)) + 3|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = (($61) + ($66))|0;
   $68 = $i;
   $69 = (244 + ($68<<5)|0);
   $70 = ((($69)) + 12|0);
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($67|0)==($72|0);
   if ($73) {
    $74 = $2;
    $75 = ((($74)) + 92|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = $77 << 24;
    $79 = $2;
    $80 = ((($79)) + 92|0);
    $81 = ((($80)) + 1|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 << 16;
    $85 = (($78) + ($84))|0;
    $86 = $2;
    $87 = ((($86)) + 92|0);
    $88 = ((($87)) + 2|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $90 << 8;
    $92 = (($85) + ($91))|0;
    $93 = $2;
    $94 = ((($93)) + 92|0);
    $95 = ((($94)) + 3|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = (($92) + ($97))|0;
    $99 = $i;
    $100 = (244 + ($99<<5)|0);
    $101 = ((($100)) + 12|0);
    $102 = ((($101)) + 8|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($98|0)==($103|0);
    if ($104) {
     $105 = $2;
     $106 = ((($105)) + 96|0);
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $108 << 24;
     $110 = $2;
     $111 = ((($110)) + 96|0);
     $112 = ((($111)) + 1|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = $114 << 16;
     $116 = (($109) + ($115))|0;
     $117 = $2;
     $118 = ((($117)) + 96|0);
     $119 = ((($118)) + 2|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = $121 << 8;
     $123 = (($116) + ($122))|0;
     $124 = $2;
     $125 = ((($124)) + 96|0);
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = (($123) + ($128))|0;
     $130 = $i;
     $131 = (244 + ($130<<5)|0);
     $132 = ((($131)) + 12|0);
     $133 = ((($132)) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($129|0)==($134|0);
     if ($135) {
      $136 = $length;
      $137 = ($136|0)==(0);
      if ($137) {
       $138 = $2;
       $139 = HEAP8[$138>>0]|0;
       $140 = $139&255;
       $141 = $140 << 24;
       $142 = $2;
       $143 = ((($142)) + 1|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144&255;
       $146 = $145 << 16;
       $147 = (($141) + ($146))|0;
       $148 = $2;
       $149 = ((($148)) + 2|0);
       $150 = HEAP8[$149>>0]|0;
       $151 = $150&255;
       $152 = $151 << 8;
       $153 = (($147) + ($152))|0;
       $154 = $2;
       $155 = ((($154)) + 3|0);
       $156 = HEAP8[$155>>0]|0;
       $157 = $156&255;
       $158 = (($153) + ($157))|0;
       $length = $158;
       $159 = $2;
       $160 = ((($159)) + 64|0);
       $161 = HEAP8[$160>>0]|0;
       $162 = $161&255;
       $163 = $162 << 24;
       $164 = $2;
       $165 = ((($164)) + 64|0);
       $166 = ((($165)) + 1|0);
       $167 = HEAP8[$166>>0]|0;
       $168 = $167&255;
       $169 = $168 << 16;
       $170 = (($163) + ($169))|0;
       $171 = $2;
       $172 = ((($171)) + 64|0);
       $173 = ((($172)) + 2|0);
       $174 = HEAP8[$173>>0]|0;
       $175 = $174&255;
       $176 = $175 << 8;
       $177 = (($170) + ($176))|0;
       $178 = $2;
       $179 = ((($178)) + 64|0);
       $180 = ((($179)) + 3|0);
       $181 = HEAP8[$180>>0]|0;
       $182 = $181&255;
       $183 = (($177) + ($182))|0;
       $intent = $183;
      }
      $184 = $length;
      $185 = $i;
      $186 = (244 + ($185<<5)|0);
      $187 = ((($186)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($184|0)==($188|0);
      if ($189) {
       $190 = $intent;
       $191 = $i;
       $192 = (244 + ($191<<5)|0);
       $193 = ((($192)) + 30|0);
       $194 = HEAP16[$193>>1]|0;
       $195 = $194&65535;
       $196 = ($190|0)==($195|0);
       if ($196) {
        label = 13;
        break;
       }
      }
     }
    }
   }
  }
  $243 = $i;
  $244 = (($243) + 1)|0;
  $i = $244;
 }
 if ((label|0) == 13) {
  $197 = $3;
  $198 = ($197|0)==(0);
  if ($198) {
   $199 = (_adler32(0,0,0)|0);
   $3 = $199;
   $200 = $3;
   $201 = $2;
   $202 = $length;
   $203 = (_adler32($200,$201,$202)|0);
   $3 = $203;
  }
  $204 = $3;
  $205 = $i;
  $206 = (244 + ($205<<5)|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($204|0)==($207|0);
  if ($208) {
   $209 = $crc;
   $210 = ($209|0)==(0);
   if ($210) {
    $211 = (_crc32(0,0,0)|0);
    $crc = $211;
    $212 = $crc;
    $213 = $2;
    $214 = $length;
    $215 = (_crc32($212,$213,$214)|0);
    $crc = $215;
   }
   $216 = $crc;
   $217 = $i;
   $218 = (244 + ($217<<5)|0);
   $219 = ((($218)) + 4|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ($216|0)==($220|0);
   if ($221) {
    $222 = $i;
    $223 = (244 + ($222<<5)|0);
    $224 = ((($223)) + 29|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225&255;
    $227 = ($226|0)!=(0);
    if ($227) {
     $228 = $1;
     _png_chunk_report($228,14332,2);
    } else {
     $229 = $i;
     $230 = (244 + ($229<<5)|0);
     $231 = ((($230)) + 28|0);
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = ($233|0)==(0);
     if ($234) {
      $235 = $1;
      _png_chunk_report($235,14361,0);
     }
    }
    $236 = $i;
    $237 = (244 + ($236<<5)|0);
    $238 = ((($237)) + 29|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = (1 + ($240))|0;
    $0 = $241;
    $245 = $0;
    STACKTOP = sp;return ($245|0);
   }
  }
  $242 = $1;
  _png_chunk_report($242,14404,0);
 }
 $0 = 0;
 $245 = $0;
 STACKTOP = sp;return ($245|0);
}
function _png_colorspace_set_rgb_coefficients($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $add = 0, $b = 0, $g = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $r = 0, $total = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp + 16|0;
 $g = sp + 12|0;
 $b = sp + 8|0;
 $0 = $png_ptr;
 $1 = $0;
 $2 = ((($1)) + 669|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 792|0);
 $8 = ((($7)) + 74|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 2;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 792|0);
 $15 = ((($14)) + 36|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$r>>2] = $17;
 $18 = $0;
 $19 = ((($18)) + 792|0);
 $20 = ((($19)) + 36|0);
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$g>>2] = $22;
 $23 = $0;
 $24 = ((($23)) + 792|0);
 $25 = ((($24)) + 36|0);
 $26 = ((($25)) + 28|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$b>>2] = $27;
 $28 = HEAP32[$r>>2]|0;
 $29 = HEAP32[$g>>2]|0;
 $30 = (($28) + ($29))|0;
 $31 = HEAP32[$b>>2]|0;
 $32 = (($30) + ($31))|0;
 $total = $32;
 $33 = $total;
 $34 = ($33|0)>(0);
 $35 = HEAP32[$r>>2]|0;
 $36 = ($35|0)>=(0);
 $or$cond = $34 & $36;
 if (!($or$cond)) {
  $121 = $0;
  _png_error($121,14502);
  // unreachable;
 }
 $37 = HEAP32[$r>>2]|0;
 $38 = $total;
 $39 = (_png_muldiv($r,$37,32768,$38)|0);
 $40 = ($39|0)!=(0);
 $41 = HEAP32[$r>>2]|0;
 $42 = ($41|0)>=(0);
 $or$cond3 = $40 & $42;
 $43 = HEAP32[$r>>2]|0;
 $44 = ($43|0)<=(32768);
 $or$cond5 = $or$cond3 & $44;
 $45 = HEAP32[$g>>2]|0;
 $46 = ($45|0)>=(0);
 $or$cond7 = $or$cond5 & $46;
 if (!($or$cond7)) {
  $121 = $0;
  _png_error($121,14502);
  // unreachable;
 }
 $47 = HEAP32[$g>>2]|0;
 $48 = $total;
 $49 = (_png_muldiv($g,$47,32768,$48)|0);
 $50 = ($49|0)!=(0);
 $51 = HEAP32[$g>>2]|0;
 $52 = ($51|0)>=(0);
 $or$cond9 = $50 & $52;
 $53 = HEAP32[$g>>2]|0;
 $54 = ($53|0)<=(32768);
 $or$cond11 = $or$cond9 & $54;
 $55 = HEAP32[$b>>2]|0;
 $56 = ($55|0)>=(0);
 $or$cond13 = $or$cond11 & $56;
 if (!($or$cond13)) {
  $121 = $0;
  _png_error($121,14502);
  // unreachable;
 }
 $57 = HEAP32[$b>>2]|0;
 $58 = $total;
 $59 = (_png_muldiv($b,$57,32768,$58)|0);
 $60 = ($59|0)!=(0);
 $61 = HEAP32[$b>>2]|0;
 $62 = ($61|0)>=(0);
 $or$cond15 = $60 & $62;
 $63 = HEAP32[$b>>2]|0;
 $64 = ($63|0)<=(32768);
 $or$cond17 = $or$cond15 & $64;
 if (!($or$cond17)) {
  $121 = $0;
  _png_error($121,14502);
  // unreachable;
 }
 $65 = HEAP32[$r>>2]|0;
 $66 = HEAP32[$g>>2]|0;
 $67 = (($65) + ($66))|0;
 $68 = HEAP32[$b>>2]|0;
 $69 = (($67) + ($68))|0;
 $70 = ($69|0)<=(32769);
 if (!($70)) {
  $121 = $0;
  _png_error($121,14502);
  // unreachable;
 }
 $add = 0;
 $71 = HEAP32[$r>>2]|0;
 $72 = HEAP32[$g>>2]|0;
 $73 = (($71) + ($72))|0;
 $74 = HEAP32[$b>>2]|0;
 $75 = (($73) + ($74))|0;
 $76 = ($75|0)>(32768);
 if ($76) {
  $add = -1;
 } else {
  $77 = HEAP32[$r>>2]|0;
  $78 = HEAP32[$g>>2]|0;
  $79 = (($77) + ($78))|0;
  $80 = HEAP32[$b>>2]|0;
  $81 = (($79) + ($80))|0;
  $82 = ($81|0)<(32768);
  if ($82) {
   $add = 1;
  }
 }
 $83 = $add;
 $84 = ($83|0)!=(0);
 do {
  if ($84) {
   $85 = HEAP32[$g>>2]|0;
   $86 = HEAP32[$r>>2]|0;
   $87 = ($85|0)>=($86|0);
   if ($87) {
    $88 = HEAP32[$g>>2]|0;
    $89 = HEAP32[$b>>2]|0;
    $90 = ($88|0)>=($89|0);
    if ($90) {
     $91 = $add;
     $92 = HEAP32[$g>>2]|0;
     $93 = (($92) + ($91))|0;
     HEAP32[$g>>2] = $93;
     break;
    }
   }
   $94 = HEAP32[$r>>2]|0;
   $95 = HEAP32[$g>>2]|0;
   $96 = ($94|0)>=($95|0);
   if ($96) {
    $97 = HEAP32[$r>>2]|0;
    $98 = HEAP32[$b>>2]|0;
    $99 = ($97|0)>=($98|0);
    if ($99) {
     $100 = $add;
     $101 = HEAP32[$r>>2]|0;
     $102 = (($101) + ($100))|0;
     HEAP32[$r>>2] = $102;
     break;
    }
   }
   $103 = $add;
   $104 = HEAP32[$b>>2]|0;
   $105 = (($104) + ($103))|0;
   HEAP32[$b>>2] = $105;
  }
 } while(0);
 $106 = HEAP32[$r>>2]|0;
 $107 = HEAP32[$g>>2]|0;
 $108 = (($106) + ($107))|0;
 $109 = HEAP32[$b>>2]|0;
 $110 = (($108) + ($109))|0;
 $111 = ($110|0)!=(32768);
 if ($111) {
  $112 = $0;
  _png_error($112,14460);
  // unreachable;
 }
 $113 = HEAP32[$r>>2]|0;
 $114 = $113&65535;
 $115 = $0;
 $116 = ((($115)) + 670|0);
 HEAP16[$116>>1] = $114;
 $117 = HEAP32[$g>>2]|0;
 $118 = $117&65535;
 $119 = $0;
 $120 = ((($119)) + 672|0);
 HEAP16[$120>>1] = $118;
 STACKTOP = sp;return;
}
function _png_check_IHDR($png_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $width;
 $2 = $height;
 $3 = $bit_depth;
 $4 = $color_type;
 $5 = $interlace_type;
 $6 = $compression_type;
 $7 = $filter_type;
 $error = 0;
 $8 = $1;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $0;
  _png_warning($10,14536);
  $error = 1;
 }
 $11 = $1;
 $12 = ($11>>>0)>(2147483647);
 if ($12) {
  $13 = $0;
  _png_warning($13,14564);
  $error = 1;
 }
 $14 = $1;
 $15 = (($14) + 7)|0;
 $16 = $15 & -8;
 $17 = (_png_gt($16,536870904)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $0;
  _png_warning($19,14592);
  $error = 1;
 }
 $20 = $1;
 $21 = $0;
 $22 = ((($21)) + 716|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20>>>0)>($23>>>0);
 if ($24) {
  $25 = $0;
  _png_warning($25,14639);
  $error = 1;
 }
 $26 = $2;
 $27 = ($26|0)==(0);
 if ($27) {
  $28 = $0;
  _png_warning($28,14678);
  $error = 1;
 }
 $29 = $2;
 $30 = ($29>>>0)>(2147483647);
 if ($30) {
  $31 = $0;
  _png_warning($31,14707);
  $error = 1;
 }
 $32 = $2;
 $33 = $0;
 $34 = ((($33)) + 720|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($32>>>0)>($35>>>0);
 if ($36) {
  $37 = $0;
  _png_warning($37,14736);
  $error = 1;
 }
 $38 = $3;
 $39 = ($38|0)!=(1);
 $40 = $3;
 $41 = ($40|0)!=(2);
 $or$cond = $39 & $41;
 $42 = $3;
 $43 = ($42|0)!=(4);
 $or$cond3 = $or$cond & $43;
 $44 = $3;
 $45 = ($44|0)!=(8);
 $or$cond5 = $or$cond3 & $45;
 $46 = $3;
 $47 = ($46|0)!=(16);
 $or$cond7 = $or$cond5 & $47;
 if ($or$cond7) {
  $48 = $0;
  _png_warning($48,14776);
  $error = 1;
 }
 $49 = $4;
 $50 = ($49|0)<(0);
 $51 = $4;
 $52 = ($51|0)==(1);
 $or$cond9 = $50 | $52;
 $53 = $4;
 $54 = ($53|0)==(5);
 $or$cond11 = $or$cond9 | $54;
 $55 = $4;
 $56 = ($55|0)>(6);
 $or$cond13 = $or$cond11 | $56;
 if ($or$cond13) {
  $57 = $0;
  _png_warning($57,14802);
  $error = 1;
 }
 $58 = $4;
 $59 = ($58|0)==(3);
 $60 = $3;
 $61 = ($60|0)>(8);
 $or$cond15 = $59 & $61;
 if ($or$cond15) {
  label = 21;
 } else {
  $62 = $4;
  $63 = ($62|0)==(2);
  $64 = $4;
  $65 = ($64|0)==(4);
  $or$cond17 = $63 | $65;
  $66 = $4;
  $67 = ($66|0)==(6);
  $or$cond19 = $or$cond17 | $67;
  $68 = $3;
  $69 = ($68|0)<(8);
  $or$cond21 = $or$cond19 & $69;
  if ($or$cond21) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $70 = $0;
  _png_warning($70,14829);
  $error = 1;
 }
 $71 = $5;
 $72 = ($71|0)>=(2);
 if ($72) {
  $73 = $0;
  _png_warning($73,14878);
  $error = 1;
 }
 $74 = $6;
 $75 = ($74|0)!=(0);
 if ($75) {
  $76 = $0;
  _png_warning($76,14911);
  $error = 1;
 }
 $77 = $0;
 $78 = ((($77)) + 208|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 & 4096;
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $0;
  $83 = ((($82)) + 676|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = $0;
   _png_warning($86,14946);
  }
 }
 $87 = $7;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $0;
  $90 = ((($89)) + 676|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $91 & 4;
  $93 = ($92|0)!=(0);
  $94 = $7;
  $95 = ($94|0)==(64);
  $or$cond23 = $93 & $95;
  if ($or$cond23) {
   $96 = $0;
   $97 = ((($96)) + 208|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $98 & 4096;
   $100 = ($99|0)==(0);
   if ($100) {
    $101 = $4;
    $102 = ($101|0)==(2);
    $103 = $4;
    $104 = ($103|0)==(6);
    $or$cond25 = $102 | $104;
    if (!($or$cond25)) {
     label = 33;
    }
   } else {
    label = 33;
   }
  } else {
   label = 33;
  }
  if ((label|0) == 33) {
   $105 = $0;
   _png_warning($105,14995);
   $error = 1;
  }
  $106 = $0;
  $107 = ((($106)) + 208|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $108 & 4096;
  $110 = ($109|0)!=(0);
  if ($110) {
   $111 = $0;
   _png_warning($111,15025);
   $error = 1;
  }
 }
 $112 = $error;
 $113 = ($112|0)==(1);
 if ($113) {
  $114 = $0;
  _png_error($114,15055);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _png_gt($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = ($2>>>0)>($3>>>0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _png_check_fp_number($string,$size,$statep,$whereami) {
 $string = $string|0;
 $size = $size|0;
 $statep = $statep|0;
 $whereami = $whereami|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $i = 0, $state = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $string;
 $1 = $size;
 $2 = $statep;
 $3 = $whereami;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $state = $5;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $i = $7;
 L1: while(1) {
  $8 = $i;
  $9 = $1;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $i;
  $12 = $0;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  switch ($15|0) {
  case 43:  {
   $type = 4;
   break;
  }
  case 45:  {
   $type = 132;
   break;
  }
  case 46:  {
   $type = 16;
   break;
  }
  case 48:  {
   $type = 8;
   break;
  }
  case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
   $type = 264;
   break;
  }
  case 101: case 69:  {
   $type = 32;
   break;
  }
  default: {
   break L1;
  }
  }
  $16 = $state;
  $17 = $16 & 3;
  $18 = $type;
  $19 = $18 & 60;
  $20 = (($17) + ($19))|0;
  L12: do {
   switch ($20|0) {
   case 4:  {
    $21 = $state;
    $22 = $21 & 60;
    $23 = ($22|0)!=(0);
    if ($23) {
     break L1;
    }
    $24 = $type;
    $25 = $state;
    $26 = $25 | $24;
    $state = $26;
    break;
   }
   case 16:  {
    $27 = $state;
    $28 = $27 & 16;
    $29 = ($28|0)!=(0);
    if ($29) {
     break L1;
    }
    $30 = $state;
    $31 = $30 & 8;
    $32 = ($31|0)!=(0);
    $33 = $type;
    if ($32) {
     $34 = $state;
     $35 = $34 | $33;
     $state = $35;
     break L12;
    } else {
     $36 = 1 | $33;
     $37 = $state;
     $38 = $37 & 448;
     $39 = $36 | $38;
     $state = $39;
     break L12;
    }
    break;
   }
   case 8:  {
    $40 = $state;
    $41 = $40 & 16;
    $42 = ($41|0)!=(0);
    if ($42) {
     $43 = $state;
     $44 = $43 & 448;
     $45 = 17 | $44;
     $state = $45;
    }
    $46 = $type;
    $47 = $46 | 64;
    $48 = $state;
    $49 = $48 | $47;
    $state = $49;
    break;
   }
   case 32:  {
    $50 = $state;
    $51 = $50 & 8;
    $52 = ($51|0)==(0);
    if ($52) {
     break L1;
    }
    $53 = $state;
    $54 = $53 & 448;
    $55 = 2 | $54;
    $state = $55;
    break;
   }
   case 9:  {
    $56 = $type;
    $57 = $56 | 64;
    $58 = $state;
    $59 = $58 | $57;
    $state = $59;
    break;
   }
   case 33:  {
    $60 = $state;
    $61 = $60 & 8;
    $62 = ($61|0)==(0);
    if ($62) {
     break L1;
    }
    $63 = $state;
    $64 = $63 & 448;
    $65 = 2 | $64;
    $state = $65;
    break;
   }
   case 6:  {
    $66 = $state;
    $67 = $66 & 60;
    $68 = ($67|0)!=(0);
    if ($68) {
     break L1;
    }
    $69 = $state;
    $70 = $69 | 4;
    $state = $70;
    break;
   }
   case 10:  {
    $71 = $state;
    $72 = $71 | 72;
    $state = $72;
    break;
   }
   default: {
    break L1;
   }
   }
  } while(0);
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 $75 = $state;
 $76 = $2;
 HEAP32[$76>>2] = $75;
 $77 = $i;
 $78 = $3;
 HEAP32[$78>>2] = $77;
 $79 = $state;
 $80 = $79 & 8;
 $81 = ($80|0)!=(0);
 $82 = $81&1;
 STACKTOP = sp;return ($82|0);
}
function _png_check_fp_string($string,$size) {
 $string = $string|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $char_index = 0, $state = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $state = sp + 4|0;
 $char_index = sp;
 $1 = $string;
 $2 = $size;
 HEAP32[$state>>2] = 0;
 HEAP32[$char_index>>2] = 0;
 $3 = $1;
 $4 = $2;
 $5 = (_png_check_fp_number($3,$4,$state,$char_index)|0);
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = HEAP32[$char_index>>2]|0;
   $8 = $2;
   $9 = ($7|0)==($8|0);
   if (!($9)) {
    $10 = HEAP32[$char_index>>2]|0;
    $11 = $1;
    $12 = (($11) + ($10)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = ($14|0)==(0);
    if (!($15)) {
     break;
    }
   }
   $16 = HEAP32[$state>>2]|0;
   $0 = $16;
   $17 = $0;
   STACKTOP = sp;return ($17|0);
  }
 } while(0);
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;return ($17|0);
}
function _png_reciprocal2($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = ($5|0)!=(0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $1;
  $8 = (+($7|0));
  $9 = 1.0E+15 / $8;
  $r = $9;
  $10 = $2;
  $11 = (+($10|0));
  $12 = $r;
  $13 = $12 / $11;
  $r = $13;
  $14 = $r;
  $15 = $14 + 0.5;
  $16 = (+Math_floor((+$15)));
  $r = $16;
  $17 = $r;
  $18 = $17 <= 2147483647.0;
  $19 = $r;
  $20 = $19 >= -2147483648.0;
  $or$cond3 = $18 & $20;
  if ($or$cond3) {
   $21 = $r;
   $22 = (~~(($21)));
   $0 = $22;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 }
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _png_gamma_8bit_correct($value,$gamma_val) {
 $value = $value|0;
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, $or$cond = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $gamma_val;
 $3 = $1;
 $4 = ($3>>>0)>(0);
 $5 = $1;
 $6 = ($5>>>0)<(255);
 $or$cond = $4 & $6;
 $7 = $1;
 if ($or$cond) {
  $8 = (+($7|0));
  $9 = $8 / 255.0;
  $10 = $2;
  $11 = (+($10|0));
  $12 = $11 * 1.0000000000000001E-5;
  $13 = (+Math_pow((+$9),(+$12)));
  $14 = 255.0 * $13;
  $15 = $14 + 0.5;
  $16 = (+Math_floor((+$15)));
  $r = $16;
  $17 = $r;
  $18 = (~~(($17))&255);
  $0 = $18;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 } else {
  $19 = $7 & 255;
  $20 = $19&255;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _png_gamma_16bit_correct($value,$gamma_val) {
 $value = $value|0;
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, $or$cond = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $value;
 $2 = $gamma_val;
 $3 = $1;
 $4 = ($3>>>0)>(0);
 $5 = $1;
 $6 = ($5>>>0)<(65535);
 $or$cond = $4 & $6;
 $7 = $1;
 if ($or$cond) {
  $8 = (+($7|0));
  $9 = $8 / 65535.0;
  $10 = $2;
  $11 = (+($10|0));
  $12 = $11 * 1.0000000000000001E-5;
  $13 = (+Math_pow((+$9),(+$12)));
  $14 = 65535.0 * $13;
  $15 = $14 + 0.5;
  $16 = (+Math_floor((+$15)));
  $r = $16;
  $17 = $r;
  $18 = (~~(($17))&65535);
  $0 = $18;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 } else {
  $19 = $7&65535;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _png_gamma_correct($png_ptr,$value,$gamma_val) {
 $png_ptr = $png_ptr|0;
 $value = $value|0;
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $value;
 $3 = $gamma_val;
 $4 = $1;
 $5 = ((($4)) + 428|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(8);
 $9 = $2;
 $10 = $3;
 if ($8) {
  $11 = (_png_gamma_8bit_correct($9,$10)|0);
  $12 = $11&255;
  $0 = $12;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $13 = (_png_gamma_16bit_correct($9,$10)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _png_destroy_gamma_table($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $i = 0, $i1 = 0, $i3 = 0;
 var $istop = 0, $istop2 = 0, $istop4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 484|0);
 $4 = HEAP32[$3>>2]|0;
 _png_free($1,$4);
 $5 = $0;
 $6 = ((($5)) + 484|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 488|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $0;
  $12 = ((($11)) + 476|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (8 - ($13))|0;
  $15 = 1 << $14;
  $istop = $15;
  $i = 0;
  while(1) {
   $16 = $i;
   $17 = $istop;
   $18 = ($16|0)<($17|0);
   $19 = $0;
   if (!($18)) {
    break;
   }
   $20 = $i;
   $21 = $0;
   $22 = ((($21)) + 488|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($20<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   _png_free($19,$25);
   $26 = $i;
   $27 = (($26) + 1)|0;
   $i = $27;
  }
  $28 = $0;
  $29 = ((($28)) + 488|0);
  $30 = HEAP32[$29>>2]|0;
  _png_free($19,$30);
  $31 = $0;
  $32 = ((($31)) + 488|0);
  HEAP32[$32>>2] = 0;
 }
 $33 = $0;
 $34 = $0;
 $35 = ((($34)) + 492|0);
 $36 = HEAP32[$35>>2]|0;
 _png_free($33,$36);
 $37 = $0;
 $38 = ((($37)) + 492|0);
 HEAP32[$38>>2] = 0;
 $39 = $0;
 $40 = $0;
 $41 = ((($40)) + 496|0);
 $42 = HEAP32[$41>>2]|0;
 _png_free($39,$42);
 $43 = $0;
 $44 = ((($43)) + 496|0);
 HEAP32[$44>>2] = 0;
 $45 = $0;
 $46 = ((($45)) + 500|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $0;
  $50 = ((($49)) + 476|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (8 - ($51))|0;
  $53 = 1 << $52;
  $istop2 = $53;
  $i1 = 0;
  while(1) {
   $54 = $i1;
   $55 = $istop2;
   $56 = ($54|0)<($55|0);
   $57 = $0;
   if (!($56)) {
    break;
   }
   $58 = $i1;
   $59 = $0;
   $60 = ((($59)) + 500|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + ($58<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   _png_free($57,$63);
   $64 = $i1;
   $65 = (($64) + 1)|0;
   $i1 = $65;
  }
  $66 = $0;
  $67 = ((($66)) + 500|0);
  $68 = HEAP32[$67>>2]|0;
  _png_free($57,$68);
  $69 = $0;
  $70 = ((($69)) + 500|0);
  HEAP32[$70>>2] = 0;
 }
 $71 = $0;
 $72 = ((($71)) + 504|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)!=(0|0);
 if (!($74)) {
  STACKTOP = sp;return;
 }
 $75 = $0;
 $76 = ((($75)) + 476|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (8 - ($77))|0;
 $79 = 1 << $78;
 $istop4 = $79;
 $i3 = 0;
 while(1) {
  $80 = $i3;
  $81 = $istop4;
  $82 = ($80|0)<($81|0);
  $83 = $0;
  if (!($82)) {
   break;
  }
  $84 = $i3;
  $85 = $0;
  $86 = ((($85)) + 504|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($84<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  _png_free($83,$89);
  $90 = $i3;
  $91 = (($90) + 1)|0;
  $i3 = $91;
 }
 $92 = $0;
 $93 = ((($92)) + 504|0);
 $94 = HEAP32[$93>>2]|0;
 _png_free($83,$94);
 $95 = $0;
 $96 = ((($95)) + 504|0);
 HEAP32[$96>>2] = 0;
 STACKTOP = sp;return;
}
function _png_build_gamma_table($png_ptr,$bit_depth) {
 $png_ptr = $png_ptr|0;
 $bit_depth = $bit_depth|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $shift = 0, $sig_bit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $bit_depth;
 $2 = $0;
 $3 = ((($2)) + 484|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  label = 3;
 } else {
  $6 = $0;
  $7 = ((($6)) + 488|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $10 = $0;
  _png_warning($10,15073);
  $11 = $0;
  _png_destroy_gamma_table($11);
 }
 $12 = $1;
 $13 = ($12|0)<=(8);
 $14 = $0;
 if ($13) {
  $15 = $0;
  $16 = ((($15)) + 484|0);
  $17 = $0;
  $18 = ((($17)) + 480|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)>(0);
  if ($20) {
   $21 = $0;
   $22 = ((($21)) + 792|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $0;
   $25 = ((($24)) + 480|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_png_reciprocal2($23,$26)|0);
   $28 = $27;
  } else {
   $28 = 100000;
  }
  _png_build_8bit_table($14,$16,$28);
  $29 = $0;
  $30 = ((($29)) + 216|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 6291584;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   STACKTOP = sp;return;
  }
  $34 = $0;
  $35 = $0;
  $36 = ((($35)) + 496|0);
  $37 = $0;
  $38 = ((($37)) + 792|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_png_reciprocal($39)|0);
  _png_build_8bit_table($34,$36,$40);
  $41 = $0;
  $42 = $0;
  $43 = ((($42)) + 492|0);
  $44 = $0;
  $45 = ((($44)) + 480|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)>(0);
  $48 = $0;
  if ($47) {
   $49 = ((($48)) + 480|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (_png_reciprocal($50)|0);
   $54 = $51;
  } else {
   $52 = ((($48)) + 792|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53;
  }
  _png_build_8bit_table($41,$43,$54);
  STACKTOP = sp;return;
 }
 $55 = ((($14)) + 427|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $57 & 2;
 $59 = ($58|0)!=(0);
 $60 = $0;
 $61 = ((($60)) + 508|0);
 if ($59) {
  $62 = HEAP8[$61>>0]|0;
  $sig_bit = $62;
  $63 = $0;
  $64 = ((($63)) + 508|0);
  $65 = ((($64)) + 1|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $sig_bit;
  $69 = $68&255;
  $70 = ($67|0)>($69|0);
  if ($70) {
   $71 = $0;
   $72 = ((($71)) + 508|0);
   $73 = ((($72)) + 1|0);
   $74 = HEAP8[$73>>0]|0;
   $sig_bit = $74;
  }
  $75 = $0;
  $76 = ((($75)) + 508|0);
  $77 = ((($76)) + 2|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $sig_bit;
  $81 = $80&255;
  $82 = ($79|0)>($81|0);
  if ($82) {
   $83 = $0;
   $84 = ((($83)) + 508|0);
   $85 = ((($84)) + 2|0);
   $86 = HEAP8[$85>>0]|0;
   $sig_bit = $86;
  }
 } else {
  $87 = ((($61)) + 3|0);
  $88 = HEAP8[$87>>0]|0;
  $sig_bit = $88;
 }
 $89 = $sig_bit;
 $90 = $89&255;
 $91 = ($90|0)>(0);
 if ($91) {
  $92 = $sig_bit;
  $93 = $92&255;
  $94 = ($93>>>0)<(16);
  if ($94) {
   $95 = $sig_bit;
   $96 = $95&255;
   $97 = (16 - ($96))|0;
   $98 = $97 & 255;
   $99 = $98&255;
   $shift = $99;
  } else {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $shift = 0;
 }
 $100 = $0;
 $101 = ((($100)) + 216|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $102 & 67109888;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $shift;
  $106 = $105&255;
  $107 = ($106>>>0)<(5);
  if ($107) {
   $shift = 5;
  }
 }
 $108 = $shift;
 $109 = $108&255;
 $110 = ($109>>>0)>(8);
 if ($110) {
  $shift = 8;
 }
 $111 = $shift;
 $112 = $111&255;
 $113 = $0;
 $114 = ((($113)) + 476|0);
 HEAP32[$114>>2] = $112;
 $115 = $0;
 $116 = ((($115)) + 216|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 & 67109888;
 $119 = ($118|0)!=(0);
 $120 = $0;
 $121 = $0;
 $122 = ((($121)) + 488|0);
 $123 = $shift;
 $124 = $123&255;
 $125 = $0;
 $126 = ((($125)) + 480|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)>(0);
 if ($119) {
  if ($128) {
   $129 = $0;
   $130 = ((($129)) + 792|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $0;
   $133 = ((($132)) + 480|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (_png_product2($131,$134)|0);
   $136 = $135;
  } else {
   $136 = 100000;
  }
  _png_build_16to8_table($120,$122,$124,$136);
 } else {
  if ($128) {
   $137 = $0;
   $138 = ((($137)) + 792|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $0;
   $141 = ((($140)) + 480|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (_png_reciprocal2($139,$142)|0);
   $144 = $143;
  } else {
   $144 = 100000;
  }
  _png_build_16bit_table($120,$122,$124,$144);
 }
 $145 = $0;
 $146 = ((($145)) + 216|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $147 & 6291584;
 $149 = ($148|0)!=(0);
 if (!($149)) {
  STACKTOP = sp;return;
 }
 $150 = $0;
 $151 = $0;
 $152 = ((($151)) + 504|0);
 $153 = $shift;
 $154 = $153&255;
 $155 = $0;
 $156 = ((($155)) + 792|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = (_png_reciprocal($157)|0);
 _png_build_16bit_table($150,$152,$154,$158);
 $159 = $0;
 $160 = $0;
 $161 = ((($160)) + 500|0);
 $162 = $shift;
 $163 = $162&255;
 $164 = $0;
 $165 = ((($164)) + 480|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = ($166|0)>(0);
 $168 = $0;
 if ($167) {
  $169 = ((($168)) + 480|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (_png_reciprocal($170)|0);
  $174 = $171;
 } else {
  $172 = ((($168)) + 792|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173;
 }
 _png_build_16bit_table($159,$161,$163,$174);
 STACKTOP = sp;return;
}
function _png_build_8bit_table($png_ptr,$ptable,$gamma_val) {
 $png_ptr = $png_ptr|0;
 $ptable = $ptable|0;
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptable;
 $2 = $gamma_val;
 $3 = $0;
 $4 = (_png_malloc($3,256)|0);
 $5 = $1;
 HEAP32[$5>>2] = $4;
 $table = $4;
 $6 = $2;
 $7 = (_png_gamma_significant($6)|0);
 $8 = ($7|0)!=(0);
 $i = 0;
 if ($8) {
  while(1) {
   $9 = $i;
   $10 = ($9>>>0)<(256);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $2;
   $13 = (_png_gamma_8bit_correct($11,$12)|0);
   $14 = $i;
   $15 = $table;
   $16 = (($15) + ($14)|0);
   HEAP8[$16>>0] = $13;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $19 = $i;
   $20 = ($19>>>0)<(256);
   if (!($20)) {
    break;
   }
   $21 = $i;
   $22 = $21 & 255;
   $23 = $22&255;
   $24 = $i;
   $25 = $table;
   $26 = (($25) + ($24)|0);
   HEAP8[$26>>0] = $23;
   $27 = $i;
   $28 = (($27) + 1)|0;
   $i = $28;
  }
  STACKTOP = sp;return;
 }
}
function _png_product2($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $or$cond = 0, $r = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = (+($3|0));
 $5 = $4 * 1.0000000000000001E-5;
 $r = $5;
 $6 = $2;
 $7 = (+($6|0));
 $8 = $r;
 $9 = $8 * $7;
 $r = $9;
 $10 = $r;
 $11 = $10 + 0.5;
 $12 = (+Math_floor((+$11)));
 $r = $12;
 $13 = $r;
 $14 = $13 <= 2147483647.0;
 $15 = $r;
 $16 = $15 >= -2147483648.0;
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $r;
  $18 = (~~(($17)));
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _png_build_16to8_table($png_ptr,$ptable,$shift,$gamma_val) {
 $png_ptr = $png_ptr|0;
 $ptable = $ptable|0;
 $shift = $shift|0;
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $bound = 0, $i = 0, $last = 0, $max = 0, $num = 0, $out = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptable;
 $2 = $shift;
 $3 = $gamma_val;
 $4 = $2;
 $5 = (8 - ($4))|0;
 $6 = 1 << $5;
 $num = $6;
 $7 = $2;
 $8 = (16 - ($7))|0;
 $9 = 1 << $8;
 $10 = (($9) - 1)|0;
 $max = $10;
 $11 = $0;
 $12 = $num;
 $13 = $12<<2;
 $14 = (_png_calloc($11,$13)|0);
 $15 = $1;
 HEAP32[$15>>2] = $14;
 $table = $14;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $num;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $0;
  $20 = (_png_malloc($19,512)|0);
  $21 = $i;
  $22 = $table;
  $23 = (($22) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 $last = 0;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = ($26>>>0)<(255);
  if (!($27)) {
   break;
  }
  $28 = $i;
  $29 = ($28*257)|0;
  $30 = $29&65535;
  $out = $30;
  $31 = $out;
  $32 = $31&65535;
  $33 = (($32) + 128)|0;
  $34 = $3;
  $35 = (_png_gamma_16bit_correct($33,$34)|0);
  $36 = $35&65535;
  $bound = $36;
  $37 = $bound;
  $38 = $max;
  $39 = Math_imul($37, $38)|0;
  $40 = (($39) + 32768)|0;
  $41 = (($40>>>0) / 65535)&-1;
  $42 = (($41) + 1)|0;
  $bound = $42;
  while(1) {
   $43 = $last;
   $44 = $bound;
   $45 = ($43>>>0)<($44>>>0);
   if (!($45)) {
    break;
   }
   $46 = $out;
   $47 = $last;
   $48 = $2;
   $49 = (8 - ($48))|0;
   $50 = $47 >>> $49;
   $51 = $last;
   $52 = $2;
   $53 = 255 >>> $52;
   $54 = $51 & $53;
   $55 = $table;
   $56 = (($55) + ($54<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + ($50<<1)|0);
   HEAP16[$58>>1] = $46;
   $59 = $last;
   $60 = (($59) + 1)|0;
   $last = $60;
  }
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 while(1) {
  $63 = $last;
  $64 = $num;
  $65 = $64 << 8;
  $66 = ($63>>>0)<($65>>>0);
  if (!($66)) {
   break;
  }
  $67 = $last;
  $68 = $2;
  $69 = (8 - ($68))|0;
  $70 = $67 >>> $69;
  $71 = $last;
  $72 = $2;
  $73 = 255 >> $72;
  $74 = $71 & $73;
  $75 = $table;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($70<<1)|0);
  HEAP16[$78>>1] = -1;
  $79 = $last;
  $80 = (($79) + 1)|0;
  $last = $80;
 }
 STACKTOP = sp;return;
}
function _png_build_16bit_table($png_ptr,$ptable,$shift,$gamma_val) {
 $png_ptr = $png_ptr|0;
 $ptable = $ptable|0;
 $shift = $shift|0;
 $gamma_val = $gamma_val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $d = 0.0, $fmax = 0.0, $i = 0, $ig = 0, $ig2 = 0, $j = 0, $j1 = 0, $max = 0, $max_by_2 = 0, $num = 0, $sub_table = 0, $table = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptable;
 $2 = $shift;
 $3 = $gamma_val;
 $4 = $2;
 $5 = (8 - ($4))|0;
 $6 = 1 << $5;
 $num = $6;
 $7 = $2;
 $8 = (16 - ($7))|0;
 $9 = 1 << $8;
 $10 = (($9) - 1)|0;
 $11 = (+($10|0));
 $12 = 1.0 / $11;
 $fmax = $12;
 $13 = $2;
 $14 = (16 - ($13))|0;
 $15 = 1 << $14;
 $16 = (($15) - 1)|0;
 $max = $16;
 $17 = $2;
 $18 = (15 - ($17))|0;
 $19 = 1 << $18;
 $max_by_2 = $19;
 $20 = $0;
 $21 = $num;
 $22 = $21<<2;
 $23 = (_png_calloc($20,$22)|0);
 $24 = $1;
 HEAP32[$24>>2] = $23;
 $table = $23;
 $i = 0;
 while(1) {
  $25 = $i;
  $26 = $num;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $0;
  $29 = (_png_malloc($28,512)|0);
  $30 = $i;
  $31 = $table;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $sub_table = $29;
  $33 = $3;
  $34 = (_png_gamma_significant($33)|0);
  $35 = ($34|0)!=(0);
  L4: do {
   if ($35) {
    $j = 0;
    while(1) {
     $36 = $j;
     $37 = ($36>>>0)<(256);
     if (!($37)) {
      break L4;
     }
     $38 = $j;
     $39 = $2;
     $40 = (8 - ($39))|0;
     $41 = $38 << $40;
     $42 = $i;
     $43 = (($41) + ($42))|0;
     $ig = $43;
     $44 = $ig;
     $45 = (+($44>>>0));
     $46 = $fmax;
     $47 = $45 * $46;
     $48 = $3;
     $49 = (+($48|0));
     $50 = $49 * 1.0000000000000001E-5;
     $51 = (+Math_pow((+$47),(+$50)));
     $52 = 65535.0 * $51;
     $53 = $52 + 0.5;
     $54 = (+Math_floor((+$53)));
     $d = $54;
     $55 = $d;
     $56 = (~~(($55))&65535);
     $57 = $j;
     $58 = $sub_table;
     $59 = (($58) + ($57<<1)|0);
     HEAP16[$59>>1] = $56;
     $60 = $j;
     $61 = (($60) + 1)|0;
     $j = $61;
    }
   } else {
    $j1 = 0;
    while(1) {
     $62 = $j1;
     $63 = ($62>>>0)<(256);
     if (!($63)) {
      break L4;
     }
     $64 = $j1;
     $65 = $2;
     $66 = (8 - ($65))|0;
     $67 = $64 << $66;
     $68 = $i;
     $69 = (($67) + ($68))|0;
     $ig2 = $69;
     $70 = $2;
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $ig2;
      $73 = ($72*65535)|0;
      $74 = $max_by_2;
      $75 = (($73) + ($74))|0;
      $76 = $max;
      $77 = (($75>>>0) / ($76>>>0))&-1;
      $ig2 = $77;
     }
     $78 = $ig2;
     $79 = $78&65535;
     $80 = $j1;
     $81 = $sub_table;
     $82 = (($81) + ($80<<1)|0);
     HEAP16[$82>>1] = $79;
     $83 = $j1;
     $84 = (($83) + 1)|0;
     $j1 = $84;
    }
   }
  } while(0);
  $85 = $i;
  $86 = (($85) + 1)|0;
  $i = $86;
 }
 STACKTOP = sp;return;
}
function _png_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $0;
  $5 = ((($4)) + 168|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $0;
   $9 = ((($8)) + 168|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $0;
   $12 = $1;
   FUNCTION_TABLE_vii[$10 & 63]($11,$12);
  }
 }
 $13 = $0;
 $14 = $1;
 _png_default_error($13,$14);
 // unreachable;
}
function _png_default_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = HEAP32[2226]|0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 $5 = $1;
 $6 = $4 ? $5 : 15099;
 HEAP32[$vararg_buffer>>2] = $6;
 (_fprintf($2,15109,$vararg_buffer)|0);
 $7 = HEAP32[2226]|0;
 (_fprintf($7,15126,$vararg_buffer1)|0);
 $8 = $0;
 _png_longjmp($8,1);
 // unreachable;
}
function _png_longjmp($png_ptr,$val) {
 $png_ptr = $png_ptr|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $val;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  _abort();
  // unreachable;
 }
 $4 = $0;
 $5 = ((($4)) + 156|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  _abort();
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 160|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  _abort();
  // unreachable;
 }
 $12 = $0;
 $13 = ((($12)) + 156|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = ((($15)) + 160|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 FUNCTION_TABLE_vii[$14 & 63]($17,$18);
 _abort();
 // unreachable;
}
function _png_safecat($buffer,$bufsize,$pos,$string) {
 $buffer = $buffer|0;
 $bufsize = $bufsize|0;
 $pos = $pos|0;
 $string = $string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $buffer;
 $1 = $bufsize;
 $2 = $pos;
 $3 = $string;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $2;
 $7 = $1;
 $8 = ($6>>>0)<($7>>>0);
 if (!($8)) {
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 L7: do {
  if ($10) {
   while(1) {
    $11 = $3;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)!=(0);
    if (!($14)) {
     break L7;
    }
    $15 = $2;
    $16 = $1;
    $17 = (($16) - 1)|0;
    $18 = ($15>>>0)<($17>>>0);
    if (!($18)) {
     break L7;
    }
    $19 = $3;
    $20 = ((($19)) + 1|0);
    $3 = $20;
    $21 = HEAP8[$19>>0]|0;
    $22 = $2;
    $23 = (($22) + 1)|0;
    $2 = $23;
    $24 = $0;
    $25 = (($24) + ($22)|0);
    HEAP8[$25>>0] = $21;
   }
  }
 } while(0);
 $26 = $2;
 $27 = $0;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = $2;
 STACKTOP = sp;return ($29|0);
}
function _png_format_number($start,$end,$format,$number) {
 $start = $start|0;
 $end = $end|0;
 $format = $format|0;
 $number = $number|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $count = 0, $mincount = 0, $or$cond = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $start;
 $1 = $end;
 $2 = $format;
 $3 = $number;
 $count = 0;
 $mincount = 1;
 $output = 0;
 $4 = $1;
 $5 = ((($4)) + -1|0);
 $1 = $5;
 HEAP8[$5>>0] = 0;
 while(1) {
  $6 = $1;
  $7 = $0;
  $8 = ($6>>>0)>($7>>>0);
  if (!($8)) {
   label = 21;
   break;
  }
  $9 = $3;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   $11 = $count;
   $12 = $mincount;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    label = 21;
    break;
   }
  }
  $14 = $2;
  switch ($14|0) {
  case 5:  {
   $mincount = 5;
   $15 = $output;
   $16 = ($15|0)!=(0);
   if ($16) {
    label = 8;
   } else {
    $17 = $3;
    $18 = (($17>>>0) % 10)&-1;
    $19 = ($18|0)!=(0);
    if ($19) {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    label = 0;
    $20 = $3;
    $21 = (($20>>>0) % 10)&-1;
    $22 = (15128 + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $1;
    $25 = ((($24)) + -1|0);
    $1 = $25;
    HEAP8[$25>>0] = $23;
    $output = 1;
   }
   $26 = $3;
   $27 = (($26>>>0) / 10)&-1;
   $3 = $27;
   break;
  }
  case 2:  {
   $mincount = 2;
   label = 11;
   break;
  }
  case 1:  {
   label = 11;
   break;
  }
  case 4:  {
   $mincount = 2;
   label = 13;
   break;
  }
  case 3:  {
   label = 13;
   break;
  }
  default: {
   $3 = 0;
  }
  }
  if ((label|0) == 11) {
   label = 0;
   $28 = $3;
   $29 = (($28>>>0) % 10)&-1;
   $30 = (15128 + ($29)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $1;
   $33 = ((($32)) + -1|0);
   $1 = $33;
   HEAP8[$33>>0] = $31;
   $34 = $3;
   $35 = (($34>>>0) / 10)&-1;
   $3 = $35;
  }
  else if ((label|0) == 13) {
   label = 0;
   $36 = $3;
   $37 = $36 & 15;
   $38 = (15128 + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $1;
   $41 = ((($40)) + -1|0);
   $1 = $41;
   HEAP8[$41>>0] = $39;
   $42 = $3;
   $43 = $42 >>> 4;
   $3 = $43;
  }
  $44 = $count;
  $45 = (($44) + 1)|0;
  $count = $45;
  $46 = $2;
  $47 = ($46|0)==(5);
  $48 = $count;
  $49 = ($48|0)==(5);
  $or$cond = $47 & $49;
  if (!($or$cond)) {
   continue;
  }
  $50 = $1;
  $51 = $0;
  $52 = ($50>>>0)>($51>>>0);
  if (!($52)) {
   continue;
  }
  $53 = $output;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $1;
   $56 = ((($55)) + -1|0);
   $1 = $56;
   HEAP8[$56>>0] = 46;
   continue;
  }
  $57 = $3;
  $58 = ($57|0)==(0);
  if (!($58)) {
   continue;
  }
  $59 = $1;
  $60 = ((($59)) + -1|0);
  $1 = $60;
  HEAP8[$60>>0] = 48;
 }
 if ((label|0) == 21) {
  $61 = $1;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _png_warning($png_ptr,$warning_message) {
 $png_ptr = $png_ptr|0;
 $warning_message = $warning_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $warning_message;
 $offset = 0;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 L1: do {
  if ($3) {
   $4 = $1;
   $5 = HEAP8[$4>>0]|0;
   $6 = $5 << 24 >> 24;
   $7 = ($6|0)==(35);
   if ($7) {
    $offset = 1;
    while(1) {
     $8 = $offset;
     $9 = ($8|0)<(15);
     if (!($9)) {
      break L1;
     }
     $10 = $offset;
     $11 = $1;
     $12 = (($11) + ($10)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13 << 24 >> 24;
     $15 = ($14|0)==(32);
     if ($15) {
      break L1;
     }
     $16 = $offset;
     $17 = (($16) + 1)|0;
     $offset = $17;
    }
   }
  }
 } while(0);
 $18 = $0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $0;
  $21 = ((($20)) + 172|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $0;
   $25 = ((($24)) + 172|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $0;
   $28 = $1;
   $29 = $offset;
   $30 = (($28) + ($29)|0);
   FUNCTION_TABLE_vii[$26 & 63]($27,$30);
   STACKTOP = sp;return;
  }
 }
 $31 = $0;
 $32 = $1;
 $33 = $offset;
 $34 = (($32) + ($33)|0);
 _png_default_warning($31,$34);
 STACKTOP = sp;return;
}
function _png_default_warning($png_ptr,$warning_message) {
 $png_ptr = $png_ptr|0;
 $warning_message = $warning_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $png_ptr;
 $1 = $warning_message;
 $2 = HEAP32[2226]|0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $3;
 (_fprintf($2,15145,$vararg_buffer)|0);
 $4 = HEAP32[2226]|0;
 (_fprintf($4,15126,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _png_benign_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ((($2)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1048576;
 $6 = ($5|0)!=(0);
 $7 = $0;
 $8 = ((($7)) + 208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 32768;
 $11 = ($10|0)!=(0);
 if (!($6)) {
  if (!($11)) {
   $26 = $0;
   $27 = $1;
   _png_error($26,$27);
   // unreachable;
  }
  $20 = $0;
  $21 = ((($20)) + 376|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $0;
   $25 = $1;
   _png_chunk_error($24,$25);
   // unreachable;
  } else {
   $26 = $0;
   $27 = $1;
   _png_error($26,$27);
   // unreachable;
  }
 }
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 376|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = $1;
   _png_chunk_warning($16,$17);
   STACKTOP = sp;return;
  }
 }
 $18 = $0;
 $19 = $1;
 _png_warning($18,$19);
 STACKTOP = sp;return;
}
function _png_chunk_warning($png_ptr,$warning_message) {
 $png_ptr = $png_ptr|0;
 $warning_message = $warning_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp + 8|0;
 $0 = $png_ptr;
 $1 = $warning_message;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = $0;
 if ($3) {
  $5 = $1;
  _png_warning($4,$5);
  STACKTOP = sp;return;
 } else {
  $6 = $1;
  _png_format_buffer($4,$msg,$6);
  $7 = $0;
  _png_warning($7,$msg);
  STACKTOP = sp;return;
 }
}
function _png_format_buffer($png_ptr,$buffer,$error_message) {
 $png_ptr = $png_ptr|0;
 $buffer = $buffer|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $c = 0, $chunk_name = 0, $iin = 0, $iout = 0, $ishift = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $buffer;
 $2 = $error_message;
 $3 = $0;
 $4 = ((($3)) + 376|0);
 $5 = HEAP32[$4>>2]|0;
 $chunk_name = $5;
 $iout = 0;
 $ishift = 24;
 while(1) {
  $6 = $ishift;
  $7 = ($6|0)>=(0);
  if (!($7)) {
   break;
  }
  $8 = $chunk_name;
  $9 = $ishift;
  $10 = $8 >>> $9;
  $11 = $10 & 255;
  $c = $11;
  $12 = $ishift;
  $13 = (($12) - 8)|0;
  $ishift = $13;
  $14 = $c;
  $15 = ($14|0)<(65);
  $16 = $c;
  $17 = ($16|0)>(122);
  $or$cond = $15 | $17;
  if ($or$cond) {
   $24 = 1;
  } else {
   $18 = $c;
   $19 = ($18|0)>(90);
   $20 = $c;
   $21 = ($20|0)<(97);
   $22 = $19 ? $21 : 0;
   $24 = $22;
  }
  $23 = $24&1;
  $25 = ($23|0)!=(0);
  if ($25) {
   $26 = $iout;
   $27 = (($26) + 1)|0;
   $iout = $27;
   $28 = $1;
   $29 = (($28) + ($26)|0);
   HEAP8[$29>>0] = 91;
   $30 = $c;
   $31 = $30 & 240;
   $32 = $31 >> 4;
   $33 = (20230 + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $iout;
   $36 = (($35) + 1)|0;
   $iout = $36;
   $37 = $1;
   $38 = (($37) + ($35)|0);
   HEAP8[$38>>0] = $34;
   $39 = $c;
   $40 = $39 & 15;
   $41 = (20230 + ($40)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $iout;
   $44 = (($43) + 1)|0;
   $iout = $44;
   $45 = $1;
   $46 = (($45) + ($43)|0);
   HEAP8[$46>>0] = $42;
   $47 = $iout;
   $48 = (($47) + 1)|0;
   $iout = $48;
   $49 = $1;
   $50 = (($49) + ($47)|0);
   HEAP8[$50>>0] = 93;
   continue;
  } else {
   $51 = $c;
   $52 = $51&255;
   $53 = $iout;
   $54 = (($53) + 1)|0;
   $iout = $54;
   $55 = $1;
   $56 = (($55) + ($53)|0);
   HEAP8[$56>>0] = $52;
   continue;
  }
 }
 $57 = $2;
 $58 = ($57|0)==(0|0);
 if ($58) {
  $59 = $iout;
  $60 = $1;
  $61 = (($60) + ($59)|0);
  HEAP8[$61>>0] = 0;
  STACKTOP = sp;return;
 }
 $iin = 0;
 $62 = $iout;
 $63 = (($62) + 1)|0;
 $iout = $63;
 $64 = $1;
 $65 = (($64) + ($62)|0);
 HEAP8[$65>>0] = 58;
 $66 = $iout;
 $67 = (($66) + 1)|0;
 $iout = $67;
 $68 = $1;
 $69 = (($68) + ($66)|0);
 HEAP8[$69>>0] = 32;
 while(1) {
  $70 = $iin;
  $71 = ($70|0)<(195);
  if (!($71)) {
   break;
  }
  $72 = $iin;
  $73 = $2;
  $74 = (($73) + ($72)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75 << 24 >> 24;
  $77 = ($76|0)!=(0);
  if (!($77)) {
   break;
  }
  $78 = $iin;
  $79 = (($78) + 1)|0;
  $iin = $79;
  $80 = $2;
  $81 = (($80) + ($78)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $iout;
  $84 = (($83) + 1)|0;
  $iout = $84;
  $85 = $1;
  $86 = (($85) + ($83)|0);
  HEAP8[$86>>0] = $82;
 }
 $87 = $iout;
 $88 = $1;
 $89 = (($88) + ($87)|0);
 HEAP8[$89>>0] = 0;
 STACKTOP = sp;return;
}
function _png_chunk_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $msg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp + 8|0;
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = $0;
 if ($3) {
  $5 = $1;
  _png_error($4,$5);
  // unreachable;
 } else {
  $6 = $1;
  _png_format_buffer($4,$msg,$6);
  $7 = $0;
  _png_error($7,$msg);
  // unreachable;
 }
}
function _png_app_warning($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ((($2)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2097152;
 $6 = ($5|0)!=(0);
 $7 = $0;
 $8 = $1;
 if ($6) {
  _png_warning($7,$8);
  STACKTOP = sp;return;
 } else {
  _png_error($7,$8);
  // unreachable;
 }
}
function _png_app_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ((($2)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4194304;
 $6 = ($5|0)!=(0);
 $7 = $0;
 $8 = $1;
 if ($6) {
  _png_warning($7,$8);
  STACKTOP = sp;return;
 } else {
  _png_error($7,$8);
  // unreachable;
 }
}
function _png_chunk_benign_error($png_ptr,$error_message) {
 $png_ptr = $png_ptr|0;
 $error_message = $error_message|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_message;
 $2 = $0;
 $3 = ((($2)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1048576;
 $6 = ($5|0)!=(0);
 $7 = $0;
 $8 = $1;
 if ($6) {
  _png_chunk_warning($7,$8);
  STACKTOP = sp;return;
 } else {
  _png_chunk_error($7,$8);
  // unreachable;
 }
}
function _png_chunk_report($png_ptr,$message,$error) {
 $png_ptr = $png_ptr|0;
 $message = $message|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $message;
 $2 = $error;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 32768;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $2;
  $9 = ($8|0)<(2);
  $10 = $0;
  $11 = $1;
  if ($9) {
   _png_chunk_warning($10,$11);
   STACKTOP = sp;return;
  } else {
   _png_chunk_benign_error($10,$11);
   STACKTOP = sp;return;
  }
 }
 $12 = $0;
 $13 = ((($12)) + 208|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 32768;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = ($17|0)<(1);
 $19 = $0;
 $20 = $1;
 if ($18) {
  _png_app_warning($19,$20);
  STACKTOP = sp;return;
 } else {
  _png_app_error($19,$20);
  STACKTOP = sp;return;
 }
}
function _png_set_longjmp_fn($png_ptr,$longjmp_fn,$jmp_buf_size) {
 $png_ptr = $png_ptr|0;
 $longjmp_fn = $longjmp_fn|0;
 $jmp_buf_size = $jmp_buf_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $longjmp_fn;
 $3 = $jmp_buf_size;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $6 = $1;
 $7 = ((($6)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 $10 = $1;
 $11 = ((($10)) + 164|0);
 do {
  if ($9) {
   HEAP32[$11>>2] = 0;
   $12 = $3;
   $13 = ($12>>>0)<=(156);
   $14 = $1;
   if ($13) {
    $15 = $1;
    $16 = ((($15)) + 160|0);
    HEAP32[$16>>2] = $14;
    break;
   }
   $17 = $3;
   $18 = (_png_malloc_warn($14,$17)|0);
   $19 = $1;
   $20 = ((($19)) + 160|0);
   HEAP32[$20>>2] = $18;
   $21 = $1;
   $22 = ((($21)) + 160|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    $25 = $3;
    $26 = $1;
    $27 = ((($26)) + 164|0);
    HEAP32[$27>>2] = $25;
    break;
   }
   $0 = 0;
   $47 = $0;
   STACKTOP = sp;return ($47|0);
  } else {
   $28 = HEAP32[$11>>2]|0;
   $size = $28;
   $29 = $size;
   $30 = ($29|0)==(0);
   if ($30) {
    $size = 156;
    $31 = $1;
    $32 = ((($31)) + 160|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    $35 = ($33|0)!=($34|0);
    if ($35) {
     $36 = $1;
     _png_error($36,15164);
     // unreachable;
    }
   }
   $37 = $size;
   $38 = $3;
   $39 = ($37|0)!=($38|0);
   if ($39) {
    $40 = $1;
    _png_warning($40,15195);
    $0 = 0;
    $47 = $0;
    STACKTOP = sp;return ($47|0);
   }
  }
 } while(0);
 $41 = $2;
 $42 = $1;
 $43 = ((($42)) + 156|0);
 HEAP32[$43>>2] = $41;
 $44 = $1;
 $45 = ((($44)) + 160|0);
 $46 = HEAP32[$45>>2]|0;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _png_free_jmpbuf($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $$reg2mem5$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cond = 0, $cond7 = 0, $free_jmp_buf = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $free_jmp_buf = sp;
 $0 = ($png_ptr|0)!=(0|0);
 if (!($0)) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 $1 = ((($png_ptr)) + 160|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 L4: do {
  if ($3) {
   $4 = ((($png_ptr)) + 164|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5>>>0)>(0);
   if ($6) {
    $7 = ($2|0)!=($png_ptr|0);
    if ($7) {
     _setjmpTable = _saveSetjmp($free_jmp_buf,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $8 = __THREW__; __THREW__ = 0;
     if ((($8|0) != 0) & ((threwValue|0) != 0)) { $9 = _testSetjmp(HEAP32[$8>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($9|0) == 0) { _longjmp($8|0, threwValue|0); } tempRet0 = (threwValue); } else { $9 = -1; };
     $10 = tempRet0;
     $cond = ($9|0)==(1);
     if ($cond) {
      $$reg2mem5$0 = $10;
     } else {
      $$reg2mem5$0 = 0;
     }
     while(1) {
      $11 = ($$reg2mem5$0|0)!=(0);
      if ($11) {
       break L4;
      }
      $12 = ((($png_ptr)) + 160|0);
      HEAP32[$12>>2] = $free_jmp_buf;
      $13 = ((($png_ptr)) + 164|0);
      HEAP32[$13>>2] = 0;
      $14 = ((($png_ptr)) + 156|0);
      HEAP32[$14>>2] = 13;
      __THREW__ = 0;
      invoke_vii(26,($png_ptr|0),($2|0));
      $15 = __THREW__; __THREW__ = 0;
      if ((($15|0) != 0) & ((threwValue|0) != 0)) { $16 = _testSetjmp(HEAP32[$15>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($16|0) == 0) { _longjmp($15|0, threwValue|0); } tempRet0 = (threwValue); } else { $16 = -1; };
      $17 = tempRet0;
      $cond7 = ($16|0)==(1);
      if ($cond7) {
       $$reg2mem5$0 = $17;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 $18 = ((($png_ptr)) + 164|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($png_ptr)) + 160|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($png_ptr)) + 156|0);
 HEAP32[$20>>2] = 0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function _png_set_error_fn($png_ptr,$error_ptr,$error_fn,$warning_fn) {
 $png_ptr = $png_ptr|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warning_fn = $warning_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $error_ptr;
 $2 = $error_fn;
 $3 = $warning_fn;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 176|0);
 HEAP32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 168|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $0;
 $14 = ((($13)) + 172|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _png_get_valid($png_ptr,$info_ptr,$flag) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $info_ptr;
 $3 = $flag;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 if ($or$cond) {
  $8 = $2;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = $10 & $11;
  $0 = $12;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 } else {
  $0 = 0;
  $13 = $0;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _png_get_rowbytes($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $info_ptr;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $2;
  $8 = ((($7)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _png_get_color_type($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $info_ptr;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 $or$cond = $4 & $6;
 if ($or$cond) {
  $7 = $2;
  $8 = ((($7)) + 25|0);
  $9 = HEAP8[$8>>0]|0;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _png_get_IHDR($png_ptr,$info_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $info_ptr;
 $3 = $width;
 $4 = $height;
 $5 = $bit_depth;
 $6 = $color_type;
 $7 = $interlace_type;
 $8 = $compression_type;
 $9 = $filter_type;
 $10 = $1;
 $11 = ($10|0)==(0|0);
 $12 = $2;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $0 = 0;
  $86 = $0;
  STACKTOP = sp;return ($86|0);
 }
 $14 = $3;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $2;
  $17 = HEAP32[$16>>2]|0;
  $18 = $3;
  HEAP32[$18>>2] = $17;
 }
 $19 = $4;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $2;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  HEAP32[$24>>2] = $23;
 }
 $25 = $5;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $2;
  $28 = ((($27)) + 24|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $5;
  HEAP32[$31>>2] = $30;
 }
 $32 = $6;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $2;
  $35 = ((($34)) + 25|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $6;
  HEAP32[$38>>2] = $37;
 }
 $39 = $8;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $2;
  $42 = ((($41)) + 26|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $8;
  HEAP32[$45>>2] = $44;
 }
 $46 = $9;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $2;
  $49 = ((($48)) + 27|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $9;
  HEAP32[$52>>2] = $51;
 }
 $53 = $7;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $2;
  $56 = ((($55)) + 28|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $7;
  HEAP32[$59>>2] = $58;
 }
 $60 = $1;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 $63 = $2;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $2;
 $67 = ((($66)) + 24|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $2;
 $71 = ((($70)) + 25|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $2;
 $75 = ((($74)) + 28|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $2;
 $79 = ((($78)) + 26|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $2;
 $83 = ((($82)) + 27|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 _png_check_IHDR($60,$62,$65,$69,$73,$77,$81,$85);
 $0 = 1;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _png_destroy_png_struct($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $dummy_struct = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $dummy_struct = sp;
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 _memcpy(($dummy_struct|0),($3|0),868)|0;
 $4 = $0;
 _memset(($4|0),0,868)|0;
 $5 = $0;
 _png_free($dummy_struct,$5);
 _png_free_jmpbuf($dummy_struct);
 STACKTOP = sp;return;
}
function _png_free($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = $1;
 $5 = ($4|0)==(0|0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = ((($6)) + 692|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $0;
 if ($9) {
  $11 = ((($10)) + 692|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = $1;
  FUNCTION_TABLE_vii[$12 & 63]($13,$14);
  STACKTOP = sp;return;
 } else {
  $15 = $1;
  _png_free_default($10,$15);
  STACKTOP = sp;return;
 }
}
function _png_free_default($png_ptr,$ptr) {
 $png_ptr = $png_ptr|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = $1;
 $5 = ($4|0)==(0|0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 _free($6);
 STACKTOP = sp;return;
}
function _png_calloc($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $size;
 $2 = $0;
 $3 = $1;
 $4 = (_png_malloc($2,$3)|0);
 $ret = $4;
 $5 = $ret;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $9 = $ret;
  STACKTOP = sp;return ($9|0);
 }
 $7 = $ret;
 $8 = $1;
 _memset(($7|0),0,($8|0))|0;
 $9 = $ret;
 STACKTOP = sp;return ($9|0);
}
function _png_malloc($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 $5 = $1;
 $6 = $2;
 $7 = (_png_malloc_base($5,$6)|0);
 $ret = $7;
 $8 = $ret;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = $1;
  _png_error($10,15228);
  // unreachable;
 }
 $11 = $ret;
 $0 = $11;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _png_malloc_base($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $size;
 $3 = $2;
 $4 = ($3>>>0)>(0);
 $5 = $2;
 $6 = ($5>>>0)<=(4294967295);
 $or$cond = $4 & $6;
 if (!($or$cond)) {
  $0 = 0;
  $21 = $0;
  STACKTOP = sp;return ($21|0);
 }
 $7 = $1;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = ((($9)) + 688|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $1;
   $14 = ((($13)) + 688|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $1;
   $17 = $2;
   $18 = (FUNCTION_TABLE_iii[$15 & 31]($16,$17)|0);
   $0 = $18;
   $21 = $0;
   STACKTOP = sp;return ($21|0);
  }
 }
 $19 = $2;
 $20 = (_malloc($19)|0);
 $0 = $20;
 $21 = $0;
 STACKTOP = sp;return ($21|0);
}
function _png_malloc_array($png_ptr,$nelements,$element_size) {
 $png_ptr = $png_ptr|0;
 $nelements = $nelements|0;
 $element_size = $element_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $nelements;
 $2 = $element_size;
 $3 = $1;
 $4 = ($3|0)<=(0);
 $5 = $2;
 $6 = ($5|0)==(0);
 $or$cond = $4 | $6;
 $7 = $0;
 if ($or$cond) {
  _png_error($7,15242);
  // unreachable;
 } else {
  $8 = $1;
  $9 = $2;
  $10 = (_png_malloc_array_checked($7,$8,$9)|0);
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _png_malloc_array_checked($png_ptr,$nelements,$element_size) {
 $png_ptr = $png_ptr|0;
 $nelements = $nelements|0;
 $element_size = $element_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $nelements;
 $3 = $element_size;
 $4 = $2;
 $req = $4;
 $5 = $req;
 $6 = $3;
 $7 = (4294967295 / ($6>>>0))&-1;
 $8 = ($5>>>0)<=($7>>>0);
 if ($8) {
  $9 = $1;
  $10 = $req;
  $11 = $3;
  $12 = Math_imul($10, $11)|0;
  $13 = (_png_malloc_base($9,$12)|0);
  $0 = $13;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _png_realloc_array($png_ptr,$old_array,$old_elements,$add_elements,$element_size) {
 $png_ptr = $png_ptr|0;
 $old_array = $old_array|0;
 $old_elements = $old_elements|0;
 $add_elements = $add_elements|0;
 $element_size = $element_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_array = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $old_array;
 $3 = $old_elements;
 $4 = $add_elements;
 $5 = $element_size;
 $6 = $4;
 $7 = ($6|0)<=(0);
 $8 = $5;
 $9 = ($8|0)==(0);
 $or$cond = $7 | $9;
 $10 = $3;
 $11 = ($10|0)<(0);
 $or$cond3 = $or$cond | $11;
 if ($or$cond3) {
  $16 = $1;
  _png_error($16,15270);
  // unreachable;
 }
 $12 = $2;
 $13 = ($12|0)==(0|0);
 $14 = $3;
 $15 = ($14|0)>(0);
 $or$cond5 = $13 & $15;
 if ($or$cond5) {
  $16 = $1;
  _png_error($16,15270);
  // unreachable;
 }
 $17 = $4;
 $18 = $3;
 $19 = (2147483647 - ($18))|0;
 $20 = ($17|0)<=($19|0);
 if ($20) {
  $21 = $1;
  $22 = $3;
  $23 = $4;
  $24 = (($22) + ($23))|0;
  $25 = $5;
  $26 = (_png_malloc_array_checked($21,$24,$25)|0);
  $new_array = $26;
  $27 = $new_array;
  $28 = ($27|0)!=(0|0);
  if ($28) {
   $29 = $3;
   $30 = ($29|0)>(0);
   if ($30) {
    $31 = $new_array;
    $32 = $2;
    $33 = $5;
    $34 = $3;
    $35 = Math_imul($33, $34)|0;
    _memcpy(($31|0),($32|0),($35|0))|0;
   }
   $36 = $new_array;
   $37 = $5;
   $38 = $3;
   $39 = Math_imul($37, $38)|0;
   $40 = (($36) + ($39)|0);
   $41 = $5;
   $42 = $4;
   $43 = Math_imul($41, $42)|0;
   _memset(($40|0),0,($43|0))|0;
   $44 = $new_array;
   $0 = $44;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 }
 $0 = 0;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _png_malloc_warn($png_ptr,$size) {
 $png_ptr = $png_ptr|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $size;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $1;
   $6 = $2;
   $7 = (_png_malloc_base($5,$6)|0);
   $ret = $7;
   $8 = $ret;
   $9 = ($8|0)!=(0|0);
   if (!($9)) {
    $11 = $1;
    _png_warning($11,15228);
    break;
   }
   $10 = $ret;
   $0 = $10;
   $12 = $0;
   STACKTOP = sp;return ($12|0);
  }
 } while(0);
 $0 = 0;
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function _png_set_mem_fn($png_ptr,$mem_ptr,$malloc_fn,$free_fn) {
 $png_ptr = $png_ptr|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $mem_ptr;
 $2 = $malloc_fn;
 $3 = $free_fn;
 $4 = $0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = $0;
 $8 = ((($7)) + 684|0);
 HEAP32[$8>>2] = $6;
 $9 = $2;
 $10 = $0;
 $11 = ((($10)) + 688|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $0;
 $14 = ((($13)) + 692|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _png_create_read_struct($user_png_ver,$error_ptr,$error_fn,$warn_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user_png_ver;
 $1 = $error_ptr;
 $2 = $error_fn;
 $3 = $warn_fn;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (_png_create_read_struct_2($4,$5,$6,$7,0,0,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _png_create_read_struct_2($user_png_ver,$error_ptr,$error_fn,$warn_fn,$mem_ptr,$malloc_fn,$free_fn) {
 $user_png_ver = $user_png_ver|0;
 $error_ptr = $error_ptr|0;
 $error_fn = $error_fn|0;
 $warn_fn = $warn_fn|0;
 $mem_ptr = $mem_ptr|0;
 $malloc_fn = $malloc_fn|0;
 $free_fn = $free_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user_png_ver;
 $1 = $error_ptr;
 $2 = $error_fn;
 $3 = $warn_fn;
 $4 = $mem_ptr;
 $5 = $malloc_fn;
 $6 = $free_fn;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = (_png_create_png_struct($7,$8,$9,$10,$11,$12,$13)|0);
 $png_ptr = $14;
 $15 = $png_ptr;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  $30 = $png_ptr;
  STACKTOP = sp;return ($30|0);
 }
 $17 = $png_ptr;
 $18 = ((($17)) + 208|0);
 HEAP32[$18>>2] = 32768;
 $19 = $png_ptr;
 $20 = ((($19)) + 764|0);
 HEAP32[$20>>2] = 8192;
 $21 = $png_ptr;
 $22 = ((($21)) + 212|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 | 1048576;
 HEAP32[$22>>2] = $24;
 $25 = $png_ptr;
 $26 = ((($25)) + 212|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 | 2097152;
 HEAP32[$26>>2] = $28;
 $29 = $png_ptr;
 _png_set_read_fn($29,0,0);
 $30 = $png_ptr;
 STACKTOP = sp;return ($30|0);
}
function _png_read_info($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk_name = 0, $keep = 0, $length = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 $4 = $1;
 $5 = ($4|0)==(0|0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = $1;
 _png_read_sig($6,$7);
 while(1) {
  $8 = $0;
  $9 = (_png_read_chunk_header($8)|0);
  $length = $9;
  $10 = $0;
  $11 = ((($10)) + 376|0);
  $12 = HEAP32[$11>>2]|0;
  $chunk_name = $12;
  $13 = $chunk_name;
  $14 = ($13|0)==(1229209940);
  $15 = $0;
  $16 = ((($15)) + 208|0);
  $17 = HEAP32[$16>>2]|0;
  if ($14) {
   $18 = $17 & 1;
   $19 = ($18|0)==(0);
   $20 = $0;
   if ($19) {
    label = 5;
    break;
   }
   $21 = ((($20)) + 427|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)==(3);
   if ($24) {
    $25 = $0;
    $26 = ((($25)) + 208|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 & 2;
    $29 = ($28|0)==(0);
    if ($29) {
     label = 8;
     break;
    }
   }
   $31 = $0;
   $32 = ((($31)) + 208|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 8;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $0;
    _png_chunk_benign_error($36,15350);
   }
   $37 = $0;
   $38 = ((($37)) + 208|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 | 4;
   HEAP32[$38>>2] = $40;
  } else {
   $41 = $17 & 4;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $0;
    $44 = ((($43)) + 208|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $45 | 8;
    HEAP32[$44>>2] = $46;
   }
  }
  $47 = $chunk_name;
  $48 = ($47|0)==(1229472850);
  if ($48) {
   $49 = $0;
   $50 = $1;
   $51 = $length;
   _png_handle_IHDR($49,$50,$51);
   continue;
  }
  $52 = $chunk_name;
  $53 = ($52|0)==(1229278788);
  $54 = $0;
  if ($53) {
   $55 = $1;
   $56 = $length;
   _png_handle_IEND($54,$55,$56);
   continue;
  }
  $57 = $chunk_name;
  $58 = (_png_chunk_unknown_handling($54,$57)|0);
  $keep = $58;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $0;
   $61 = $1;
   $62 = $length;
   $63 = $keep;
   _png_handle_unknown($60,$61,$62,$63);
   $64 = $chunk_name;
   $65 = ($64|0)==(1347179589);
   if ($65) {
    $66 = $0;
    $67 = ((($66)) + 208|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 | 2;
    HEAP32[$67>>2] = $69;
    continue;
   } else {
    $70 = $chunk_name;
    $71 = ($70|0)==(1229209940);
    if ($71) {
     label = 22;
     break;
    } else {
     continue;
    }
   }
  }
  $74 = $chunk_name;
  $75 = ($74|0)==(1347179589);
  if ($75) {
   $76 = $0;
   $77 = $1;
   $78 = $length;
   _png_handle_PLTE($76,$77,$78);
   continue;
  }
  $79 = $chunk_name;
  $80 = ($79|0)==(1229209940);
  if ($80) {
   label = 26;
   break;
  }
  $84 = $chunk_name;
  $85 = ($84|0)==(1649100612);
  if ($85) {
   $86 = $0;
   $87 = $1;
   $88 = $length;
   _png_handle_bKGD($86,$87,$88);
   continue;
  }
  $89 = $chunk_name;
  $90 = ($89|0)==(1665684045);
  if ($90) {
   $91 = $0;
   $92 = $1;
   $93 = $length;
   _png_handle_cHRM($91,$92,$93);
   continue;
  }
  $94 = $chunk_name;
  $95 = ($94|0)==(1732332865);
  if ($95) {
   $96 = $0;
   $97 = $1;
   $98 = $length;
   _png_handle_gAMA($96,$97,$98);
   continue;
  }
  $99 = $chunk_name;
  $100 = ($99|0)==(1749635924);
  if ($100) {
   $101 = $0;
   $102 = $1;
   $103 = $length;
   _png_handle_hIST($101,$102,$103);
   continue;
  }
  $104 = $chunk_name;
  $105 = ($104|0)==(1866876531);
  if ($105) {
   $106 = $0;
   $107 = $1;
   $108 = $length;
   _png_handle_oFFs($106,$107,$108);
   continue;
  }
  $109 = $chunk_name;
  $110 = ($109|0)==(1883455820);
  if ($110) {
   $111 = $0;
   $112 = $1;
   $113 = $length;
   _png_handle_pCAL($111,$112,$113);
   continue;
  }
  $114 = $chunk_name;
  $115 = ($114|0)==(1933787468);
  if ($115) {
   $116 = $0;
   $117 = $1;
   $118 = $length;
   _png_handle_sCAL($116,$117,$118);
   continue;
  }
  $119 = $chunk_name;
  $120 = ($119|0)==(1883789683);
  if ($120) {
   $121 = $0;
   $122 = $1;
   $123 = $length;
   _png_handle_pHYs($121,$122,$123);
   continue;
  }
  $124 = $chunk_name;
  $125 = ($124|0)==(1933723988);
  if ($125) {
   $126 = $0;
   $127 = $1;
   $128 = $length;
   _png_handle_sBIT($126,$127,$128);
   continue;
  }
  $129 = $chunk_name;
  $130 = ($129|0)==(1934772034);
  if ($130) {
   $131 = $0;
   $132 = $1;
   $133 = $length;
   _png_handle_sRGB($131,$132,$133);
   continue;
  }
  $134 = $chunk_name;
  $135 = ($134|0)==(1766015824);
  if ($135) {
   $136 = $0;
   $137 = $1;
   $138 = $length;
   _png_handle_iCCP($136,$137,$138);
   continue;
  }
  $139 = $chunk_name;
  $140 = ($139|0)==(1934642260);
  if ($140) {
   $141 = $0;
   $142 = $1;
   $143 = $length;
   _png_handle_sPLT($141,$142,$143);
   continue;
  }
  $144 = $chunk_name;
  $145 = ($144|0)==(1950701684);
  if ($145) {
   $146 = $0;
   $147 = $1;
   $148 = $length;
   _png_handle_tEXt($146,$147,$148);
   continue;
  }
  $149 = $chunk_name;
  $150 = ($149|0)==(1950960965);
  if ($150) {
   $151 = $0;
   $152 = $1;
   $153 = $length;
   _png_handle_tIME($151,$152,$153);
   continue;
  }
  $154 = $chunk_name;
  $155 = ($154|0)==(1951551059);
  if ($155) {
   $156 = $0;
   $157 = $1;
   $158 = $length;
   _png_handle_tRNS($156,$157,$158);
   continue;
  }
  $159 = $chunk_name;
  $160 = ($159|0)==(2052348020);
  if ($160) {
   $161 = $0;
   $162 = $1;
   $163 = $length;
   _png_handle_zTXt($161,$162,$163);
   continue;
  }
  $164 = $chunk_name;
  $165 = ($164|0)==(1767135348);
  $166 = $0;
  $167 = $1;
  $168 = $length;
  if ($165) {
   _png_handle_iTXt($166,$167,$168);
   continue;
  } else {
   _png_handle_unknown($166,$167,$168,0);
   continue;
  }
 }
 if ((label|0) == 5) {
  _png_chunk_error($20,15300);
  // unreachable;
 }
 else if ((label|0) == 8) {
  $30 = $0;
  _png_chunk_error($30,15325);
  // unreachable;
 }
 else if ((label|0) == 22) {
  $72 = $0;
  $73 = ((($72)) + 400|0);
  HEAP32[$73>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 26) {
  $81 = $length;
  $82 = $0;
  $83 = ((($82)) + 400|0);
  HEAP32[$83>>2] = $81;
  STACKTOP = sp;return;
 }
}
function _png_read_update_info($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 64;
 $8 = ($7|0)==(0);
 $9 = $0;
 if ($8) {
  _png_read_start_row($9);
  $10 = $0;
  $11 = $1;
  _png_read_transform_info($10,$11);
  STACKTOP = sp;return;
 } else {
  _png_app_error($9,15371);
  STACKTOP = sp;return;
 }
}
function _png_start_read_image($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 do {
  if ($2) {
   $3 = $0;
   $4 = ((($3)) + 212|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5 & 64;
   $7 = ($6|0)==(0);
   $8 = $0;
   if ($7) {
    _png_read_start_row($8);
    break;
   } else {
    _png_app_error($8,15429);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _png_read_row($png_ptr,$row,$dsp_row) {
 $png_ptr = $png_ptr|0;
 $row = $row|0;
 $dsp_row = $dsp_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $row_info = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $row_info = sp;
 $0 = $png_ptr;
 $1 = $row;
 $2 = $dsp_row;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 212|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 64;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $0;
  _png_read_start_row($10);
 }
 $11 = $0;
 $12 = ((($11)) + 368|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$row_info>>2] = $13;
 $14 = $0;
 $15 = ((($14)) + 427|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ((($row_info)) + 8|0);
 HEAP8[$17>>0] = $16;
 $18 = $0;
 $19 = ((($18)) + 428|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ((($row_info)) + 9|0);
 HEAP8[$21>>0] = $20;
 $22 = $0;
 $23 = ((($22)) + 431|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ((($row_info)) + 10|0);
 HEAP8[$25>>0] = $24;
 $26 = $0;
 $27 = ((($26)) + 430|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ((($row_info)) + 11|0);
 HEAP8[$29>>0] = $28;
 $30 = ((($row_info)) + 11|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)>=(8);
 $34 = HEAP32[$row_info>>2]|0;
 $35 = ((($row_info)) + 11|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 if ($33) {
  $38 = $37 >>> 3;
  $39 = Math_imul($34, $38)|0;
  $44 = $39;
 } else {
  $40 = Math_imul($34, $37)|0;
  $41 = (($40) + 7)|0;
  $42 = $41 >>> 3;
  $44 = $42;
 }
 $43 = ((($row_info)) + 4|0);
 HEAP32[$43>>2] = $44;
 $45 = $0;
 $46 = ((($45)) + 424|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)!=(0);
 L11: do {
  if ($49) {
   $50 = $0;
   $51 = ((($50)) + 216|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 & 2;
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $0;
    $56 = ((($55)) + 425|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    switch ($58|0) {
    case 0:  {
     $59 = $0;
     $60 = ((($59)) + 372|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $61 & 7;
     $63 = ($62|0)!=(0);
     if (!($63)) {
      break L11;
     }
     $64 = $2;
     $65 = ($64|0)!=(0|0);
     if ($65) {
      $66 = $0;
      $67 = $2;
      _png_combine_row($66,$67,1);
     }
     $68 = $0;
     _png_read_finish_row($68);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $69 = $0;
     $70 = ((($69)) + 372|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $71 & 7;
     $73 = ($72|0)!=(0);
     if (!($73)) {
      $74 = $0;
      $75 = ((($74)) + 348|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76>>>0)<(5);
      if (!($77)) {
       break L11;
      }
     }
     $78 = $2;
     $79 = ($78|0)!=(0|0);
     if ($79) {
      $80 = $0;
      $81 = $2;
      _png_combine_row($80,$81,1);
     }
     $82 = $0;
     _png_read_finish_row($82);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $83 = $0;
     $84 = ((($83)) + 372|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $85 & 7;
     $87 = ($86|0)!=(4);
     if (!($87)) {
      break L11;
     }
     $88 = $2;
     $89 = ($88|0)!=(0|0);
     if ($89) {
      $90 = $0;
      $91 = ((($90)) + 372|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92 & 4;
      $94 = ($93|0)!=(0);
      if ($94) {
       $95 = $0;
       $96 = $2;
       _png_combine_row($95,$96,1);
      }
     }
     $97 = $0;
     _png_read_finish_row($97);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $98 = $0;
     $99 = ((($98)) + 372|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100 & 3;
     $102 = ($101|0)!=(0);
     if (!($102)) {
      $103 = $0;
      $104 = ((($103)) + 348|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105>>>0)<(3);
      if (!($106)) {
       break L11;
      }
     }
     $107 = $2;
     $108 = ($107|0)!=(0|0);
     if ($108) {
      $109 = $0;
      $110 = $2;
      _png_combine_row($109,$110,1);
     }
     $111 = $0;
     _png_read_finish_row($111);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $112 = $0;
     $113 = ((($112)) + 372|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = $114 & 3;
     $116 = ($115|0)!=(2);
     if (!($116)) {
      break L11;
     }
     $117 = $2;
     $118 = ($117|0)!=(0|0);
     if ($118) {
      $119 = $0;
      $120 = ((($119)) + 372|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121 & 2;
      $123 = ($122|0)!=(0);
      if ($123) {
       $124 = $0;
       $125 = $2;
       _png_combine_row($124,$125,1);
      }
     }
     $126 = $0;
     _png_read_finish_row($126);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $127 = $0;
     $128 = ((($127)) + 372|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $129 & 1;
     $131 = ($130|0)!=(0);
     if (!($131)) {
      $132 = $0;
      $133 = ((($132)) + 348|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134>>>0)<(2);
      if (!($135)) {
       break L11;
      }
     }
     $136 = $2;
     $137 = ($136|0)!=(0|0);
     if ($137) {
      $138 = $0;
      $139 = $2;
      _png_combine_row($138,$139,1);
     }
     $140 = $0;
     _png_read_finish_row($140);
     STACKTOP = sp;return;
     break;
    }
    default: {
     $141 = $0;
     $142 = ((($141)) + 372|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $143 & 1;
     $145 = ($144|0)==(0);
     if (!($145)) {
      break L11;
     }
     $146 = $0;
     _png_read_finish_row($146);
     STACKTOP = sp;return;
    }
    }
   }
  }
 } while(0);
 $147 = $0;
 $148 = ((($147)) + 208|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = $149 & 4;
 $151 = ($150|0)==(0);
 $152 = $0;
 if ($151) {
  _png_error($152,15487);
  // unreachable;
 }
 $153 = $0;
 $154 = ((($153)) + 384|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ((($row_info)) + 4|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = (($157) + 1)|0;
 _png_read_IDAT_data($152,$155,$158);
 $159 = $0;
 $160 = ((($159)) + 384|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = HEAP8[$161>>0]|0;
 $163 = $162&255;
 $164 = ($163|0)>(0);
 do {
  if ($164) {
   $165 = $0;
   $166 = ((($165)) + 384|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = ($169|0)<(5);
   $171 = $0;
   if ($170) {
    $172 = $0;
    $173 = ((($172)) + 384|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ((($174)) + 1|0);
    $176 = $0;
    $177 = ((($176)) + 380|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ((($178)) + 1|0);
    $180 = $0;
    $181 = ((($180)) + 384|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    _png_read_filter_row($171,$row_info,$175,$179,$184);
    break;
   } else {
    _png_error($171,15520);
    // unreachable;
   }
  }
 } while(0);
 $185 = $0;
 $186 = ((($185)) + 380|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = $0;
 $189 = ((($188)) + 384|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ((($row_info)) + 4|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (($192) + 1)|0;
 _memcpy(($187|0),($190|0),($193|0))|0;
 $194 = $0;
 $195 = ((($194)) + 676|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $196 & 4;
 $198 = ($197|0)!=(0);
 if ($198) {
  $199 = $0;
  $200 = ((($199)) + 680|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = ($202|0)==(64);
  if ($203) {
   $204 = $0;
   $205 = ((($204)) + 384|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ((($206)) + 1|0);
   _png_do_read_intrapixel($row_info,$207);
  }
 }
 $208 = $0;
 $209 = ((($208)) + 216|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)!=(0);
 if ($211) {
  $212 = $0;
  _png_do_read_transformations($212,$row_info);
 }
 $213 = $0;
 $214 = ((($213)) + 435|0);
 $215 = HEAP8[$214>>0]|0;
 $216 = $215&255;
 $217 = ($216|0)==(0);
 if ($217) {
  $218 = ((($row_info)) + 11|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $0;
  $221 = ((($220)) + 435|0);
  HEAP8[$221>>0] = $219;
  $222 = ((($row_info)) + 11|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $0;
  $226 = ((($225)) + 434|0);
  $227 = HEAP8[$226>>0]|0;
  $228 = $227&255;
  $229 = ($224|0)>($228|0);
  if ($229) {
   $230 = $0;
   _png_error($230,15546);
   // unreachable;
  }
 } else {
  $231 = $0;
  $232 = ((($231)) + 435|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ((($row_info)) + 11|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = ($234|0)!=($237|0);
  if ($238) {
   $239 = $0;
   _png_error($239,15570);
   // unreachable;
  }
 }
 $240 = $0;
 $241 = ((($240)) + 424|0);
 $242 = HEAP8[$241>>0]|0;
 $243 = $242&255;
 $244 = ($243|0)!=(0);
 if ($244) {
  $245 = $0;
  $246 = ((($245)) + 216|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $247 & 2;
  $249 = ($248|0)!=(0);
  if ($249) {
   $250 = $0;
   $251 = ((($250)) + 425|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = ($253|0)<(6);
   if ($254) {
    $255 = $0;
    $256 = ((($255)) + 384|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ((($257)) + 1|0);
    $259 = $0;
    $260 = ((($259)) + 425|0);
    $261 = HEAP8[$260>>0]|0;
    $262 = $261&255;
    $263 = $0;
    $264 = ((($263)) + 216|0);
    $265 = HEAP32[$264>>2]|0;
    _png_do_read_interlace($row_info,$258,$262,$265);
   }
   $266 = $2;
   $267 = ($266|0)!=(0|0);
   if ($267) {
    $268 = $0;
    $269 = $2;
    _png_combine_row($268,$269,1);
   }
   $270 = $1;
   $271 = ($270|0)!=(0|0);
   if ($271) {
    $272 = $0;
    $273 = $1;
    _png_combine_row($272,$273,0);
   }
  } else {
   label = 65;
  }
 } else {
  label = 65;
 }
 if ((label|0) == 65) {
  $274 = $1;
  $275 = ($274|0)!=(0|0);
  if ($275) {
   $276 = $0;
   $277 = $1;
   _png_combine_row($276,$277,-1);
  }
  $278 = $2;
  $279 = ($278|0)!=(0|0);
  if ($279) {
   $280 = $0;
   $281 = $2;
   _png_combine_row($280,$281,-1);
  }
 }
 $282 = $0;
 _png_read_finish_row($282);
 $283 = $0;
 $284 = ((($283)) + 536|0);
 $285 = HEAP32[$284>>2]|0;
 $286 = ($285|0)!=(0|0);
 if (!($286)) {
  STACKTOP = sp;return;
 }
 $287 = $0;
 $288 = ((($287)) + 536|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = $0;
 $291 = $0;
 $292 = ((($291)) + 372|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = $0;
 $295 = ((($294)) + 425|0);
 $296 = HEAP8[$295>>0]|0;
 $297 = $296&255;
 FUNCTION_TABLE_viii[$289 & 63]($290,$293,$297);
 STACKTOP = sp;return;
}
function _png_do_read_intrapixel($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $blue = 0, $bytes_per_pixel = 0, $i = 0, $i2 = 0, $red = 0, $row_width = 0, $rp = 0, $rp1 = 0, $s0 = 0, $s1 = 0, $s2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $row_width = $9;
 $10 = $0;
 $11 = ((($10)) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(8);
 $15 = $0;
 if ($14) {
  $16 = ((($15)) + 8|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(2);
  do {
   if ($19) {
    $bytes_per_pixel = 3;
   } else {
    $20 = $0;
    $21 = ((($20)) + 8|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)==(6);
    if ($24) {
     $bytes_per_pixel = 4;
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $i = 0;
  $25 = $1;
  $rp = $25;
  while(1) {
   $26 = $i;
   $27 = $row_width;
   $28 = ($26>>>0)<($27>>>0);
   if (!($28)) {
    break;
   }
   $29 = $rp;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = (256 + ($31))|0;
   $33 = $rp;
   $34 = ((($33)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (($32) + ($36))|0;
   $38 = $37 & 255;
   $39 = $38&255;
   $40 = $rp;
   HEAP8[$40>>0] = $39;
   $41 = $rp;
   $42 = ((($41)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = (256 + ($44))|0;
   $46 = $rp;
   $47 = ((($46)) + 1|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($45) + ($49))|0;
   $51 = $50 & 255;
   $52 = $51&255;
   $53 = $rp;
   $54 = ((($53)) + 2|0);
   HEAP8[$54>>0] = $52;
   $55 = $i;
   $56 = (($55) + 1)|0;
   $i = $56;
   $57 = $bytes_per_pixel;
   $58 = $rp;
   $59 = (($58) + ($57)|0);
   $rp = $59;
  }
  STACKTOP = sp;return;
 }
 $60 = ((($15)) + 9|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = ($62|0)==(16);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $64 = $0;
 $65 = ((($64)) + 8|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = ($67|0)==(2);
 do {
  if ($68) {
   $bytes_per_pixel = 6;
  } else {
   $69 = $0;
   $70 = ((($69)) + 8|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($72|0)==(6);
   if ($73) {
    $bytes_per_pixel = 8;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $i2 = 0;
 $74 = $1;
 $rp1 = $74;
 while(1) {
  $75 = $i2;
  $76 = $row_width;
  $77 = ($75>>>0)<($76>>>0);
  if (!($77)) {
   break;
  }
  $78 = $rp1;
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $80 << 8;
  $82 = $rp1;
  $83 = ((($82)) + 1|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $81 | $85;
  $s0 = $86;
  $87 = $rp1;
  $88 = ((($87)) + 2|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = $90 << 8;
  $92 = $rp1;
  $93 = ((($92)) + 3|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $91 | $95;
  $s1 = $96;
  $97 = $rp1;
  $98 = ((($97)) + 4|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $100 << 8;
  $102 = $rp1;
  $103 = ((($102)) + 5|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $101 | $105;
  $s2 = $106;
  $107 = $s0;
  $108 = $s1;
  $109 = (($107) + ($108))|0;
  $110 = (($109) + 65536)|0;
  $111 = $110 & 65535;
  $red = $111;
  $112 = $s2;
  $113 = $s1;
  $114 = (($112) + ($113))|0;
  $115 = (($114) + 65536)|0;
  $116 = $115 & 65535;
  $blue = $116;
  $117 = $red;
  $118 = $117 >>> 8;
  $119 = $118 & 255;
  $120 = $119&255;
  $121 = $rp1;
  HEAP8[$121>>0] = $120;
  $122 = $red;
  $123 = $122 & 255;
  $124 = $123&255;
  $125 = $rp1;
  $126 = ((($125)) + 1|0);
  HEAP8[$126>>0] = $124;
  $127 = $blue;
  $128 = $127 >>> 8;
  $129 = $128 & 255;
  $130 = $129&255;
  $131 = $rp1;
  $132 = ((($131)) + 4|0);
  HEAP8[$132>>0] = $130;
  $133 = $blue;
  $134 = $133 & 255;
  $135 = $134&255;
  $136 = $rp1;
  $137 = ((($136)) + 5|0);
  HEAP8[$137>>0] = $135;
  $138 = $i2;
  $139 = (($138) + 1)|0;
  $i2 = $139;
  $140 = $bytes_per_pixel;
  $141 = $rp1;
  $142 = (($141) + ($140)|0);
  $rp1 = $142;
 }
 STACKTOP = sp;return;
}
function _png_read_image($png_ptr,$image) {
 $png_ptr = $png_ptr|0;
 $image = $image|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $image_height = 0, $j = 0, $pass = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $image;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 64;
 $8 = ($7|0)==(0);
 $9 = $0;
 if ($8) {
  $10 = (_png_set_interlace_handling($9)|0);
  $pass = $10;
  $11 = $0;
  _png_start_read_image($11);
 } else {
  $12 = ((($9)) + 424|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = ((($16)) + 216|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 2;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = $0;
    _png_warning($21,15617);
    $22 = $0;
    $23 = ((($22)) + 352|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $0;
    $26 = ((($25)) + 356|0);
    HEAP32[$26>>2] = $24;
   }
  }
  $27 = $0;
  $28 = (_png_set_interlace_handling($27)|0);
  $pass = $28;
 }
 $29 = $0;
 $30 = ((($29)) + 352|0);
 $31 = HEAP32[$30>>2]|0;
 $image_height = $31;
 $j = 0;
 while(1) {
  $32 = $j;
  $33 = $pass;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $1;
  $rp = $35;
  $i = 0;
  while(1) {
   $36 = $i;
   $37 = $image_height;
   $38 = ($36>>>0)<($37>>>0);
   if (!($38)) {
    break;
   }
   $39 = $0;
   $40 = $rp;
   $41 = HEAP32[$40>>2]|0;
   _png_read_row($39,$41,0);
   $42 = $rp;
   $43 = ((($42)) + 4|0);
   $rp = $43;
   $44 = $i;
   $45 = (($44) + 1)|0;
   $i = $45;
  }
  $46 = $j;
  $47 = (($46) + 1)|0;
  $j = $47;
 }
 STACKTOP = sp;return;
}
function _png_read_end($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chunk_name = 0, $keep = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (_png_chunk_unknown_handling($4,1229209940)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $0;
  _png_read_finish_IDAT($7);
 }
 $8 = $0;
 $9 = ((($8)) + 427|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(3);
 if ($12) {
  $13 = $0;
  $14 = ((($13)) + 416|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = ((($16)) + 412|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($15|0)>($19|0);
  if ($20) {
   $21 = $0;
   _png_benign_error($21,15682);
  }
 }
 while(1) {
  $22 = $0;
  $23 = (_png_read_chunk_header($22)|0);
  $length = $23;
  $24 = $0;
  $25 = ((($24)) + 376|0);
  $26 = HEAP32[$25>>2]|0;
  $chunk_name = $26;
  $27 = $chunk_name;
  $28 = ($27|0)==(1229278788);
  do {
   if ($28) {
    $29 = $0;
    $30 = $1;
    $31 = $length;
    _png_handle_IEND($29,$30,$31);
   } else {
    $32 = $chunk_name;
    $33 = ($32|0)==(1229472850);
    if ($33) {
     $34 = $0;
     $35 = $1;
     $36 = $length;
     _png_handle_IHDR($34,$35,$36);
     break;
    }
    $37 = $1;
    $38 = ($37|0)==(0|0);
    $39 = $0;
    if ($38) {
     $40 = $length;
     (_png_crc_finish($39,$40)|0);
     break;
    }
    $41 = $chunk_name;
    $42 = (_png_chunk_unknown_handling($39,$41)|0);
    $keep = $42;
    $43 = ($42|0)!=(0);
    $44 = $chunk_name;
    $45 = ($44|0)==(1229209940);
    if ($43) {
     do {
      if ($45) {
       $46 = $length;
       $47 = ($46>>>0)>(0);
       if (!($47)) {
        $48 = $0;
        $49 = ((($48)) + 208|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = $50 & 8192;
        $52 = ($51|0)!=(0);
        if (!($52)) {
         break;
        }
       }
       $53 = $0;
       _png_benign_error($53,15350);
      }
     } while(0);
     $54 = $0;
     $55 = $1;
     $56 = $length;
     $57 = $keep;
     _png_handle_unknown($54,$55,$56,$57);
     $58 = $chunk_name;
     $59 = ($58|0)==(1347179589);
     if (!($59)) {
      break;
     }
     $60 = $0;
     $61 = ((($60)) + 208|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $62 | 2;
     HEAP32[$61>>2] = $63;
     break;
    }
    if ($45) {
     $64 = $length;
     $65 = ($64>>>0)>(0);
     if ($65) {
      label = 23;
     } else {
      $66 = $0;
      $67 = ((($66)) + 208|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $68 & 8192;
      $70 = ($69|0)!=(0);
      if ($70) {
       label = 23;
      }
     }
     if ((label|0) == 23) {
      label = 0;
      $71 = $0;
      _png_benign_error($71,15350);
     }
     $72 = $0;
     $73 = $length;
     (_png_crc_finish($72,$73)|0);
     break;
    }
    $74 = $chunk_name;
    $75 = ($74|0)==(1347179589);
    if ($75) {
     $76 = $0;
     $77 = $1;
     $78 = $length;
     _png_handle_PLTE($76,$77,$78);
     break;
    }
    $79 = $chunk_name;
    $80 = ($79|0)==(1649100612);
    if ($80) {
     $81 = $0;
     $82 = $1;
     $83 = $length;
     _png_handle_bKGD($81,$82,$83);
     break;
    }
    $84 = $chunk_name;
    $85 = ($84|0)==(1665684045);
    if ($85) {
     $86 = $0;
     $87 = $1;
     $88 = $length;
     _png_handle_cHRM($86,$87,$88);
     break;
    }
    $89 = $chunk_name;
    $90 = ($89|0)==(1732332865);
    if ($90) {
     $91 = $0;
     $92 = $1;
     $93 = $length;
     _png_handle_gAMA($91,$92,$93);
     break;
    }
    $94 = $chunk_name;
    $95 = ($94|0)==(1749635924);
    if ($95) {
     $96 = $0;
     $97 = $1;
     $98 = $length;
     _png_handle_hIST($96,$97,$98);
     break;
    }
    $99 = $chunk_name;
    $100 = ($99|0)==(1866876531);
    if ($100) {
     $101 = $0;
     $102 = $1;
     $103 = $length;
     _png_handle_oFFs($101,$102,$103);
     break;
    }
    $104 = $chunk_name;
    $105 = ($104|0)==(1883455820);
    if ($105) {
     $106 = $0;
     $107 = $1;
     $108 = $length;
     _png_handle_pCAL($106,$107,$108);
     break;
    }
    $109 = $chunk_name;
    $110 = ($109|0)==(1933787468);
    if ($110) {
     $111 = $0;
     $112 = $1;
     $113 = $length;
     _png_handle_sCAL($111,$112,$113);
     break;
    }
    $114 = $chunk_name;
    $115 = ($114|0)==(1883789683);
    if ($115) {
     $116 = $0;
     $117 = $1;
     $118 = $length;
     _png_handle_pHYs($116,$117,$118);
     break;
    }
    $119 = $chunk_name;
    $120 = ($119|0)==(1933723988);
    if ($120) {
     $121 = $0;
     $122 = $1;
     $123 = $length;
     _png_handle_sBIT($121,$122,$123);
     break;
    }
    $124 = $chunk_name;
    $125 = ($124|0)==(1934772034);
    if ($125) {
     $126 = $0;
     $127 = $1;
     $128 = $length;
     _png_handle_sRGB($126,$127,$128);
     break;
    }
    $129 = $chunk_name;
    $130 = ($129|0)==(1766015824);
    if ($130) {
     $131 = $0;
     $132 = $1;
     $133 = $length;
     _png_handle_iCCP($131,$132,$133);
     break;
    }
    $134 = $chunk_name;
    $135 = ($134|0)==(1934642260);
    if ($135) {
     $136 = $0;
     $137 = $1;
     $138 = $length;
     _png_handle_sPLT($136,$137,$138);
     break;
    }
    $139 = $chunk_name;
    $140 = ($139|0)==(1950701684);
    if ($140) {
     $141 = $0;
     $142 = $1;
     $143 = $length;
     _png_handle_tEXt($141,$142,$143);
     break;
    }
    $144 = $chunk_name;
    $145 = ($144|0)==(1950960965);
    if ($145) {
     $146 = $0;
     $147 = $1;
     $148 = $length;
     _png_handle_tIME($146,$147,$148);
     break;
    }
    $149 = $chunk_name;
    $150 = ($149|0)==(1951551059);
    if ($150) {
     $151 = $0;
     $152 = $1;
     $153 = $length;
     _png_handle_tRNS($151,$152,$153);
     break;
    }
    $154 = $chunk_name;
    $155 = ($154|0)==(2052348020);
    if ($155) {
     $156 = $0;
     $157 = $1;
     $158 = $length;
     _png_handle_zTXt($156,$157,$158);
     break;
    }
    $159 = $chunk_name;
    $160 = ($159|0)==(1767135348);
    $161 = $0;
    $162 = $1;
    $163 = $length;
    if ($160) {
     _png_handle_iTXt($161,$162,$163);
     break;
    } else {
     _png_handle_unknown($161,$162,$163,0);
     break;
    }
   }
  } while(0);
  $164 = $0;
  $165 = ((($164)) + 208|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 & 16;
  $168 = ($167|0)==(0);
  if (!($168)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _png_destroy_read_struct($png_ptr_ptr,$info_ptr_ptr,$end_info_ptr_ptr) {
 $png_ptr_ptr = $png_ptr_ptr|0;
 $info_ptr_ptr = $info_ptr_ptr|0;
 $end_info_ptr_ptr = $end_info_ptr_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr_ptr;
 $1 = $info_ptr_ptr;
 $2 = $end_info_ptr_ptr;
 $png_ptr = 0;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $png_ptr = $6;
 }
 $7 = $png_ptr;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $png_ptr;
 $10 = $2;
 _png_destroy_info_struct($9,$10);
 $11 = $png_ptr;
 $12 = $1;
 _png_destroy_info_struct($11,$12);
 $13 = $0;
 HEAP32[$13>>2] = 0;
 $14 = $png_ptr;
 _png_read_destroy($14);
 $15 = $png_ptr;
 _png_destroy_png_struct($15);
 STACKTOP = sp;return;
}
function _png_read_destroy($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 _png_destroy_gamma_table($1);
 $2 = $0;
 $3 = $0;
 $4 = ((($3)) + 696|0);
 $5 = HEAP32[$4>>2]|0;
 _png_free($2,$5);
 $6 = $0;
 $7 = ((($6)) + 696|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = $0;
 $10 = ((($9)) + 772|0);
 $11 = HEAP32[$10>>2]|0;
 _png_free($8,$11);
 $12 = $0;
 $13 = ((($12)) + 772|0);
 HEAP32[$13>>2] = 0;
 $14 = $0;
 $15 = $0;
 $16 = ((($15)) + 756|0);
 $17 = HEAP32[$16>>2]|0;
 _png_free($14,$17);
 $18 = $0;
 $19 = ((($18)) + 756|0);
 HEAP32[$19>>2] = 0;
 $20 = $0;
 $21 = $0;
 $22 = ((($21)) + 604|0);
 $23 = HEAP32[$22>>2]|0;
 _png_free($20,$23);
 $24 = $0;
 $25 = ((($24)) + 604|0);
 HEAP32[$25>>2] = 0;
 $26 = $0;
 $27 = $0;
 $28 = ((($27)) + 608|0);
 $29 = HEAP32[$28>>2]|0;
 _png_free($26,$29);
 $30 = $0;
 $31 = ((($30)) + 608|0);
 HEAP32[$31>>2] = 0;
 $32 = $0;
 $33 = ((($32)) + 644|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 4096;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $0;
  $38 = $0;
  $39 = ((($38)) + 408|0);
  $40 = HEAP32[$39>>2]|0;
  _png_zfree($37,$40);
  $41 = $0;
  $42 = ((($41)) + 408|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = $0;
 $44 = ((($43)) + 644|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 & -4097;
 HEAP32[$44>>2] = $46;
 $47 = $0;
 $48 = ((($47)) + 644|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 & 8192;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $0;
  $53 = $0;
  $54 = ((($53)) + 520|0);
  $55 = HEAP32[$54>>2]|0;
  _png_free($52,$55);
  $56 = $0;
  $57 = ((($56)) + 520|0);
  HEAP32[$57>>2] = 0;
 }
 $58 = $0;
 $59 = ((($58)) + 644|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 & -8193;
 HEAP32[$59>>2] = $61;
 $62 = $0;
 $63 = ((($62)) + 224|0);
 (_inflateEnd($63)|0);
 $64 = $0;
 $65 = $0;
 $66 = ((($65)) + 560|0);
 $67 = HEAP32[$66>>2]|0;
 _png_free($64,$67);
 $68 = $0;
 $69 = ((($68)) + 560|0);
 HEAP32[$69>>2] = 0;
 $70 = $0;
 $71 = $0;
 $72 = ((($71)) + 732|0);
 $73 = ((($72)) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 _png_free($70,$74);
 $75 = $0;
 $76 = ((($75)) + 732|0);
 $77 = ((($76)) + 8|0);
 HEAP32[$77>>2] = 0;
 $78 = $0;
 $79 = $0;
 $80 = ((($79)) + 664|0);
 $81 = HEAP32[$80>>2]|0;
 _png_free($78,$81);
 $82 = $0;
 $83 = ((($82)) + 664|0);
 HEAP32[$83>>2] = 0;
 STACKTOP = sp;return;
}
function _png_read_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 184|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $0;
 if ($6) {
  $8 = ((($7)) + 184|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = $1;
  $12 = $2;
  FUNCTION_TABLE_viii[$9 & 63]($10,$11,$12);
  STACKTOP = sp;return;
 } else {
  _png_error($7,15723);
  // unreachable;
 }
}
function _png_default_read_data($png_ptr,$data,$length) {
 $png_ptr = $png_ptr|0;
 $data = $data|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $check = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $data;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $2;
 $7 = $0;
 $8 = ((($7)) + 188|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_fread($5,1,$6,$9)|0);
 $check = $10;
 $11 = $check;
 $12 = $2;
 $13 = ($11|0)!=($12|0);
 if ($13) {
  $14 = $0;
  _png_error($14,15750);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _png_set_read_fn($png_ptr,$io_ptr,$read_data_fn) {
 $png_ptr = $png_ptr|0;
 $io_ptr = $io_ptr|0;
 $read_data_fn = $read_data_fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $io_ptr;
 $2 = $read_data_fn;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 188|0);
 HEAP32[$7>>2] = $5;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = $0;
  $12 = ((($11)) + 184|0);
  HEAP32[$12>>2] = $10;
 } else {
  $13 = $0;
  $14 = ((($13)) + 184|0);
  HEAP32[$14>>2] = 27;
 }
 $15 = $0;
 $16 = ((($15)) + 180|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $0;
  $20 = ((($19)) + 180|0);
  HEAP32[$20>>2] = 0;
  $21 = $0;
  _png_warning($21,15761);
 }
 $22 = $0;
 $23 = ((($22)) + 464|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return;
}
function _png_rtran_ok($png_ptr,$need_IHDR) {
 $png_ptr = $png_ptr|0;
 $need_IHDR = $need_IHDR|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $need_IHDR;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $1;
   $6 = ((($5)) + 212|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 64;
   $9 = ($8|0)!=(0);
   if ($9) {
    $10 = $1;
    _png_app_error($10,15829);
    break;
   }
   $11 = $2;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = $1;
    $14 = ((($13)) + 208|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 1;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = $1;
     _png_app_error($18,15888);
     break;
    }
   }
   $19 = $1;
   $20 = ((($19)) + 212|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 | 16384;
   HEAP32[$20>>2] = $22;
   $0 = 1;
   $23 = $0;
   STACKTOP = sp;return ($23|0);
  }
 } while(0);
 $0 = 0;
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _png_set_scale_16($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (_png_rtran_ok($1,0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 67108864;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _png_set_palette_to_rgb($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (_png_rtran_ok($1,0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 33558528;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _png_set_expand_gray_1_2_4_to_8($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (_png_rtran_ok($1,0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 4096;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _png_set_tRNS_to_alpha($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = (_png_rtran_ok($1,0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 33558528;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _png_init_read_transformations($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $back = 0, $back9 = 0, $back_1 = 0, $component = 0, $component16 = 0, $component17 = 0, $g = 0, $g3 = 0, $g_sig = 0, $gamma_correction = 0, $gs = 0, $gs4 = 0, $gs_sig = 0, $i = 0, $i14 = 0, $i7 = 0, $i8 = 0, $istop = 0, $istop15 = 0, $num_palette = 0;
 var $num_palette6 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $palette = 0, $palette10 = 0, $palette5 = 0, $shift = 0, $temp = 0, $temp1 = 0, $temp11 = 0, $temp12 = 0, $temp13 = 0, $temp2 = 0, $v = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $back = sp + 112|0;
 $back_1 = sp + 109|0;
 $back9 = sp + 104|0;
 $0 = $png_ptr;
 $gamma_correction = 0;
 $1 = $0;
 $2 = ((($1)) + 792|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 $5 = $0;
 $6 = ((($5)) + 480|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = $0;
 do {
  if ($4) {
   $10 = ((($9)) + 792|0);
   $11 = HEAP32[$10>>2]|0;
   if ($8) {
    $12 = $0;
    $13 = ((($12)) + 480|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_png_gamma_threshold($11,$14)|0);
    $gamma_correction = $15;
    break;
   } else {
    $16 = (_png_reciprocal($11)|0);
    $17 = $0;
    $18 = ((($17)) + 480|0);
    HEAP32[$18>>2] = $16;
    break;
   }
  } else {
   if ($8) {
    $19 = ((($9)) + 480|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_png_reciprocal($20)|0);
    $22 = $0;
    $23 = ((($22)) + 792|0);
    HEAP32[$23>>2] = $21;
    break;
   } else {
    $24 = ((($9)) + 792|0);
    HEAP32[$24>>2] = 100000;
    $25 = $0;
    $26 = ((($25)) + 480|0);
    HEAP32[$26>>2] = 100000;
    break;
   }
  }
 } while(0);
 $27 = $0;
 $28 = ((($27)) + 792|0);
 $29 = ((($28)) + 74|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = $30&65535;
 $32 = $31 | 1;
 $33 = $32&65535;
 HEAP16[$29>>1] = $33;
 $34 = $gamma_correction;
 $35 = ($34|0)!=(0);
 $36 = $0;
 $37 = ((($36)) + 216|0);
 $38 = HEAP32[$37>>2]|0;
 if ($35) {
  $39 = $38 | 8192;
  HEAP32[$37>>2] = $39;
 } else {
  $40 = $38 & -8193;
  HEAP32[$37>>2] = $40;
 }
 $41 = $0;
 $42 = ((($41)) + 216|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 262144;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = $0;
  $47 = ((($46)) + 216|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & 128;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = $0;
   $52 = ((($51)) + 216|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 & -41943297;
   HEAP32[$52>>2] = $54;
   $55 = $0;
   $56 = ((($55)) + 212|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -8193;
   HEAP32[$56>>2] = $58;
   $59 = $0;
   $60 = ((($59)) + 420|0);
   HEAP16[$60>>1] = 0;
  }
 }
 $61 = $0;
 $62 = ((($61)) + 480|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (_png_gamma_significant($63)|0);
 $65 = ($64|0)==(0);
 if ($65) {
  $66 = $0;
  $67 = ((($66)) + 216|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 & -8388609;
  HEAP32[$67>>2] = $69;
  $70 = $0;
  $71 = ((($70)) + 212|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & -8193;
  HEAP32[$71>>2] = $73;
 }
 $74 = $0;
 $75 = ((($74)) + 216|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 & 6291456;
 $78 = ($77|0)!=(0);
 if ($78) {
  $79 = $0;
  _png_colorspace_set_rgb_coefficients($79);
 }
 $80 = $0;
 $81 = ((($80)) + 216|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 & 256;
 $84 = ($83|0)!=(0);
 $85 = $0;
 if ($84) {
  $86 = ((($85)) + 427|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $88 & 2;
  $90 = ($89|0)==(0);
  if ($90) {
   $91 = $0;
   $92 = ((($91)) + 208|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $93 | 2048;
   HEAP32[$92>>2] = $94;
  }
 } else {
  $95 = ((($85)) + 216|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96 & 128;
  $98 = ($97|0)!=(0);
  if ($98) {
   $99 = $0;
   $100 = ((($99)) + 216|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 & 16384;
   $103 = ($102|0)!=(0);
   if ($103) {
    $104 = $0;
    $105 = ((($104)) + 444|0);
    $106 = ((($105)) + 2|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = $0;
    $110 = ((($109)) + 444|0);
    $111 = ((($110)) + 4|0);
    $112 = HEAP16[$111>>1]|0;
    $113 = $112&65535;
    $114 = ($108|0)==($113|0);
    if ($114) {
     $115 = $0;
     $116 = ((($115)) + 444|0);
     $117 = ((($116)) + 2|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = $118&65535;
     $120 = $0;
     $121 = ((($120)) + 444|0);
     $122 = ((($121)) + 6|0);
     $123 = HEAP16[$122>>1]|0;
     $124 = $123&65535;
     $125 = ($119|0)==($124|0);
     if ($125) {
      $126 = $0;
      $127 = ((($126)) + 208|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = $128 | 2048;
      HEAP32[$127>>2] = $129;
      $130 = $0;
      $131 = ((($130)) + 444|0);
      $132 = ((($131)) + 2|0);
      $133 = HEAP16[$132>>1]|0;
      $134 = $0;
      $135 = ((($134)) + 444|0);
      $136 = ((($135)) + 8|0);
      HEAP16[$136>>1] = $133;
     }
    }
   }
  }
 }
 $137 = $0;
 $138 = ((($137)) + 427|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&255;
 $141 = ($140|0)==(3);
 $142 = $0;
 if ($141) {
  _png_init_palette_transformations($142);
 } else {
  _png_init_rgb_transformations($142);
 }
 $143 = $0;
 $144 = ((($143)) + 216|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & 512;
 $147 = ($146|0)!=(0);
 if ($147) {
  $148 = $0;
  $149 = ((($148)) + 216|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $150 & 128;
  $152 = ($151|0)!=(0);
  if ($152) {
   $153 = $0;
   $154 = ((($153)) + 216|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $155 & 256;
   $157 = ($156|0)==(0);
   if ($157) {
    $158 = $0;
    $159 = ((($158)) + 428|0);
    $160 = HEAP8[$159>>0]|0;
    $161 = $160&255;
    $162 = ($161|0)!=(16);
    if ($162) {
     $163 = $0;
     $164 = ((($163)) + 444|0);
     $165 = ((($164)) + 2|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $168 = ($167*255)|0;
     $169 = (($168) + 32895)|0;
     $170 = $169 >>> 16;
     $171 = $170&65535;
     $172 = $0;
     $173 = ((($172)) + 444|0);
     $174 = ((($173)) + 2|0);
     HEAP16[$174>>1] = $171;
     $175 = $0;
     $176 = ((($175)) + 444|0);
     $177 = ((($176)) + 4|0);
     $178 = HEAP16[$177>>1]|0;
     $179 = $178&65535;
     $180 = ($179*255)|0;
     $181 = (($180) + 32895)|0;
     $182 = $181 >>> 16;
     $183 = $182&65535;
     $184 = $0;
     $185 = ((($184)) + 444|0);
     $186 = ((($185)) + 4|0);
     HEAP16[$186>>1] = $183;
     $187 = $0;
     $188 = ((($187)) + 444|0);
     $189 = ((($188)) + 6|0);
     $190 = HEAP16[$189>>1]|0;
     $191 = $190&65535;
     $192 = ($191*255)|0;
     $193 = (($192) + 32895)|0;
     $194 = $193 >>> 16;
     $195 = $194&65535;
     $196 = $0;
     $197 = ((($196)) + 444|0);
     $198 = ((($197)) + 6|0);
     HEAP16[$198>>1] = $195;
     $199 = $0;
     $200 = ((($199)) + 444|0);
     $201 = ((($200)) + 8|0);
     $202 = HEAP16[$201>>1]|0;
     $203 = $202&65535;
     $204 = ($203*255)|0;
     $205 = (($204) + 32895)|0;
     $206 = $205 >>> 16;
     $207 = $206&65535;
     $208 = $0;
     $209 = ((($208)) + 444|0);
     $210 = ((($209)) + 8|0);
     HEAP16[$210>>1] = $207;
    }
   }
  }
 }
 $211 = $0;
 $212 = ((($211)) + 216|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = $213 & 67109888;
 $215 = ($214|0)!=(0);
 if ($215) {
  $216 = $0;
  $217 = ((($216)) + 216|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 & 128;
  $220 = ($219|0)!=(0);
  if ($220) {
   $221 = $0;
   $222 = ((($221)) + 216|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $223 & 256;
   $225 = ($224|0)==(0);
   if ($225) {
    $226 = $0;
    $227 = ((($226)) + 428|0);
    $228 = HEAP8[$227>>0]|0;
    $229 = $228&255;
    $230 = ($229|0)==(16);
    if ($230) {
     $231 = $0;
     $232 = ((($231)) + 444|0);
     $233 = ((($232)) + 2|0);
     $234 = HEAP16[$233>>1]|0;
     $235 = $234&65535;
     $236 = ($235*257)|0;
     $237 = $236&65535;
     $238 = $0;
     $239 = ((($238)) + 444|0);
     $240 = ((($239)) + 2|0);
     HEAP16[$240>>1] = $237;
     $241 = $0;
     $242 = ((($241)) + 444|0);
     $243 = ((($242)) + 4|0);
     $244 = HEAP16[$243>>1]|0;
     $245 = $244&65535;
     $246 = ($245*257)|0;
     $247 = $246&65535;
     $248 = $0;
     $249 = ((($248)) + 444|0);
     $250 = ((($249)) + 4|0);
     HEAP16[$250>>1] = $247;
     $251 = $0;
     $252 = ((($251)) + 444|0);
     $253 = ((($252)) + 6|0);
     $254 = HEAP16[$253>>1]|0;
     $255 = $254&65535;
     $256 = ($255*257)|0;
     $257 = $256&65535;
     $258 = $0;
     $259 = ((($258)) + 444|0);
     $260 = ((($259)) + 6|0);
     HEAP16[$260>>1] = $257;
     $261 = $0;
     $262 = ((($261)) + 444|0);
     $263 = ((($262)) + 8|0);
     $264 = HEAP16[$263>>1]|0;
     $265 = $264&65535;
     $266 = ($265*257)|0;
     $267 = $266&65535;
     $268 = $0;
     $269 = ((($268)) + 444|0);
     $270 = ((($269)) + 8|0);
     HEAP16[$270>>1] = $267;
    }
   }
  }
 }
 $271 = $0;
 $272 = ((($271)) + 454|0);
 $273 = $0;
 $274 = ((($273)) + 444|0);
 ;HEAP16[$272>>1]=HEAP16[$274>>1]|0;HEAP16[$272+2>>1]=HEAP16[$274+2>>1]|0;HEAP16[$272+4>>1]=HEAP16[$274+4>>1]|0;HEAP16[$272+6>>1]=HEAP16[$274+6>>1]|0;HEAP16[$272+8>>1]=HEAP16[$274+8>>1]|0;
 $275 = $0;
 $276 = ((($275)) + 216|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & 8192;
 $279 = ($278|0)!=(0);
 do {
  if ($279) {
   label = 50;
  } else {
   $280 = $0;
   $281 = ((($280)) + 216|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $282 & 6291456;
   $284 = ($283|0)!=(0);
   if ($284) {
    $285 = $0;
    $286 = ((($285)) + 792|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (_png_gamma_significant($287)|0);
    $289 = ($288|0)!=(0);
    if ($289) {
     label = 50;
     break;
    }
    $290 = $0;
    $291 = ((($290)) + 480|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = (_png_gamma_significant($292)|0);
    $294 = ($293|0)!=(0);
    if ($294) {
     label = 50;
     break;
    }
   }
   $295 = $0;
   $296 = ((($295)) + 216|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $297 & 128;
   $299 = ($298|0)!=(0);
   if ($299) {
    $300 = $0;
    $301 = ((($300)) + 792|0);
    $302 = HEAP32[$301>>2]|0;
    $303 = (_png_gamma_significant($302)|0);
    $304 = ($303|0)!=(0);
    if ($304) {
     label = 50;
     break;
    }
    $305 = $0;
    $306 = ((($305)) + 480|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = (_png_gamma_significant($307)|0);
    $309 = ($308|0)!=(0);
    if ($309) {
     label = 50;
     break;
    }
    $310 = $0;
    $311 = ((($310)) + 438|0);
    $312 = HEAP8[$311>>0]|0;
    $313 = $312&255;
    $314 = ($313|0)==(3);
    if ($314) {
     $315 = $0;
     $316 = ((($315)) + 440|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = (_png_gamma_significant($317)|0);
     $319 = ($318|0)!=(0);
     if ($319) {
      label = 50;
      break;
     }
    }
   }
   $320 = $0;
   $321 = ((($320)) + 216|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = $322 & 8388608;
   $324 = ($323|0)!=(0);
   if ($324) {
    $325 = $0;
    $326 = ((($325)) + 480|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = (_png_gamma_significant($327)|0);
    $329 = ($328|0)!=(0);
    if ($329) {
     label = 50;
     break;
    }
   }
   $1056 = $0;
   $1057 = ((($1056)) + 216|0);
   $1058 = HEAP32[$1057>>2]|0;
   $1059 = $1058 & 128;
   $1060 = ($1059|0)!=(0);
   if ($1060) {
    $1061 = $0;
    $1062 = ((($1061)) + 427|0);
    $1063 = HEAP8[$1062>>0]|0;
    $1064 = $1063&255;
    $1065 = ($1064|0)==(3);
    if ($1065) {
     $1066 = $0;
     $1067 = ((($1066)) + 420|0);
     $1068 = HEAP16[$1067>>1]|0;
     $1069 = $1068&65535;
     $istop = $1069;
     $1070 = $0;
     $1071 = ((($1070)) + 408|0);
     $1072 = HEAP32[$1071>>2]|0;
     $palette10 = $1072;
     $1073 = $0;
     $1074 = ((($1073)) + 444|0);
     $1075 = ((($1074)) + 2|0);
     $1076 = HEAP16[$1075>>1]|0;
     $1077 = $1076&255;
     HEAP8[$back9>>0] = $1077;
     $1078 = $0;
     $1079 = ((($1078)) + 444|0);
     $1080 = ((($1079)) + 4|0);
     $1081 = HEAP16[$1080>>1]|0;
     $1082 = $1081&255;
     $1083 = ((($back9)) + 1|0);
     HEAP8[$1083>>0] = $1082;
     $1084 = $0;
     $1085 = ((($1084)) + 444|0);
     $1086 = ((($1085)) + 6|0);
     $1087 = HEAP16[$1086>>1]|0;
     $1088 = $1087&255;
     $1089 = ((($back9)) + 2|0);
     HEAP8[$1089>>0] = $1088;
     $i8 = 0;
     while(1) {
      $1090 = $i8;
      $1091 = $istop;
      $1092 = ($1090|0)<($1091|0);
      if (!($1092)) {
       break;
      }
      $1093 = $i8;
      $1094 = $0;
      $1095 = ((($1094)) + 520|0);
      $1096 = HEAP32[$1095>>2]|0;
      $1097 = (($1096) + ($1093)|0);
      $1098 = HEAP8[$1097>>0]|0;
      $1099 = $1098&255;
      $1100 = ($1099|0)==(0);
      $1101 = $i8;
      do {
       if ($1100) {
        $1102 = $palette10;
        $1103 = (($1102) + (($1101*3)|0)|0);
        ;HEAP8[$1103>>0]=HEAP8[$back9>>0]|0;HEAP8[$1103+1>>0]=HEAP8[$back9+1>>0]|0;HEAP8[$1103+2>>0]=HEAP8[$back9+2>>0]|0;
       } else {
        $1104 = $0;
        $1105 = ((($1104)) + 520|0);
        $1106 = HEAP32[$1105>>2]|0;
        $1107 = (($1106) + ($1101)|0);
        $1108 = HEAP8[$1107>>0]|0;
        $1109 = $1108&255;
        $1110 = ($1109|0)!=(255);
        if (!($1110)) {
         break;
        }
        $1111 = $i8;
        $1112 = $palette10;
        $1113 = (($1112) + (($1111*3)|0)|0);
        $1114 = HEAP8[$1113>>0]|0;
        $1115 = $1114&255;
        $1116 = $1115&65535;
        $1117 = $i8;
        $1118 = $0;
        $1119 = ((($1118)) + 520|0);
        $1120 = HEAP32[$1119>>2]|0;
        $1121 = (($1120) + ($1117)|0);
        $1122 = HEAP8[$1121>>0]|0;
        $1123 = $1122&255;
        $1124 = $1123&65535;
        $1125 = Math_imul($1116, $1124)|0;
        $1126 = HEAP8[$back9>>0]|0;
        $1127 = $1126&255;
        $1128 = $1127&65535;
        $1129 = $i8;
        $1130 = $0;
        $1131 = ((($1130)) + 520|0);
        $1132 = HEAP32[$1131>>2]|0;
        $1133 = (($1132) + ($1129)|0);
        $1134 = HEAP8[$1133>>0]|0;
        $1135 = $1134&255;
        $1136 = $1135&65535;
        $1137 = (255 - ($1136))|0;
        $1138 = $1137&65535;
        $1139 = $1138&65535;
        $1140 = Math_imul($1128, $1139)|0;
        $1141 = (($1125) + ($1140))|0;
        $1142 = (($1141) + 128)|0;
        $1143 = $1142&65535;
        $temp11 = $1143;
        $1144 = $temp11;
        $1145 = $1144&65535;
        $1146 = $temp11;
        $1147 = $1146&65535;
        $1148 = $1147 >> 8;
        $1149 = (($1145) + ($1148))|0;
        $1150 = $1149 >> 8;
        $1151 = $1150 & 255;
        $1152 = $1151&255;
        $1153 = $i8;
        $1154 = $palette10;
        $1155 = (($1154) + (($1153*3)|0)|0);
        HEAP8[$1155>>0] = $1152;
        $1156 = $i8;
        $1157 = $palette10;
        $1158 = (($1157) + (($1156*3)|0)|0);
        $1159 = ((($1158)) + 1|0);
        $1160 = HEAP8[$1159>>0]|0;
        $1161 = $1160&255;
        $1162 = $1161&65535;
        $1163 = $i8;
        $1164 = $0;
        $1165 = ((($1164)) + 520|0);
        $1166 = HEAP32[$1165>>2]|0;
        $1167 = (($1166) + ($1163)|0);
        $1168 = HEAP8[$1167>>0]|0;
        $1169 = $1168&255;
        $1170 = $1169&65535;
        $1171 = Math_imul($1162, $1170)|0;
        $1172 = ((($back9)) + 1|0);
        $1173 = HEAP8[$1172>>0]|0;
        $1174 = $1173&255;
        $1175 = $1174&65535;
        $1176 = $i8;
        $1177 = $0;
        $1178 = ((($1177)) + 520|0);
        $1179 = HEAP32[$1178>>2]|0;
        $1180 = (($1179) + ($1176)|0);
        $1181 = HEAP8[$1180>>0]|0;
        $1182 = $1181&255;
        $1183 = $1182&65535;
        $1184 = (255 - ($1183))|0;
        $1185 = $1184&65535;
        $1186 = $1185&65535;
        $1187 = Math_imul($1175, $1186)|0;
        $1188 = (($1171) + ($1187))|0;
        $1189 = (($1188) + 128)|0;
        $1190 = $1189&65535;
        $temp12 = $1190;
        $1191 = $temp12;
        $1192 = $1191&65535;
        $1193 = $temp12;
        $1194 = $1193&65535;
        $1195 = $1194 >> 8;
        $1196 = (($1192) + ($1195))|0;
        $1197 = $1196 >> 8;
        $1198 = $1197 & 255;
        $1199 = $1198&255;
        $1200 = $i8;
        $1201 = $palette10;
        $1202 = (($1201) + (($1200*3)|0)|0);
        $1203 = ((($1202)) + 1|0);
        HEAP8[$1203>>0] = $1199;
        $1204 = $i8;
        $1205 = $palette10;
        $1206 = (($1205) + (($1204*3)|0)|0);
        $1207 = ((($1206)) + 2|0);
        $1208 = HEAP8[$1207>>0]|0;
        $1209 = $1208&255;
        $1210 = $1209&65535;
        $1211 = $i8;
        $1212 = $0;
        $1213 = ((($1212)) + 520|0);
        $1214 = HEAP32[$1213>>2]|0;
        $1215 = (($1214) + ($1211)|0);
        $1216 = HEAP8[$1215>>0]|0;
        $1217 = $1216&255;
        $1218 = $1217&65535;
        $1219 = Math_imul($1210, $1218)|0;
        $1220 = ((($back9)) + 2|0);
        $1221 = HEAP8[$1220>>0]|0;
        $1222 = $1221&255;
        $1223 = $1222&65535;
        $1224 = $i8;
        $1225 = $0;
        $1226 = ((($1225)) + 520|0);
        $1227 = HEAP32[$1226>>2]|0;
        $1228 = (($1227) + ($1224)|0);
        $1229 = HEAP8[$1228>>0]|0;
        $1230 = $1229&255;
        $1231 = $1230&65535;
        $1232 = (255 - ($1231))|0;
        $1233 = $1232&65535;
        $1234 = $1233&65535;
        $1235 = Math_imul($1223, $1234)|0;
        $1236 = (($1219) + ($1235))|0;
        $1237 = (($1236) + 128)|0;
        $1238 = $1237&65535;
        $temp13 = $1238;
        $1239 = $temp13;
        $1240 = $1239&65535;
        $1241 = $temp13;
        $1242 = $1241&65535;
        $1243 = $1242 >> 8;
        $1244 = (($1240) + ($1243))|0;
        $1245 = $1244 >> 8;
        $1246 = $1245 & 255;
        $1247 = $1246&255;
        $1248 = $i8;
        $1249 = $palette10;
        $1250 = (($1249) + (($1248*3)|0)|0);
        $1251 = ((($1250)) + 2|0);
        HEAP8[$1251>>0] = $1247;
       }
      } while(0);
      $1252 = $i8;
      $1253 = (($1252) + 1)|0;
      $i8 = $1253;
     }
     $1254 = $0;
     $1255 = ((($1254)) + 216|0);
     $1256 = HEAP32[$1255>>2]|0;
     $1257 = $1256 & -129;
     HEAP32[$1255>>2] = $1257;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 50) {
   $330 = $0;
   $331 = $0;
   $332 = ((($331)) + 428|0);
   $333 = HEAP8[$332>>0]|0;
   $334 = $333&255;
   _png_build_gamma_table($330,$334);
   $335 = $0;
   $336 = ((($335)) + 216|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = $337 & 128;
   $339 = ($338|0)!=(0);
   $340 = $0;
   if (!($339)) {
    $983 = ((($340)) + 427|0);
    $984 = HEAP8[$983>>0]|0;
    $985 = $984&255;
    $986 = ($985|0)==(3);
    if (!($986)) {
     break;
    }
    $987 = $0;
    $988 = ((($987)) + 216|0);
    $989 = HEAP32[$988>>2]|0;
    $990 = $989 & 4096;
    $991 = ($990|0)==(0);
    if (!($991)) {
     $992 = $0;
     $993 = ((($992)) + 216|0);
     $994 = HEAP32[$993>>2]|0;
     $995 = $994 & 6291456;
     $996 = ($995|0)==(0);
     if (!($996)) {
      break;
     }
    }
    $997 = $0;
    $998 = ((($997)) + 408|0);
    $999 = HEAP32[$998>>2]|0;
    $palette5 = $999;
    $1000 = $0;
    $1001 = ((($1000)) + 412|0);
    $1002 = HEAP16[$1001>>1]|0;
    $1003 = $1002&65535;
    $num_palette6 = $1003;
    $i7 = 0;
    while(1) {
     $1004 = $i7;
     $1005 = $num_palette6;
     $1006 = ($1004|0)<($1005|0);
     if (!($1006)) {
      break;
     }
     $1007 = $i7;
     $1008 = $palette5;
     $1009 = (($1008) + (($1007*3)|0)|0);
     $1010 = HEAP8[$1009>>0]|0;
     $1011 = $1010&255;
     $1012 = $0;
     $1013 = ((($1012)) + 484|0);
     $1014 = HEAP32[$1013>>2]|0;
     $1015 = (($1014) + ($1011)|0);
     $1016 = HEAP8[$1015>>0]|0;
     $1017 = $i7;
     $1018 = $palette5;
     $1019 = (($1018) + (($1017*3)|0)|0);
     HEAP8[$1019>>0] = $1016;
     $1020 = $i7;
     $1021 = $palette5;
     $1022 = (($1021) + (($1020*3)|0)|0);
     $1023 = ((($1022)) + 1|0);
     $1024 = HEAP8[$1023>>0]|0;
     $1025 = $1024&255;
     $1026 = $0;
     $1027 = ((($1026)) + 484|0);
     $1028 = HEAP32[$1027>>2]|0;
     $1029 = (($1028) + ($1025)|0);
     $1030 = HEAP8[$1029>>0]|0;
     $1031 = $i7;
     $1032 = $palette5;
     $1033 = (($1032) + (($1031*3)|0)|0);
     $1034 = ((($1033)) + 1|0);
     HEAP8[$1034>>0] = $1030;
     $1035 = $i7;
     $1036 = $palette5;
     $1037 = (($1036) + (($1035*3)|0)|0);
     $1038 = ((($1037)) + 2|0);
     $1039 = HEAP8[$1038>>0]|0;
     $1040 = $1039&255;
     $1041 = $0;
     $1042 = ((($1041)) + 484|0);
     $1043 = HEAP32[$1042>>2]|0;
     $1044 = (($1043) + ($1040)|0);
     $1045 = HEAP8[$1044>>0]|0;
     $1046 = $i7;
     $1047 = $palette5;
     $1048 = (($1047) + (($1046*3)|0)|0);
     $1049 = ((($1048)) + 2|0);
     HEAP8[$1049>>0] = $1045;
     $1050 = $i7;
     $1051 = (($1050) + 1)|0;
     $i7 = $1051;
    }
    $1052 = $0;
    $1053 = ((($1052)) + 216|0);
    $1054 = HEAP32[$1053>>2]|0;
    $1055 = $1054 & -8193;
    HEAP32[$1053>>2] = $1055;
    break;
   }
   $341 = ((($340)) + 216|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = $342 & 6291456;
   $344 = ($343|0)!=(0);
   if ($344) {
    $345 = $0;
    _png_warning($345,15932);
   }
   $346 = $0;
   $347 = ((($346)) + 427|0);
   $348 = HEAP8[$347>>0]|0;
   $349 = $348&255;
   $350 = ($349|0)==(3);
   $351 = $350&1;
   $352 = ($351|0)!=(0);
   if (!($352)) {
    $g3 = 100000;
    $gs4 = 100000;
    $792 = $0;
    $793 = ((($792)) + 438|0);
    $794 = HEAP8[$793>>0]|0;
    $795 = $794&255;
    switch ($795|0) {
    case 1:  {
     $796 = $0;
     $797 = ((($796)) + 480|0);
     $798 = HEAP32[$797>>2]|0;
     $g3 = $798;
     break;
    }
    case 2:  {
     $799 = $0;
     $800 = ((($799)) + 792|0);
     $801 = HEAP32[$800>>2]|0;
     $802 = (_png_reciprocal($801)|0);
     $g3 = $802;
     $803 = $0;
     $804 = ((($803)) + 792|0);
     $805 = HEAP32[$804>>2]|0;
     $806 = $0;
     $807 = ((($806)) + 480|0);
     $808 = HEAP32[$807>>2]|0;
     $809 = (_png_reciprocal2($805,$808)|0);
     $gs4 = $809;
     break;
    }
    case 3:  {
     $810 = $0;
     $811 = ((($810)) + 440|0);
     $812 = HEAP32[$811>>2]|0;
     $813 = (_png_reciprocal($812)|0);
     $g3 = $813;
     $814 = $0;
     $815 = ((($814)) + 440|0);
     $816 = HEAP32[$815>>2]|0;
     $817 = $0;
     $818 = ((($817)) + 480|0);
     $819 = HEAP32[$818>>2]|0;
     $820 = (_png_reciprocal2($816,$819)|0);
     $gs4 = $820;
     break;
    }
    default: {
     $821 = $0;
     _png_error($821,15985);
     // unreachable;
    }
    }
    $822 = $g3;
    $823 = (_png_gamma_significant($822)|0);
    $g_sig = $823;
    $824 = $gs4;
    $825 = (_png_gamma_significant($824)|0);
    $gs_sig = $825;
    $826 = $g_sig;
    $827 = ($826|0)!=(0);
    if ($827) {
     $828 = $0;
     $829 = $0;
     $830 = ((($829)) + 444|0);
     $831 = ((($830)) + 8|0);
     $832 = HEAP16[$831>>1]|0;
     $833 = $832&65535;
     $834 = $g3;
     $835 = (_png_gamma_correct($828,$833,$834)|0);
     $836 = $0;
     $837 = ((($836)) + 454|0);
     $838 = ((($837)) + 8|0);
     HEAP16[$838>>1] = $835;
    }
    $839 = $gs_sig;
    $840 = ($839|0)!=(0);
    if ($840) {
     $841 = $0;
     $842 = $0;
     $843 = ((($842)) + 444|0);
     $844 = ((($843)) + 8|0);
     $845 = HEAP16[$844>>1]|0;
     $846 = $845&65535;
     $847 = $gs4;
     $848 = (_png_gamma_correct($841,$846,$847)|0);
     $849 = $0;
     $850 = ((($849)) + 444|0);
     $851 = ((($850)) + 8|0);
     HEAP16[$851>>1] = $848;
    }
    $852 = $0;
    $853 = ((($852)) + 444|0);
    $854 = ((($853)) + 2|0);
    $855 = HEAP16[$854>>1]|0;
    $856 = $855&65535;
    $857 = $0;
    $858 = ((($857)) + 444|0);
    $859 = ((($858)) + 4|0);
    $860 = HEAP16[$859>>1]|0;
    $861 = $860&65535;
    $862 = ($856|0)!=($861|0);
    do {
     if ($862) {
      label = 89;
     } else {
      $863 = $0;
      $864 = ((($863)) + 444|0);
      $865 = ((($864)) + 2|0);
      $866 = HEAP16[$865>>1]|0;
      $867 = $866&65535;
      $868 = $0;
      $869 = ((($868)) + 444|0);
      $870 = ((($869)) + 6|0);
      $871 = HEAP16[$870>>1]|0;
      $872 = $871&65535;
      $873 = ($867|0)!=($872|0);
      if ($873) {
       label = 89;
      } else {
       $874 = $0;
       $875 = ((($874)) + 444|0);
       $876 = ((($875)) + 2|0);
       $877 = HEAP16[$876>>1]|0;
       $878 = $877&65535;
       $879 = $0;
       $880 = ((($879)) + 444|0);
       $881 = ((($880)) + 8|0);
       $882 = HEAP16[$881>>1]|0;
       $883 = $882&65535;
       $884 = ($878|0)!=($883|0);
       if ($884) {
        label = 89;
        break;
       }
       $955 = $0;
       $956 = ((($955)) + 454|0);
       $957 = ((($956)) + 8|0);
       $958 = HEAP16[$957>>1]|0;
       $959 = $0;
       $960 = ((($959)) + 454|0);
       $961 = ((($960)) + 6|0);
       HEAP16[$961>>1] = $958;
       $962 = $0;
       $963 = ((($962)) + 454|0);
       $964 = ((($963)) + 4|0);
       HEAP16[$964>>1] = $958;
       $965 = $0;
       $966 = ((($965)) + 454|0);
       $967 = ((($966)) + 2|0);
       HEAP16[$967>>1] = $958;
       $968 = $0;
       $969 = ((($968)) + 444|0);
       $970 = ((($969)) + 8|0);
       $971 = HEAP16[$970>>1]|0;
       $972 = $0;
       $973 = ((($972)) + 444|0);
       $974 = ((($973)) + 6|0);
       HEAP16[$974>>1] = $971;
       $975 = $0;
       $976 = ((($975)) + 444|0);
       $977 = ((($976)) + 4|0);
       HEAP16[$977>>1] = $971;
       $978 = $0;
       $979 = ((($978)) + 444|0);
       $980 = ((($979)) + 2|0);
       HEAP16[$980>>1] = $971;
      }
     }
    } while(0);
    do {
     if ((label|0) == 89) {
      $885 = $g_sig;
      $886 = ($885|0)!=(0);
      if ($886) {
       $887 = $0;
       $888 = $0;
       $889 = ((($888)) + 444|0);
       $890 = ((($889)) + 2|0);
       $891 = HEAP16[$890>>1]|0;
       $892 = $891&65535;
       $893 = $g3;
       $894 = (_png_gamma_correct($887,$892,$893)|0);
       $895 = $0;
       $896 = ((($895)) + 454|0);
       $897 = ((($896)) + 2|0);
       HEAP16[$897>>1] = $894;
       $898 = $0;
       $899 = $0;
       $900 = ((($899)) + 444|0);
       $901 = ((($900)) + 4|0);
       $902 = HEAP16[$901>>1]|0;
       $903 = $902&65535;
       $904 = $g3;
       $905 = (_png_gamma_correct($898,$903,$904)|0);
       $906 = $0;
       $907 = ((($906)) + 454|0);
       $908 = ((($907)) + 4|0);
       HEAP16[$908>>1] = $905;
       $909 = $0;
       $910 = $0;
       $911 = ((($910)) + 444|0);
       $912 = ((($911)) + 6|0);
       $913 = HEAP16[$912>>1]|0;
       $914 = $913&65535;
       $915 = $g3;
       $916 = (_png_gamma_correct($909,$914,$915)|0);
       $917 = $0;
       $918 = ((($917)) + 454|0);
       $919 = ((($918)) + 6|0);
       HEAP16[$919>>1] = $916;
      }
      $920 = $gs_sig;
      $921 = ($920|0)!=(0);
      if (!($921)) {
       break;
      }
      $922 = $0;
      $923 = $0;
      $924 = ((($923)) + 444|0);
      $925 = ((($924)) + 2|0);
      $926 = HEAP16[$925>>1]|0;
      $927 = $926&65535;
      $928 = $gs4;
      $929 = (_png_gamma_correct($922,$927,$928)|0);
      $930 = $0;
      $931 = ((($930)) + 444|0);
      $932 = ((($931)) + 2|0);
      HEAP16[$932>>1] = $929;
      $933 = $0;
      $934 = $0;
      $935 = ((($934)) + 444|0);
      $936 = ((($935)) + 4|0);
      $937 = HEAP16[$936>>1]|0;
      $938 = $937&65535;
      $939 = $gs4;
      $940 = (_png_gamma_correct($933,$938,$939)|0);
      $941 = $0;
      $942 = ((($941)) + 444|0);
      $943 = ((($942)) + 4|0);
      HEAP16[$943>>1] = $940;
      $944 = $0;
      $945 = $0;
      $946 = ((($945)) + 444|0);
      $947 = ((($946)) + 6|0);
      $948 = HEAP16[$947>>1]|0;
      $949 = $948&65535;
      $950 = $gs4;
      $951 = (_png_gamma_correct($944,$949,$950)|0);
      $952 = $0;
      $953 = ((($952)) + 444|0);
      $954 = ((($953)) + 6|0);
      HEAP16[$954>>1] = $951;
     }
    } while(0);
    $981 = $0;
    $982 = ((($981)) + 438|0);
    HEAP8[$982>>0] = 1;
    break;
   }
   $353 = $0;
   $354 = ((($353)) + 408|0);
   $355 = HEAP32[$354>>2]|0;
   $palette = $355;
   $356 = $0;
   $357 = ((($356)) + 412|0);
   $358 = HEAP16[$357>>1]|0;
   $359 = $358&65535;
   $num_palette = $359;
   $360 = $0;
   $361 = ((($360)) + 438|0);
   $362 = HEAP8[$361>>0]|0;
   $363 = $362&255;
   $364 = ($363|0)==(2);
   $365 = $0;
   do {
    if ($364) {
     $366 = ((($365)) + 444|0);
     $367 = ((($366)) + 2|0);
     $368 = HEAP16[$367>>1]|0;
     $369 = $368&65535;
     $370 = $0;
     $371 = ((($370)) + 484|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = (($372) + ($369)|0);
     $374 = HEAP8[$373>>0]|0;
     HEAP8[$back>>0] = $374;
     $375 = $0;
     $376 = ((($375)) + 444|0);
     $377 = ((($376)) + 4|0);
     $378 = HEAP16[$377>>1]|0;
     $379 = $378&65535;
     $380 = $0;
     $381 = ((($380)) + 484|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = (($382) + ($379)|0);
     $384 = HEAP8[$383>>0]|0;
     $385 = ((($back)) + 1|0);
     HEAP8[$385>>0] = $384;
     $386 = $0;
     $387 = ((($386)) + 444|0);
     $388 = ((($387)) + 6|0);
     $389 = HEAP16[$388>>1]|0;
     $390 = $389&65535;
     $391 = $0;
     $392 = ((($391)) + 484|0);
     $393 = HEAP32[$392>>2]|0;
     $394 = (($393) + ($390)|0);
     $395 = HEAP8[$394>>0]|0;
     $396 = ((($back)) + 2|0);
     HEAP8[$396>>0] = $395;
     $397 = $0;
     $398 = ((($397)) + 444|0);
     $399 = ((($398)) + 2|0);
     $400 = HEAP16[$399>>1]|0;
     $401 = $400&65535;
     $402 = $0;
     $403 = ((($402)) + 496|0);
     $404 = HEAP32[$403>>2]|0;
     $405 = (($404) + ($401)|0);
     $406 = HEAP8[$405>>0]|0;
     HEAP8[$back_1>>0] = $406;
     $407 = $0;
     $408 = ((($407)) + 444|0);
     $409 = ((($408)) + 4|0);
     $410 = HEAP16[$409>>1]|0;
     $411 = $410&65535;
     $412 = $0;
     $413 = ((($412)) + 496|0);
     $414 = HEAP32[$413>>2]|0;
     $415 = (($414) + ($411)|0);
     $416 = HEAP8[$415>>0]|0;
     $417 = ((($back_1)) + 1|0);
     HEAP8[$417>>0] = $416;
     $418 = $0;
     $419 = ((($418)) + 444|0);
     $420 = ((($419)) + 6|0);
     $421 = HEAP16[$420>>1]|0;
     $422 = $421&65535;
     $423 = $0;
     $424 = ((($423)) + 496|0);
     $425 = HEAP32[$424>>2]|0;
     $426 = (($425) + ($422)|0);
     $427 = HEAP8[$426>>0]|0;
     $428 = ((($back_1)) + 2|0);
     HEAP8[$428>>0] = $427;
    } else {
     $429 = ((($365)) + 438|0);
     $430 = HEAP8[$429>>0]|0;
     $431 = $430&255;
     switch ($431|0) {
     case 1:  {
      $432 = $0;
      $433 = ((($432)) + 480|0);
      $434 = HEAP32[$433>>2]|0;
      $g = $434;
      $gs = 100000;
      break;
     }
     case 2:  {
      $435 = $0;
      $436 = ((($435)) + 792|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = (_png_reciprocal($437)|0);
      $g = $438;
      $439 = $0;
      $440 = ((($439)) + 792|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = $0;
      $443 = ((($442)) + 480|0);
      $444 = HEAP32[$443>>2]|0;
      $445 = (_png_reciprocal2($441,$444)|0);
      $gs = $445;
      break;
     }
     case 3:  {
      $446 = $0;
      $447 = ((($446)) + 440|0);
      $448 = HEAP32[$447>>2]|0;
      $449 = (_png_reciprocal($448)|0);
      $g = $449;
      $450 = $0;
      $451 = ((($450)) + 440|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = $0;
      $454 = ((($453)) + 480|0);
      $455 = HEAP32[$454>>2]|0;
      $456 = (_png_reciprocal2($452,$455)|0);
      $gs = $456;
      break;
     }
     default: {
      $g = 100000;
      $gs = 100000;
     }
     }
     $457 = $gs;
     $458 = (_png_gamma_significant($457)|0);
     $459 = ($458|0)!=(0);
     $460 = $0;
     $461 = ((($460)) + 444|0);
     $462 = ((($461)) + 2|0);
     $463 = HEAP16[$462>>1]|0;
     if ($459) {
      $464 = $463&65535;
      $465 = $gs;
      $466 = (_png_gamma_8bit_correct($464,$465)|0);
      HEAP8[$back>>0] = $466;
      $467 = $0;
      $468 = ((($467)) + 444|0);
      $469 = ((($468)) + 4|0);
      $470 = HEAP16[$469>>1]|0;
      $471 = $470&65535;
      $472 = $gs;
      $473 = (_png_gamma_8bit_correct($471,$472)|0);
      $474 = ((($back)) + 1|0);
      HEAP8[$474>>0] = $473;
      $475 = $0;
      $476 = ((($475)) + 444|0);
      $477 = ((($476)) + 6|0);
      $478 = HEAP16[$477>>1]|0;
      $479 = $478&65535;
      $480 = $gs;
      $481 = (_png_gamma_8bit_correct($479,$480)|0);
      $482 = ((($back)) + 2|0);
      HEAP8[$482>>0] = $481;
     } else {
      $483 = $463&255;
      HEAP8[$back>>0] = $483;
      $484 = $0;
      $485 = ((($484)) + 444|0);
      $486 = ((($485)) + 4|0);
      $487 = HEAP16[$486>>1]|0;
      $488 = $487&255;
      $489 = ((($back)) + 1|0);
      HEAP8[$489>>0] = $488;
      $490 = $0;
      $491 = ((($490)) + 444|0);
      $492 = ((($491)) + 6|0);
      $493 = HEAP16[$492>>1]|0;
      $494 = $493&255;
      $495 = ((($back)) + 2|0);
      HEAP8[$495>>0] = $494;
     }
     $496 = $g;
     $497 = (_png_gamma_significant($496)|0);
     $498 = ($497|0)!=(0);
     $499 = $0;
     $500 = ((($499)) + 444|0);
     $501 = ((($500)) + 2|0);
     $502 = HEAP16[$501>>1]|0;
     if ($498) {
      $503 = $502&65535;
      $504 = $g;
      $505 = (_png_gamma_8bit_correct($503,$504)|0);
      HEAP8[$back_1>>0] = $505;
      $506 = $0;
      $507 = ((($506)) + 444|0);
      $508 = ((($507)) + 4|0);
      $509 = HEAP16[$508>>1]|0;
      $510 = $509&65535;
      $511 = $g;
      $512 = (_png_gamma_8bit_correct($510,$511)|0);
      $513 = ((($back_1)) + 1|0);
      HEAP8[$513>>0] = $512;
      $514 = $0;
      $515 = ((($514)) + 444|0);
      $516 = ((($515)) + 6|0);
      $517 = HEAP16[$516>>1]|0;
      $518 = $517&65535;
      $519 = $g;
      $520 = (_png_gamma_8bit_correct($518,$519)|0);
      $521 = ((($back_1)) + 2|0);
      HEAP8[$521>>0] = $520;
      break;
     } else {
      $522 = $502&255;
      HEAP8[$back_1>>0] = $522;
      $523 = $0;
      $524 = ((($523)) + 444|0);
      $525 = ((($524)) + 4|0);
      $526 = HEAP16[$525>>1]|0;
      $527 = $526&255;
      $528 = ((($back_1)) + 1|0);
      HEAP8[$528>>0] = $527;
      $529 = $0;
      $530 = ((($529)) + 444|0);
      $531 = ((($530)) + 6|0);
      $532 = HEAP16[$531>>1]|0;
      $533 = $532&255;
      $534 = ((($back_1)) + 2|0);
      HEAP8[$534>>0] = $533;
      break;
     }
    }
   } while(0);
   $i = 0;
   while(1) {
    $535 = $i;
    $536 = $num_palette;
    $537 = ($535|0)<($536|0);
    if (!($537)) {
     break;
    }
    $538 = $i;
    $539 = $0;
    $540 = ((($539)) + 420|0);
    $541 = HEAP16[$540>>1]|0;
    $542 = $541&65535;
    $543 = ($538|0)<($542|0);
    do {
     if ($543) {
      $544 = $i;
      $545 = $0;
      $546 = ((($545)) + 520|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = (($547) + ($544)|0);
      $549 = HEAP8[$548>>0]|0;
      $550 = $549&255;
      $551 = ($550|0)!=(255);
      if ($551) {
       $552 = $i;
       $553 = $0;
       $554 = ((($553)) + 520|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = (($555) + ($552)|0);
       $557 = HEAP8[$556>>0]|0;
       $558 = $557&255;
       $559 = ($558|0)==(0);
       $560 = $i;
       $561 = $palette;
       $562 = (($561) + (($560*3)|0)|0);
       if ($559) {
        ;HEAP8[$562>>0]=HEAP8[$back>>0]|0;HEAP8[$562+1>>0]=HEAP8[$back+1>>0]|0;HEAP8[$562+2>>0]=HEAP8[$back+2>>0]|0;
        break;
       } else {
        $563 = HEAP8[$562>>0]|0;
        $564 = $563&255;
        $565 = $0;
        $566 = ((($565)) + 496|0);
        $567 = HEAP32[$566>>2]|0;
        $568 = (($567) + ($564)|0);
        $569 = HEAP8[$568>>0]|0;
        $v = $569;
        $570 = $v;
        $571 = $570&255;
        $572 = $571&65535;
        $573 = $i;
        $574 = $0;
        $575 = ((($574)) + 520|0);
        $576 = HEAP32[$575>>2]|0;
        $577 = (($576) + ($573)|0);
        $578 = HEAP8[$577>>0]|0;
        $579 = $578&255;
        $580 = $579&65535;
        $581 = Math_imul($572, $580)|0;
        $582 = HEAP8[$back_1>>0]|0;
        $583 = $582&255;
        $584 = $583&65535;
        $585 = $i;
        $586 = $0;
        $587 = ((($586)) + 520|0);
        $588 = HEAP32[$587>>2]|0;
        $589 = (($588) + ($585)|0);
        $590 = HEAP8[$589>>0]|0;
        $591 = $590&255;
        $592 = $591&65535;
        $593 = (255 - ($592))|0;
        $594 = $593&65535;
        $595 = $594&65535;
        $596 = Math_imul($584, $595)|0;
        $597 = (($581) + ($596))|0;
        $598 = (($597) + 128)|0;
        $599 = $598&65535;
        $temp = $599;
        $600 = $temp;
        $601 = $600&65535;
        $602 = $temp;
        $603 = $602&65535;
        $604 = $603 >> 8;
        $605 = (($601) + ($604))|0;
        $606 = $605 >> 8;
        $607 = $606 & 255;
        $608 = $607&255;
        $w = $608;
        $609 = $w;
        $610 = $609&255;
        $611 = $0;
        $612 = ((($611)) + 492|0);
        $613 = HEAP32[$612>>2]|0;
        $614 = (($613) + ($610)|0);
        $615 = HEAP8[$614>>0]|0;
        $616 = $i;
        $617 = $palette;
        $618 = (($617) + (($616*3)|0)|0);
        HEAP8[$618>>0] = $615;
        $619 = $i;
        $620 = $palette;
        $621 = (($620) + (($619*3)|0)|0);
        $622 = ((($621)) + 1|0);
        $623 = HEAP8[$622>>0]|0;
        $624 = $623&255;
        $625 = $0;
        $626 = ((($625)) + 496|0);
        $627 = HEAP32[$626>>2]|0;
        $628 = (($627) + ($624)|0);
        $629 = HEAP8[$628>>0]|0;
        $v = $629;
        $630 = $v;
        $631 = $630&255;
        $632 = $631&65535;
        $633 = $i;
        $634 = $0;
        $635 = ((($634)) + 520|0);
        $636 = HEAP32[$635>>2]|0;
        $637 = (($636) + ($633)|0);
        $638 = HEAP8[$637>>0]|0;
        $639 = $638&255;
        $640 = $639&65535;
        $641 = Math_imul($632, $640)|0;
        $642 = ((($back_1)) + 1|0);
        $643 = HEAP8[$642>>0]|0;
        $644 = $643&255;
        $645 = $644&65535;
        $646 = $i;
        $647 = $0;
        $648 = ((($647)) + 520|0);
        $649 = HEAP32[$648>>2]|0;
        $650 = (($649) + ($646)|0);
        $651 = HEAP8[$650>>0]|0;
        $652 = $651&255;
        $653 = $652&65535;
        $654 = (255 - ($653))|0;
        $655 = $654&65535;
        $656 = $655&65535;
        $657 = Math_imul($645, $656)|0;
        $658 = (($641) + ($657))|0;
        $659 = (($658) + 128)|0;
        $660 = $659&65535;
        $temp1 = $660;
        $661 = $temp1;
        $662 = $661&65535;
        $663 = $temp1;
        $664 = $663&65535;
        $665 = $664 >> 8;
        $666 = (($662) + ($665))|0;
        $667 = $666 >> 8;
        $668 = $667 & 255;
        $669 = $668&255;
        $w = $669;
        $670 = $w;
        $671 = $670&255;
        $672 = $0;
        $673 = ((($672)) + 492|0);
        $674 = HEAP32[$673>>2]|0;
        $675 = (($674) + ($671)|0);
        $676 = HEAP8[$675>>0]|0;
        $677 = $i;
        $678 = $palette;
        $679 = (($678) + (($677*3)|0)|0);
        $680 = ((($679)) + 1|0);
        HEAP8[$680>>0] = $676;
        $681 = $i;
        $682 = $palette;
        $683 = (($682) + (($681*3)|0)|0);
        $684 = ((($683)) + 2|0);
        $685 = HEAP8[$684>>0]|0;
        $686 = $685&255;
        $687 = $0;
        $688 = ((($687)) + 496|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = (($689) + ($686)|0);
        $691 = HEAP8[$690>>0]|0;
        $v = $691;
        $692 = $v;
        $693 = $692&255;
        $694 = $693&65535;
        $695 = $i;
        $696 = $0;
        $697 = ((($696)) + 520|0);
        $698 = HEAP32[$697>>2]|0;
        $699 = (($698) + ($695)|0);
        $700 = HEAP8[$699>>0]|0;
        $701 = $700&255;
        $702 = $701&65535;
        $703 = Math_imul($694, $702)|0;
        $704 = ((($back_1)) + 2|0);
        $705 = HEAP8[$704>>0]|0;
        $706 = $705&255;
        $707 = $706&65535;
        $708 = $i;
        $709 = $0;
        $710 = ((($709)) + 520|0);
        $711 = HEAP32[$710>>2]|0;
        $712 = (($711) + ($708)|0);
        $713 = HEAP8[$712>>0]|0;
        $714 = $713&255;
        $715 = $714&65535;
        $716 = (255 - ($715))|0;
        $717 = $716&65535;
        $718 = $717&65535;
        $719 = Math_imul($707, $718)|0;
        $720 = (($703) + ($719))|0;
        $721 = (($720) + 128)|0;
        $722 = $721&65535;
        $temp2 = $722;
        $723 = $temp2;
        $724 = $723&65535;
        $725 = $temp2;
        $726 = $725&65535;
        $727 = $726 >> 8;
        $728 = (($724) + ($727))|0;
        $729 = $728 >> 8;
        $730 = $729 & 255;
        $731 = $730&255;
        $w = $731;
        $732 = $w;
        $733 = $732&255;
        $734 = $0;
        $735 = ((($734)) + 492|0);
        $736 = HEAP32[$735>>2]|0;
        $737 = (($736) + ($733)|0);
        $738 = HEAP8[$737>>0]|0;
        $739 = $i;
        $740 = $palette;
        $741 = (($740) + (($739*3)|0)|0);
        $742 = ((($741)) + 2|0);
        HEAP8[$742>>0] = $738;
        break;
       }
      } else {
       label = 74;
      }
     } else {
      label = 74;
     }
    } while(0);
    if ((label|0) == 74) {
     label = 0;
     $743 = $i;
     $744 = $palette;
     $745 = (($744) + (($743*3)|0)|0);
     $746 = HEAP8[$745>>0]|0;
     $747 = $746&255;
     $748 = $0;
     $749 = ((($748)) + 484|0);
     $750 = HEAP32[$749>>2]|0;
     $751 = (($750) + ($747)|0);
     $752 = HEAP8[$751>>0]|0;
     $753 = $i;
     $754 = $palette;
     $755 = (($754) + (($753*3)|0)|0);
     HEAP8[$755>>0] = $752;
     $756 = $i;
     $757 = $palette;
     $758 = (($757) + (($756*3)|0)|0);
     $759 = ((($758)) + 1|0);
     $760 = HEAP8[$759>>0]|0;
     $761 = $760&255;
     $762 = $0;
     $763 = ((($762)) + 484|0);
     $764 = HEAP32[$763>>2]|0;
     $765 = (($764) + ($761)|0);
     $766 = HEAP8[$765>>0]|0;
     $767 = $i;
     $768 = $palette;
     $769 = (($768) + (($767*3)|0)|0);
     $770 = ((($769)) + 1|0);
     HEAP8[$770>>0] = $766;
     $771 = $i;
     $772 = $palette;
     $773 = (($772) + (($771*3)|0)|0);
     $774 = ((($773)) + 2|0);
     $775 = HEAP8[$774>>0]|0;
     $776 = $775&255;
     $777 = $0;
     $778 = ((($777)) + 484|0);
     $779 = HEAP32[$778>>2]|0;
     $780 = (($779) + ($776)|0);
     $781 = HEAP8[$780>>0]|0;
     $782 = $i;
     $783 = $palette;
     $784 = (($783) + (($782*3)|0)|0);
     $785 = ((($784)) + 2|0);
     HEAP8[$785>>0] = $781;
    }
    $786 = $i;
    $787 = (($786) + 1)|0;
    $i = $787;
   }
   $788 = $0;
   $789 = ((($788)) + 216|0);
   $790 = HEAP32[$789>>2]|0;
   $791 = $790 & -8321;
   HEAP32[$789>>2] = $791;
  }
 } while(0);
 $1258 = $0;
 $1259 = ((($1258)) + 216|0);
 $1260 = HEAP32[$1259>>2]|0;
 $1261 = $1260 & 8;
 $1262 = ($1261|0)!=(0);
 if (!($1262)) {
  STACKTOP = sp;return;
 }
 $1263 = $0;
 $1264 = ((($1263)) + 216|0);
 $1265 = HEAP32[$1264>>2]|0;
 $1266 = $1265 & 4096;
 $1267 = ($1266|0)==(0);
 if (!($1267)) {
  STACKTOP = sp;return;
 }
 $1268 = $0;
 $1269 = ((($1268)) + 427|0);
 $1270 = HEAP8[$1269>>0]|0;
 $1271 = $1270&255;
 $1272 = ($1271|0)==(3);
 if (!($1272)) {
  STACKTOP = sp;return;
 }
 $1273 = $0;
 $1274 = ((($1273)) + 412|0);
 $1275 = HEAP16[$1274>>1]|0;
 $1276 = $1275&65535;
 $istop15 = $1276;
 $1277 = $0;
 $1278 = ((($1277)) + 508|0);
 $1279 = HEAP8[$1278>>0]|0;
 $1280 = $1279&255;
 $1281 = (8 - ($1280))|0;
 $shift = $1281;
 $1282 = $0;
 $1283 = ((($1282)) + 216|0);
 $1284 = HEAP32[$1283>>2]|0;
 $1285 = $1284 & -9;
 HEAP32[$1283>>2] = $1285;
 $1286 = $shift;
 $1287 = ($1286|0)>(0);
 $1288 = $shift;
 $1289 = ($1288|0)<(8);
 $or$cond = $1287 & $1289;
 L158: do {
  if ($or$cond) {
   $i14 = 0;
   while(1) {
    $1290 = $i14;
    $1291 = $istop15;
    $1292 = ($1290|0)<($1291|0);
    if (!($1292)) {
     break L158;
    }
    $1293 = $i14;
    $1294 = $0;
    $1295 = ((($1294)) + 408|0);
    $1296 = HEAP32[$1295>>2]|0;
    $1297 = (($1296) + (($1293*3)|0)|0);
    $1298 = HEAP8[$1297>>0]|0;
    $1299 = $1298&255;
    $component = $1299;
    $1300 = $shift;
    $1301 = $component;
    $1302 = $1301 >> $1300;
    $component = $1302;
    $1303 = $component;
    $1304 = $1303&255;
    $1305 = $i14;
    $1306 = $0;
    $1307 = ((($1306)) + 408|0);
    $1308 = HEAP32[$1307>>2]|0;
    $1309 = (($1308) + (($1305*3)|0)|0);
    HEAP8[$1309>>0] = $1304;
    $1310 = $i14;
    $1311 = (($1310) + 1)|0;
    $i14 = $1311;
   }
  }
 } while(0);
 $1312 = $0;
 $1313 = ((($1312)) + 508|0);
 $1314 = ((($1313)) + 1|0);
 $1315 = HEAP8[$1314>>0]|0;
 $1316 = $1315&255;
 $1317 = (8 - ($1316))|0;
 $shift = $1317;
 $1318 = $shift;
 $1319 = ($1318|0)>(0);
 $1320 = $shift;
 $1321 = ($1320|0)<(8);
 $or$cond3 = $1319 & $1321;
 L164: do {
  if ($or$cond3) {
   $i14 = 0;
   while(1) {
    $1322 = $i14;
    $1323 = $istop15;
    $1324 = ($1322|0)<($1323|0);
    if (!($1324)) {
     break L164;
    }
    $1325 = $i14;
    $1326 = $0;
    $1327 = ((($1326)) + 408|0);
    $1328 = HEAP32[$1327>>2]|0;
    $1329 = (($1328) + (($1325*3)|0)|0);
    $1330 = ((($1329)) + 1|0);
    $1331 = HEAP8[$1330>>0]|0;
    $1332 = $1331&255;
    $component16 = $1332;
    $1333 = $shift;
    $1334 = $component16;
    $1335 = $1334 >> $1333;
    $component16 = $1335;
    $1336 = $component16;
    $1337 = $1336&255;
    $1338 = $i14;
    $1339 = $0;
    $1340 = ((($1339)) + 408|0);
    $1341 = HEAP32[$1340>>2]|0;
    $1342 = (($1341) + (($1338*3)|0)|0);
    $1343 = ((($1342)) + 1|0);
    HEAP8[$1343>>0] = $1337;
    $1344 = $i14;
    $1345 = (($1344) + 1)|0;
    $i14 = $1345;
   }
  }
 } while(0);
 $1346 = $0;
 $1347 = ((($1346)) + 508|0);
 $1348 = ((($1347)) + 2|0);
 $1349 = HEAP8[$1348>>0]|0;
 $1350 = $1349&255;
 $1351 = (8 - ($1350))|0;
 $shift = $1351;
 $1352 = $shift;
 $1353 = ($1352|0)>(0);
 $1354 = $shift;
 $1355 = ($1354|0)<(8);
 $or$cond5 = $1353 & $1355;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $i14 = 0;
 while(1) {
  $1356 = $i14;
  $1357 = $istop15;
  $1358 = ($1356|0)<($1357|0);
  if (!($1358)) {
   break;
  }
  $1359 = $i14;
  $1360 = $0;
  $1361 = ((($1360)) + 408|0);
  $1362 = HEAP32[$1361>>2]|0;
  $1363 = (($1362) + (($1359*3)|0)|0);
  $1364 = ((($1363)) + 2|0);
  $1365 = HEAP8[$1364>>0]|0;
  $1366 = $1365&255;
  $component17 = $1366;
  $1367 = $shift;
  $1368 = $component17;
  $1369 = $1368 >> $1367;
  $component17 = $1369;
  $1370 = $component17;
  $1371 = $1370&255;
  $1372 = $i14;
  $1373 = $0;
  $1374 = ((($1373)) + 408|0);
  $1375 = HEAP32[$1374>>2]|0;
  $1376 = (($1375) + (($1372*3)|0)|0);
  $1377 = ((($1376)) + 2|0);
  HEAP8[$1377>>0] = $1371;
  $1378 = $i14;
  $1379 = (($1378) + 1)|0;
  $i14 = $1379;
 }
 STACKTOP = sp;return;
}
function _png_gamma_threshold($screen_gamma,$file_gamma) {
 $screen_gamma = $screen_gamma|0;
 $file_gamma = $file_gamma|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gtest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $gtest = sp;
 $0 = $screen_gamma;
 $1 = $file_gamma;
 $2 = $0;
 $3 = $1;
 $4 = (_png_muldiv($gtest,$2,$3,100000)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $10 = 1;
  $9 = $10&1;
  STACKTOP = sp;return ($9|0);
 }
 $6 = HEAP32[$gtest>>2]|0;
 $7 = (_png_gamma_significant($6)|0);
 $8 = ($7|0)!=(0);
 $10 = $8;
 $9 = $10&1;
 STACKTOP = sp;return ($9|0);
}
function _png_init_palette_transformations($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $input_has_alpha = 0, $input_has_transparency = 0, $istop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $input_has_alpha = 0;
 $input_has_transparency = 0;
 $1 = $0;
 $2 = ((($1)) + 420|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)>(0);
 L1: do {
  if ($5) {
   $i = 0;
   while(1) {
    $6 = $i;
    $7 = $0;
    $8 = ((($7)) + 420|0);
    $9 = HEAP16[$8>>1]|0;
    $10 = $9&65535;
    $11 = ($6|0)<($10|0);
    if (!($11)) {
     break L1;
    }
    $12 = $i;
    $13 = $0;
    $14 = ((($13)) + 520|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + ($12)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = ($18|0)==(255);
    if (!($19)) {
     $20 = $i;
     $21 = $0;
     $22 = ((($21)) + 520|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (($23) + ($20)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = ($26|0)==(0);
     $input_has_transparency = 1;
     if (!($27)) {
      break;
     }
    }
    $28 = $i;
    $29 = (($28) + 1)|0;
    $i = $29;
   }
   $input_has_alpha = 1;
  }
 } while(0);
 $30 = $input_has_alpha;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = $0;
  $33 = ((($32)) + 216|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & -8388609;
  HEAP32[$33>>2] = $35;
  $36 = $0;
  $37 = ((($36)) + 212|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 & -8193;
  HEAP32[$37>>2] = $39;
  $40 = $input_has_transparency;
  $41 = ($40|0)==(0);
  if ($41) {
   $42 = $0;
   $43 = ((($42)) + 216|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 & -385;
   HEAP32[$43>>2] = $45;
  }
 }
 $46 = $0;
 $47 = ((($46)) + 216|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & 256;
 $50 = ($49|0)!=(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = $0;
 $52 = ((($51)) + 216|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $53 & 4096;
 $55 = ($54|0)!=(0);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $56 = $0;
 $57 = ((($56)) + 444|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $0;
 $61 = ((($60)) + 408|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + (($59*3)|0)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $0;
 $67 = ((($66)) + 444|0);
 $68 = ((($67)) + 2|0);
 HEAP16[$68>>1] = $65;
 $69 = $0;
 $70 = ((($69)) + 444|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $0;
 $74 = ((($73)) + 408|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) + (($72*3)|0)|0);
 $77 = ((($76)) + 1|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $0;
 $81 = ((($80)) + 444|0);
 $82 = ((($81)) + 4|0);
 HEAP16[$82>>1] = $79;
 $83 = $0;
 $84 = ((($83)) + 444|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = $0;
 $88 = ((($87)) + 408|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + (($86*3)|0)|0);
 $91 = ((($90)) + 2|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = $0;
 $95 = ((($94)) + 444|0);
 $96 = ((($95)) + 6|0);
 HEAP16[$96>>1] = $93;
 $97 = $0;
 $98 = ((($97)) + 216|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & 524288;
 $101 = ($100|0)!=(0);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = $0;
 $103 = ((($102)) + 216|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $104 & 33554432;
 $106 = ($105|0)==(0);
 if (!($106)) {
  STACKTOP = sp;return;
 }
 $107 = $0;
 $108 = ((($107)) + 420|0);
 $109 = HEAP16[$108>>1]|0;
 $110 = $109&65535;
 $istop = $110;
 $i1 = 0;
 while(1) {
  $111 = $i1;
  $112 = $istop;
  $113 = ($111|0)<($112|0);
  if (!($113)) {
   break;
  }
  $114 = $i1;
  $115 = $0;
  $116 = ((($115)) + 520|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + ($114)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (255 - ($120))|0;
  $122 = $121&255;
  $123 = $i1;
  $124 = $0;
  $125 = ((($124)) + 520|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($126) + ($123)|0);
  HEAP8[$127>>0] = $122;
  $128 = $i1;
  $129 = (($128) + 1)|0;
  $i1 = $129;
 }
 STACKTOP = sp;return;
}
function _png_init_rgb_transformations($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $gray = 0;
 var $input_has_alpha = 0, $input_has_transparency = 0, $trans_gray = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ((($1)) + 427|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 $input_has_alpha = $7;
 $8 = $0;
 $9 = ((($8)) + 420|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11|0)>(0);
 $13 = $12&1;
 $input_has_transparency = $13;
 $14 = $input_has_alpha;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $0;
  $17 = ((($16)) + 216|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & -8388609;
  HEAP32[$17>>2] = $19;
  $20 = $0;
  $21 = ((($20)) + 212|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & -8193;
  HEAP32[$21>>2] = $23;
  $24 = $input_has_transparency;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $0;
   $27 = ((($26)) + 216|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & -385;
   HEAP32[$27>>2] = $29;
  }
 }
 $30 = $0;
 $31 = ((($30)) + 216|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 256;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = ((($35)) + 216|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 4096;
 $39 = ($38|0)!=(0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = $0;
 $41 = ((($40)) + 427|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 & 2;
 $45 = ($44|0)==(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $0;
 $47 = ((($46)) + 444|0);
 $48 = ((($47)) + 8|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $gray = $50;
 $51 = $0;
 $52 = ((($51)) + 524|0);
 $53 = ((($52)) + 8|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $trans_gray = $55;
 $56 = $0;
 $57 = ((($56)) + 428|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 switch ($59|0) {
 case 1:  {
  $60 = $gray;
  $61 = ($60*255)|0;
  $gray = $61;
  $62 = $trans_gray;
  $63 = ($62*255)|0;
  $trans_gray = $63;
  break;
 }
 case 2:  {
  $64 = $gray;
  $65 = ($64*85)|0;
  $gray = $65;
  $66 = $trans_gray;
  $67 = ($66*85)|0;
  $trans_gray = $67;
  break;
 }
 case 4:  {
  $68 = $gray;
  $69 = ($68*17)|0;
  $gray = $69;
  $70 = $trans_gray;
  $71 = ($70*17)|0;
  $trans_gray = $71;
  break;
 }
 default: {
 }
 }
 $72 = $gray;
 $73 = $72&65535;
 $74 = $0;
 $75 = ((($74)) + 444|0);
 $76 = ((($75)) + 6|0);
 HEAP16[$76>>1] = $73;
 $77 = $0;
 $78 = ((($77)) + 444|0);
 $79 = ((($78)) + 4|0);
 HEAP16[$79>>1] = $73;
 $80 = $0;
 $81 = ((($80)) + 444|0);
 $82 = ((($81)) + 2|0);
 HEAP16[$82>>1] = $73;
 $83 = $0;
 $84 = ((($83)) + 216|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 & 33554432;
 $87 = ($86|0)==(0);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = $trans_gray;
 $89 = $88&65535;
 $90 = $0;
 $91 = ((($90)) + 524|0);
 $92 = ((($91)) + 6|0);
 HEAP16[$92>>1] = $89;
 $93 = $0;
 $94 = ((($93)) + 524|0);
 $95 = ((($94)) + 4|0);
 HEAP16[$95>>1] = $89;
 $96 = $0;
 $97 = ((($96)) + 524|0);
 $98 = ((($97)) + 2|0);
 HEAP16[$98>>1] = $89;
 STACKTOP = sp;return;
}
function _png_read_transform_info($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ((($2)) + 216|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $1;
   $8 = ((($7)) + 25|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = ($10|0)==(3);
   $12 = $0;
   $13 = ((($12)) + 420|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   if ($11) {
    $16 = ($15|0)>(0);
    $17 = $1;
    $18 = ((($17)) + 25|0);
    if ($16) {
     HEAP8[$18>>0] = 6;
    } else {
     HEAP8[$18>>0] = 2;
    }
    $19 = $1;
    $20 = ((($19)) + 24|0);
    HEAP8[$20>>0] = 8;
    $21 = $1;
    $22 = ((($21)) + 22|0);
    HEAP16[$22>>1] = 0;
    $23 = $0;
    $24 = ((($23)) + 408|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    if (!($26)) {
     break;
    }
    $27 = $0;
    _png_error($27,16015);
    // unreachable;
   }
   $28 = ($15|0)!=(0);
   if ($28) {
    $29 = $0;
    $30 = ((($29)) + 216|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 & 33554432;
    $33 = ($32|0)!=(0);
    if ($33) {
     $34 = $1;
     $35 = ((($34)) + 25|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = $37 | 4;
     $39 = $38&255;
     HEAP8[$35>>0] = $39;
    }
   }
   $40 = $1;
   $41 = ((($40)) + 24|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = ($43|0)<(8);
   if ($44) {
    $45 = $1;
    $46 = ((($45)) + 24|0);
    HEAP8[$46>>0] = 8;
   }
   $47 = $1;
   $48 = ((($47)) + 22|0);
   HEAP16[$48>>1] = 0;
  }
 } while(0);
 $49 = $0;
 $50 = ((($49)) + 216|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51 & 128;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $1;
  $55 = ((($54)) + 170|0);
  $56 = $0;
  $57 = ((($56)) + 444|0);
  ;HEAP16[$55>>1]=HEAP16[$57>>1]|0;HEAP16[$55+2>>1]=HEAP16[$57+2>>1]|0;HEAP16[$55+4>>1]=HEAP16[$57+4>>1]|0;HEAP16[$55+6>>1]=HEAP16[$57+6>>1]|0;HEAP16[$55+8>>1]=HEAP16[$57+8>>1]|0;
 }
 $58 = $0;
 $59 = ((($58)) + 792|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $1;
 $62 = ((($61)) + 40|0);
 HEAP32[$62>>2] = $60;
 $63 = $1;
 $64 = ((($63)) + 24|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = ($66|0)==(16);
 if ($67) {
  $68 = $0;
  $69 = ((($68)) + 216|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 & 67108864;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $1;
   $74 = ((($73)) + 24|0);
   HEAP8[$74>>0] = 8;
  }
  $75 = $0;
  $76 = ((($75)) + 216|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 & 1024;
  $79 = ($78|0)!=(0);
  if ($79) {
   $80 = $1;
   $81 = ((($80)) + 24|0);
   HEAP8[$81>>0] = 8;
  }
 }
 $82 = $0;
 $83 = ((($82)) + 216|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & 16384;
 $86 = ($85|0)!=(0);
 if ($86) {
  $87 = $1;
  $88 = ((($87)) + 25|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = $90 | 2;
  $92 = $91&255;
  $93 = $1;
  $94 = ((($93)) + 25|0);
  HEAP8[$94>>0] = $92;
 }
 $95 = $0;
 $96 = ((($95)) + 216|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = $97 & 6291456;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $1;
  $101 = ((($100)) + 25|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $103 & -3;
  $105 = $104&255;
  $106 = $1;
  $107 = ((($106)) + 25|0);
  HEAP8[$107>>0] = $105;
 }
 $108 = $0;
 $109 = ((($108)) + 216|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 64;
 $112 = ($111|0)!=(0);
 do {
  if ($112) {
   $113 = $1;
   $114 = ((($113)) + 25|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = ($116|0)==(2);
   if (!($117)) {
    $118 = $1;
    $119 = ((($118)) + 25|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = ($121|0)==(6);
    if (!($122)) {
     break;
    }
   }
   $123 = $0;
   $124 = ((($123)) + 604|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)!=(0|0);
   if ($126) {
    $127 = $1;
    $128 = ((($127)) + 24|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130|0)==(8);
    if ($131) {
     $132 = $1;
     $133 = ((($132)) + 25|0);
     HEAP8[$133>>0] = 3;
    }
   }
  }
 } while(0);
 $134 = $0;
 $135 = ((($134)) + 216|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $136 & 512;
 $138 = ($137|0)!=(0);
 if ($138) {
  $139 = $1;
  $140 = ((($139)) + 24|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = ($142|0)==(8);
  if ($143) {
   $144 = $1;
   $145 = ((($144)) + 25|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $148 = ($147|0)!=(3);
   if ($148) {
    $149 = $1;
    $150 = ((($149)) + 24|0);
    HEAP8[$150>>0] = 16;
   }
  }
 }
 $151 = $0;
 $152 = ((($151)) + 216|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153 & 4;
 $155 = ($154|0)!=(0);
 if ($155) {
  $156 = $1;
  $157 = ((($156)) + 24|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = ($159|0)<(8);
  if ($160) {
   $161 = $1;
   $162 = ((($161)) + 24|0);
   HEAP8[$162>>0] = 8;
  }
 }
 $163 = $1;
 $164 = ((($163)) + 25|0);
 $165 = HEAP8[$164>>0]|0;
 $166 = $165&255;
 $167 = ($166|0)==(3);
 $168 = $1;
 do {
  if ($167) {
   $169 = ((($168)) + 29|0);
   HEAP8[$169>>0] = 1;
  } else {
   $170 = ((($168)) + 25|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = $172 & 2;
   $174 = ($173|0)!=(0);
   $175 = $1;
   $176 = ((($175)) + 29|0);
   if ($174) {
    HEAP8[$176>>0] = 3;
    break;
   } else {
    HEAP8[$176>>0] = 1;
    break;
   }
  }
 } while(0);
 $177 = $0;
 $178 = ((($177)) + 216|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = $179 & 262144;
 $181 = ($180|0)!=(0);
 if ($181) {
  $182 = $1;
  $183 = ((($182)) + 25|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $185 & -5;
  $187 = $186&255;
  $188 = $1;
  $189 = ((($188)) + 25|0);
  HEAP8[$189>>0] = $187;
  $190 = $1;
  $191 = ((($190)) + 22|0);
  HEAP16[$191>>1] = 0;
 }
 $192 = $1;
 $193 = ((($192)) + 25|0);
 $194 = HEAP8[$193>>0]|0;
 $195 = $194&255;
 $196 = $195 & 4;
 $197 = ($196|0)!=(0);
 if ($197) {
  $198 = $1;
  $199 = ((($198)) + 29|0);
  $200 = HEAP8[$199>>0]|0;
  $201 = (($200) + 1)<<24>>24;
  HEAP8[$199>>0] = $201;
 }
 $202 = $0;
 $203 = ((($202)) + 216|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $204 & 32768;
 $206 = ($205|0)!=(0);
 do {
  if ($206) {
   $207 = $1;
   $208 = ((($207)) + 25|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209&255;
   $211 = ($210|0)==(2);
   if (!($211)) {
    $212 = $1;
    $213 = ((($212)) + 25|0);
    $214 = HEAP8[$213>>0]|0;
    $215 = $214&255;
    $216 = ($215|0)==(0);
    if (!($216)) {
     break;
    }
   }
   $217 = $1;
   $218 = ((($217)) + 29|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = (($219) + 1)<<24>>24;
   HEAP8[$218>>0] = $220;
   $221 = $0;
   $222 = ((($221)) + 216|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $223 & 16777216;
   $225 = ($224|0)!=(0);
   if ($225) {
    $226 = $1;
    $227 = ((($226)) + 25|0);
    $228 = HEAP8[$227>>0]|0;
    $229 = $228&255;
    $230 = $229 | 4;
    $231 = $230&255;
    HEAP8[$227>>0] = $231;
   }
  }
 } while(0);
 $232 = $0;
 $233 = ((($232)) + 216|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = $234 & 1048576;
 $236 = ($235|0)!=(0);
 if ($236) {
  $237 = $0;
  $238 = ((($237)) + 204|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239&255;
  $241 = ($240|0)!=(0);
  if ($241) {
   $242 = $0;
   $243 = ((($242)) + 204|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = $1;
   $246 = ((($245)) + 24|0);
   HEAP8[$246>>0] = $244;
  }
  $247 = $0;
  $248 = ((($247)) + 205|0);
  $249 = HEAP8[$248>>0]|0;
  $250 = $249&255;
  $251 = ($250|0)!=(0);
  if ($251) {
   $252 = $0;
   $253 = ((($252)) + 205|0);
   $254 = HEAP8[$253>>0]|0;
   $255 = $1;
   $256 = ((($255)) + 29|0);
   HEAP8[$256>>0] = $254;
  }
 }
 $257 = $1;
 $258 = ((($257)) + 29|0);
 $259 = HEAP8[$258>>0]|0;
 $260 = $259&255;
 $261 = $1;
 $262 = ((($261)) + 24|0);
 $263 = HEAP8[$262>>0]|0;
 $264 = $263&255;
 $265 = Math_imul($260, $264)|0;
 $266 = $265&255;
 $267 = $1;
 $268 = ((($267)) + 30|0);
 HEAP8[$268>>0] = $266;
 $269 = $1;
 $270 = ((($269)) + 30|0);
 $271 = HEAP8[$270>>0]|0;
 $272 = $271&255;
 $273 = ($272|0)>=(8);
 $274 = $1;
 $275 = HEAP32[$274>>2]|0;
 $276 = $1;
 $277 = ((($276)) + 30|0);
 $278 = HEAP8[$277>>0]|0;
 $279 = $278&255;
 if ($273) {
  $280 = $279 >>> 3;
  $281 = Math_imul($275, $280)|0;
  $287 = $281;
  $285 = $1;
  $286 = ((($285)) + 12|0);
  HEAP32[$286>>2] = $287;
  $288 = $1;
  $289 = ((($288)) + 12|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = $0;
  $292 = ((($291)) + 396|0);
  HEAP32[$292>>2] = $290;
  STACKTOP = sp;return;
 } else {
  $282 = Math_imul($275, $279)|0;
  $283 = (($282) + 7)|0;
  $284 = $283 >>> 3;
  $287 = $284;
  $285 = $1;
  $286 = ((($285)) + 12|0);
  HEAP32[$286>>2] = $287;
  $288 = $1;
  $289 = ((($288)) + 12|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = $0;
  $292 = ((($291)) + 396|0);
  HEAP32[$292>>2] = $290;
  STACKTOP = sp;return;
 }
}
function _png_do_read_transformations($png_ptr,$row_info) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $rgb_error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $row_info;
 $2 = $0;
 $3 = ((($2)) + 384|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = $0;
 if ($5) {
  _png_error($6,16048);
  // unreachable;
 }
 $7 = ((($6)) + 212|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 16384;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $0;
  $12 = ((($11)) + 212|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 64;
  $15 = ($14|0)==(0);
  if ($15) {
   $16 = $0;
   _png_error($16,16064);
   // unreachable;
  }
 }
 $17 = $0;
 $18 = ((($17)) + 216|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 4096;
 $21 = ($20|0)!=(0);
 do {
  if ($21) {
   $22 = $1;
   $23 = ((($22)) + 8|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)==(3);
   if ($26) {
    $27 = $1;
    $28 = $0;
    $29 = ((($28)) + 384|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($30)) + 1|0);
    $32 = $0;
    $33 = ((($32)) + 408|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $0;
    $36 = ((($35)) + 520|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $0;
    $39 = ((($38)) + 420|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    _png_do_expand_palette($27,$31,$34,$37,$41);
    break;
   }
   $42 = $0;
   $43 = ((($42)) + 420|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44&65535;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $0;
    $48 = ((($47)) + 216|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49 & 33554432;
    $51 = ($50|0)!=(0);
    if ($51) {
     $52 = $1;
     $53 = $0;
     $54 = ((($53)) + 384|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ((($55)) + 1|0);
     $57 = $0;
     $58 = ((($57)) + 524|0);
     _png_do_expand($52,$56,$58);
     break;
    }
   }
   $59 = $1;
   $60 = $0;
   $61 = ((($60)) + 384|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 1|0);
   _png_do_expand($59,$63,0);
  }
 } while(0);
 $64 = $0;
 $65 = ((($64)) + 216|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66 & 262144;
 $68 = ($67|0)!=(0);
 do {
  if ($68) {
   $69 = $0;
   $70 = ((($69)) + 216|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & 128;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = $1;
    $75 = ((($74)) + 8|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = ($77|0)==(6);
    if (!($78)) {
     $79 = $1;
     $80 = ((($79)) + 8|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = ($82|0)==(4);
     if (!($83)) {
      break;
     }
    }
    $84 = $1;
    $85 = $0;
    $86 = ((($85)) + 384|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 1|0);
    _png_do_strip_channel($84,$88,0);
   }
  }
 } while(0);
 $89 = $0;
 $90 = ((($89)) + 216|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 & 6291456;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $0;
  $95 = $1;
  $96 = $0;
  $97 = ((($96)) + 384|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ((($98)) + 1|0);
  $100 = (_png_do_rgb_to_gray($94,$95,$99)|0);
  $rgb_error = $100;
  $101 = $rgb_error;
  $102 = ($101|0)!=(0);
  if ($102) {
   $103 = $0;
   $104 = ((($103)) + 668|0);
   HEAP8[$104>>0] = 1;
   $105 = $0;
   $106 = ((($105)) + 216|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107 & 6291456;
   $109 = ($108|0)==(4194304);
   if ($109) {
    $110 = $0;
    _png_warning($110,16082);
   }
   $111 = $0;
   $112 = ((($111)) + 216|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 & 6291456;
   $115 = ($114|0)==(2097152);
   if ($115) {
    $116 = $0;
    _png_error($116,16082);
    // unreachable;
   }
  }
 }
 $117 = $0;
 $118 = ((($117)) + 216|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 & 16384;
 $121 = ($120|0)!=(0);
 if ($121) {
  $122 = $0;
  $123 = ((($122)) + 208|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 & 2048;
  $126 = ($125|0)==(0);
  if ($126) {
   $127 = $1;
   $128 = $0;
   $129 = ((($128)) + 384|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($130)) + 1|0);
   _png_do_gray_to_rgb($127,$131);
  }
 }
 $132 = $0;
 $133 = ((($132)) + 216|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134 & 128;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = $1;
  $138 = $0;
  $139 = ((($138)) + 384|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ((($140)) + 1|0);
  $142 = $0;
  _png_do_compose($137,$141,$142);
 }
 $143 = $0;
 $144 = ((($143)) + 216|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & 8192;
 $147 = ($146|0)!=(0);
 do {
  if ($147) {
   $148 = $0;
   $149 = ((($148)) + 216|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 & 6291456;
   $152 = ($151|0)==(0);
   if ($152) {
    $153 = $0;
    $154 = ((($153)) + 216|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 & 128;
    $157 = ($156|0)!=(0);
    if ($157) {
     $158 = $0;
     $159 = ((($158)) + 420|0);
     $160 = HEAP16[$159>>1]|0;
     $161 = $160&65535;
     $162 = ($161|0)!=(0);
     if ($162) {
      break;
     }
     $163 = $0;
     $164 = ((($163)) + 427|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $165&255;
     $167 = $166 & 4;
     $168 = ($167|0)!=(0);
     if ($168) {
      break;
     }
    }
    $169 = $0;
    $170 = ((($169)) + 427|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    $173 = ($172|0)!=(3);
    if ($173) {
     $174 = $1;
     $175 = $0;
     $176 = ((($175)) + 384|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = ((($177)) + 1|0);
     $179 = $0;
     _png_do_gamma($174,$178,$179);
    }
   }
  }
 } while(0);
 $180 = $0;
 $181 = ((($180)) + 216|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = $182 & 262144;
 $184 = ($183|0)!=(0);
 do {
  if ($184) {
   $185 = $0;
   $186 = ((($185)) + 216|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $187 & 128;
   $189 = ($188|0)!=(0);
   if ($189) {
    $190 = $1;
    $191 = ((($190)) + 8|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192&255;
    $194 = ($193|0)==(6);
    if (!($194)) {
     $195 = $1;
     $196 = ((($195)) + 8|0);
     $197 = HEAP8[$196>>0]|0;
     $198 = $197&255;
     $199 = ($198|0)==(4);
     if (!($199)) {
      break;
     }
    }
    $200 = $1;
    $201 = $0;
    $202 = ((($201)) + 384|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ((($203)) + 1|0);
    _png_do_strip_channel($200,$204,0);
   }
  }
 } while(0);
 $205 = $0;
 $206 = ((($205)) + 216|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = $207 & 8388608;
 $209 = ($208|0)!=(0);
 if ($209) {
  $210 = $1;
  $211 = ((($210)) + 8|0);
  $212 = HEAP8[$211>>0]|0;
  $213 = $212&255;
  $214 = $213 & 4;
  $215 = ($214|0)!=(0);
  if ($215) {
   $216 = $1;
   $217 = $0;
   $218 = ((($217)) + 384|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = ((($219)) + 1|0);
   $221 = $0;
   _png_do_encode_alpha($216,$220,$221);
  }
 }
 $222 = $0;
 $223 = ((($222)) + 216|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = $224 & 67108864;
 $226 = ($225|0)!=(0);
 if ($226) {
  $227 = $1;
  $228 = $0;
  $229 = ((($228)) + 384|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ((($230)) + 1|0);
  _png_do_scale_16_to_8($227,$231);
 }
 $232 = $0;
 $233 = ((($232)) + 216|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = $234 & 1024;
 $236 = ($235|0)!=(0);
 if ($236) {
  $237 = $1;
  $238 = $0;
  $239 = ((($238)) + 384|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 1|0);
  _png_do_chop($237,$241);
 }
 $242 = $0;
 $243 = ((($242)) + 216|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 64;
 $246 = ($245|0)!=(0);
 if ($246) {
  $247 = $1;
  $248 = $0;
  $249 = ((($248)) + 384|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ((($250)) + 1|0);
  $252 = $0;
  $253 = ((($252)) + 604|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $0;
  $256 = ((($255)) + 608|0);
  $257 = HEAP32[$256>>2]|0;
  _png_do_quantize($247,$251,$254,$257);
  $258 = $1;
  $259 = ((($258)) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = ($260|0)==(0);
  if ($261) {
   $262 = $0;
   _png_error($262,16158);
   // unreachable;
  }
 }
 $263 = $0;
 $264 = ((($263)) + 216|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = $265 & 512;
 $267 = ($266|0)!=(0);
 if ($267) {
  $268 = $1;
  $269 = $0;
  $270 = ((($269)) + 384|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ((($271)) + 1|0);
  _png_do_expand_16($268,$272);
 }
 $273 = $0;
 $274 = ((($273)) + 216|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = $275 & 16384;
 $277 = ($276|0)!=(0);
 if ($277) {
  $278 = $0;
  $279 = ((($278)) + 208|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $280 & 2048;
  $282 = ($281|0)!=(0);
  if ($282) {
   $283 = $1;
   $284 = $0;
   $285 = ((($284)) + 384|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = ((($286)) + 1|0);
   _png_do_gray_to_rgb($283,$287);
  }
 }
 $288 = $0;
 $289 = ((($288)) + 216|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = $290 & 32;
 $292 = ($291|0)!=(0);
 if ($292) {
  $293 = $1;
  $294 = $0;
  $295 = ((($294)) + 384|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = ((($296)) + 1|0);
  _png_do_invert($293,$297);
 }
 $298 = $0;
 $299 = ((($298)) + 216|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = $300 & 524288;
 $302 = ($301|0)!=(0);
 if ($302) {
  $303 = $1;
  $304 = $0;
  $305 = ((($304)) + 384|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = ((($306)) + 1|0);
  _png_do_read_invert_alpha($303,$307);
 }
 $308 = $0;
 $309 = ((($308)) + 216|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = $310 & 8;
 $312 = ($311|0)!=(0);
 if ($312) {
  $313 = $1;
  $314 = $0;
  $315 = ((($314)) + 384|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = ((($316)) + 1|0);
  $318 = $0;
  $319 = ((($318)) + 513|0);
  _png_do_unshift($313,$317,$319);
 }
 $320 = $0;
 $321 = ((($320)) + 216|0);
 $322 = HEAP32[$321>>2]|0;
 $323 = $322 & 4;
 $324 = ($323|0)!=(0);
 if ($324) {
  $325 = $1;
  $326 = $0;
  $327 = ((($326)) + 384|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = ((($328)) + 1|0);
  _png_do_unpack($325,$329);
 }
 $330 = $1;
 $331 = ((($330)) + 8|0);
 $332 = HEAP8[$331>>0]|0;
 $333 = $332&255;
 $334 = ($333|0)==(3);
 do {
  if ($334) {
   $335 = $0;
   $336 = ((($335)) + 416|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = ($337|0)>=(0);
   if (!($338)) {
    break;
   }
   $339 = $0;
   $340 = $1;
   _png_do_check_palette_indexes($339,$340);
  }
 } while(0);
 $341 = $0;
 $342 = ((($341)) + 216|0);
 $343 = HEAP32[$342>>2]|0;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $346 = $1;
  $347 = $0;
  $348 = ((($347)) + 384|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = ((($349)) + 1|0);
  _png_do_bgr($346,$350);
 }
 $351 = $0;
 $352 = ((($351)) + 216|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = $353 & 65536;
 $355 = ($354|0)!=(0);
 if ($355) {
  $356 = $1;
  $357 = $0;
  $358 = ((($357)) + 384|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = ((($359)) + 1|0);
  _png_do_packswap($356,$360);
 }
 $361 = $0;
 $362 = ((($361)) + 216|0);
 $363 = HEAP32[$362>>2]|0;
 $364 = $363 & 32768;
 $365 = ($364|0)!=(0);
 if ($365) {
  $366 = $1;
  $367 = $0;
  $368 = ((($367)) + 384|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = ((($369)) + 1|0);
  $371 = $0;
  $372 = ((($371)) + 436|0);
  $373 = HEAP16[$372>>1]|0;
  $374 = $373&65535;
  $375 = $0;
  $376 = ((($375)) + 212|0);
  $377 = HEAP32[$376>>2]|0;
  _png_do_read_filler($366,$370,$374,$377);
 }
 $378 = $0;
 $379 = ((($378)) + 216|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = $380 & 131072;
 $382 = ($381|0)!=(0);
 if ($382) {
  $383 = $1;
  $384 = $0;
  $385 = ((($384)) + 384|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = ((($386)) + 1|0);
  _png_do_read_swap_alpha($383,$387);
 }
 $388 = $0;
 $389 = ((($388)) + 216|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = $390 & 16;
 $392 = ($391|0)!=(0);
 if ($392) {
  $393 = $1;
  $394 = $0;
  $395 = ((($394)) + 384|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = ((($396)) + 1|0);
  _png_do_swap($393,$397);
 }
 $398 = $0;
 $399 = ((($398)) + 216|0);
 $400 = HEAP32[$399>>2]|0;
 $401 = $400 & 1048576;
 $402 = ($401|0)!=(0);
 if (!($402)) {
  STACKTOP = sp;return;
 }
 $403 = $0;
 $404 = ((($403)) + 192|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = ($405|0)!=(0|0);
 if ($406) {
  $407 = $0;
  $408 = ((($407)) + 192|0);
  $409 = HEAP32[$408>>2]|0;
  $410 = $0;
  $411 = $1;
  $412 = $0;
  $413 = ((($412)) + 384|0);
  $414 = HEAP32[$413>>2]|0;
  $415 = ((($414)) + 1|0);
  FUNCTION_TABLE_viii[$409 & 63]($410,$411,$415);
 }
 $416 = $0;
 $417 = ((($416)) + 204|0);
 $418 = HEAP8[$417>>0]|0;
 $419 = $418&255;
 $420 = ($419|0)!=(0);
 if ($420) {
  $421 = $0;
  $422 = ((($421)) + 204|0);
  $423 = HEAP8[$422>>0]|0;
  $424 = $1;
  $425 = ((($424)) + 9|0);
  HEAP8[$425>>0] = $423;
 }
 $426 = $0;
 $427 = ((($426)) + 205|0);
 $428 = HEAP8[$427>>0]|0;
 $429 = $428&255;
 $430 = ($429|0)!=(0);
 if ($430) {
  $431 = $0;
  $432 = ((($431)) + 205|0);
  $433 = HEAP8[$432>>0]|0;
  $434 = $1;
  $435 = ((($434)) + 10|0);
  HEAP8[$435>>0] = $433;
 }
 $436 = $1;
 $437 = ((($436)) + 9|0);
 $438 = HEAP8[$437>>0]|0;
 $439 = $438&255;
 $440 = $1;
 $441 = ((($440)) + 10|0);
 $442 = HEAP8[$441>>0]|0;
 $443 = $442&255;
 $444 = Math_imul($439, $443)|0;
 $445 = $444&255;
 $446 = $1;
 $447 = ((($446)) + 11|0);
 HEAP8[$447>>0] = $445;
 $448 = $1;
 $449 = ((($448)) + 11|0);
 $450 = HEAP8[$449>>0]|0;
 $451 = $450&255;
 $452 = ($451|0)>=(8);
 $453 = $1;
 $454 = HEAP32[$453>>2]|0;
 $455 = $1;
 $456 = ((($455)) + 11|0);
 $457 = HEAP8[$456>>0]|0;
 $458 = $457&255;
 if ($452) {
  $459 = $458 >>> 3;
  $460 = Math_imul($454, $459)|0;
  $466 = $460;
 } else {
  $461 = Math_imul($454, $458)|0;
  $462 = (($461) + 7)|0;
  $463 = $462 >>> 3;
  $466 = $463;
 }
 $464 = $1;
 $465 = ((($464)) + 4|0);
 HEAP32[$465>>2] = $466;
 STACKTOP = sp;return;
}
function _png_do_expand_palette($row_info,$row,$palette,$trans_alpha,$num_trans) {
 $row_info = $row_info|0;
 $row = $row|0;
 $palette = $palette|0;
 $trans_alpha = $trans_alpha|0;
 $num_trans = $num_trans|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $i = 0, $row_width = 0, $shift = 0;
 var $sp = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $palette;
 $3 = $trans_alpha;
 $4 = $num_trans;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $row_width = $6;
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)==(3);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 9|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)<(8);
 if ($16) {
  $17 = $0;
  $18 = ((($17)) + 9|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  L6: do {
   switch ($20|0) {
   case 1:  {
    $21 = $1;
    $22 = $row_width;
    $23 = (($22) - 1)|0;
    $24 = $23 >>> 3;
    $25 = (($21) + ($24)|0);
    $sp = $25;
    $26 = $1;
    $27 = $row_width;
    $28 = (($26) + ($27)|0);
    $29 = ((($28)) + -1|0);
    $dp = $29;
    $30 = $row_width;
    $31 = (($30) + 7)|0;
    $32 = $31 & 7;
    $33 = (7 - ($32))|0;
    $shift = $33;
    $i = 0;
    while(1) {
     $34 = $i;
     $35 = $row_width;
     $36 = ($34>>>0)<($35>>>0);
     if (!($36)) {
      break L6;
     }
     $37 = $sp;
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $shift;
     $41 = $39 >> $40;
     $42 = $41 & 1;
     $43 = ($42|0)!=(0);
     $44 = $dp;
     if ($43) {
      HEAP8[$44>>0] = 1;
     } else {
      HEAP8[$44>>0] = 0;
     }
     $45 = $shift;
     $46 = ($45|0)==(7);
     if ($46) {
      $shift = 0;
      $47 = $sp;
      $48 = ((($47)) + -1|0);
      $sp = $48;
     } else {
      $49 = $shift;
      $50 = (($49) + 1)|0;
      $shift = $50;
     }
     $51 = $dp;
     $52 = ((($51)) + -1|0);
     $dp = $52;
     $53 = $i;
     $54 = (($53) + 1)|0;
     $i = $54;
    }
    break;
   }
   case 2:  {
    $55 = $1;
    $56 = $row_width;
    $57 = (($56) - 1)|0;
    $58 = $57 >>> 2;
    $59 = (($55) + ($58)|0);
    $sp = $59;
    $60 = $1;
    $61 = $row_width;
    $62 = (($60) + ($61)|0);
    $63 = ((($62)) + -1|0);
    $dp = $63;
    $64 = $row_width;
    $65 = (($64) + 3)|0;
    $66 = $65 & 3;
    $67 = (3 - ($66))|0;
    $68 = $67 << 1;
    $shift = $68;
    $i = 0;
    while(1) {
     $69 = $i;
     $70 = $row_width;
     $71 = ($69>>>0)<($70>>>0);
     if (!($71)) {
      break L6;
     }
     $72 = $sp;
     $73 = HEAP8[$72>>0]|0;
     $74 = $73&255;
     $75 = $shift;
     $76 = $74 >> $75;
     $77 = $76 & 3;
     $value = $77;
     $78 = $value;
     $79 = $78&255;
     $80 = $dp;
     HEAP8[$80>>0] = $79;
     $81 = $shift;
     $82 = ($81|0)==(6);
     if ($82) {
      $shift = 0;
      $83 = $sp;
      $84 = ((($83)) + -1|0);
      $sp = $84;
     } else {
      $85 = $shift;
      $86 = (($85) + 2)|0;
      $shift = $86;
     }
     $87 = $dp;
     $88 = ((($87)) + -1|0);
     $dp = $88;
     $89 = $i;
     $90 = (($89) + 1)|0;
     $i = $90;
    }
    break;
   }
   case 4:  {
    $91 = $1;
    $92 = $row_width;
    $93 = (($92) - 1)|0;
    $94 = $93 >>> 1;
    $95 = (($91) + ($94)|0);
    $sp = $95;
    $96 = $1;
    $97 = $row_width;
    $98 = (($96) + ($97)|0);
    $99 = ((($98)) + -1|0);
    $dp = $99;
    $100 = $row_width;
    $101 = $100 & 1;
    $102 = $101 << 2;
    $shift = $102;
    $i = 0;
    while(1) {
     $103 = $i;
     $104 = $row_width;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      break L6;
     }
     $106 = $sp;
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = $shift;
     $110 = $108 >> $109;
     $111 = $110 & 15;
     $value = $111;
     $112 = $value;
     $113 = $112&255;
     $114 = $dp;
     HEAP8[$114>>0] = $113;
     $115 = $shift;
     $116 = ($115|0)==(4);
     if ($116) {
      $shift = 0;
      $117 = $sp;
      $118 = ((($117)) + -1|0);
      $sp = $118;
     } else {
      $119 = $shift;
      $120 = (($119) + 4)|0;
      $shift = $120;
     }
     $121 = $dp;
     $122 = ((($121)) + -1|0);
     $dp = $122;
     $123 = $i;
     $124 = (($123) + 1)|0;
     $i = $124;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $125 = $0;
  $126 = ((($125)) + 9|0);
  HEAP8[$126>>0] = 8;
  $127 = $0;
  $128 = ((($127)) + 11|0);
  HEAP8[$128>>0] = 8;
  $129 = $row_width;
  $130 = $0;
  $131 = ((($130)) + 4|0);
  HEAP32[$131>>2] = $129;
 }
 $132 = $0;
 $133 = ((($132)) + 9|0);
 $134 = HEAP8[$133>>0]|0;
 $135 = $134&255;
 $136 = ($135|0)==(8);
 if (!($136)) {
  STACKTOP = sp;return;
 }
 $137 = $4;
 $138 = ($137|0)>(0);
 $139 = $1;
 $140 = $row_width;
 $141 = (($139) + ($140)|0);
 $142 = ((($141)) + -1|0);
 $sp = $142;
 $143 = $1;
 $144 = $row_width;
 if (!($138)) {
  $208 = ($144*3)|0;
  $209 = (($143) + ($208)|0);
  $210 = ((($209)) + -1|0);
  $dp = $210;
  $i = 0;
  while(1) {
   $211 = $i;
   $212 = $row_width;
   $213 = ($211>>>0)<($212>>>0);
   if (!($213)) {
    break;
   }
   $214 = $sp;
   $215 = HEAP8[$214>>0]|0;
   $216 = $215&255;
   $217 = $2;
   $218 = (($217) + (($216*3)|0)|0);
   $219 = ((($218)) + 2|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $dp;
   $222 = ((($221)) + -1|0);
   $dp = $222;
   HEAP8[$221>>0] = $220;
   $223 = $sp;
   $224 = HEAP8[$223>>0]|0;
   $225 = $224&255;
   $226 = $2;
   $227 = (($226) + (($225*3)|0)|0);
   $228 = ((($227)) + 1|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = $dp;
   $231 = ((($230)) + -1|0);
   $dp = $231;
   HEAP8[$230>>0] = $229;
   $232 = $sp;
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = $2;
   $236 = (($235) + (($234*3)|0)|0);
   $237 = HEAP8[$236>>0]|0;
   $238 = $dp;
   $239 = ((($238)) + -1|0);
   $dp = $239;
   HEAP8[$238>>0] = $237;
   $240 = $sp;
   $241 = ((($240)) + -1|0);
   $sp = $241;
   $242 = $i;
   $243 = (($242) + 1)|0;
   $i = $243;
  }
  $244 = $0;
  $245 = ((($244)) + 9|0);
  HEAP8[$245>>0] = 8;
  $246 = $0;
  $247 = ((($246)) + 11|0);
  HEAP8[$247>>0] = 24;
  $248 = $row_width;
  $249 = ($248*3)|0;
  $250 = $0;
  $251 = ((($250)) + 4|0);
  HEAP32[$251>>2] = $249;
  $252 = $0;
  $253 = ((($252)) + 8|0);
  HEAP8[$253>>0] = 2;
  $254 = $0;
  $255 = ((($254)) + 10|0);
  HEAP8[$255>>0] = 3;
  STACKTOP = sp;return;
 }
 $145 = $144 << 2;
 $146 = (($143) + ($145)|0);
 $147 = ((($146)) + -1|0);
 $dp = $147;
 $i = 0;
 while(1) {
  $148 = $i;
  $149 = $row_width;
  $150 = ($148>>>0)<($149>>>0);
  if (!($150)) {
   break;
  }
  $151 = $sp;
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $4;
  $155 = ($153|0)>=($154|0);
  if ($155) {
   $156 = $dp;
   $157 = ((($156)) + -1|0);
   $dp = $157;
   HEAP8[$156>>0] = -1;
  } else {
   $158 = $sp;
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = $3;
   $162 = (($161) + ($160)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $dp;
   $165 = ((($164)) + -1|0);
   $dp = $165;
   HEAP8[$164>>0] = $163;
  }
  $166 = $sp;
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $169 = $2;
  $170 = (($169) + (($168*3)|0)|0);
  $171 = ((($170)) + 2|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $dp;
  $174 = ((($173)) + -1|0);
  $dp = $174;
  HEAP8[$173>>0] = $172;
  $175 = $sp;
  $176 = HEAP8[$175>>0]|0;
  $177 = $176&255;
  $178 = $2;
  $179 = (($178) + (($177*3)|0)|0);
  $180 = ((($179)) + 1|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $dp;
  $183 = ((($182)) + -1|0);
  $dp = $183;
  HEAP8[$182>>0] = $181;
  $184 = $sp;
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = $2;
  $188 = (($187) + (($186*3)|0)|0);
  $189 = HEAP8[$188>>0]|0;
  $190 = $dp;
  $191 = ((($190)) + -1|0);
  $dp = $191;
  HEAP8[$190>>0] = $189;
  $192 = $sp;
  $193 = ((($192)) + -1|0);
  $sp = $193;
  $194 = $i;
  $195 = (($194) + 1)|0;
  $i = $195;
 }
 $196 = $0;
 $197 = ((($196)) + 9|0);
 HEAP8[$197>>0] = 8;
 $198 = $0;
 $199 = ((($198)) + 11|0);
 HEAP8[$199>>0] = 32;
 $200 = $row_width;
 $201 = $200<<2;
 $202 = $0;
 $203 = ((($202)) + 4|0);
 HEAP32[$203>>2] = $201;
 $204 = $0;
 $205 = ((($204)) + 8|0);
 HEAP8[$205>>0] = 6;
 $206 = $0;
 $207 = ((($206)) + 10|0);
 HEAP8[$207>>0] = 4;
 STACKTOP = sp;return;
}
function _png_do_expand($row_info,$row,$trans_color) {
 $row_info = $row_info|0;
 $row = $row|0;
 $trans_color = $trans_color|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blue = 0, $blue_high = 0, $blue_low = 0;
 var $dp = 0, $gray = 0, $gray_high = 0, $gray_low = 0, $green = 0, $green_high = 0, $green_low = 0, $i = 0, $or$cond = 0, $red = 0, $red_high = 0, $red_low = 0, $row_width = 0, $shift = 0, $sp = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $trans_color;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $row_width = $4;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $283 = $0;
  $284 = ((($283)) + 8|0);
  $285 = HEAP8[$284>>0]|0;
  $286 = $285&255;
  $287 = ($286|0)==(2);
  $288 = $2;
  $289 = ($288|0)!=(0|0);
  $or$cond = $287 & $289;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $290 = $0;
  $291 = ((($290)) + 9|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&255;
  $294 = ($293|0)==(8);
  L6: do {
   if ($294) {
    $295 = $2;
    $296 = ((($295)) + 2|0);
    $297 = HEAP16[$296>>1]|0;
    $298 = $297&65535;
    $299 = $298 & 255;
    $300 = $299&255;
    $red = $300;
    $301 = $2;
    $302 = ((($301)) + 4|0);
    $303 = HEAP16[$302>>1]|0;
    $304 = $303&65535;
    $305 = $304 & 255;
    $306 = $305&255;
    $green = $306;
    $307 = $2;
    $308 = ((($307)) + 6|0);
    $309 = HEAP16[$308>>1]|0;
    $310 = $309&65535;
    $311 = $310 & 255;
    $312 = $311&255;
    $blue = $312;
    $313 = $1;
    $314 = $0;
    $315 = ((($314)) + 4|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (($313) + ($316)|0);
    $318 = ((($317)) + -1|0);
    $sp = $318;
    $319 = $1;
    $320 = $row_width;
    $321 = $320 << 2;
    $322 = (($319) + ($321)|0);
    $323 = ((($322)) + -1|0);
    $dp = $323;
    $i = 0;
    while(1) {
     $324 = $i;
     $325 = $row_width;
     $326 = ($324>>>0)<($325>>>0);
     if (!($326)) {
      break L6;
     }
     $327 = $sp;
     $328 = ((($327)) + -2|0);
     $329 = HEAP8[$328>>0]|0;
     $330 = $329&255;
     $331 = $red;
     $332 = $331&255;
     $333 = ($330|0)==($332|0);
     if ($333) {
      $334 = $sp;
      $335 = ((($334)) + -1|0);
      $336 = HEAP8[$335>>0]|0;
      $337 = $336&255;
      $338 = $green;
      $339 = $338&255;
      $340 = ($337|0)==($339|0);
      if ($340) {
       $341 = $sp;
       $342 = HEAP8[$341>>0]|0;
       $343 = $342&255;
       $344 = $blue;
       $345 = $344&255;
       $346 = ($343|0)==($345|0);
       if ($346) {
        $347 = $dp;
        $348 = ((($347)) + -1|0);
        $dp = $348;
        HEAP8[$347>>0] = 0;
       } else {
        label = 56;
       }
      } else {
       label = 56;
      }
     } else {
      label = 56;
     }
     if ((label|0) == 56) {
      label = 0;
      $349 = $dp;
      $350 = ((($349)) + -1|0);
      $dp = $350;
      HEAP8[$349>>0] = -1;
     }
     $351 = $sp;
     $352 = ((($351)) + -1|0);
     $sp = $352;
     $353 = HEAP8[$351>>0]|0;
     $354 = $dp;
     $355 = ((($354)) + -1|0);
     $dp = $355;
     HEAP8[$354>>0] = $353;
     $356 = $sp;
     $357 = ((($356)) + -1|0);
     $sp = $357;
     $358 = HEAP8[$356>>0]|0;
     $359 = $dp;
     $360 = ((($359)) + -1|0);
     $dp = $360;
     HEAP8[$359>>0] = $358;
     $361 = $sp;
     $362 = ((($361)) + -1|0);
     $sp = $362;
     $363 = HEAP8[$361>>0]|0;
     $364 = $dp;
     $365 = ((($364)) + -1|0);
     $dp = $365;
     HEAP8[$364>>0] = $363;
     $366 = $i;
     $367 = (($366) + 1)|0;
     $i = $367;
    }
   } else {
    $368 = $0;
    $369 = ((($368)) + 9|0);
    $370 = HEAP8[$369>>0]|0;
    $371 = $370&255;
    $372 = ($371|0)==(16);
    if ($372) {
     $373 = $2;
     $374 = ((($373)) + 2|0);
     $375 = HEAP16[$374>>1]|0;
     $376 = $375&65535;
     $377 = $376 >> 8;
     $378 = $377 & 255;
     $379 = $378&255;
     $red_high = $379;
     $380 = $2;
     $381 = ((($380)) + 4|0);
     $382 = HEAP16[$381>>1]|0;
     $383 = $382&65535;
     $384 = $383 >> 8;
     $385 = $384 & 255;
     $386 = $385&255;
     $green_high = $386;
     $387 = $2;
     $388 = ((($387)) + 6|0);
     $389 = HEAP16[$388>>1]|0;
     $390 = $389&65535;
     $391 = $390 >> 8;
     $392 = $391 & 255;
     $393 = $392&255;
     $blue_high = $393;
     $394 = $2;
     $395 = ((($394)) + 2|0);
     $396 = HEAP16[$395>>1]|0;
     $397 = $396&65535;
     $398 = $397 & 255;
     $399 = $398&255;
     $red_low = $399;
     $400 = $2;
     $401 = ((($400)) + 4|0);
     $402 = HEAP16[$401>>1]|0;
     $403 = $402&65535;
     $404 = $403 & 255;
     $405 = $404&255;
     $green_low = $405;
     $406 = $2;
     $407 = ((($406)) + 6|0);
     $408 = HEAP16[$407>>1]|0;
     $409 = $408&65535;
     $410 = $409 & 255;
     $411 = $410&255;
     $blue_low = $411;
     $412 = $1;
     $413 = $0;
     $414 = ((($413)) + 4|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = (($412) + ($415)|0);
     $417 = ((($416)) + -1|0);
     $sp = $417;
     $418 = $1;
     $419 = $row_width;
     $420 = $419 << 3;
     $421 = (($418) + ($420)|0);
     $422 = ((($421)) + -1|0);
     $dp = $422;
     $i = 0;
     while(1) {
      $423 = $i;
      $424 = $row_width;
      $425 = ($423>>>0)<($424>>>0);
      if (!($425)) {
       break L6;
      }
      $426 = $sp;
      $427 = ((($426)) + -5|0);
      $428 = HEAP8[$427>>0]|0;
      $429 = $428&255;
      $430 = $red_high;
      $431 = $430&255;
      $432 = ($429|0)==($431|0);
      if ($432) {
       $433 = $sp;
       $434 = ((($433)) + -4|0);
       $435 = HEAP8[$434>>0]|0;
       $436 = $435&255;
       $437 = $red_low;
       $438 = $437&255;
       $439 = ($436|0)==($438|0);
       if ($439) {
        $440 = $sp;
        $441 = ((($440)) + -3|0);
        $442 = HEAP8[$441>>0]|0;
        $443 = $442&255;
        $444 = $green_high;
        $445 = $444&255;
        $446 = ($443|0)==($445|0);
        if ($446) {
         $447 = $sp;
         $448 = ((($447)) + -2|0);
         $449 = HEAP8[$448>>0]|0;
         $450 = $449&255;
         $451 = $green_low;
         $452 = $451&255;
         $453 = ($450|0)==($452|0);
         if ($453) {
          $454 = $sp;
          $455 = ((($454)) + -1|0);
          $456 = HEAP8[$455>>0]|0;
          $457 = $456&255;
          $458 = $blue_high;
          $459 = $458&255;
          $460 = ($457|0)==($459|0);
          if ($460) {
           $461 = $sp;
           $462 = HEAP8[$461>>0]|0;
           $463 = $462&255;
           $464 = $blue_low;
           $465 = $464&255;
           $466 = ($463|0)==($465|0);
           if ($466) {
            $467 = $dp;
            $468 = ((($467)) + -1|0);
            $dp = $468;
            HEAP8[$467>>0] = 0;
            $469 = $dp;
            $470 = ((($469)) + -1|0);
            $dp = $470;
            HEAP8[$469>>0] = 0;
           } else {
            label = 68;
           }
          } else {
           label = 68;
          }
         } else {
          label = 68;
         }
        } else {
         label = 68;
        }
       } else {
        label = 68;
       }
      } else {
       label = 68;
      }
      if ((label|0) == 68) {
       label = 0;
       $471 = $dp;
       $472 = ((($471)) + -1|0);
       $dp = $472;
       HEAP8[$471>>0] = -1;
       $473 = $dp;
       $474 = ((($473)) + -1|0);
       $dp = $474;
       HEAP8[$473>>0] = -1;
      }
      $475 = $sp;
      $476 = ((($475)) + -1|0);
      $sp = $476;
      $477 = HEAP8[$475>>0]|0;
      $478 = $dp;
      $479 = ((($478)) + -1|0);
      $dp = $479;
      HEAP8[$478>>0] = $477;
      $480 = $sp;
      $481 = ((($480)) + -1|0);
      $sp = $481;
      $482 = HEAP8[$480>>0]|0;
      $483 = $dp;
      $484 = ((($483)) + -1|0);
      $dp = $484;
      HEAP8[$483>>0] = $482;
      $485 = $sp;
      $486 = ((($485)) + -1|0);
      $sp = $486;
      $487 = HEAP8[$485>>0]|0;
      $488 = $dp;
      $489 = ((($488)) + -1|0);
      $dp = $489;
      HEAP8[$488>>0] = $487;
      $490 = $sp;
      $491 = ((($490)) + -1|0);
      $sp = $491;
      $492 = HEAP8[$490>>0]|0;
      $493 = $dp;
      $494 = ((($493)) + -1|0);
      $dp = $494;
      HEAP8[$493>>0] = $492;
      $495 = $sp;
      $496 = ((($495)) + -1|0);
      $sp = $496;
      $497 = HEAP8[$495>>0]|0;
      $498 = $dp;
      $499 = ((($498)) + -1|0);
      $dp = $499;
      HEAP8[$498>>0] = $497;
      $500 = $sp;
      $501 = ((($500)) + -1|0);
      $sp = $501;
      $502 = HEAP8[$500>>0]|0;
      $503 = $dp;
      $504 = ((($503)) + -1|0);
      $dp = $504;
      HEAP8[$503>>0] = $502;
      $505 = $i;
      $506 = (($505) + 1)|0;
      $i = $506;
     }
    }
   }
  } while(0);
  $507 = $0;
  $508 = ((($507)) + 8|0);
  HEAP8[$508>>0] = 6;
  $509 = $0;
  $510 = ((($509)) + 10|0);
  HEAP8[$510>>0] = 4;
  $511 = $0;
  $512 = ((($511)) + 9|0);
  $513 = HEAP8[$512>>0]|0;
  $514 = $513&255;
  $515 = $514 << 2;
  $516 = $515&255;
  $517 = $0;
  $518 = ((($517)) + 11|0);
  HEAP8[$518>>0] = $516;
  $519 = $0;
  $520 = ((($519)) + 11|0);
  $521 = HEAP8[$520>>0]|0;
  $522 = $521&255;
  $523 = ($522|0)>=(8);
  $524 = $row_width;
  $525 = $0;
  $526 = ((($525)) + 11|0);
  $527 = HEAP8[$526>>0]|0;
  $528 = $527&255;
  if ($523) {
   $529 = $528 >>> 3;
   $530 = Math_imul($524, $529)|0;
   $536 = $530;
  } else {
   $531 = Math_imul($524, $528)|0;
   $532 = (($531) + 7)|0;
   $533 = $532 >>> 3;
   $536 = $533;
  }
  $534 = $0;
  $535 = ((($534)) + 4|0);
  HEAP32[$535>>2] = $536;
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 8|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = $15;
 } else {
  $16 = 0;
 }
 $gray = $16;
 $17 = $0;
 $18 = ((($17)) + 9|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)<(8);
 if ($21) {
  $22 = $0;
  $23 = ((($22)) + 9|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  L45: do {
   switch ($25|0) {
   case 1:  {
    $26 = $gray;
    $27 = $26 & 1;
    $28 = ($27*255)|0;
    $gray = $28;
    $29 = $1;
    $30 = $row_width;
    $31 = (($30) - 1)|0;
    $32 = $31 >>> 3;
    $33 = (($29) + ($32)|0);
    $sp = $33;
    $34 = $1;
    $35 = $row_width;
    $36 = (($34) + ($35)|0);
    $37 = ((($36)) + -1|0);
    $dp = $37;
    $38 = $row_width;
    $39 = (($38) + 7)|0;
    $40 = $39 & 7;
    $41 = (7 - ($40))|0;
    $shift = $41;
    $i = 0;
    while(1) {
     $42 = $i;
     $43 = $row_width;
     $44 = ($42>>>0)<($43>>>0);
     if (!($44)) {
      break L45;
     }
     $45 = $sp;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = $shift;
     $49 = $47 >> $48;
     $50 = $49 & 1;
     $51 = ($50|0)!=(0);
     $52 = $dp;
     if ($51) {
      HEAP8[$52>>0] = -1;
     } else {
      HEAP8[$52>>0] = 0;
     }
     $53 = $shift;
     $54 = ($53|0)==(7);
     if ($54) {
      $shift = 0;
      $55 = $sp;
      $56 = ((($55)) + -1|0);
      $sp = $56;
     } else {
      $57 = $shift;
      $58 = (($57) + 1)|0;
      $shift = $58;
     }
     $59 = $dp;
     $60 = ((($59)) + -1|0);
     $dp = $60;
     $61 = $i;
     $62 = (($61) + 1)|0;
     $i = $62;
    }
    break;
   }
   case 2:  {
    $63 = $gray;
    $64 = $63 & 3;
    $65 = ($64*85)|0;
    $gray = $65;
    $66 = $1;
    $67 = $row_width;
    $68 = (($67) - 1)|0;
    $69 = $68 >>> 2;
    $70 = (($66) + ($69)|0);
    $sp = $70;
    $71 = $1;
    $72 = $row_width;
    $73 = (($71) + ($72)|0);
    $74 = ((($73)) + -1|0);
    $dp = $74;
    $75 = $row_width;
    $76 = (($75) + 3)|0;
    $77 = $76 & 3;
    $78 = (3 - ($77))|0;
    $79 = $78 << 1;
    $shift = $79;
    $i = 0;
    while(1) {
     $80 = $i;
     $81 = $row_width;
     $82 = ($80>>>0)<($81>>>0);
     if (!($82)) {
      break L45;
     }
     $83 = $sp;
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = $shift;
     $87 = $85 >> $86;
     $88 = $87 & 3;
     $value = $88;
     $89 = $value;
     $90 = $value;
     $91 = $90 << 2;
     $92 = $89 | $91;
     $93 = $value;
     $94 = $93 << 4;
     $95 = $92 | $94;
     $96 = $value;
     $97 = $96 << 6;
     $98 = $95 | $97;
     $99 = $98&255;
     $100 = $dp;
     HEAP8[$100>>0] = $99;
     $101 = $shift;
     $102 = ($101|0)==(6);
     if ($102) {
      $shift = 0;
      $103 = $sp;
      $104 = ((($103)) + -1|0);
      $sp = $104;
     } else {
      $105 = $shift;
      $106 = (($105) + 2)|0;
      $shift = $106;
     }
     $107 = $dp;
     $108 = ((($107)) + -1|0);
     $dp = $108;
     $109 = $i;
     $110 = (($109) + 1)|0;
     $i = $110;
    }
    break;
   }
   case 4:  {
    $111 = $gray;
    $112 = $111 & 15;
    $113 = ($112*17)|0;
    $gray = $113;
    $114 = $1;
    $115 = $row_width;
    $116 = (($115) - 1)|0;
    $117 = $116 >>> 1;
    $118 = (($114) + ($117)|0);
    $sp = $118;
    $119 = $1;
    $120 = $row_width;
    $121 = (($119) + ($120)|0);
    $122 = ((($121)) + -1|0);
    $dp = $122;
    $123 = $row_width;
    $124 = (($123) + 1)|0;
    $125 = $124 & 1;
    $126 = (1 - ($125))|0;
    $127 = $126 << 2;
    $shift = $127;
    $i = 0;
    while(1) {
     $128 = $i;
     $129 = $row_width;
     $130 = ($128>>>0)<($129>>>0);
     if (!($130)) {
      break L45;
     }
     $131 = $sp;
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = $shift;
     $135 = $133 >> $134;
     $136 = $135 & 15;
     $value = $136;
     $137 = $value;
     $138 = $value;
     $139 = $138 << 4;
     $140 = $137 | $139;
     $141 = $140&255;
     $142 = $dp;
     HEAP8[$142>>0] = $141;
     $143 = $shift;
     $144 = ($143|0)==(4);
     if ($144) {
      $shift = 0;
      $145 = $sp;
      $146 = ((($145)) + -1|0);
      $sp = $146;
     } else {
      $shift = 4;
     }
     $147 = $dp;
     $148 = ((($147)) + -1|0);
     $dp = $148;
     $149 = $i;
     $150 = (($149) + 1)|0;
     $i = $150;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $151 = $0;
  $152 = ((($151)) + 9|0);
  HEAP8[$152>>0] = 8;
  $153 = $0;
  $154 = ((($153)) + 11|0);
  HEAP8[$154>>0] = 8;
  $155 = $row_width;
  $156 = $0;
  $157 = ((($156)) + 4|0);
  HEAP32[$157>>2] = $155;
 }
 $158 = $2;
 $159 = ($158|0)!=(0|0);
 if (!($159)) {
  STACKTOP = sp;return;
 }
 $160 = $0;
 $161 = ((($160)) + 9|0);
 $162 = HEAP8[$161>>0]|0;
 $163 = $162&255;
 $164 = ($163|0)==(8);
 L79: do {
  if ($164) {
   $165 = $gray;
   $166 = $165 & 255;
   $gray = $166;
   $167 = $1;
   $168 = $row_width;
   $169 = (($167) + ($168)|0);
   $170 = ((($169)) + -1|0);
   $sp = $170;
   $171 = $1;
   $172 = $row_width;
   $173 = $172 << 1;
   $174 = (($171) + ($173)|0);
   $175 = ((($174)) + -1|0);
   $dp = $175;
   $i = 0;
   while(1) {
    $176 = $i;
    $177 = $row_width;
    $178 = ($176>>>0)<($177>>>0);
    if (!($178)) {
     break L79;
    }
    $179 = $sp;
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    $182 = $181 & 255;
    $183 = $gray;
    $184 = ($182|0)==($183|0);
    $185 = $dp;
    $186 = ((($185)) + -1|0);
    $dp = $186;
    if ($184) {
     HEAP8[$185>>0] = 0;
    } else {
     HEAP8[$185>>0] = -1;
    }
    $187 = $sp;
    $188 = ((($187)) + -1|0);
    $sp = $188;
    $189 = HEAP8[$187>>0]|0;
    $190 = $dp;
    $191 = ((($190)) + -1|0);
    $dp = $191;
    HEAP8[$190>>0] = $189;
    $192 = $i;
    $193 = (($192) + 1)|0;
    $i = $193;
   }
  } else {
   $194 = $0;
   $195 = ((($194)) + 9|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = ($197|0)==(16);
   if ($198) {
    $199 = $gray;
    $200 = $199 >>> 8;
    $201 = $200 & 255;
    $gray_high = $201;
    $202 = $gray;
    $203 = $202 & 255;
    $gray_low = $203;
    $204 = $1;
    $205 = $0;
    $206 = ((($205)) + 4|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = (($204) + ($207)|0);
    $209 = ((($208)) + -1|0);
    $sp = $209;
    $210 = $1;
    $211 = $0;
    $212 = ((($211)) + 4|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = $213 << 1;
    $215 = (($210) + ($214)|0);
    $216 = ((($215)) + -1|0);
    $dp = $216;
    $i = 0;
    while(1) {
     $217 = $i;
     $218 = $row_width;
     $219 = ($217>>>0)<($218>>>0);
     if (!($219)) {
      break L79;
     }
     $220 = $sp;
     $221 = ((($220)) + -1|0);
     $222 = HEAP8[$221>>0]|0;
     $223 = $222&255;
     $224 = $223 & 255;
     $225 = $gray_high;
     $226 = ($224|0)==($225|0);
     if ($226) {
      $227 = $sp;
      $228 = HEAP8[$227>>0]|0;
      $229 = $228&255;
      $230 = $229 & 255;
      $231 = $gray_low;
      $232 = ($230|0)==($231|0);
      if ($232) {
       $233 = $dp;
       $234 = ((($233)) + -1|0);
       $dp = $234;
       HEAP8[$233>>0] = 0;
       $235 = $dp;
       $236 = ((($235)) + -1|0);
       $dp = $236;
       HEAP8[$235>>0] = 0;
      } else {
       label = 42;
      }
     } else {
      label = 42;
     }
     if ((label|0) == 42) {
      label = 0;
      $237 = $dp;
      $238 = ((($237)) + -1|0);
      $dp = $238;
      HEAP8[$237>>0] = -1;
      $239 = $dp;
      $240 = ((($239)) + -1|0);
      $dp = $240;
      HEAP8[$239>>0] = -1;
     }
     $241 = $sp;
     $242 = ((($241)) + -1|0);
     $sp = $242;
     $243 = HEAP8[$241>>0]|0;
     $244 = $dp;
     $245 = ((($244)) + -1|0);
     $dp = $245;
     HEAP8[$244>>0] = $243;
     $246 = $sp;
     $247 = ((($246)) + -1|0);
     $sp = $247;
     $248 = HEAP8[$246>>0]|0;
     $249 = $dp;
     $250 = ((($249)) + -1|0);
     $dp = $250;
     HEAP8[$249>>0] = $248;
     $251 = $i;
     $252 = (($251) + 1)|0;
     $i = $252;
    }
   }
  }
 } while(0);
 $253 = $0;
 $254 = ((($253)) + 8|0);
 HEAP8[$254>>0] = 4;
 $255 = $0;
 $256 = ((($255)) + 10|0);
 HEAP8[$256>>0] = 2;
 $257 = $0;
 $258 = ((($257)) + 9|0);
 $259 = HEAP8[$258>>0]|0;
 $260 = $259&255;
 $261 = $260 << 1;
 $262 = $261&255;
 $263 = $0;
 $264 = ((($263)) + 11|0);
 HEAP8[$264>>0] = $262;
 $265 = $0;
 $266 = ((($265)) + 11|0);
 $267 = HEAP8[$266>>0]|0;
 $268 = $267&255;
 $269 = ($268|0)>=(8);
 $270 = $row_width;
 $271 = $0;
 $272 = ((($271)) + 11|0);
 $273 = HEAP8[$272>>0]|0;
 $274 = $273&255;
 if ($269) {
  $275 = $274 >>> 3;
  $276 = Math_imul($270, $275)|0;
  $282 = $276;
 } else {
  $277 = Math_imul($270, $274)|0;
  $278 = (($277) + 7)|0;
  $279 = $278 >>> 3;
  $282 = $279;
 }
 $280 = $0;
 $281 = ((($280)) + 4|0);
 HEAP32[$281>>2] = $282;
 STACKTOP = sp;return;
}
function _png_do_rgb_to_gray($png_ptr,$row_info,$row) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bc = 0, $blue = 0, $blue12 = 0, $blue18 = 0, $blue6 = 0, $blue_1 = 0, $dp = 0, $dp14 = 0, $dp2 = 0, $dp8 = 0, $gc = 0, $gray16 = 0, $gray1619 = 0, $green = 0, $green11 = 0, $green17 = 0, $green5 = 0, $green_1 = 0, $have_alpha = 0;
 var $hi = 0, $hi20 = 0, $i = 0, $i15 = 0, $i3 = 0, $i9 = 0, $lo = 0, $lo21 = 0, $rc = 0, $red = 0, $red10 = 0, $red16 = 0, $red4 = 0, $red_1 = 0, $rgb_error = 0, $row_width = 0, $sp = 0, $sp1 = 0, $sp13 = 0, $sp7 = 0;
 var $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $row_info;
 $2 = $row;
 $rgb_error = 0;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $540 = $rgb_error;
  STACKTOP = sp;return ($540|0);
 }
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 2;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $540 = $rgb_error;
  STACKTOP = sp;return ($540|0);
 }
 $15 = $0;
 $16 = ((($15)) + 670|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $rc = $18;
 $19 = $0;
 $20 = ((($19)) + 672|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $gc = $22;
 $23 = $rc;
 $24 = (32768 - ($23))|0;
 $25 = $gc;
 $26 = (($24) - ($25))|0;
 $bc = $26;
 $27 = $1;
 $28 = HEAP32[$27>>2]|0;
 $row_width = $28;
 $29 = $1;
 $30 = ((($29)) + 8|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 4;
 $34 = ($33|0)!=(0);
 $35 = $34&1;
 $have_alpha = $35;
 $36 = $1;
 $37 = ((($36)) + 9|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = ($39|0)==(8);
 $41 = $0;
 L7: do {
  if ($40) {
   $42 = ((($41)) + 492|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0|0);
   if ($44) {
    $45 = $0;
    $46 = ((($45)) + 496|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     $49 = $2;
     $sp = $49;
     $50 = $2;
     $dp = $50;
     $i = 0;
     while(1) {
      $51 = $i;
      $52 = $row_width;
      $53 = ($51>>>0)<($52>>>0);
      if (!($53)) {
       break L7;
      }
      $54 = $sp;
      $55 = ((($54)) + 1|0);
      $sp = $55;
      $56 = HEAP8[$54>>0]|0;
      $red = $56;
      $57 = $sp;
      $58 = ((($57)) + 1|0);
      $sp = $58;
      $59 = HEAP8[$57>>0]|0;
      $green = $59;
      $60 = $sp;
      $61 = ((($60)) + 1|0);
      $sp = $61;
      $62 = HEAP8[$60>>0]|0;
      $blue = $62;
      $63 = $red;
      $64 = $63&255;
      $65 = $green;
      $66 = $65&255;
      $67 = ($64|0)!=($66|0);
      if ($67) {
       label = 10;
      } else {
       $68 = $red;
       $69 = $68&255;
       $70 = $blue;
       $71 = $70&255;
       $72 = ($69|0)!=($71|0);
       if ($72) {
        label = 10;
       } else {
        $119 = $0;
        $120 = ((($119)) + 484|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ($121|0)!=(0|0);
        if ($122) {
         $123 = $red;
         $124 = $123&255;
         $125 = $0;
         $126 = ((($125)) + 484|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = (($127) + ($124)|0);
         $129 = HEAP8[$128>>0]|0;
         $red = $129;
        }
        $130 = $red;
        $131 = $dp;
        $132 = ((($131)) + 1|0);
        $dp = $132;
        HEAP8[$131>>0] = $130;
       }
      }
      if ((label|0) == 10) {
       label = 0;
       $73 = $red;
       $74 = $73&255;
       $75 = $0;
       $76 = ((($75)) + 496|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (($77) + ($74)|0);
       $79 = HEAP8[$78>>0]|0;
       $red = $79;
       $80 = $green;
       $81 = $80&255;
       $82 = $0;
       $83 = ((($82)) + 496|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (($84) + ($81)|0);
       $86 = HEAP8[$85>>0]|0;
       $green = $86;
       $87 = $blue;
       $88 = $87&255;
       $89 = $0;
       $90 = ((($89)) + 496|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = (($91) + ($88)|0);
       $93 = HEAP8[$92>>0]|0;
       $blue = $93;
       $94 = $rgb_error;
       $95 = $94 | 1;
       $rgb_error = $95;
       $96 = $rc;
       $97 = $red;
       $98 = $97&255;
       $99 = Math_imul($96, $98)|0;
       $100 = $gc;
       $101 = $green;
       $102 = $101&255;
       $103 = Math_imul($100, $102)|0;
       $104 = (($99) + ($103))|0;
       $105 = $bc;
       $106 = $blue;
       $107 = $106&255;
       $108 = Math_imul($105, $107)|0;
       $109 = (($104) + ($108))|0;
       $110 = (($109) + 16384)|0;
       $111 = $110 >>> 15;
       $112 = $0;
       $113 = ((($112)) + 492|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (($114) + ($111)|0);
       $116 = HEAP8[$115>>0]|0;
       $117 = $dp;
       $118 = ((($117)) + 1|0);
       $dp = $118;
       HEAP8[$117>>0] = $116;
      }
      $133 = $have_alpha;
      $134 = ($133|0)!=(0);
      if ($134) {
       $135 = $sp;
       $136 = ((($135)) + 1|0);
       $sp = $136;
       $137 = HEAP8[$135>>0]|0;
       $138 = $dp;
       $139 = ((($138)) + 1|0);
       $dp = $139;
       HEAP8[$138>>0] = $137;
      }
      $140 = $i;
      $141 = (($140) + 1)|0;
      $i = $141;
     }
    }
   }
   $142 = $2;
   $sp1 = $142;
   $143 = $2;
   $dp2 = $143;
   $i3 = 0;
   while(1) {
    $144 = $i3;
    $145 = $row_width;
    $146 = ($144>>>0)<($145>>>0);
    if (!($146)) {
     break L7;
    }
    $147 = $sp1;
    $148 = ((($147)) + 1|0);
    $sp1 = $148;
    $149 = HEAP8[$147>>0]|0;
    $red4 = $149;
    $150 = $sp1;
    $151 = ((($150)) + 1|0);
    $sp1 = $151;
    $152 = HEAP8[$150>>0]|0;
    $green5 = $152;
    $153 = $sp1;
    $154 = ((($153)) + 1|0);
    $sp1 = $154;
    $155 = HEAP8[$153>>0]|0;
    $blue6 = $155;
    $156 = $red4;
    $157 = $156&255;
    $158 = $green5;
    $159 = $158&255;
    $160 = ($157|0)!=($159|0);
    if ($160) {
     label = 21;
    } else {
     $161 = $red4;
     $162 = $161&255;
     $163 = $blue6;
     $164 = $163&255;
     $165 = ($162|0)!=($164|0);
     if ($165) {
      label = 21;
     } else {
      $186 = $red4;
      $187 = $dp2;
      $188 = ((($187)) + 1|0);
      $dp2 = $188;
      HEAP8[$187>>0] = $186;
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $166 = $rgb_error;
     $167 = $166 | 1;
     $rgb_error = $167;
     $168 = $rc;
     $169 = $red4;
     $170 = $169&255;
     $171 = Math_imul($168, $170)|0;
     $172 = $gc;
     $173 = $green5;
     $174 = $173&255;
     $175 = Math_imul($172, $174)|0;
     $176 = (($171) + ($175))|0;
     $177 = $bc;
     $178 = $blue6;
     $179 = $178&255;
     $180 = Math_imul($177, $179)|0;
     $181 = (($176) + ($180))|0;
     $182 = $181 >>> 15;
     $183 = $182&255;
     $184 = $dp2;
     $185 = ((($184)) + 1|0);
     $dp2 = $185;
     HEAP8[$184>>0] = $183;
    }
    $189 = $have_alpha;
    $190 = ($189|0)!=(0);
    if ($190) {
     $191 = $sp1;
     $192 = ((($191)) + 1|0);
     $sp1 = $192;
     $193 = HEAP8[$191>>0]|0;
     $194 = $dp2;
     $195 = ((($194)) + 1|0);
     $dp2 = $195;
     HEAP8[$194>>0] = $193;
    }
    $196 = $i3;
    $197 = (($196) + 1)|0;
    $i3 = $197;
   }
  } else {
   $198 = ((($41)) + 504|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = ($199|0)!=(0|0);
   if ($200) {
    $201 = $0;
    $202 = ((($201)) + 500|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = ($203|0)!=(0|0);
    if ($204) {
     $205 = $2;
     $sp7 = $205;
     $206 = $2;
     $dp8 = $206;
     $i9 = 0;
     while(1) {
      $207 = $i9;
      $208 = $row_width;
      $209 = ($207>>>0)<($208>>>0);
      if (!($209)) {
       break L7;
      }
      $210 = $sp7;
      $211 = ((($210)) + 1|0);
      $sp7 = $211;
      $212 = HEAP8[$210>>0]|0;
      $hi = $212;
      $213 = $sp7;
      $214 = ((($213)) + 1|0);
      $sp7 = $214;
      $215 = HEAP8[$213>>0]|0;
      $lo = $215;
      $216 = $hi;
      $217 = $216&255;
      $218 = $217 << 8;
      $219 = $lo;
      $220 = $219&255;
      $221 = $218 | $220;
      $222 = $221&65535;
      $red10 = $222;
      $223 = $sp7;
      $224 = ((($223)) + 1|0);
      $sp7 = $224;
      $225 = HEAP8[$223>>0]|0;
      $hi = $225;
      $226 = $sp7;
      $227 = ((($226)) + 1|0);
      $sp7 = $227;
      $228 = HEAP8[$226>>0]|0;
      $lo = $228;
      $229 = $hi;
      $230 = $229&255;
      $231 = $230 << 8;
      $232 = $lo;
      $233 = $232&255;
      $234 = $231 | $233;
      $235 = $234&65535;
      $green11 = $235;
      $236 = $sp7;
      $237 = ((($236)) + 1|0);
      $sp7 = $237;
      $238 = HEAP8[$236>>0]|0;
      $hi = $238;
      $239 = $sp7;
      $240 = ((($239)) + 1|0);
      $sp7 = $240;
      $241 = HEAP8[$239>>0]|0;
      $lo = $241;
      $242 = $hi;
      $243 = $242&255;
      $244 = $243 << 8;
      $245 = $lo;
      $246 = $245&255;
      $247 = $244 | $246;
      $248 = $247&65535;
      $blue12 = $248;
      $249 = $red10;
      $250 = $249&65535;
      $251 = $green11;
      $252 = $251&65535;
      $253 = ($250|0)==($252|0);
      do {
       if ($253) {
        $254 = $red10;
        $255 = $254&65535;
        $256 = $blue12;
        $257 = $256&65535;
        $258 = ($255|0)==($257|0);
        if ($258) {
         $259 = $0;
         $260 = ((($259)) + 488|0);
         $261 = HEAP32[$260>>2]|0;
         $262 = ($261|0)!=(0|0);
         $263 = $red10;
         if ($262) {
          $264 = $263&65535;
          $265 = $264 >> 8;
          $266 = $red10;
          $267 = $266&65535;
          $268 = $267 & 255;
          $269 = $0;
          $270 = ((($269)) + 476|0);
          $271 = HEAP32[$270>>2]|0;
          $272 = $268 >> $271;
          $273 = $0;
          $274 = ((($273)) + 488|0);
          $275 = HEAP32[$274>>2]|0;
          $276 = (($275) + ($272<<2)|0);
          $277 = HEAP32[$276>>2]|0;
          $278 = (($277) + ($265<<1)|0);
          $279 = HEAP16[$278>>1]|0;
          $w = $279;
          break;
         } else {
          $w = $263;
          break;
         }
        } else {
         label = 35;
        }
       } else {
        label = 35;
       }
      } while(0);
      if ((label|0) == 35) {
       label = 0;
       $280 = $red10;
       $281 = $280&65535;
       $282 = $281 >> 8;
       $283 = $red10;
       $284 = $283&65535;
       $285 = $284 & 255;
       $286 = $0;
       $287 = ((($286)) + 476|0);
       $288 = HEAP32[$287>>2]|0;
       $289 = $285 >> $288;
       $290 = $0;
       $291 = ((($290)) + 504|0);
       $292 = HEAP32[$291>>2]|0;
       $293 = (($292) + ($289<<2)|0);
       $294 = HEAP32[$293>>2]|0;
       $295 = (($294) + ($282<<1)|0);
       $296 = HEAP16[$295>>1]|0;
       $red_1 = $296;
       $297 = $green11;
       $298 = $297&65535;
       $299 = $298 >> 8;
       $300 = $green11;
       $301 = $300&65535;
       $302 = $301 & 255;
       $303 = $0;
       $304 = ((($303)) + 476|0);
       $305 = HEAP32[$304>>2]|0;
       $306 = $302 >> $305;
       $307 = $0;
       $308 = ((($307)) + 504|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = (($309) + ($306<<2)|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = (($311) + ($299<<1)|0);
       $313 = HEAP16[$312>>1]|0;
       $green_1 = $313;
       $314 = $blue12;
       $315 = $314&65535;
       $316 = $315 >> 8;
       $317 = $blue12;
       $318 = $317&65535;
       $319 = $318 & 255;
       $320 = $0;
       $321 = ((($320)) + 476|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = $319 >> $322;
       $324 = $0;
       $325 = ((($324)) + 504|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = (($326) + ($323<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = (($328) + ($316<<1)|0);
       $330 = HEAP16[$329>>1]|0;
       $blue_1 = $330;
       $331 = $rc;
       $332 = $red_1;
       $333 = $332&65535;
       $334 = Math_imul($331, $333)|0;
       $335 = $gc;
       $336 = $green_1;
       $337 = $336&65535;
       $338 = Math_imul($335, $337)|0;
       $339 = (($334) + ($338))|0;
       $340 = $bc;
       $341 = $blue_1;
       $342 = $341&65535;
       $343 = Math_imul($340, $342)|0;
       $344 = (($339) + ($343))|0;
       $345 = (($344) + 16384)|0;
       $346 = $345 >>> 15;
       $347 = $346&65535;
       $gray16 = $347;
       $348 = $gray16;
       $349 = $348&65535;
       $350 = $349 >> 8;
       $351 = $gray16;
       $352 = $351&65535;
       $353 = $352 & 255;
       $354 = $0;
       $355 = ((($354)) + 476|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = $353 >> $356;
       $358 = $0;
       $359 = ((($358)) + 500|0);
       $360 = HEAP32[$359>>2]|0;
       $361 = (($360) + ($357<<2)|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = (($362) + ($350<<1)|0);
       $364 = HEAP16[$363>>1]|0;
       $w = $364;
       $365 = $rgb_error;
       $366 = $365 | 1;
       $rgb_error = $366;
      }
      $367 = $w;
      $368 = $367&65535;
      $369 = $368 >> 8;
      $370 = $369 & 255;
      $371 = $370&255;
      $372 = $dp8;
      $373 = ((($372)) + 1|0);
      $dp8 = $373;
      HEAP8[$372>>0] = $371;
      $374 = $w;
      $375 = $374&65535;
      $376 = $375 & 255;
      $377 = $376&255;
      $378 = $dp8;
      $379 = ((($378)) + 1|0);
      $dp8 = $379;
      HEAP8[$378>>0] = $377;
      $380 = $have_alpha;
      $381 = ($380|0)!=(0);
      if ($381) {
       $382 = $sp7;
       $383 = ((($382)) + 1|0);
       $sp7 = $383;
       $384 = HEAP8[$382>>0]|0;
       $385 = $dp8;
       $386 = ((($385)) + 1|0);
       $dp8 = $386;
       HEAP8[$385>>0] = $384;
       $387 = $sp7;
       $388 = ((($387)) + 1|0);
       $sp7 = $388;
       $389 = HEAP8[$387>>0]|0;
       $390 = $dp8;
       $391 = ((($390)) + 1|0);
       $dp8 = $391;
       HEAP8[$390>>0] = $389;
      }
      $392 = $i9;
      $393 = (($392) + 1)|0;
      $i9 = $393;
     }
    }
   }
   $394 = $2;
   $sp13 = $394;
   $395 = $2;
   $dp14 = $395;
   $i15 = 0;
   while(1) {
    $396 = $i15;
    $397 = $row_width;
    $398 = ($396>>>0)<($397>>>0);
    if (!($398)) {
     break L7;
    }
    $399 = $sp13;
    $400 = ((($399)) + 1|0);
    $sp13 = $400;
    $401 = HEAP8[$399>>0]|0;
    $hi20 = $401;
    $402 = $sp13;
    $403 = ((($402)) + 1|0);
    $sp13 = $403;
    $404 = HEAP8[$402>>0]|0;
    $lo21 = $404;
    $405 = $hi20;
    $406 = $405&255;
    $407 = $406 << 8;
    $408 = $lo21;
    $409 = $408&255;
    $410 = $407 | $409;
    $411 = $410&65535;
    $red16 = $411;
    $412 = $sp13;
    $413 = ((($412)) + 1|0);
    $sp13 = $413;
    $414 = HEAP8[$412>>0]|0;
    $hi20 = $414;
    $415 = $sp13;
    $416 = ((($415)) + 1|0);
    $sp13 = $416;
    $417 = HEAP8[$415>>0]|0;
    $lo21 = $417;
    $418 = $hi20;
    $419 = $418&255;
    $420 = $419 << 8;
    $421 = $lo21;
    $422 = $421&255;
    $423 = $420 | $422;
    $424 = $423&65535;
    $green17 = $424;
    $425 = $sp13;
    $426 = ((($425)) + 1|0);
    $sp13 = $426;
    $427 = HEAP8[$425>>0]|0;
    $hi20 = $427;
    $428 = $sp13;
    $429 = ((($428)) + 1|0);
    $sp13 = $429;
    $430 = HEAP8[$428>>0]|0;
    $lo21 = $430;
    $431 = $hi20;
    $432 = $431&255;
    $433 = $432 << 8;
    $434 = $lo21;
    $435 = $434&255;
    $436 = $433 | $435;
    $437 = $436&65535;
    $blue18 = $437;
    $438 = $red16;
    $439 = $438&65535;
    $440 = $green17;
    $441 = $440&65535;
    $442 = ($439|0)!=($441|0);
    if ($442) {
     label = 43;
    } else {
     $443 = $red16;
     $444 = $443&65535;
     $445 = $blue18;
     $446 = $445&65535;
     $447 = ($444|0)!=($446|0);
     if ($447) {
      label = 43;
     }
    }
    if ((label|0) == 43) {
     label = 0;
     $448 = $rgb_error;
     $449 = $448 | 1;
     $rgb_error = $449;
    }
    $450 = $rc;
    $451 = $red16;
    $452 = $451&65535;
    $453 = Math_imul($450, $452)|0;
    $454 = $gc;
    $455 = $green17;
    $456 = $455&65535;
    $457 = Math_imul($454, $456)|0;
    $458 = (($453) + ($457))|0;
    $459 = $bc;
    $460 = $blue18;
    $461 = $460&65535;
    $462 = Math_imul($459, $461)|0;
    $463 = (($458) + ($462))|0;
    $464 = (($463) + 16384)|0;
    $465 = $464 >>> 15;
    $466 = $465&65535;
    $gray1619 = $466;
    $467 = $gray1619;
    $468 = $467&65535;
    $469 = $468 >> 8;
    $470 = $469 & 255;
    $471 = $470&255;
    $472 = $dp14;
    $473 = ((($472)) + 1|0);
    $dp14 = $473;
    HEAP8[$472>>0] = $471;
    $474 = $gray1619;
    $475 = $474&65535;
    $476 = $475 & 255;
    $477 = $476&255;
    $478 = $dp14;
    $479 = ((($478)) + 1|0);
    $dp14 = $479;
    HEAP8[$478>>0] = $477;
    $480 = $have_alpha;
    $481 = ($480|0)!=(0);
    if ($481) {
     $482 = $sp13;
     $483 = ((($482)) + 1|0);
     $sp13 = $483;
     $484 = HEAP8[$482>>0]|0;
     $485 = $dp14;
     $486 = ((($485)) + 1|0);
     $dp14 = $486;
     HEAP8[$485>>0] = $484;
     $487 = $sp13;
     $488 = ((($487)) + 1|0);
     $sp13 = $488;
     $489 = HEAP8[$487>>0]|0;
     $490 = $dp14;
     $491 = ((($490)) + 1|0);
     $dp14 = $491;
     HEAP8[$490>>0] = $489;
    }
    $492 = $i15;
    $493 = (($492) + 1)|0;
    $i15 = $493;
   }
  }
 } while(0);
 $494 = $1;
 $495 = ((($494)) + 10|0);
 $496 = HEAP8[$495>>0]|0;
 $497 = $496&255;
 $498 = (($497) - 2)|0;
 $499 = $498&255;
 $500 = $1;
 $501 = ((($500)) + 10|0);
 HEAP8[$501>>0] = $499;
 $502 = $1;
 $503 = ((($502)) + 8|0);
 $504 = HEAP8[$503>>0]|0;
 $505 = $504&255;
 $506 = $505 & -3;
 $507 = $506&255;
 $508 = $1;
 $509 = ((($508)) + 8|0);
 HEAP8[$509>>0] = $507;
 $510 = $1;
 $511 = ((($510)) + 10|0);
 $512 = HEAP8[$511>>0]|0;
 $513 = $512&255;
 $514 = $1;
 $515 = ((($514)) + 9|0);
 $516 = HEAP8[$515>>0]|0;
 $517 = $516&255;
 $518 = Math_imul($513, $517)|0;
 $519 = $518&255;
 $520 = $1;
 $521 = ((($520)) + 11|0);
 HEAP8[$521>>0] = $519;
 $522 = $1;
 $523 = ((($522)) + 11|0);
 $524 = HEAP8[$523>>0]|0;
 $525 = $524&255;
 $526 = ($525|0)>=(8);
 $527 = $row_width;
 $528 = $1;
 $529 = ((($528)) + 11|0);
 $530 = HEAP8[$529>>0]|0;
 $531 = $530&255;
 if ($526) {
  $532 = $531 >>> 3;
  $533 = Math_imul($527, $532)|0;
  $539 = $533;
 } else {
  $534 = Math_imul($527, $531)|0;
  $535 = (($534) + 7)|0;
  $536 = $535 >>> 3;
  $539 = $536;
 }
 $537 = $1;
 $538 = ((($537)) + 4|0);
 HEAP32[$538>>2] = $539;
 $540 = $rgb_error;
 STACKTOP = sp;return ($540|0);
}
function _png_do_gray_to_rgb($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp2 = 0, $dp4 = 0, $dp6 = 0, $i = 0, $row_width = 0, $sp = 0, $sp1 = 0, $sp3 = 0, $sp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $row_width = $3;
 $4 = $0;
 $5 = ((($4)) + 9|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>=(8);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 2;
 $14 = ($13|0)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)==(0);
 $20 = $0;
 L7: do {
  if ($19) {
   $21 = ((($20)) + 9|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = ($23|0)==(8);
   $25 = $1;
   $26 = $row_width;
   if ($24) {
    $27 = (($25) + ($26)|0);
    $28 = ((($27)) + -1|0);
    $sp = $28;
    $29 = $sp;
    $30 = $row_width;
    $31 = $30<<1;
    $32 = (($29) + ($31)|0);
    $dp = $32;
    $i = 0;
    while(1) {
     $33 = $i;
     $34 = $row_width;
     $35 = ($33>>>0)<($34>>>0);
     if (!($35)) {
      break L7;
     }
     $36 = $sp;
     $37 = HEAP8[$36>>0]|0;
     $38 = $dp;
     $39 = ((($38)) + -1|0);
     $dp = $39;
     HEAP8[$38>>0] = $37;
     $40 = $sp;
     $41 = HEAP8[$40>>0]|0;
     $42 = $dp;
     $43 = ((($42)) + -1|0);
     $dp = $43;
     HEAP8[$42>>0] = $41;
     $44 = $sp;
     $45 = ((($44)) + -1|0);
     $sp = $45;
     $46 = HEAP8[$44>>0]|0;
     $47 = $dp;
     $48 = ((($47)) + -1|0);
     $dp = $48;
     HEAP8[$47>>0] = $46;
     $49 = $i;
     $50 = (($49) + 1)|0;
     $i = $50;
    }
   } else {
    $51 = $26<<1;
    $52 = (($25) + ($51)|0);
    $53 = ((($52)) + -1|0);
    $sp1 = $53;
    $54 = $sp1;
    $55 = $row_width;
    $56 = $55<<2;
    $57 = (($54) + ($56)|0);
    $dp2 = $57;
    $i = 0;
    while(1) {
     $58 = $i;
     $59 = $row_width;
     $60 = ($58>>>0)<($59>>>0);
     if (!($60)) {
      break L7;
     }
     $61 = $sp1;
     $62 = HEAP8[$61>>0]|0;
     $63 = $dp2;
     $64 = ((($63)) + -1|0);
     $dp2 = $64;
     HEAP8[$63>>0] = $62;
     $65 = $sp1;
     $66 = ((($65)) + -1|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $dp2;
     $69 = ((($68)) + -1|0);
     $dp2 = $69;
     HEAP8[$68>>0] = $67;
     $70 = $sp1;
     $71 = HEAP8[$70>>0]|0;
     $72 = $dp2;
     $73 = ((($72)) + -1|0);
     $dp2 = $73;
     HEAP8[$72>>0] = $71;
     $74 = $sp1;
     $75 = ((($74)) + -1|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $dp2;
     $78 = ((($77)) + -1|0);
     $dp2 = $78;
     HEAP8[$77>>0] = $76;
     $79 = $sp1;
     $80 = ((($79)) + -1|0);
     $sp1 = $80;
     $81 = HEAP8[$79>>0]|0;
     $82 = $dp2;
     $83 = ((($82)) + -1|0);
     $dp2 = $83;
     HEAP8[$82>>0] = $81;
     $84 = $sp1;
     $85 = ((($84)) + -1|0);
     $sp1 = $85;
     $86 = HEAP8[$84>>0]|0;
     $87 = $dp2;
     $88 = ((($87)) + -1|0);
     $dp2 = $88;
     HEAP8[$87>>0] = $86;
     $89 = $i;
     $90 = (($89) + 1)|0;
     $i = $90;
    }
   }
  } else {
   $91 = ((($20)) + 8|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = ($93|0)==(4);
   if ($94) {
    $95 = $0;
    $96 = ((($95)) + 9|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = ($98|0)==(8);
    $100 = $1;
    $101 = $row_width;
    if ($99) {
     $102 = $101<<1;
     $103 = (($100) + ($102)|0);
     $104 = ((($103)) + -1|0);
     $sp3 = $104;
     $105 = $sp3;
     $106 = $row_width;
     $107 = $106<<1;
     $108 = (($105) + ($107)|0);
     $dp4 = $108;
     $i = 0;
     while(1) {
      $109 = $i;
      $110 = $row_width;
      $111 = ($109>>>0)<($110>>>0);
      if (!($111)) {
       break L7;
      }
      $112 = $sp3;
      $113 = ((($112)) + -1|0);
      $sp3 = $113;
      $114 = HEAP8[$112>>0]|0;
      $115 = $dp4;
      $116 = ((($115)) + -1|0);
      $dp4 = $116;
      HEAP8[$115>>0] = $114;
      $117 = $sp3;
      $118 = HEAP8[$117>>0]|0;
      $119 = $dp4;
      $120 = ((($119)) + -1|0);
      $dp4 = $120;
      HEAP8[$119>>0] = $118;
      $121 = $sp3;
      $122 = HEAP8[$121>>0]|0;
      $123 = $dp4;
      $124 = ((($123)) + -1|0);
      $dp4 = $124;
      HEAP8[$123>>0] = $122;
      $125 = $sp3;
      $126 = ((($125)) + -1|0);
      $sp3 = $126;
      $127 = HEAP8[$125>>0]|0;
      $128 = $dp4;
      $129 = ((($128)) + -1|0);
      $dp4 = $129;
      HEAP8[$128>>0] = $127;
      $130 = $i;
      $131 = (($130) + 1)|0;
      $i = $131;
     }
    } else {
     $132 = $101<<2;
     $133 = (($100) + ($132)|0);
     $134 = ((($133)) + -1|0);
     $sp5 = $134;
     $135 = $sp5;
     $136 = $row_width;
     $137 = $136<<2;
     $138 = (($135) + ($137)|0);
     $dp6 = $138;
     $i = 0;
     while(1) {
      $139 = $i;
      $140 = $row_width;
      $141 = ($139>>>0)<($140>>>0);
      if (!($141)) {
       break L7;
      }
      $142 = $sp5;
      $143 = ((($142)) + -1|0);
      $sp5 = $143;
      $144 = HEAP8[$142>>0]|0;
      $145 = $dp6;
      $146 = ((($145)) + -1|0);
      $dp6 = $146;
      HEAP8[$145>>0] = $144;
      $147 = $sp5;
      $148 = ((($147)) + -1|0);
      $sp5 = $148;
      $149 = HEAP8[$147>>0]|0;
      $150 = $dp6;
      $151 = ((($150)) + -1|0);
      $dp6 = $151;
      HEAP8[$150>>0] = $149;
      $152 = $sp5;
      $153 = HEAP8[$152>>0]|0;
      $154 = $dp6;
      $155 = ((($154)) + -1|0);
      $dp6 = $155;
      HEAP8[$154>>0] = $153;
      $156 = $sp5;
      $157 = ((($156)) + -1|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $dp6;
      $160 = ((($159)) + -1|0);
      $dp6 = $160;
      HEAP8[$159>>0] = $158;
      $161 = $sp5;
      $162 = HEAP8[$161>>0]|0;
      $163 = $dp6;
      $164 = ((($163)) + -1|0);
      $dp6 = $164;
      HEAP8[$163>>0] = $162;
      $165 = $sp5;
      $166 = ((($165)) + -1|0);
      $167 = HEAP8[$166>>0]|0;
      $168 = $dp6;
      $169 = ((($168)) + -1|0);
      $dp6 = $169;
      HEAP8[$168>>0] = $167;
      $170 = $sp5;
      $171 = ((($170)) + -1|0);
      $sp5 = $171;
      $172 = HEAP8[$170>>0]|0;
      $173 = $dp6;
      $174 = ((($173)) + -1|0);
      $dp6 = $174;
      HEAP8[$173>>0] = $172;
      $175 = $sp5;
      $176 = ((($175)) + -1|0);
      $sp5 = $176;
      $177 = HEAP8[$175>>0]|0;
      $178 = $dp6;
      $179 = ((($178)) + -1|0);
      $dp6 = $179;
      HEAP8[$178>>0] = $177;
      $180 = $i;
      $181 = (($180) + 1)|0;
      $i = $181;
     }
    }
   }
  }
 } while(0);
 $182 = $0;
 $183 = ((($182)) + 10|0);
 $184 = HEAP8[$183>>0]|0;
 $185 = $184&255;
 $186 = (($185) + 2)|0;
 $187 = $186&255;
 $188 = $0;
 $189 = ((($188)) + 10|0);
 HEAP8[$189>>0] = $187;
 $190 = $0;
 $191 = ((($190)) + 8|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = $193 | 2;
 $195 = $194&255;
 HEAP8[$191>>0] = $195;
 $196 = $0;
 $197 = ((($196)) + 10|0);
 $198 = HEAP8[$197>>0]|0;
 $199 = $198&255;
 $200 = $0;
 $201 = ((($200)) + 9|0);
 $202 = HEAP8[$201>>0]|0;
 $203 = $202&255;
 $204 = Math_imul($199, $203)|0;
 $205 = $204&255;
 $206 = $0;
 $207 = ((($206)) + 11|0);
 HEAP8[$207>>0] = $205;
 $208 = $0;
 $209 = ((($208)) + 11|0);
 $210 = HEAP8[$209>>0]|0;
 $211 = $210&255;
 $212 = ($211|0)>=(8);
 $213 = $row_width;
 $214 = $0;
 $215 = ((($214)) + 11|0);
 $216 = HEAP8[$215>>0]|0;
 $217 = $216&255;
 if ($212) {
  $218 = $217 >>> 3;
  $219 = Math_imul($213, $218)|0;
  $225 = $219;
 } else {
  $220 = Math_imul($213, $217)|0;
  $221 = (($220) + 7)|0;
  $222 = $221 >>> 3;
  $225 = $222;
 }
 $223 = $0;
 $224 = ((($223)) + 4|0);
 HEAP32[$224>>2] = $225;
 STACKTOP = sp;return;
}
function _png_do_compose($row_info,$row,$png_ptr) {
 $row_info = $row_info|0;
 $row = $row|0;
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a = 0, $a16 = 0, $a18 = 0, $a24 = 0, $a28 = 0, $a34 = 0, $a38 = 0, $a45 = 0, $b = 0, $b14 = 0, $b49 = 0, $g = 0, $g10 = 0, $g13 = 0, $g20 = 0, $g25 = 0, $g48 = 0, $g6 = 0, $gamma_16 = 0, $gamma_16_from_1 = 0;
 var $gamma_16_to_1 = 0, $gamma_from_1 = 0, $gamma_shift = 0, $gamma_table = 0, $gamma_to_1 = 0, $i = 0, $optimize = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p = 0, $p5 = 0, $r = 0, $r12 = 0, $r47 = 0;
 var $row_width = 0, $shift = 0, $sp = 0, $temp = 0, $temp17 = 0, $temp23 = 0, $temp27 = 0, $temp31 = 0, $temp32 = 0, $temp33 = 0, $temp35 = 0, $temp36 = 0, $temp37 = 0, $temp42 = 0, $temp43 = 0, $temp44 = 0, $temp50 = 0, $temp51 = 0, $temp52 = 0, $tmp = 0;
 var $tmp1 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp7 = 0, $tmp8 = 0, $v = 0, $v11 = 0, $v15 = 0, $v19 = 0, $v21 = 0, $v26 = 0, $v29 = 0, $v39 = 0, $v40 = 0, $v46 = 0, $v9 = 0, $w = 0, $w22 = 0, $w30 = 0;
 var $w41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $png_ptr;
 $3 = $2;
 $4 = ((($3)) + 484|0);
 $5 = HEAP32[$4>>2]|0;
 $gamma_table = $5;
 $6 = $2;
 $7 = ((($6)) + 492|0);
 $8 = HEAP32[$7>>2]|0;
 $gamma_from_1 = $8;
 $9 = $2;
 $10 = ((($9)) + 496|0);
 $11 = HEAP32[$10>>2]|0;
 $gamma_to_1 = $11;
 $12 = $2;
 $13 = ((($12)) + 488|0);
 $14 = HEAP32[$13>>2]|0;
 $gamma_16 = $14;
 $15 = $2;
 $16 = ((($15)) + 500|0);
 $17 = HEAP32[$16>>2]|0;
 $gamma_16_from_1 = $17;
 $18 = $2;
 $19 = ((($18)) + 504|0);
 $20 = HEAP32[$19>>2]|0;
 $gamma_16_to_1 = $20;
 $21 = $2;
 $22 = ((($21)) + 476|0);
 $23 = HEAP32[$22>>2]|0;
 $gamma_shift = $23;
 $24 = $2;
 $25 = ((($24)) + 212|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 8192;
 $28 = ($27|0)!=(0);
 $29 = $28&1;
 $optimize = $29;
 $30 = $0;
 $31 = HEAP32[$30>>2]|0;
 $row_width = $31;
 $32 = $0;
 $33 = ((($32)) + 8|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 switch ($35|0) {
 case 0:  {
  $36 = $0;
  $37 = ((($36)) + 9|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  switch ($39|0) {
  case 1:  {
   $40 = $1;
   $sp = $40;
   $shift = 7;
   $i = 0;
   while(1) {
    $41 = $i;
    $42 = $row_width;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break;
    }
    $44 = $sp;
    $45 = HEAP8[$44>>0]|0;
    $46 = $45&255;
    $47 = $shift;
    $48 = $46 >> $47;
    $49 = $48 & 1;
    $50 = $49&65535;
    $51 = $50&65535;
    $52 = $2;
    $53 = ((($52)) + 524|0);
    $54 = ((($53)) + 8|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&65535;
    $57 = ($51|0)==($56|0);
    if ($57) {
     $58 = $sp;
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = $shift;
     $62 = (7 - ($61))|0;
     $63 = 32639 >> $62;
     $64 = $60 & $63;
     $tmp = $64;
     $65 = $2;
     $66 = ((($65)) + 444|0);
     $67 = ((($66)) + 8|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68&65535;
     $70 = $shift;
     $71 = $69 << $70;
     $72 = $tmp;
     $73 = $72 | $71;
     $tmp = $73;
     $74 = $tmp;
     $75 = $74 & 255;
     $76 = $75&255;
     $77 = $sp;
     HEAP8[$77>>0] = $76;
    }
    $78 = $shift;
    $79 = ($78|0)==(0);
    if ($79) {
     $shift = 7;
     $80 = $sp;
     $81 = ((($80)) + 1|0);
     $sp = $81;
    } else {
     $82 = $shift;
     $83 = (($82) + -1)|0;
     $shift = $83;
    }
    $84 = $i;
    $85 = (($84) + 1)|0;
    $i = $85;
   }
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $86 = $gamma_table;
   $87 = ($86|0)!=(0|0);
   $88 = $1;
   $sp = $88;
   $shift = 6;
   $i = 0;
   if (!($87)) {
    while(1) {
     $168 = $i;
     $169 = $row_width;
     $170 = ($168>>>0)<($169>>>0);
     if (!($170)) {
      break;
     }
     $171 = $sp;
     $172 = HEAP8[$171>>0]|0;
     $173 = $172&255;
     $174 = $shift;
     $175 = $173 >> $174;
     $176 = $175 & 3;
     $177 = $176&65535;
     $178 = $177&65535;
     $179 = $2;
     $180 = ((($179)) + 524|0);
     $181 = ((($180)) + 8|0);
     $182 = HEAP16[$181>>1]|0;
     $183 = $182&65535;
     $184 = ($178|0)==($183|0);
     if ($184) {
      $185 = $sp;
      $186 = HEAP8[$185>>0]|0;
      $187 = $186&255;
      $188 = $shift;
      $189 = (6 - ($188))|0;
      $190 = 16191 >> $189;
      $191 = $187 & $190;
      $tmp3 = $191;
      $192 = $2;
      $193 = ((($192)) + 444|0);
      $194 = ((($193)) + 8|0);
      $195 = HEAP16[$194>>1]|0;
      $196 = $195&65535;
      $197 = $shift;
      $198 = $196 << $197;
      $199 = $tmp3;
      $200 = $199 | $198;
      $tmp3 = $200;
      $201 = $tmp3;
      $202 = $201 & 255;
      $203 = $202&255;
      $204 = $sp;
      HEAP8[$204>>0] = $203;
     }
     $205 = $shift;
     $206 = ($205|0)==(0);
     if ($206) {
      $shift = 6;
      $207 = $sp;
      $208 = ((($207)) + 1|0);
      $sp = $208;
     } else {
      $209 = $shift;
      $210 = (($209) - 2)|0;
      $shift = $210;
     }
     $211 = $i;
     $212 = (($211) + 1)|0;
     $i = $212;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $89 = $i;
    $90 = $row_width;
    $91 = ($89>>>0)<($90>>>0);
    if (!($91)) {
     break;
    }
    $92 = $sp;
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $shift;
    $96 = $94 >> $95;
    $97 = $96 & 3;
    $98 = $97&65535;
    $99 = $98&65535;
    $100 = $2;
    $101 = ((($100)) + 524|0);
    $102 = ((($101)) + 8|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = $103&65535;
    $105 = ($99|0)==($104|0);
    $106 = $sp;
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = $shift;
    if ($105) {
     $110 = (6 - ($109))|0;
     $111 = 16191 >> $110;
     $112 = $108 & $111;
     $tmp1 = $112;
     $113 = $2;
     $114 = ((($113)) + 444|0);
     $115 = ((($114)) + 8|0);
     $116 = HEAP16[$115>>1]|0;
     $117 = $116&65535;
     $118 = $shift;
     $119 = $117 << $118;
     $120 = $tmp1;
     $121 = $120 | $119;
     $tmp1 = $121;
     $122 = $tmp1;
     $123 = $122 & 255;
     $124 = $123&255;
     $125 = $sp;
     HEAP8[$125>>0] = $124;
    } else {
     $126 = $108 >> $109;
     $127 = $126 & 3;
     $p = $127;
     $128 = $p;
     $129 = $p;
     $130 = $129 << 2;
     $131 = $128 | $130;
     $132 = $p;
     $133 = $132 << 4;
     $134 = $131 | $133;
     $135 = $p;
     $136 = $135 << 6;
     $137 = $134 | $136;
     $138 = $gamma_table;
     $139 = (($138) + ($137)|0);
     $140 = HEAP8[$139>>0]|0;
     $141 = $140&255;
     $142 = $141 >> 6;
     $143 = $142 & 3;
     $g = $143;
     $144 = $sp;
     $145 = HEAP8[$144>>0]|0;
     $146 = $145&255;
     $147 = $shift;
     $148 = (6 - ($147))|0;
     $149 = 16191 >> $148;
     $150 = $146 & $149;
     $tmp2 = $150;
     $151 = $g;
     $152 = $shift;
     $153 = $151 << $152;
     $154 = $tmp2;
     $155 = $154 | $153;
     $tmp2 = $155;
     $156 = $tmp2;
     $157 = $156 & 255;
     $158 = $157&255;
     $159 = $sp;
     HEAP8[$159>>0] = $158;
    }
    $160 = $shift;
    $161 = ($160|0)==(0);
    if ($161) {
     $shift = 6;
     $162 = $sp;
     $163 = ((($162)) + 1|0);
     $sp = $163;
    } else {
     $164 = $shift;
     $165 = (($164) - 2)|0;
     $shift = $165;
    }
    $166 = $i;
    $167 = (($166) + 1)|0;
    $i = $167;
   }
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $213 = $gamma_table;
   $214 = ($213|0)!=(0|0);
   $215 = $1;
   $sp = $215;
   $shift = 4;
   $i = 0;
   if (!($214)) {
    while(1) {
     $289 = $i;
     $290 = $row_width;
     $291 = ($289>>>0)<($290>>>0);
     if (!($291)) {
      break;
     }
     $292 = $sp;
     $293 = HEAP8[$292>>0]|0;
     $294 = $293&255;
     $295 = $shift;
     $296 = $294 >> $295;
     $297 = $296 & 15;
     $298 = $297&65535;
     $299 = $298&65535;
     $300 = $2;
     $301 = ((($300)) + 524|0);
     $302 = ((($301)) + 8|0);
     $303 = HEAP16[$302>>1]|0;
     $304 = $303&65535;
     $305 = ($299|0)==($304|0);
     if ($305) {
      $306 = $sp;
      $307 = HEAP8[$306>>0]|0;
      $308 = $307&255;
      $309 = $shift;
      $310 = (4 - ($309))|0;
      $311 = 3855 >> $310;
      $312 = $308 & $311;
      $tmp8 = $312;
      $313 = $2;
      $314 = ((($313)) + 444|0);
      $315 = ((($314)) + 8|0);
      $316 = HEAP16[$315>>1]|0;
      $317 = $316&65535;
      $318 = $shift;
      $319 = $317 << $318;
      $320 = $tmp8;
      $321 = $320 | $319;
      $tmp8 = $321;
      $322 = $tmp8;
      $323 = $322 & 255;
      $324 = $323&255;
      $325 = $sp;
      HEAP8[$325>>0] = $324;
     }
     $326 = $shift;
     $327 = ($326|0)==(0);
     if ($327) {
      $shift = 4;
      $328 = $sp;
      $329 = ((($328)) + 1|0);
      $sp = $329;
     } else {
      $330 = $shift;
      $331 = (($330) - 4)|0;
      $shift = $331;
     }
     $332 = $i;
     $333 = (($332) + 1)|0;
     $i = $333;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $216 = $i;
    $217 = $row_width;
    $218 = ($216>>>0)<($217>>>0);
    if (!($218)) {
     break;
    }
    $219 = $sp;
    $220 = HEAP8[$219>>0]|0;
    $221 = $220&255;
    $222 = $shift;
    $223 = $221 >> $222;
    $224 = $223 & 15;
    $225 = $224&65535;
    $226 = $225&65535;
    $227 = $2;
    $228 = ((($227)) + 524|0);
    $229 = ((($228)) + 8|0);
    $230 = HEAP16[$229>>1]|0;
    $231 = $230&65535;
    $232 = ($226|0)==($231|0);
    $233 = $sp;
    $234 = HEAP8[$233>>0]|0;
    $235 = $234&255;
    $236 = $shift;
    if ($232) {
     $237 = (4 - ($236))|0;
     $238 = 3855 >> $237;
     $239 = $235 & $238;
     $tmp4 = $239;
     $240 = $2;
     $241 = ((($240)) + 444|0);
     $242 = ((($241)) + 8|0);
     $243 = HEAP16[$242>>1]|0;
     $244 = $243&65535;
     $245 = $shift;
     $246 = $244 << $245;
     $247 = $tmp4;
     $248 = $247 | $246;
     $tmp4 = $248;
     $249 = $tmp4;
     $250 = $249 & 255;
     $251 = $250&255;
     $252 = $sp;
     HEAP8[$252>>0] = $251;
    } else {
     $253 = $235 >> $236;
     $254 = $253 & 15;
     $p5 = $254;
     $255 = $p5;
     $256 = $p5;
     $257 = $256 << 4;
     $258 = $255 | $257;
     $259 = $gamma_table;
     $260 = (($259) + ($258)|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = $262 >> 4;
     $264 = $263 & 15;
     $g6 = $264;
     $265 = $sp;
     $266 = HEAP8[$265>>0]|0;
     $267 = $266&255;
     $268 = $shift;
     $269 = (4 - ($268))|0;
     $270 = 3855 >> $269;
     $271 = $267 & $270;
     $tmp7 = $271;
     $272 = $g6;
     $273 = $shift;
     $274 = $272 << $273;
     $275 = $tmp7;
     $276 = $275 | $274;
     $tmp7 = $276;
     $277 = $tmp7;
     $278 = $277 & 255;
     $279 = $278&255;
     $280 = $sp;
     HEAP8[$280>>0] = $279;
    }
    $281 = $shift;
    $282 = ($281|0)==(0);
    if ($282) {
     $shift = 4;
     $283 = $sp;
     $284 = ((($283)) + 1|0);
     $sp = $284;
    } else {
     $285 = $shift;
     $286 = (($285) - 4)|0;
     $shift = $286;
    }
    $287 = $i;
    $288 = (($287) + 1)|0;
    $i = $288;
   }
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $334 = $gamma_table;
   $335 = ($334|0)!=(0|0);
   $336 = $1;
   $sp = $336;
   $i = 0;
   if (!($335)) {
    while(1) {
     $366 = $i;
     $367 = $row_width;
     $368 = ($366>>>0)<($367>>>0);
     if (!($368)) {
      break;
     }
     $369 = $sp;
     $370 = HEAP8[$369>>0]|0;
     $371 = $370&255;
     $372 = $2;
     $373 = ((($372)) + 524|0);
     $374 = ((($373)) + 8|0);
     $375 = HEAP16[$374>>1]|0;
     $376 = $375&65535;
     $377 = ($371|0)==($376|0);
     if ($377) {
      $378 = $2;
      $379 = ((($378)) + 444|0);
      $380 = ((($379)) + 8|0);
      $381 = HEAP16[$380>>1]|0;
      $382 = $381&255;
      $383 = $sp;
      HEAP8[$383>>0] = $382;
     }
     $384 = $i;
     $385 = (($384) + 1)|0;
     $i = $385;
     $386 = $sp;
     $387 = ((($386)) + 1|0);
     $sp = $387;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $337 = $i;
    $338 = $row_width;
    $339 = ($337>>>0)<($338>>>0);
    if (!($339)) {
     break;
    }
    $340 = $sp;
    $341 = HEAP8[$340>>0]|0;
    $342 = $341&255;
    $343 = $2;
    $344 = ((($343)) + 524|0);
    $345 = ((($344)) + 8|0);
    $346 = HEAP16[$345>>1]|0;
    $347 = $346&65535;
    $348 = ($342|0)==($347|0);
    if ($348) {
     $349 = $2;
     $350 = ((($349)) + 444|0);
     $351 = ((($350)) + 8|0);
     $352 = HEAP16[$351>>1]|0;
     $353 = $352&255;
     $354 = $sp;
     HEAP8[$354>>0] = $353;
    } else {
     $355 = $sp;
     $356 = HEAP8[$355>>0]|0;
     $357 = $356&255;
     $358 = $gamma_table;
     $359 = (($358) + ($357)|0);
     $360 = HEAP8[$359>>0]|0;
     $361 = $sp;
     HEAP8[$361>>0] = $360;
    }
    $362 = $i;
    $363 = (($362) + 1)|0;
    $i = $363;
    $364 = $sp;
    $365 = ((($364)) + 1|0);
    $sp = $365;
   }
   STACKTOP = sp;return;
   break;
  }
  case 16:  {
   $388 = $gamma_16;
   $389 = ($388|0)!=(0|0);
   $390 = $1;
   $sp = $390;
   $i = 0;
   if (!($389)) {
    while(1) {
     $460 = $i;
     $461 = $row_width;
     $462 = ($460>>>0)<($461>>>0);
     if (!($462)) {
      break;
     }
     $463 = $sp;
     $464 = HEAP8[$463>>0]|0;
     $465 = $464&255;
     $466 = $465 << 8;
     $467 = $sp;
     $468 = ((($467)) + 1|0);
     $469 = HEAP8[$468>>0]|0;
     $470 = $469&255;
     $471 = (($466) + ($470))|0;
     $472 = $471&65535;
     $v9 = $472;
     $473 = $v9;
     $474 = $473&65535;
     $475 = $2;
     $476 = ((($475)) + 524|0);
     $477 = ((($476)) + 8|0);
     $478 = HEAP16[$477>>1]|0;
     $479 = $478&65535;
     $480 = ($474|0)==($479|0);
     if ($480) {
      $481 = $2;
      $482 = ((($481)) + 444|0);
      $483 = ((($482)) + 8|0);
      $484 = HEAP16[$483>>1]|0;
      $485 = $484&65535;
      $486 = $485 >> 8;
      $487 = $486 & 255;
      $488 = $487&255;
      $489 = $sp;
      HEAP8[$489>>0] = $488;
      $490 = $2;
      $491 = ((($490)) + 444|0);
      $492 = ((($491)) + 8|0);
      $493 = HEAP16[$492>>1]|0;
      $494 = $493&65535;
      $495 = $494 & 255;
      $496 = $495&255;
      $497 = $sp;
      $498 = ((($497)) + 1|0);
      HEAP8[$498>>0] = $496;
     }
     $499 = $i;
     $500 = (($499) + 1)|0;
     $i = $500;
     $501 = $sp;
     $502 = ((($501)) + 2|0);
     $sp = $502;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $391 = $i;
    $392 = $row_width;
    $393 = ($391>>>0)<($392>>>0);
    if (!($393)) {
     break;
    }
    $394 = $sp;
    $395 = HEAP8[$394>>0]|0;
    $396 = $395&255;
    $397 = $396 << 8;
    $398 = $sp;
    $399 = ((($398)) + 1|0);
    $400 = HEAP8[$399>>0]|0;
    $401 = $400&255;
    $402 = (($397) + ($401))|0;
    $403 = $402&65535;
    $v = $403;
    $404 = $v;
    $405 = $404&65535;
    $406 = $2;
    $407 = ((($406)) + 524|0);
    $408 = ((($407)) + 8|0);
    $409 = HEAP16[$408>>1]|0;
    $410 = $409&65535;
    $411 = ($405|0)==($410|0);
    if ($411) {
     $412 = $2;
     $413 = ((($412)) + 444|0);
     $414 = ((($413)) + 8|0);
     $415 = HEAP16[$414>>1]|0;
     $416 = $415&65535;
     $417 = $416 >> 8;
     $418 = $417 & 255;
     $419 = $418&255;
     $420 = $sp;
     HEAP8[$420>>0] = $419;
     $421 = $2;
     $422 = ((($421)) + 444|0);
     $423 = ((($422)) + 8|0);
     $424 = HEAP16[$423>>1]|0;
     $425 = $424&65535;
     $426 = $425 & 255;
     $427 = $426&255;
     $428 = $sp;
     $429 = ((($428)) + 1|0);
     HEAP8[$429>>0] = $427;
    } else {
     $430 = $sp;
     $431 = HEAP8[$430>>0]|0;
     $432 = $431&255;
     $433 = $sp;
     $434 = ((($433)) + 1|0);
     $435 = HEAP8[$434>>0]|0;
     $436 = $435&255;
     $437 = $gamma_shift;
     $438 = $436 >> $437;
     $439 = $gamma_16;
     $440 = (($439) + ($438<<2)|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = (($441) + ($432<<1)|0);
     $443 = HEAP16[$442>>1]|0;
     $v = $443;
     $444 = $v;
     $445 = $444&65535;
     $446 = $445 >> 8;
     $447 = $446 & 255;
     $448 = $447&255;
     $449 = $sp;
     HEAP8[$449>>0] = $448;
     $450 = $v;
     $451 = $450&65535;
     $452 = $451 & 255;
     $453 = $452&255;
     $454 = $sp;
     $455 = ((($454)) + 1|0);
     HEAP8[$455>>0] = $453;
    }
    $456 = $i;
    $457 = (($456) + 1)|0;
    $i = $457;
    $458 = $sp;
    $459 = ((($458)) + 2|0);
    $sp = $459;
   }
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  break;
 }
 case 2:  {
  $503 = $0;
  $504 = ((($503)) + 9|0);
  $505 = HEAP8[$504>>0]|0;
  $506 = $505&255;
  $507 = ($506|0)==(8);
  if ($507) {
   $508 = $gamma_table;
   $509 = ($508|0)!=(0|0);
   $510 = $1;
   $sp = $510;
   $i = 0;
   if (!($509)) {
    while(1) {
     $592 = $i;
     $593 = $row_width;
     $594 = ($592>>>0)<($593>>>0);
     if (!($594)) {
      break;
     }
     $595 = $sp;
     $596 = HEAP8[$595>>0]|0;
     $597 = $596&255;
     $598 = $2;
     $599 = ((($598)) + 524|0);
     $600 = ((($599)) + 2|0);
     $601 = HEAP16[$600>>1]|0;
     $602 = $601&65535;
     $603 = ($597|0)==($602|0);
     if ($603) {
      $604 = $sp;
      $605 = ((($604)) + 1|0);
      $606 = HEAP8[$605>>0]|0;
      $607 = $606&255;
      $608 = $2;
      $609 = ((($608)) + 524|0);
      $610 = ((($609)) + 4|0);
      $611 = HEAP16[$610>>1]|0;
      $612 = $611&65535;
      $613 = ($607|0)==($612|0);
      if ($613) {
       $614 = $sp;
       $615 = ((($614)) + 2|0);
       $616 = HEAP8[$615>>0]|0;
       $617 = $616&255;
       $618 = $2;
       $619 = ((($618)) + 524|0);
       $620 = ((($619)) + 6|0);
       $621 = HEAP16[$620>>1]|0;
       $622 = $621&65535;
       $623 = ($617|0)==($622|0);
       if ($623) {
        $624 = $2;
        $625 = ((($624)) + 444|0);
        $626 = ((($625)) + 2|0);
        $627 = HEAP16[$626>>1]|0;
        $628 = $627&255;
        $629 = $sp;
        HEAP8[$629>>0] = $628;
        $630 = $2;
        $631 = ((($630)) + 444|0);
        $632 = ((($631)) + 4|0);
        $633 = HEAP16[$632>>1]|0;
        $634 = $633&255;
        $635 = $sp;
        $636 = ((($635)) + 1|0);
        HEAP8[$636>>0] = $634;
        $637 = $2;
        $638 = ((($637)) + 444|0);
        $639 = ((($638)) + 6|0);
        $640 = HEAP16[$639>>1]|0;
        $641 = $640&255;
        $642 = $sp;
        $643 = ((($642)) + 2|0);
        HEAP8[$643>>0] = $641;
       }
      }
     }
     $644 = $i;
     $645 = (($644) + 1)|0;
     $i = $645;
     $646 = $sp;
     $647 = ((($646)) + 3|0);
     $sp = $647;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $511 = $i;
    $512 = $row_width;
    $513 = ($511>>>0)<($512>>>0);
    if (!($513)) {
     break;
    }
    $514 = $sp;
    $515 = HEAP8[$514>>0]|0;
    $516 = $515&255;
    $517 = $2;
    $518 = ((($517)) + 524|0);
    $519 = ((($518)) + 2|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = $520&65535;
    $522 = ($516|0)==($521|0);
    if ($522) {
     $523 = $sp;
     $524 = ((($523)) + 1|0);
     $525 = HEAP8[$524>>0]|0;
     $526 = $525&255;
     $527 = $2;
     $528 = ((($527)) + 524|0);
     $529 = ((($528)) + 4|0);
     $530 = HEAP16[$529>>1]|0;
     $531 = $530&65535;
     $532 = ($526|0)==($531|0);
     if ($532) {
      $533 = $sp;
      $534 = ((($533)) + 2|0);
      $535 = HEAP8[$534>>0]|0;
      $536 = $535&255;
      $537 = $2;
      $538 = ((($537)) + 524|0);
      $539 = ((($538)) + 6|0);
      $540 = HEAP16[$539>>1]|0;
      $541 = $540&65535;
      $542 = ($536|0)==($541|0);
      if ($542) {
       $543 = $2;
       $544 = ((($543)) + 444|0);
       $545 = ((($544)) + 2|0);
       $546 = HEAP16[$545>>1]|0;
       $547 = $546&255;
       $548 = $sp;
       HEAP8[$548>>0] = $547;
       $549 = $2;
       $550 = ((($549)) + 444|0);
       $551 = ((($550)) + 4|0);
       $552 = HEAP16[$551>>1]|0;
       $553 = $552&255;
       $554 = $sp;
       $555 = ((($554)) + 1|0);
       HEAP8[$555>>0] = $553;
       $556 = $2;
       $557 = ((($556)) + 444|0);
       $558 = ((($557)) + 6|0);
       $559 = HEAP16[$558>>1]|0;
       $560 = $559&255;
       $561 = $sp;
       $562 = ((($561)) + 2|0);
       HEAP8[$562>>0] = $560;
      } else {
       label = 70;
      }
     } else {
      label = 70;
     }
    } else {
     label = 70;
    }
    if ((label|0) == 70) {
     label = 0;
     $563 = $sp;
     $564 = HEAP8[$563>>0]|0;
     $565 = $564&255;
     $566 = $gamma_table;
     $567 = (($566) + ($565)|0);
     $568 = HEAP8[$567>>0]|0;
     $569 = $sp;
     HEAP8[$569>>0] = $568;
     $570 = $sp;
     $571 = ((($570)) + 1|0);
     $572 = HEAP8[$571>>0]|0;
     $573 = $572&255;
     $574 = $gamma_table;
     $575 = (($574) + ($573)|0);
     $576 = HEAP8[$575>>0]|0;
     $577 = $sp;
     $578 = ((($577)) + 1|0);
     HEAP8[$578>>0] = $576;
     $579 = $sp;
     $580 = ((($579)) + 2|0);
     $581 = HEAP8[$580>>0]|0;
     $582 = $581&255;
     $583 = $gamma_table;
     $584 = (($583) + ($582)|0);
     $585 = HEAP8[$584>>0]|0;
     $586 = $sp;
     $587 = ((($586)) + 2|0);
     HEAP8[$587>>0] = $585;
    }
    $588 = $i;
    $589 = (($588) + 1)|0;
    $i = $589;
    $590 = $sp;
    $591 = ((($590)) + 3|0);
    $sp = $591;
   }
   STACKTOP = sp;return;
  } else {
   $648 = $gamma_16;
   $649 = ($648|0)!=(0|0);
   $650 = $1;
   $sp = $650;
   $i = 0;
   if (!($649)) {
    while(1) {
     $852 = $i;
     $853 = $row_width;
     $854 = ($852>>>0)<($853>>>0);
     if (!($854)) {
      break;
     }
     $855 = $sp;
     $856 = HEAP8[$855>>0]|0;
     $857 = $856&255;
     $858 = $857 << 8;
     $859 = $sp;
     $860 = ((($859)) + 1|0);
     $861 = HEAP8[$860>>0]|0;
     $862 = $861&255;
     $863 = (($858) + ($862))|0;
     $864 = $863&65535;
     $r12 = $864;
     $865 = $sp;
     $866 = ((($865)) + 2|0);
     $867 = HEAP8[$866>>0]|0;
     $868 = $867&255;
     $869 = $868 << 8;
     $870 = $sp;
     $871 = ((($870)) + 3|0);
     $872 = HEAP8[$871>>0]|0;
     $873 = $872&255;
     $874 = (($869) + ($873))|0;
     $875 = $874&65535;
     $g13 = $875;
     $876 = $sp;
     $877 = ((($876)) + 4|0);
     $878 = HEAP8[$877>>0]|0;
     $879 = $878&255;
     $880 = $879 << 8;
     $881 = $sp;
     $882 = ((($881)) + 5|0);
     $883 = HEAP8[$882>>0]|0;
     $884 = $883&255;
     $885 = (($880) + ($884))|0;
     $886 = $885&65535;
     $b14 = $886;
     $887 = $r12;
     $888 = $887&65535;
     $889 = $2;
     $890 = ((($889)) + 524|0);
     $891 = ((($890)) + 2|0);
     $892 = HEAP16[$891>>1]|0;
     $893 = $892&65535;
     $894 = ($888|0)==($893|0);
     if ($894) {
      $895 = $g13;
      $896 = $895&65535;
      $897 = $2;
      $898 = ((($897)) + 524|0);
      $899 = ((($898)) + 4|0);
      $900 = HEAP16[$899>>1]|0;
      $901 = $900&65535;
      $902 = ($896|0)==($901|0);
      if ($902) {
       $903 = $b14;
       $904 = $903&65535;
       $905 = $2;
       $906 = ((($905)) + 524|0);
       $907 = ((($906)) + 6|0);
       $908 = HEAP16[$907>>1]|0;
       $909 = $908&65535;
       $910 = ($904|0)==($909|0);
       if ($910) {
        $911 = $2;
        $912 = ((($911)) + 444|0);
        $913 = ((($912)) + 2|0);
        $914 = HEAP16[$913>>1]|0;
        $915 = $914&65535;
        $916 = $915 >> 8;
        $917 = $916 & 255;
        $918 = $917&255;
        $919 = $sp;
        HEAP8[$919>>0] = $918;
        $920 = $2;
        $921 = ((($920)) + 444|0);
        $922 = ((($921)) + 2|0);
        $923 = HEAP16[$922>>1]|0;
        $924 = $923&65535;
        $925 = $924 & 255;
        $926 = $925&255;
        $927 = $sp;
        $928 = ((($927)) + 1|0);
        HEAP8[$928>>0] = $926;
        $929 = $2;
        $930 = ((($929)) + 444|0);
        $931 = ((($930)) + 4|0);
        $932 = HEAP16[$931>>1]|0;
        $933 = $932&65535;
        $934 = $933 >> 8;
        $935 = $934 & 255;
        $936 = $935&255;
        $937 = $sp;
        $938 = ((($937)) + 2|0);
        HEAP8[$938>>0] = $936;
        $939 = $2;
        $940 = ((($939)) + 444|0);
        $941 = ((($940)) + 4|0);
        $942 = HEAP16[$941>>1]|0;
        $943 = $942&65535;
        $944 = $943 & 255;
        $945 = $944&255;
        $946 = $sp;
        $947 = ((($946)) + 3|0);
        HEAP8[$947>>0] = $945;
        $948 = $2;
        $949 = ((($948)) + 444|0);
        $950 = ((($949)) + 6|0);
        $951 = HEAP16[$950>>1]|0;
        $952 = $951&65535;
        $953 = $952 >> 8;
        $954 = $953 & 255;
        $955 = $954&255;
        $956 = $sp;
        $957 = ((($956)) + 4|0);
        HEAP8[$957>>0] = $955;
        $958 = $2;
        $959 = ((($958)) + 444|0);
        $960 = ((($959)) + 6|0);
        $961 = HEAP16[$960>>1]|0;
        $962 = $961&65535;
        $963 = $962 & 255;
        $964 = $963&255;
        $965 = $sp;
        $966 = ((($965)) + 5|0);
        HEAP8[$966>>0] = $964;
       }
      }
     }
     $967 = $i;
     $968 = (($967) + 1)|0;
     $i = $968;
     $969 = $sp;
     $970 = ((($969)) + 6|0);
     $sp = $970;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $651 = $i;
    $652 = $row_width;
    $653 = ($651>>>0)<($652>>>0);
    if (!($653)) {
     break;
    }
    $654 = $sp;
    $655 = HEAP8[$654>>0]|0;
    $656 = $655&255;
    $657 = $656 << 8;
    $658 = $sp;
    $659 = ((($658)) + 1|0);
    $660 = HEAP8[$659>>0]|0;
    $661 = $660&255;
    $662 = (($657) + ($661))|0;
    $663 = $662&65535;
    $r = $663;
    $664 = $sp;
    $665 = ((($664)) + 2|0);
    $666 = HEAP8[$665>>0]|0;
    $667 = $666&255;
    $668 = $667 << 8;
    $669 = $sp;
    $670 = ((($669)) + 3|0);
    $671 = HEAP8[$670>>0]|0;
    $672 = $671&255;
    $673 = (($668) + ($672))|0;
    $674 = $673&65535;
    $g10 = $674;
    $675 = $sp;
    $676 = ((($675)) + 4|0);
    $677 = HEAP8[$676>>0]|0;
    $678 = $677&255;
    $679 = $678 << 8;
    $680 = $sp;
    $681 = ((($680)) + 5|0);
    $682 = HEAP8[$681>>0]|0;
    $683 = $682&255;
    $684 = (($679) + ($683))|0;
    $685 = $684&65535;
    $b = $685;
    $686 = $r;
    $687 = $686&65535;
    $688 = $2;
    $689 = ((($688)) + 524|0);
    $690 = ((($689)) + 2|0);
    $691 = HEAP16[$690>>1]|0;
    $692 = $691&65535;
    $693 = ($687|0)==($692|0);
    if ($693) {
     $694 = $g10;
     $695 = $694&65535;
     $696 = $2;
     $697 = ((($696)) + 524|0);
     $698 = ((($697)) + 4|0);
     $699 = HEAP16[$698>>1]|0;
     $700 = $699&65535;
     $701 = ($695|0)==($700|0);
     if ($701) {
      $702 = $b;
      $703 = $702&65535;
      $704 = $2;
      $705 = ((($704)) + 524|0);
      $706 = ((($705)) + 6|0);
      $707 = HEAP16[$706>>1]|0;
      $708 = $707&65535;
      $709 = ($703|0)==($708|0);
      if ($709) {
       $710 = $2;
       $711 = ((($710)) + 444|0);
       $712 = ((($711)) + 2|0);
       $713 = HEAP16[$712>>1]|0;
       $714 = $713&65535;
       $715 = $714 >> 8;
       $716 = $715 & 255;
       $717 = $716&255;
       $718 = $sp;
       HEAP8[$718>>0] = $717;
       $719 = $2;
       $720 = ((($719)) + 444|0);
       $721 = ((($720)) + 2|0);
       $722 = HEAP16[$721>>1]|0;
       $723 = $722&65535;
       $724 = $723 & 255;
       $725 = $724&255;
       $726 = $sp;
       $727 = ((($726)) + 1|0);
       HEAP8[$727>>0] = $725;
       $728 = $2;
       $729 = ((($728)) + 444|0);
       $730 = ((($729)) + 4|0);
       $731 = HEAP16[$730>>1]|0;
       $732 = $731&65535;
       $733 = $732 >> 8;
       $734 = $733 & 255;
       $735 = $734&255;
       $736 = $sp;
       $737 = ((($736)) + 2|0);
       HEAP8[$737>>0] = $735;
       $738 = $2;
       $739 = ((($738)) + 444|0);
       $740 = ((($739)) + 4|0);
       $741 = HEAP16[$740>>1]|0;
       $742 = $741&65535;
       $743 = $742 & 255;
       $744 = $743&255;
       $745 = $sp;
       $746 = ((($745)) + 3|0);
       HEAP8[$746>>0] = $744;
       $747 = $2;
       $748 = ((($747)) + 444|0);
       $749 = ((($748)) + 6|0);
       $750 = HEAP16[$749>>1]|0;
       $751 = $750&65535;
       $752 = $751 >> 8;
       $753 = $752 & 255;
       $754 = $753&255;
       $755 = $sp;
       $756 = ((($755)) + 4|0);
       HEAP8[$756>>0] = $754;
       $757 = $2;
       $758 = ((($757)) + 444|0);
       $759 = ((($758)) + 6|0);
       $760 = HEAP16[$759>>1]|0;
       $761 = $760&65535;
       $762 = $761 & 255;
       $763 = $762&255;
       $764 = $sp;
       $765 = ((($764)) + 5|0);
       HEAP8[$765>>0] = $763;
      } else {
       label = 84;
      }
     } else {
      label = 84;
     }
    } else {
     label = 84;
    }
    if ((label|0) == 84) {
     label = 0;
     $766 = $sp;
     $767 = HEAP8[$766>>0]|0;
     $768 = $767&255;
     $769 = $sp;
     $770 = ((($769)) + 1|0);
     $771 = HEAP8[$770>>0]|0;
     $772 = $771&255;
     $773 = $gamma_shift;
     $774 = $772 >> $773;
     $775 = $gamma_16;
     $776 = (($775) + ($774<<2)|0);
     $777 = HEAP32[$776>>2]|0;
     $778 = (($777) + ($768<<1)|0);
     $779 = HEAP16[$778>>1]|0;
     $v11 = $779;
     $780 = $v11;
     $781 = $780&65535;
     $782 = $781 >> 8;
     $783 = $782 & 255;
     $784 = $783&255;
     $785 = $sp;
     HEAP8[$785>>0] = $784;
     $786 = $v11;
     $787 = $786&65535;
     $788 = $787 & 255;
     $789 = $788&255;
     $790 = $sp;
     $791 = ((($790)) + 1|0);
     HEAP8[$791>>0] = $789;
     $792 = $sp;
     $793 = ((($792)) + 2|0);
     $794 = HEAP8[$793>>0]|0;
     $795 = $794&255;
     $796 = $sp;
     $797 = ((($796)) + 3|0);
     $798 = HEAP8[$797>>0]|0;
     $799 = $798&255;
     $800 = $gamma_shift;
     $801 = $799 >> $800;
     $802 = $gamma_16;
     $803 = (($802) + ($801<<2)|0);
     $804 = HEAP32[$803>>2]|0;
     $805 = (($804) + ($795<<1)|0);
     $806 = HEAP16[$805>>1]|0;
     $v11 = $806;
     $807 = $v11;
     $808 = $807&65535;
     $809 = $808 >> 8;
     $810 = $809 & 255;
     $811 = $810&255;
     $812 = $sp;
     $813 = ((($812)) + 2|0);
     HEAP8[$813>>0] = $811;
     $814 = $v11;
     $815 = $814&65535;
     $816 = $815 & 255;
     $817 = $816&255;
     $818 = $sp;
     $819 = ((($818)) + 3|0);
     HEAP8[$819>>0] = $817;
     $820 = $sp;
     $821 = ((($820)) + 4|0);
     $822 = HEAP8[$821>>0]|0;
     $823 = $822&255;
     $824 = $sp;
     $825 = ((($824)) + 5|0);
     $826 = HEAP8[$825>>0]|0;
     $827 = $826&255;
     $828 = $gamma_shift;
     $829 = $827 >> $828;
     $830 = $gamma_16;
     $831 = (($830) + ($829<<2)|0);
     $832 = HEAP32[$831>>2]|0;
     $833 = (($832) + ($823<<1)|0);
     $834 = HEAP16[$833>>1]|0;
     $v11 = $834;
     $835 = $v11;
     $836 = $835&65535;
     $837 = $836 >> 8;
     $838 = $837 & 255;
     $839 = $838&255;
     $840 = $sp;
     $841 = ((($840)) + 4|0);
     HEAP8[$841>>0] = $839;
     $842 = $v11;
     $843 = $842&65535;
     $844 = $843 & 255;
     $845 = $844&255;
     $846 = $sp;
     $847 = ((($846)) + 5|0);
     HEAP8[$847>>0] = $845;
    }
    $848 = $i;
    $849 = (($848) + 1)|0;
    $i = $849;
    $850 = $sp;
    $851 = ((($850)) + 6|0);
    $sp = $851;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $971 = $0;
  $972 = ((($971)) + 9|0);
  $973 = HEAP8[$972>>0]|0;
  $974 = $973&255;
  $975 = ($974|0)==(8);
  if ($975) {
   $976 = $gamma_to_1;
   $977 = ($976|0)!=(0|0);
   $978 = $gamma_from_1;
   $979 = ($978|0)!=(0|0);
   $or$cond = $977 & $979;
   $980 = $gamma_table;
   $981 = ($980|0)!=(0|0);
   $or$cond3 = $or$cond & $981;
   $982 = $1;
   $sp = $982;
   $i = 0;
   if (!($or$cond3)) {
    while(1) {
     $1057 = $i;
     $1058 = $row_width;
     $1059 = ($1057>>>0)<($1058>>>0);
     if (!($1059)) {
      break;
     }
     $1060 = $sp;
     $1061 = ((($1060)) + 1|0);
     $1062 = HEAP8[$1061>>0]|0;
     $a16 = $1062;
     $1063 = $a16;
     $1064 = $1063&255;
     $1065 = ($1064|0)==(0);
     if ($1065) {
      $1066 = $2;
      $1067 = ((($1066)) + 444|0);
      $1068 = ((($1067)) + 8|0);
      $1069 = HEAP16[$1068>>1]|0;
      $1070 = $1069&255;
      $1071 = $sp;
      HEAP8[$1071>>0] = $1070;
     } else {
      $1072 = $a16;
      $1073 = $1072&255;
      $1074 = ($1073|0)<(255);
      if ($1074) {
       $1075 = $sp;
       $1076 = HEAP8[$1075>>0]|0;
       $1077 = $1076&255;
       $1078 = $1077&65535;
       $1079 = $a16;
       $1080 = $1079&255;
       $1081 = $1080&65535;
       $1082 = Math_imul($1078, $1081)|0;
       $1083 = $2;
       $1084 = ((($1083)) + 444|0);
       $1085 = ((($1084)) + 8|0);
       $1086 = HEAP16[$1085>>1]|0;
       $1087 = $1086&65535;
       $1088 = $a16;
       $1089 = $1088&255;
       $1090 = $1089&65535;
       $1091 = (255 - ($1090))|0;
       $1092 = $1091&65535;
       $1093 = $1092&65535;
       $1094 = Math_imul($1087, $1093)|0;
       $1095 = (($1082) + ($1094))|0;
       $1096 = (($1095) + 128)|0;
       $1097 = $1096&65535;
       $temp17 = $1097;
       $1098 = $temp17;
       $1099 = $1098&65535;
       $1100 = $temp17;
       $1101 = $1100&65535;
       $1102 = $1101 >> 8;
       $1103 = (($1099) + ($1102))|0;
       $1104 = $1103 >> 8;
       $1105 = $1104 & 255;
       $1106 = $1105&255;
       $1107 = $sp;
       HEAP8[$1107>>0] = $1106;
      }
     }
     $1108 = $i;
     $1109 = (($1108) + 1)|0;
     $i = $1109;
     $1110 = $sp;
     $1111 = ((($1110)) + 2|0);
     $sp = $1111;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $983 = $i;
    $984 = $row_width;
    $985 = ($983>>>0)<($984>>>0);
    if (!($985)) {
     break;
    }
    $986 = $sp;
    $987 = ((($986)) + 1|0);
    $988 = HEAP8[$987>>0]|0;
    $989 = $988&255;
    $a = $989;
    $990 = $a;
    $991 = $990&65535;
    $992 = ($991|0)==(255);
    do {
     if ($992) {
      $993 = $sp;
      $994 = HEAP8[$993>>0]|0;
      $995 = $994&255;
      $996 = $gamma_table;
      $997 = (($996) + ($995)|0);
      $998 = HEAP8[$997>>0]|0;
      $999 = $sp;
      HEAP8[$999>>0] = $998;
     } else {
      $1000 = $a;
      $1001 = $1000&65535;
      $1002 = ($1001|0)==(0);
      if ($1002) {
       $1003 = $2;
       $1004 = ((($1003)) + 444|0);
       $1005 = ((($1004)) + 8|0);
       $1006 = HEAP16[$1005>>1]|0;
       $1007 = $1006&255;
       $1008 = $sp;
       HEAP8[$1008>>0] = $1007;
       break;
      }
      $1009 = $sp;
      $1010 = HEAP8[$1009>>0]|0;
      $1011 = $1010&255;
      $1012 = $gamma_to_1;
      $1013 = (($1012) + ($1011)|0);
      $1014 = HEAP8[$1013>>0]|0;
      $v15 = $1014;
      $1015 = $v15;
      $1016 = $1015&255;
      $1017 = $1016&65535;
      $1018 = $a;
      $1019 = $1018&65535;
      $1020 = Math_imul($1017, $1019)|0;
      $1021 = $2;
      $1022 = ((($1021)) + 454|0);
      $1023 = ((($1022)) + 8|0);
      $1024 = HEAP16[$1023>>1]|0;
      $1025 = $1024&65535;
      $1026 = $a;
      $1027 = $1026&65535;
      $1028 = (255 - ($1027))|0;
      $1029 = $1028&65535;
      $1030 = $1029&65535;
      $1031 = Math_imul($1025, $1030)|0;
      $1032 = (($1020) + ($1031))|0;
      $1033 = (($1032) + 128)|0;
      $1034 = $1033&65535;
      $temp = $1034;
      $1035 = $temp;
      $1036 = $1035&65535;
      $1037 = $temp;
      $1038 = $1037&65535;
      $1039 = $1038 >> 8;
      $1040 = (($1036) + ($1039))|0;
      $1041 = $1040 >> 8;
      $1042 = $1041 & 255;
      $1043 = $1042&255;
      $w = $1043;
      $1044 = $optimize;
      $1045 = ($1044|0)==(0);
      if ($1045) {
       $1046 = $w;
       $1047 = $1046&255;
       $1048 = $gamma_from_1;
       $1049 = (($1048) + ($1047)|0);
       $1050 = HEAP8[$1049>>0]|0;
       $w = $1050;
      }
      $1051 = $w;
      $1052 = $sp;
      HEAP8[$1052>>0] = $1051;
     }
    } while(0);
    $1053 = $i;
    $1054 = (($1053) + 1)|0;
    $i = $1054;
    $1055 = $sp;
    $1056 = ((($1055)) + 2|0);
    $sp = $1056;
   }
   STACKTOP = sp;return;
  }
  $1112 = $gamma_16;
  $1113 = ($1112|0)!=(0|0);
  $1114 = $gamma_16_from_1;
  $1115 = ($1114|0)!=(0|0);
  $or$cond5 = $1113 & $1115;
  $1116 = $gamma_16_to_1;
  $1117 = ($1116|0)!=(0|0);
  $or$cond7 = $or$cond5 & $1117;
  $1118 = $1;
  $sp = $1118;
  $i = 0;
  if (!($or$cond7)) {
   while(1) {
    $1251 = $i;
    $1252 = $row_width;
    $1253 = ($1251>>>0)<($1252>>>0);
    if (!($1253)) {
     break;
    }
    $1254 = $sp;
    $1255 = ((($1254)) + 2|0);
    $1256 = HEAP8[$1255>>0]|0;
    $1257 = $1256&255;
    $1258 = $1257 << 8;
    $1259 = $sp;
    $1260 = ((($1259)) + 3|0);
    $1261 = HEAP8[$1260>>0]|0;
    $1262 = $1261&255;
    $1263 = (($1258) + ($1262))|0;
    $1264 = $1263&65535;
    $a24 = $1264;
    $1265 = $a24;
    $1266 = $1265&65535;
    $1267 = ($1266|0)==(0);
    if ($1267) {
     $1268 = $2;
     $1269 = ((($1268)) + 444|0);
     $1270 = ((($1269)) + 8|0);
     $1271 = HEAP16[$1270>>1]|0;
     $1272 = $1271&65535;
     $1273 = $1272 >> 8;
     $1274 = $1273 & 255;
     $1275 = $1274&255;
     $1276 = $sp;
     HEAP8[$1276>>0] = $1275;
     $1277 = $2;
     $1278 = ((($1277)) + 444|0);
     $1279 = ((($1278)) + 8|0);
     $1280 = HEAP16[$1279>>1]|0;
     $1281 = $1280&65535;
     $1282 = $1281 & 255;
     $1283 = $1282&255;
     $1284 = $sp;
     $1285 = ((($1284)) + 1|0);
     HEAP8[$1285>>0] = $1283;
    } else {
     $1286 = $a24;
     $1287 = $1286&65535;
     $1288 = ($1287|0)<(65535);
     if ($1288) {
      $1289 = $sp;
      $1290 = HEAP8[$1289>>0]|0;
      $1291 = $1290&255;
      $1292 = $1291 << 8;
      $1293 = $sp;
      $1294 = ((($1293)) + 1|0);
      $1295 = HEAP8[$1294>>0]|0;
      $1296 = $1295&255;
      $1297 = (($1292) + ($1296))|0;
      $1298 = $1297&65535;
      $g25 = $1298;
      $1299 = $g25;
      $1300 = $1299&65535;
      $1301 = $a24;
      $1302 = $1301&65535;
      $1303 = Math_imul($1300, $1302)|0;
      $1304 = $2;
      $1305 = ((($1304)) + 444|0);
      $1306 = ((($1305)) + 8|0);
      $1307 = HEAP16[$1306>>1]|0;
      $1308 = $1307&65535;
      $1309 = $a24;
      $1310 = $1309&65535;
      $1311 = (65535 - ($1310))|0;
      $1312 = Math_imul($1308, $1311)|0;
      $1313 = (($1303) + ($1312))|0;
      $1314 = (($1313) + 32768)|0;
      $temp27 = $1314;
      $1315 = $temp27;
      $1316 = $temp27;
      $1317 = $1316 >>> 16;
      $1318 = (($1315) + ($1317))|0;
      $1319 = $1318 >>> 16;
      $1320 = 65535 & $1319;
      $1321 = $1320&65535;
      $v26 = $1321;
      $1322 = $v26;
      $1323 = $1322&65535;
      $1324 = $1323 >> 8;
      $1325 = $1324 & 255;
      $1326 = $1325&255;
      $1327 = $sp;
      HEAP8[$1327>>0] = $1326;
      $1328 = $v26;
      $1329 = $1328&65535;
      $1330 = $1329 & 255;
      $1331 = $1330&255;
      $1332 = $sp;
      $1333 = ((($1332)) + 1|0);
      HEAP8[$1333>>0] = $1331;
     }
    }
    $1334 = $i;
    $1335 = (($1334) + 1)|0;
    $i = $1335;
    $1336 = $sp;
    $1337 = ((($1336)) + 4|0);
    $sp = $1337;
   }
   STACKTOP = sp;return;
  }
  while(1) {
   $1119 = $i;
   $1120 = $row_width;
   $1121 = ($1119>>>0)<($1120>>>0);
   if (!($1121)) {
    break;
   }
   $1122 = $sp;
   $1123 = ((($1122)) + 2|0);
   $1124 = HEAP8[$1123>>0]|0;
   $1125 = $1124&255;
   $1126 = $1125 << 8;
   $1127 = $sp;
   $1128 = ((($1127)) + 3|0);
   $1129 = HEAP8[$1128>>0]|0;
   $1130 = $1129&255;
   $1131 = (($1126) + ($1130))|0;
   $1132 = $1131&65535;
   $a18 = $1132;
   $1133 = $a18;
   $1134 = $1133&65535;
   $1135 = ($1134|0)==(65535);
   do {
    if ($1135) {
     $1136 = $sp;
     $1137 = HEAP8[$1136>>0]|0;
     $1138 = $1137&255;
     $1139 = $sp;
     $1140 = ((($1139)) + 1|0);
     $1141 = HEAP8[$1140>>0]|0;
     $1142 = $1141&255;
     $1143 = $gamma_shift;
     $1144 = $1142 >> $1143;
     $1145 = $gamma_16;
     $1146 = (($1145) + ($1144<<2)|0);
     $1147 = HEAP32[$1146>>2]|0;
     $1148 = (($1147) + ($1138<<1)|0);
     $1149 = HEAP16[$1148>>1]|0;
     $v19 = $1149;
     $1150 = $v19;
     $1151 = $1150&65535;
     $1152 = $1151 >> 8;
     $1153 = $1152 & 255;
     $1154 = $1153&255;
     $1155 = $sp;
     HEAP8[$1155>>0] = $1154;
     $1156 = $v19;
     $1157 = $1156&65535;
     $1158 = $1157 & 255;
     $1159 = $1158&255;
     $1160 = $sp;
     $1161 = ((($1160)) + 1|0);
     HEAP8[$1161>>0] = $1159;
    } else {
     $1162 = $a18;
     $1163 = $1162&65535;
     $1164 = ($1163|0)==(0);
     if ($1164) {
      $1165 = $2;
      $1166 = ((($1165)) + 444|0);
      $1167 = ((($1166)) + 8|0);
      $1168 = HEAP16[$1167>>1]|0;
      $1169 = $1168&65535;
      $1170 = $1169 >> 8;
      $1171 = $1170 & 255;
      $1172 = $1171&255;
      $1173 = $sp;
      HEAP8[$1173>>0] = $1172;
      $1174 = $2;
      $1175 = ((($1174)) + 444|0);
      $1176 = ((($1175)) + 8|0);
      $1177 = HEAP16[$1176>>1]|0;
      $1178 = $1177&65535;
      $1179 = $1178 & 255;
      $1180 = $1179&255;
      $1181 = $sp;
      $1182 = ((($1181)) + 1|0);
      HEAP8[$1182>>0] = $1180;
      break;
     }
     $1183 = $sp;
     $1184 = HEAP8[$1183>>0]|0;
     $1185 = $1184&255;
     $1186 = $sp;
     $1187 = ((($1186)) + 1|0);
     $1188 = HEAP8[$1187>>0]|0;
     $1189 = $1188&255;
     $1190 = $gamma_shift;
     $1191 = $1189 >> $1190;
     $1192 = $gamma_16_to_1;
     $1193 = (($1192) + ($1191<<2)|0);
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = (($1194) + ($1185<<1)|0);
     $1196 = HEAP16[$1195>>1]|0;
     $g20 = $1196;
     $1197 = $g20;
     $1198 = $1197&65535;
     $1199 = $a18;
     $1200 = $1199&65535;
     $1201 = Math_imul($1198, $1200)|0;
     $1202 = $2;
     $1203 = ((($1202)) + 454|0);
     $1204 = ((($1203)) + 8|0);
     $1205 = HEAP16[$1204>>1]|0;
     $1206 = $1205&65535;
     $1207 = $a18;
     $1208 = $1207&65535;
     $1209 = (65535 - ($1208))|0;
     $1210 = Math_imul($1206, $1209)|0;
     $1211 = (($1201) + ($1210))|0;
     $1212 = (($1211) + 32768)|0;
     $temp23 = $1212;
     $1213 = $temp23;
     $1214 = $temp23;
     $1215 = $1214 >>> 16;
     $1216 = (($1213) + ($1215))|0;
     $1217 = $1216 >>> 16;
     $1218 = 65535 & $1217;
     $1219 = $1218&65535;
     $v21 = $1219;
     $1220 = $optimize;
     $1221 = ($1220|0)!=(0);
     $1222 = $v21;
     if ($1221) {
      $w22 = $1222;
     } else {
      $1223 = $1222&65535;
      $1224 = $1223 >> 8;
      $1225 = $v21;
      $1226 = $1225&65535;
      $1227 = $1226 & 255;
      $1228 = $gamma_shift;
      $1229 = $1227 >> $1228;
      $1230 = $gamma_16_from_1;
      $1231 = (($1230) + ($1229<<2)|0);
      $1232 = HEAP32[$1231>>2]|0;
      $1233 = (($1232) + ($1224<<1)|0);
      $1234 = HEAP16[$1233>>1]|0;
      $w22 = $1234;
     }
     $1235 = $w22;
     $1236 = $1235&65535;
     $1237 = $1236 >> 8;
     $1238 = $1237 & 255;
     $1239 = $1238&255;
     $1240 = $sp;
     HEAP8[$1240>>0] = $1239;
     $1241 = $w22;
     $1242 = $1241&65535;
     $1243 = $1242 & 255;
     $1244 = $1243&255;
     $1245 = $sp;
     $1246 = ((($1245)) + 1|0);
     HEAP8[$1246>>0] = $1244;
    }
   } while(0);
   $1247 = $i;
   $1248 = (($1247) + 1)|0;
   $i = $1248;
   $1249 = $sp;
   $1250 = ((($1249)) + 4|0);
   $sp = $1250;
  }
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $1338 = $0;
  $1339 = ((($1338)) + 9|0);
  $1340 = HEAP8[$1339>>0]|0;
  $1341 = $1340&255;
  $1342 = ($1341|0)==(8);
  if ($1342) {
   $1343 = $gamma_to_1;
   $1344 = ($1343|0)!=(0|0);
   $1345 = $gamma_from_1;
   $1346 = ($1345|0)!=(0|0);
   $or$cond9 = $1344 & $1346;
   $1347 = $gamma_table;
   $1348 = ($1347|0)!=(0|0);
   $or$cond11 = $or$cond9 & $1348;
   $1349 = $1;
   $sp = $1349;
   $i = 0;
   if (!($or$cond11)) {
    while(1) {
     $1553 = $i;
     $1554 = $row_width;
     $1555 = ($1553>>>0)<($1554>>>0);
     if (!($1555)) {
      break;
     }
     $1556 = $sp;
     $1557 = ((($1556)) + 3|0);
     $1558 = HEAP8[$1557>>0]|0;
     $a34 = $1558;
     $1559 = $a34;
     $1560 = $1559&255;
     $1561 = ($1560|0)==(0);
     if ($1561) {
      $1562 = $2;
      $1563 = ((($1562)) + 444|0);
      $1564 = ((($1563)) + 2|0);
      $1565 = HEAP16[$1564>>1]|0;
      $1566 = $1565&255;
      $1567 = $sp;
      HEAP8[$1567>>0] = $1566;
      $1568 = $2;
      $1569 = ((($1568)) + 444|0);
      $1570 = ((($1569)) + 4|0);
      $1571 = HEAP16[$1570>>1]|0;
      $1572 = $1571&255;
      $1573 = $sp;
      $1574 = ((($1573)) + 1|0);
      HEAP8[$1574>>0] = $1572;
      $1575 = $2;
      $1576 = ((($1575)) + 444|0);
      $1577 = ((($1576)) + 6|0);
      $1578 = HEAP16[$1577>>1]|0;
      $1579 = $1578&255;
      $1580 = $sp;
      $1581 = ((($1580)) + 2|0);
      HEAP8[$1581>>0] = $1579;
     } else {
      $1582 = $a34;
      $1583 = $1582&255;
      $1584 = ($1583|0)<(255);
      if ($1584) {
       $1585 = $sp;
       $1586 = HEAP8[$1585>>0]|0;
       $1587 = $1586&255;
       $1588 = $1587&65535;
       $1589 = $a34;
       $1590 = $1589&255;
       $1591 = $1590&65535;
       $1592 = Math_imul($1588, $1591)|0;
       $1593 = $2;
       $1594 = ((($1593)) + 444|0);
       $1595 = ((($1594)) + 2|0);
       $1596 = HEAP16[$1595>>1]|0;
       $1597 = $1596&65535;
       $1598 = $a34;
       $1599 = $1598&255;
       $1600 = $1599&65535;
       $1601 = (255 - ($1600))|0;
       $1602 = $1601&65535;
       $1603 = $1602&65535;
       $1604 = Math_imul($1597, $1603)|0;
       $1605 = (($1592) + ($1604))|0;
       $1606 = (($1605) + 128)|0;
       $1607 = $1606&65535;
       $temp35 = $1607;
       $1608 = $temp35;
       $1609 = $1608&65535;
       $1610 = $temp35;
       $1611 = $1610&65535;
       $1612 = $1611 >> 8;
       $1613 = (($1609) + ($1612))|0;
       $1614 = $1613 >> 8;
       $1615 = $1614 & 255;
       $1616 = $1615&255;
       $1617 = $sp;
       HEAP8[$1617>>0] = $1616;
       $1618 = $sp;
       $1619 = ((($1618)) + 1|0);
       $1620 = HEAP8[$1619>>0]|0;
       $1621 = $1620&255;
       $1622 = $1621&65535;
       $1623 = $a34;
       $1624 = $1623&255;
       $1625 = $1624&65535;
       $1626 = Math_imul($1622, $1625)|0;
       $1627 = $2;
       $1628 = ((($1627)) + 444|0);
       $1629 = ((($1628)) + 4|0);
       $1630 = HEAP16[$1629>>1]|0;
       $1631 = $1630&65535;
       $1632 = $a34;
       $1633 = $1632&255;
       $1634 = $1633&65535;
       $1635 = (255 - ($1634))|0;
       $1636 = $1635&65535;
       $1637 = $1636&65535;
       $1638 = Math_imul($1631, $1637)|0;
       $1639 = (($1626) + ($1638))|0;
       $1640 = (($1639) + 128)|0;
       $1641 = $1640&65535;
       $temp36 = $1641;
       $1642 = $temp36;
       $1643 = $1642&65535;
       $1644 = $temp36;
       $1645 = $1644&65535;
       $1646 = $1645 >> 8;
       $1647 = (($1643) + ($1646))|0;
       $1648 = $1647 >> 8;
       $1649 = $1648 & 255;
       $1650 = $1649&255;
       $1651 = $sp;
       $1652 = ((($1651)) + 1|0);
       HEAP8[$1652>>0] = $1650;
       $1653 = $sp;
       $1654 = ((($1653)) + 2|0);
       $1655 = HEAP8[$1654>>0]|0;
       $1656 = $1655&255;
       $1657 = $1656&65535;
       $1658 = $a34;
       $1659 = $1658&255;
       $1660 = $1659&65535;
       $1661 = Math_imul($1657, $1660)|0;
       $1662 = $2;
       $1663 = ((($1662)) + 444|0);
       $1664 = ((($1663)) + 6|0);
       $1665 = HEAP16[$1664>>1]|0;
       $1666 = $1665&65535;
       $1667 = $a34;
       $1668 = $1667&255;
       $1669 = $1668&65535;
       $1670 = (255 - ($1669))|0;
       $1671 = $1670&65535;
       $1672 = $1671&65535;
       $1673 = Math_imul($1666, $1672)|0;
       $1674 = (($1661) + ($1673))|0;
       $1675 = (($1674) + 128)|0;
       $1676 = $1675&65535;
       $temp37 = $1676;
       $1677 = $temp37;
       $1678 = $1677&65535;
       $1679 = $temp37;
       $1680 = $1679&65535;
       $1681 = $1680 >> 8;
       $1682 = (($1678) + ($1681))|0;
       $1683 = $1682 >> 8;
       $1684 = $1683 & 255;
       $1685 = $1684&255;
       $1686 = $sp;
       $1687 = ((($1686)) + 2|0);
       HEAP8[$1687>>0] = $1685;
      }
     }
     $1688 = $i;
     $1689 = (($1688) + 1)|0;
     $i = $1689;
     $1690 = $sp;
     $1691 = ((($1690)) + 4|0);
     $sp = $1691;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $1350 = $i;
    $1351 = $row_width;
    $1352 = ($1350>>>0)<($1351>>>0);
    if (!($1352)) {
     break;
    }
    $1353 = $sp;
    $1354 = ((($1353)) + 3|0);
    $1355 = HEAP8[$1354>>0]|0;
    $a28 = $1355;
    $1356 = $a28;
    $1357 = $1356&255;
    $1358 = ($1357|0)==(255);
    do {
     if ($1358) {
      $1359 = $sp;
      $1360 = HEAP8[$1359>>0]|0;
      $1361 = $1360&255;
      $1362 = $gamma_table;
      $1363 = (($1362) + ($1361)|0);
      $1364 = HEAP8[$1363>>0]|0;
      $1365 = $sp;
      HEAP8[$1365>>0] = $1364;
      $1366 = $sp;
      $1367 = ((($1366)) + 1|0);
      $1368 = HEAP8[$1367>>0]|0;
      $1369 = $1368&255;
      $1370 = $gamma_table;
      $1371 = (($1370) + ($1369)|0);
      $1372 = HEAP8[$1371>>0]|0;
      $1373 = $sp;
      $1374 = ((($1373)) + 1|0);
      HEAP8[$1374>>0] = $1372;
      $1375 = $sp;
      $1376 = ((($1375)) + 2|0);
      $1377 = HEAP8[$1376>>0]|0;
      $1378 = $1377&255;
      $1379 = $gamma_table;
      $1380 = (($1379) + ($1378)|0);
      $1381 = HEAP8[$1380>>0]|0;
      $1382 = $sp;
      $1383 = ((($1382)) + 2|0);
      HEAP8[$1383>>0] = $1381;
     } else {
      $1384 = $a28;
      $1385 = $1384&255;
      $1386 = ($1385|0)==(0);
      if ($1386) {
       $1387 = $2;
       $1388 = ((($1387)) + 444|0);
       $1389 = ((($1388)) + 2|0);
       $1390 = HEAP16[$1389>>1]|0;
       $1391 = $1390&255;
       $1392 = $sp;
       HEAP8[$1392>>0] = $1391;
       $1393 = $2;
       $1394 = ((($1393)) + 444|0);
       $1395 = ((($1394)) + 4|0);
       $1396 = HEAP16[$1395>>1]|0;
       $1397 = $1396&255;
       $1398 = $sp;
       $1399 = ((($1398)) + 1|0);
       HEAP8[$1399>>0] = $1397;
       $1400 = $2;
       $1401 = ((($1400)) + 444|0);
       $1402 = ((($1401)) + 6|0);
       $1403 = HEAP16[$1402>>1]|0;
       $1404 = $1403&255;
       $1405 = $sp;
       $1406 = ((($1405)) + 2|0);
       HEAP8[$1406>>0] = $1404;
       break;
      }
      $1407 = $sp;
      $1408 = HEAP8[$1407>>0]|0;
      $1409 = $1408&255;
      $1410 = $gamma_to_1;
      $1411 = (($1410) + ($1409)|0);
      $1412 = HEAP8[$1411>>0]|0;
      $v29 = $1412;
      $1413 = $v29;
      $1414 = $1413&255;
      $1415 = $1414&65535;
      $1416 = $a28;
      $1417 = $1416&255;
      $1418 = $1417&65535;
      $1419 = Math_imul($1415, $1418)|0;
      $1420 = $2;
      $1421 = ((($1420)) + 454|0);
      $1422 = ((($1421)) + 2|0);
      $1423 = HEAP16[$1422>>1]|0;
      $1424 = $1423&65535;
      $1425 = $a28;
      $1426 = $1425&255;
      $1427 = $1426&65535;
      $1428 = (255 - ($1427))|0;
      $1429 = $1428&65535;
      $1430 = $1429&65535;
      $1431 = Math_imul($1424, $1430)|0;
      $1432 = (($1419) + ($1431))|0;
      $1433 = (($1432) + 128)|0;
      $1434 = $1433&65535;
      $temp31 = $1434;
      $1435 = $temp31;
      $1436 = $1435&65535;
      $1437 = $temp31;
      $1438 = $1437&65535;
      $1439 = $1438 >> 8;
      $1440 = (($1436) + ($1439))|0;
      $1441 = $1440 >> 8;
      $1442 = $1441 & 255;
      $1443 = $1442&255;
      $w30 = $1443;
      $1444 = $optimize;
      $1445 = ($1444|0)==(0);
      if ($1445) {
       $1446 = $w30;
       $1447 = $1446&255;
       $1448 = $gamma_from_1;
       $1449 = (($1448) + ($1447)|0);
       $1450 = HEAP8[$1449>>0]|0;
       $w30 = $1450;
      }
      $1451 = $w30;
      $1452 = $sp;
      HEAP8[$1452>>0] = $1451;
      $1453 = $sp;
      $1454 = ((($1453)) + 1|0);
      $1455 = HEAP8[$1454>>0]|0;
      $1456 = $1455&255;
      $1457 = $gamma_to_1;
      $1458 = (($1457) + ($1456)|0);
      $1459 = HEAP8[$1458>>0]|0;
      $v29 = $1459;
      $1460 = $v29;
      $1461 = $1460&255;
      $1462 = $1461&65535;
      $1463 = $a28;
      $1464 = $1463&255;
      $1465 = $1464&65535;
      $1466 = Math_imul($1462, $1465)|0;
      $1467 = $2;
      $1468 = ((($1467)) + 454|0);
      $1469 = ((($1468)) + 4|0);
      $1470 = HEAP16[$1469>>1]|0;
      $1471 = $1470&65535;
      $1472 = $a28;
      $1473 = $1472&255;
      $1474 = $1473&65535;
      $1475 = (255 - ($1474))|0;
      $1476 = $1475&65535;
      $1477 = $1476&65535;
      $1478 = Math_imul($1471, $1477)|0;
      $1479 = (($1466) + ($1478))|0;
      $1480 = (($1479) + 128)|0;
      $1481 = $1480&65535;
      $temp32 = $1481;
      $1482 = $temp32;
      $1483 = $1482&65535;
      $1484 = $temp32;
      $1485 = $1484&65535;
      $1486 = $1485 >> 8;
      $1487 = (($1483) + ($1486))|0;
      $1488 = $1487 >> 8;
      $1489 = $1488 & 255;
      $1490 = $1489&255;
      $w30 = $1490;
      $1491 = $optimize;
      $1492 = ($1491|0)==(0);
      if ($1492) {
       $1493 = $w30;
       $1494 = $1493&255;
       $1495 = $gamma_from_1;
       $1496 = (($1495) + ($1494)|0);
       $1497 = HEAP8[$1496>>0]|0;
       $w30 = $1497;
      }
      $1498 = $w30;
      $1499 = $sp;
      $1500 = ((($1499)) + 1|0);
      HEAP8[$1500>>0] = $1498;
      $1501 = $sp;
      $1502 = ((($1501)) + 2|0);
      $1503 = HEAP8[$1502>>0]|0;
      $1504 = $1503&255;
      $1505 = $gamma_to_1;
      $1506 = (($1505) + ($1504)|0);
      $1507 = HEAP8[$1506>>0]|0;
      $v29 = $1507;
      $1508 = $v29;
      $1509 = $1508&255;
      $1510 = $1509&65535;
      $1511 = $a28;
      $1512 = $1511&255;
      $1513 = $1512&65535;
      $1514 = Math_imul($1510, $1513)|0;
      $1515 = $2;
      $1516 = ((($1515)) + 454|0);
      $1517 = ((($1516)) + 6|0);
      $1518 = HEAP16[$1517>>1]|0;
      $1519 = $1518&65535;
      $1520 = $a28;
      $1521 = $1520&255;
      $1522 = $1521&65535;
      $1523 = (255 - ($1522))|0;
      $1524 = $1523&65535;
      $1525 = $1524&65535;
      $1526 = Math_imul($1519, $1525)|0;
      $1527 = (($1514) + ($1526))|0;
      $1528 = (($1527) + 128)|0;
      $1529 = $1528&65535;
      $temp33 = $1529;
      $1530 = $temp33;
      $1531 = $1530&65535;
      $1532 = $temp33;
      $1533 = $1532&65535;
      $1534 = $1533 >> 8;
      $1535 = (($1531) + ($1534))|0;
      $1536 = $1535 >> 8;
      $1537 = $1536 & 255;
      $1538 = $1537&255;
      $w30 = $1538;
      $1539 = $optimize;
      $1540 = ($1539|0)==(0);
      if ($1540) {
       $1541 = $w30;
       $1542 = $1541&255;
       $1543 = $gamma_from_1;
       $1544 = (($1543) + ($1542)|0);
       $1545 = HEAP8[$1544>>0]|0;
       $w30 = $1545;
      }
      $1546 = $w30;
      $1547 = $sp;
      $1548 = ((($1547)) + 2|0);
      HEAP8[$1548>>0] = $1546;
     }
    } while(0);
    $1549 = $i;
    $1550 = (($1549) + 1)|0;
    $i = $1550;
    $1551 = $sp;
    $1552 = ((($1551)) + 4|0);
    $sp = $1552;
   }
   STACKTOP = sp;return;
  } else {
   $1692 = $gamma_16;
   $1693 = ($1692|0)!=(0|0);
   $1694 = $gamma_16_from_1;
   $1695 = ($1694|0)!=(0|0);
   $or$cond13 = $1693 & $1695;
   $1696 = $gamma_16_to_1;
   $1697 = ($1696|0)!=(0|0);
   $or$cond15 = $or$cond13 & $1697;
   $1698 = $1;
   $sp = $1698;
   $i = 0;
   if (!($or$cond15)) {
    while(1) {
     $2059 = $i;
     $2060 = $row_width;
     $2061 = ($2059>>>0)<($2060>>>0);
     if (!($2061)) {
      break;
     }
     $2062 = $sp;
     $2063 = ((($2062)) + 6|0);
     $2064 = HEAP8[$2063>>0]|0;
     $2065 = $2064&255;
     $2066 = $2065&65535;
     $2067 = $2066 << 8;
     $2068 = $sp;
     $2069 = ((($2068)) + 7|0);
     $2070 = HEAP8[$2069>>0]|0;
     $2071 = $2070&255;
     $2072 = $2071&65535;
     $2073 = (($2067) + ($2072))|0;
     $2074 = $2073&65535;
     $a45 = $2074;
     $2075 = $a45;
     $2076 = $2075&65535;
     $2077 = ($2076|0)==(0);
     if ($2077) {
      $2078 = $2;
      $2079 = ((($2078)) + 444|0);
      $2080 = ((($2079)) + 2|0);
      $2081 = HEAP16[$2080>>1]|0;
      $2082 = $2081&65535;
      $2083 = $2082 >> 8;
      $2084 = $2083 & 255;
      $2085 = $2084&255;
      $2086 = $sp;
      HEAP8[$2086>>0] = $2085;
      $2087 = $2;
      $2088 = ((($2087)) + 444|0);
      $2089 = ((($2088)) + 2|0);
      $2090 = HEAP16[$2089>>1]|0;
      $2091 = $2090&65535;
      $2092 = $2091 & 255;
      $2093 = $2092&255;
      $2094 = $sp;
      $2095 = ((($2094)) + 1|0);
      HEAP8[$2095>>0] = $2093;
      $2096 = $2;
      $2097 = ((($2096)) + 444|0);
      $2098 = ((($2097)) + 4|0);
      $2099 = HEAP16[$2098>>1]|0;
      $2100 = $2099&65535;
      $2101 = $2100 >> 8;
      $2102 = $2101 & 255;
      $2103 = $2102&255;
      $2104 = $sp;
      $2105 = ((($2104)) + 2|0);
      HEAP8[$2105>>0] = $2103;
      $2106 = $2;
      $2107 = ((($2106)) + 444|0);
      $2108 = ((($2107)) + 4|0);
      $2109 = HEAP16[$2108>>1]|0;
      $2110 = $2109&65535;
      $2111 = $2110 & 255;
      $2112 = $2111&255;
      $2113 = $sp;
      $2114 = ((($2113)) + 3|0);
      HEAP8[$2114>>0] = $2112;
      $2115 = $2;
      $2116 = ((($2115)) + 444|0);
      $2117 = ((($2116)) + 6|0);
      $2118 = HEAP16[$2117>>1]|0;
      $2119 = $2118&65535;
      $2120 = $2119 >> 8;
      $2121 = $2120 & 255;
      $2122 = $2121&255;
      $2123 = $sp;
      $2124 = ((($2123)) + 4|0);
      HEAP8[$2124>>0] = $2122;
      $2125 = $2;
      $2126 = ((($2125)) + 444|0);
      $2127 = ((($2126)) + 6|0);
      $2128 = HEAP16[$2127>>1]|0;
      $2129 = $2128&65535;
      $2130 = $2129 & 255;
      $2131 = $2130&255;
      $2132 = $sp;
      $2133 = ((($2132)) + 5|0);
      HEAP8[$2133>>0] = $2131;
     } else {
      $2134 = $a45;
      $2135 = $2134&65535;
      $2136 = ($2135|0)<(65535);
      if ($2136) {
       $2137 = $sp;
       $2138 = HEAP8[$2137>>0]|0;
       $2139 = $2138&255;
       $2140 = $2139 << 8;
       $2141 = $sp;
       $2142 = ((($2141)) + 1|0);
       $2143 = HEAP8[$2142>>0]|0;
       $2144 = $2143&255;
       $2145 = (($2140) + ($2144))|0;
       $2146 = $2145&65535;
       $r47 = $2146;
       $2147 = $sp;
       $2148 = ((($2147)) + 2|0);
       $2149 = HEAP8[$2148>>0]|0;
       $2150 = $2149&255;
       $2151 = $2150 << 8;
       $2152 = $sp;
       $2153 = ((($2152)) + 3|0);
       $2154 = HEAP8[$2153>>0]|0;
       $2155 = $2154&255;
       $2156 = (($2151) + ($2155))|0;
       $2157 = $2156&65535;
       $g48 = $2157;
       $2158 = $sp;
       $2159 = ((($2158)) + 4|0);
       $2160 = HEAP8[$2159>>0]|0;
       $2161 = $2160&255;
       $2162 = $2161 << 8;
       $2163 = $sp;
       $2164 = ((($2163)) + 5|0);
       $2165 = HEAP8[$2164>>0]|0;
       $2166 = $2165&255;
       $2167 = (($2162) + ($2166))|0;
       $2168 = $2167&65535;
       $b49 = $2168;
       $2169 = $r47;
       $2170 = $2169&65535;
       $2171 = $a45;
       $2172 = $2171&65535;
       $2173 = Math_imul($2170, $2172)|0;
       $2174 = $2;
       $2175 = ((($2174)) + 444|0);
       $2176 = ((($2175)) + 2|0);
       $2177 = HEAP16[$2176>>1]|0;
       $2178 = $2177&65535;
       $2179 = $a45;
       $2180 = $2179&65535;
       $2181 = (65535 - ($2180))|0;
       $2182 = Math_imul($2178, $2181)|0;
       $2183 = (($2173) + ($2182))|0;
       $2184 = (($2183) + 32768)|0;
       $temp50 = $2184;
       $2185 = $temp50;
       $2186 = $temp50;
       $2187 = $2186 >>> 16;
       $2188 = (($2185) + ($2187))|0;
       $2189 = $2188 >>> 16;
       $2190 = 65535 & $2189;
       $2191 = $2190&65535;
       $v46 = $2191;
       $2192 = $v46;
       $2193 = $2192&65535;
       $2194 = $2193 >> 8;
       $2195 = $2194 & 255;
       $2196 = $2195&255;
       $2197 = $sp;
       HEAP8[$2197>>0] = $2196;
       $2198 = $v46;
       $2199 = $2198&65535;
       $2200 = $2199 & 255;
       $2201 = $2200&255;
       $2202 = $sp;
       $2203 = ((($2202)) + 1|0);
       HEAP8[$2203>>0] = $2201;
       $2204 = $g48;
       $2205 = $2204&65535;
       $2206 = $a45;
       $2207 = $2206&65535;
       $2208 = Math_imul($2205, $2207)|0;
       $2209 = $2;
       $2210 = ((($2209)) + 444|0);
       $2211 = ((($2210)) + 4|0);
       $2212 = HEAP16[$2211>>1]|0;
       $2213 = $2212&65535;
       $2214 = $a45;
       $2215 = $2214&65535;
       $2216 = (65535 - ($2215))|0;
       $2217 = Math_imul($2213, $2216)|0;
       $2218 = (($2208) + ($2217))|0;
       $2219 = (($2218) + 32768)|0;
       $temp51 = $2219;
       $2220 = $temp51;
       $2221 = $temp51;
       $2222 = $2221 >>> 16;
       $2223 = (($2220) + ($2222))|0;
       $2224 = $2223 >>> 16;
       $2225 = 65535 & $2224;
       $2226 = $2225&65535;
       $v46 = $2226;
       $2227 = $v46;
       $2228 = $2227&65535;
       $2229 = $2228 >> 8;
       $2230 = $2229 & 255;
       $2231 = $2230&255;
       $2232 = $sp;
       $2233 = ((($2232)) + 2|0);
       HEAP8[$2233>>0] = $2231;
       $2234 = $v46;
       $2235 = $2234&65535;
       $2236 = $2235 & 255;
       $2237 = $2236&255;
       $2238 = $sp;
       $2239 = ((($2238)) + 3|0);
       HEAP8[$2239>>0] = $2237;
       $2240 = $b49;
       $2241 = $2240&65535;
       $2242 = $a45;
       $2243 = $2242&65535;
       $2244 = Math_imul($2241, $2243)|0;
       $2245 = $2;
       $2246 = ((($2245)) + 444|0);
       $2247 = ((($2246)) + 6|0);
       $2248 = HEAP16[$2247>>1]|0;
       $2249 = $2248&65535;
       $2250 = $a45;
       $2251 = $2250&65535;
       $2252 = (65535 - ($2251))|0;
       $2253 = Math_imul($2249, $2252)|0;
       $2254 = (($2244) + ($2253))|0;
       $2255 = (($2254) + 32768)|0;
       $temp52 = $2255;
       $2256 = $temp52;
       $2257 = $temp52;
       $2258 = $2257 >>> 16;
       $2259 = (($2256) + ($2258))|0;
       $2260 = $2259 >>> 16;
       $2261 = 65535 & $2260;
       $2262 = $2261&65535;
       $v46 = $2262;
       $2263 = $v46;
       $2264 = $2263&65535;
       $2265 = $2264 >> 8;
       $2266 = $2265 & 255;
       $2267 = $2266&255;
       $2268 = $sp;
       $2269 = ((($2268)) + 4|0);
       HEAP8[$2269>>0] = $2267;
       $2270 = $v46;
       $2271 = $2270&65535;
       $2272 = $2271 & 255;
       $2273 = $2272&255;
       $2274 = $sp;
       $2275 = ((($2274)) + 5|0);
       HEAP8[$2275>>0] = $2273;
      }
     }
     $2276 = $i;
     $2277 = (($2276) + 1)|0;
     $i = $2277;
     $2278 = $sp;
     $2279 = ((($2278)) + 8|0);
     $sp = $2279;
    }
    STACKTOP = sp;return;
   }
   while(1) {
    $1699 = $i;
    $1700 = $row_width;
    $1701 = ($1699>>>0)<($1700>>>0);
    if (!($1701)) {
     break;
    }
    $1702 = $sp;
    $1703 = ((($1702)) + 6|0);
    $1704 = HEAP8[$1703>>0]|0;
    $1705 = $1704&255;
    $1706 = $1705&65535;
    $1707 = $1706 << 8;
    $1708 = $sp;
    $1709 = ((($1708)) + 7|0);
    $1710 = HEAP8[$1709>>0]|0;
    $1711 = $1710&255;
    $1712 = $1711&65535;
    $1713 = (($1707) + ($1712))|0;
    $1714 = $1713&65535;
    $a38 = $1714;
    $1715 = $a38;
    $1716 = $1715&65535;
    $1717 = ($1716|0)==(65535);
    do {
     if ($1717) {
      $1718 = $sp;
      $1719 = HEAP8[$1718>>0]|0;
      $1720 = $1719&255;
      $1721 = $sp;
      $1722 = ((($1721)) + 1|0);
      $1723 = HEAP8[$1722>>0]|0;
      $1724 = $1723&255;
      $1725 = $gamma_shift;
      $1726 = $1724 >> $1725;
      $1727 = $gamma_16;
      $1728 = (($1727) + ($1726<<2)|0);
      $1729 = HEAP32[$1728>>2]|0;
      $1730 = (($1729) + ($1720<<1)|0);
      $1731 = HEAP16[$1730>>1]|0;
      $v39 = $1731;
      $1732 = $v39;
      $1733 = $1732&65535;
      $1734 = $1733 >> 8;
      $1735 = $1734 & 255;
      $1736 = $1735&255;
      $1737 = $sp;
      HEAP8[$1737>>0] = $1736;
      $1738 = $v39;
      $1739 = $1738&65535;
      $1740 = $1739 & 255;
      $1741 = $1740&255;
      $1742 = $sp;
      $1743 = ((($1742)) + 1|0);
      HEAP8[$1743>>0] = $1741;
      $1744 = $sp;
      $1745 = ((($1744)) + 2|0);
      $1746 = HEAP8[$1745>>0]|0;
      $1747 = $1746&255;
      $1748 = $sp;
      $1749 = ((($1748)) + 3|0);
      $1750 = HEAP8[$1749>>0]|0;
      $1751 = $1750&255;
      $1752 = $gamma_shift;
      $1753 = $1751 >> $1752;
      $1754 = $gamma_16;
      $1755 = (($1754) + ($1753<<2)|0);
      $1756 = HEAP32[$1755>>2]|0;
      $1757 = (($1756) + ($1747<<1)|0);
      $1758 = HEAP16[$1757>>1]|0;
      $v39 = $1758;
      $1759 = $v39;
      $1760 = $1759&65535;
      $1761 = $1760 >> 8;
      $1762 = $1761 & 255;
      $1763 = $1762&255;
      $1764 = $sp;
      $1765 = ((($1764)) + 2|0);
      HEAP8[$1765>>0] = $1763;
      $1766 = $v39;
      $1767 = $1766&65535;
      $1768 = $1767 & 255;
      $1769 = $1768&255;
      $1770 = $sp;
      $1771 = ((($1770)) + 3|0);
      HEAP8[$1771>>0] = $1769;
      $1772 = $sp;
      $1773 = ((($1772)) + 4|0);
      $1774 = HEAP8[$1773>>0]|0;
      $1775 = $1774&255;
      $1776 = $sp;
      $1777 = ((($1776)) + 5|0);
      $1778 = HEAP8[$1777>>0]|0;
      $1779 = $1778&255;
      $1780 = $gamma_shift;
      $1781 = $1779 >> $1780;
      $1782 = $gamma_16;
      $1783 = (($1782) + ($1781<<2)|0);
      $1784 = HEAP32[$1783>>2]|0;
      $1785 = (($1784) + ($1775<<1)|0);
      $1786 = HEAP16[$1785>>1]|0;
      $v39 = $1786;
      $1787 = $v39;
      $1788 = $1787&65535;
      $1789 = $1788 >> 8;
      $1790 = $1789 & 255;
      $1791 = $1790&255;
      $1792 = $sp;
      $1793 = ((($1792)) + 4|0);
      HEAP8[$1793>>0] = $1791;
      $1794 = $v39;
      $1795 = $1794&65535;
      $1796 = $1795 & 255;
      $1797 = $1796&255;
      $1798 = $sp;
      $1799 = ((($1798)) + 5|0);
      HEAP8[$1799>>0] = $1797;
     } else {
      $1800 = $a38;
      $1801 = $1800&65535;
      $1802 = ($1801|0)==(0);
      if ($1802) {
       $1803 = $2;
       $1804 = ((($1803)) + 444|0);
       $1805 = ((($1804)) + 2|0);
       $1806 = HEAP16[$1805>>1]|0;
       $1807 = $1806&65535;
       $1808 = $1807 >> 8;
       $1809 = $1808 & 255;
       $1810 = $1809&255;
       $1811 = $sp;
       HEAP8[$1811>>0] = $1810;
       $1812 = $2;
       $1813 = ((($1812)) + 444|0);
       $1814 = ((($1813)) + 2|0);
       $1815 = HEAP16[$1814>>1]|0;
       $1816 = $1815&65535;
       $1817 = $1816 & 255;
       $1818 = $1817&255;
       $1819 = $sp;
       $1820 = ((($1819)) + 1|0);
       HEAP8[$1820>>0] = $1818;
       $1821 = $2;
       $1822 = ((($1821)) + 444|0);
       $1823 = ((($1822)) + 4|0);
       $1824 = HEAP16[$1823>>1]|0;
       $1825 = $1824&65535;
       $1826 = $1825 >> 8;
       $1827 = $1826 & 255;
       $1828 = $1827&255;
       $1829 = $sp;
       $1830 = ((($1829)) + 2|0);
       HEAP8[$1830>>0] = $1828;
       $1831 = $2;
       $1832 = ((($1831)) + 444|0);
       $1833 = ((($1832)) + 4|0);
       $1834 = HEAP16[$1833>>1]|0;
       $1835 = $1834&65535;
       $1836 = $1835 & 255;
       $1837 = $1836&255;
       $1838 = $sp;
       $1839 = ((($1838)) + 3|0);
       HEAP8[$1839>>0] = $1837;
       $1840 = $2;
       $1841 = ((($1840)) + 444|0);
       $1842 = ((($1841)) + 6|0);
       $1843 = HEAP16[$1842>>1]|0;
       $1844 = $1843&65535;
       $1845 = $1844 >> 8;
       $1846 = $1845 & 255;
       $1847 = $1846&255;
       $1848 = $sp;
       $1849 = ((($1848)) + 4|0);
       HEAP8[$1849>>0] = $1847;
       $1850 = $2;
       $1851 = ((($1850)) + 444|0);
       $1852 = ((($1851)) + 6|0);
       $1853 = HEAP16[$1852>>1]|0;
       $1854 = $1853&65535;
       $1855 = $1854 & 255;
       $1856 = $1855&255;
       $1857 = $sp;
       $1858 = ((($1857)) + 5|0);
       HEAP8[$1858>>0] = $1856;
       break;
      }
      $1859 = $sp;
      $1860 = HEAP8[$1859>>0]|0;
      $1861 = $1860&255;
      $1862 = $sp;
      $1863 = ((($1862)) + 1|0);
      $1864 = HEAP8[$1863>>0]|0;
      $1865 = $1864&255;
      $1866 = $gamma_shift;
      $1867 = $1865 >> $1866;
      $1868 = $gamma_16_to_1;
      $1869 = (($1868) + ($1867<<2)|0);
      $1870 = HEAP32[$1869>>2]|0;
      $1871 = (($1870) + ($1861<<1)|0);
      $1872 = HEAP16[$1871>>1]|0;
      $v40 = $1872;
      $1873 = $v40;
      $1874 = $1873&65535;
      $1875 = $a38;
      $1876 = $1875&65535;
      $1877 = Math_imul($1874, $1876)|0;
      $1878 = $2;
      $1879 = ((($1878)) + 454|0);
      $1880 = ((($1879)) + 2|0);
      $1881 = HEAP16[$1880>>1]|0;
      $1882 = $1881&65535;
      $1883 = $a38;
      $1884 = $1883&65535;
      $1885 = (65535 - ($1884))|0;
      $1886 = Math_imul($1882, $1885)|0;
      $1887 = (($1877) + ($1886))|0;
      $1888 = (($1887) + 32768)|0;
      $temp42 = $1888;
      $1889 = $temp42;
      $1890 = $temp42;
      $1891 = $1890 >>> 16;
      $1892 = (($1889) + ($1891))|0;
      $1893 = $1892 >>> 16;
      $1894 = 65535 & $1893;
      $1895 = $1894&65535;
      $w41 = $1895;
      $1896 = $optimize;
      $1897 = ($1896|0)==(0);
      if ($1897) {
       $1898 = $w41;
       $1899 = $1898&65535;
       $1900 = $1899 >> 8;
       $1901 = $w41;
       $1902 = $1901&65535;
       $1903 = $1902 & 255;
       $1904 = $gamma_shift;
       $1905 = $1903 >> $1904;
       $1906 = $gamma_16_from_1;
       $1907 = (($1906) + ($1905<<2)|0);
       $1908 = HEAP32[$1907>>2]|0;
       $1909 = (($1908) + ($1900<<1)|0);
       $1910 = HEAP16[$1909>>1]|0;
       $w41 = $1910;
      }
      $1911 = $w41;
      $1912 = $1911&65535;
      $1913 = $1912 >> 8;
      $1914 = $1913 & 255;
      $1915 = $1914&255;
      $1916 = $sp;
      HEAP8[$1916>>0] = $1915;
      $1917 = $w41;
      $1918 = $1917&65535;
      $1919 = $1918 & 255;
      $1920 = $1919&255;
      $1921 = $sp;
      $1922 = ((($1921)) + 1|0);
      HEAP8[$1922>>0] = $1920;
      $1923 = $sp;
      $1924 = ((($1923)) + 2|0);
      $1925 = HEAP8[$1924>>0]|0;
      $1926 = $1925&255;
      $1927 = $sp;
      $1928 = ((($1927)) + 3|0);
      $1929 = HEAP8[$1928>>0]|0;
      $1930 = $1929&255;
      $1931 = $gamma_shift;
      $1932 = $1930 >> $1931;
      $1933 = $gamma_16_to_1;
      $1934 = (($1933) + ($1932<<2)|0);
      $1935 = HEAP32[$1934>>2]|0;
      $1936 = (($1935) + ($1926<<1)|0);
      $1937 = HEAP16[$1936>>1]|0;
      $v40 = $1937;
      $1938 = $v40;
      $1939 = $1938&65535;
      $1940 = $a38;
      $1941 = $1940&65535;
      $1942 = Math_imul($1939, $1941)|0;
      $1943 = $2;
      $1944 = ((($1943)) + 454|0);
      $1945 = ((($1944)) + 4|0);
      $1946 = HEAP16[$1945>>1]|0;
      $1947 = $1946&65535;
      $1948 = $a38;
      $1949 = $1948&65535;
      $1950 = (65535 - ($1949))|0;
      $1951 = Math_imul($1947, $1950)|0;
      $1952 = (($1942) + ($1951))|0;
      $1953 = (($1952) + 32768)|0;
      $temp43 = $1953;
      $1954 = $temp43;
      $1955 = $temp43;
      $1956 = $1955 >>> 16;
      $1957 = (($1954) + ($1956))|0;
      $1958 = $1957 >>> 16;
      $1959 = 65535 & $1958;
      $1960 = $1959&65535;
      $w41 = $1960;
      $1961 = $optimize;
      $1962 = ($1961|0)==(0);
      if ($1962) {
       $1963 = $w41;
       $1964 = $1963&65535;
       $1965 = $1964 >> 8;
       $1966 = $w41;
       $1967 = $1966&65535;
       $1968 = $1967 & 255;
       $1969 = $gamma_shift;
       $1970 = $1968 >> $1969;
       $1971 = $gamma_16_from_1;
       $1972 = (($1971) + ($1970<<2)|0);
       $1973 = HEAP32[$1972>>2]|0;
       $1974 = (($1973) + ($1965<<1)|0);
       $1975 = HEAP16[$1974>>1]|0;
       $w41 = $1975;
      }
      $1976 = $w41;
      $1977 = $1976&65535;
      $1978 = $1977 >> 8;
      $1979 = $1978 & 255;
      $1980 = $1979&255;
      $1981 = $sp;
      $1982 = ((($1981)) + 2|0);
      HEAP8[$1982>>0] = $1980;
      $1983 = $w41;
      $1984 = $1983&65535;
      $1985 = $1984 & 255;
      $1986 = $1985&255;
      $1987 = $sp;
      $1988 = ((($1987)) + 3|0);
      HEAP8[$1988>>0] = $1986;
      $1989 = $sp;
      $1990 = ((($1989)) + 4|0);
      $1991 = HEAP8[$1990>>0]|0;
      $1992 = $1991&255;
      $1993 = $sp;
      $1994 = ((($1993)) + 5|0);
      $1995 = HEAP8[$1994>>0]|0;
      $1996 = $1995&255;
      $1997 = $gamma_shift;
      $1998 = $1996 >> $1997;
      $1999 = $gamma_16_to_1;
      $2000 = (($1999) + ($1998<<2)|0);
      $2001 = HEAP32[$2000>>2]|0;
      $2002 = (($2001) + ($1992<<1)|0);
      $2003 = HEAP16[$2002>>1]|0;
      $v40 = $2003;
      $2004 = $v40;
      $2005 = $2004&65535;
      $2006 = $a38;
      $2007 = $2006&65535;
      $2008 = Math_imul($2005, $2007)|0;
      $2009 = $2;
      $2010 = ((($2009)) + 454|0);
      $2011 = ((($2010)) + 6|0);
      $2012 = HEAP16[$2011>>1]|0;
      $2013 = $2012&65535;
      $2014 = $a38;
      $2015 = $2014&65535;
      $2016 = (65535 - ($2015))|0;
      $2017 = Math_imul($2013, $2016)|0;
      $2018 = (($2008) + ($2017))|0;
      $2019 = (($2018) + 32768)|0;
      $temp44 = $2019;
      $2020 = $temp44;
      $2021 = $temp44;
      $2022 = $2021 >>> 16;
      $2023 = (($2020) + ($2022))|0;
      $2024 = $2023 >>> 16;
      $2025 = 65535 & $2024;
      $2026 = $2025&65535;
      $w41 = $2026;
      $2027 = $optimize;
      $2028 = ($2027|0)==(0);
      if ($2028) {
       $2029 = $w41;
       $2030 = $2029&65535;
       $2031 = $2030 >> 8;
       $2032 = $w41;
       $2033 = $2032&65535;
       $2034 = $2033 & 255;
       $2035 = $gamma_shift;
       $2036 = $2034 >> $2035;
       $2037 = $gamma_16_from_1;
       $2038 = (($2037) + ($2036<<2)|0);
       $2039 = HEAP32[$2038>>2]|0;
       $2040 = (($2039) + ($2031<<1)|0);
       $2041 = HEAP16[$2040>>1]|0;
       $w41 = $2041;
      }
      $2042 = $w41;
      $2043 = $2042&65535;
      $2044 = $2043 >> 8;
      $2045 = $2044 & 255;
      $2046 = $2045&255;
      $2047 = $sp;
      $2048 = ((($2047)) + 4|0);
      HEAP8[$2048>>0] = $2046;
      $2049 = $w41;
      $2050 = $2049&65535;
      $2051 = $2050 & 255;
      $2052 = $2051&255;
      $2053 = $sp;
      $2054 = ((($2053)) + 5|0);
      HEAP8[$2054>>0] = $2052;
     }
    } while(0);
    $2055 = $i;
    $2056 = (($2055) + 1)|0;
    $i = $2056;
    $2057 = $sp;
    $2058 = ((($2057)) + 8|0);
    $sp = $2058;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _png_do_gamma($row_info,$row,$png_ptr) {
 $row_info = $row_info|0;
 $row = $row|0;
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0;
 var $c = 0, $d = 0, $gamma_16_table = 0, $gamma_shift = 0, $gamma_table = 0, $i = 0, $lsb = 0, $msb = 0, $or$cond = 0, $or$cond3 = 0, $row_width = 0, $sp = 0, $v = 0, $v1 = 0, $v2 = 0, $v3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $png_ptr;
 $3 = $2;
 $4 = ((($3)) + 484|0);
 $5 = HEAP32[$4>>2]|0;
 $gamma_table = $5;
 $6 = $2;
 $7 = ((($6)) + 488|0);
 $8 = HEAP32[$7>>2]|0;
 $gamma_16_table = $8;
 $9 = $2;
 $10 = ((($9)) + 476|0);
 $11 = HEAP32[$10>>2]|0;
 $gamma_shift = $11;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $row_width = $13;
 $14 = $0;
 $15 = ((($14)) + 9|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)<=(8);
 $19 = $gamma_table;
 $20 = ($19|0)!=(0|0);
 $or$cond = $18 & $20;
 if (!($or$cond)) {
  $21 = $0;
  $22 = ((($21)) + 9|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = ($24|0)==(16);
  $26 = $gamma_16_table;
  $27 = ($26|0)!=(0|0);
  $or$cond3 = $25 & $27;
  if (!($or$cond3)) {
   STACKTOP = sp;return;
  }
 }
 $28 = $0;
 $29 = ((($28)) + 8|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 switch ($31|0) {
 case 2:  {
  $32 = $0;
  $33 = ((($32)) + 9|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)==(8);
  $37 = $1;
  $sp = $37;
  $i = 0;
  if ($36) {
   while(1) {
    $38 = $i;
    $39 = $row_width;
    $40 = ($38>>>0)<($39>>>0);
    if (!($40)) {
     break;
    }
    $41 = $sp;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $gamma_table;
    $45 = (($44) + ($43)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $sp;
    HEAP8[$47>>0] = $46;
    $48 = $sp;
    $49 = ((($48)) + 1|0);
    $sp = $49;
    $50 = $sp;
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = $gamma_table;
    $54 = (($53) + ($52)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $sp;
    HEAP8[$56>>0] = $55;
    $57 = $sp;
    $58 = ((($57)) + 1|0);
    $sp = $58;
    $59 = $sp;
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    $62 = $gamma_table;
    $63 = (($62) + ($61)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $sp;
    HEAP8[$65>>0] = $64;
    $66 = $sp;
    $67 = ((($66)) + 1|0);
    $sp = $67;
    $68 = $i;
    $69 = (($68) + 1)|0;
    $i = $69;
   }
   STACKTOP = sp;return;
  } else {
   while(1) {
    $70 = $i;
    $71 = $row_width;
    $72 = ($70>>>0)<($71>>>0);
    if (!($72)) {
     break;
    }
    $73 = $sp;
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $sp;
    $77 = ((($76)) + 1|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = $gamma_shift;
    $81 = $79 >> $80;
    $82 = $gamma_16_table;
    $83 = (($82) + ($81<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($75<<1)|0);
    $86 = HEAP16[$85>>1]|0;
    $v = $86;
    $87 = $v;
    $88 = $87&65535;
    $89 = $88 >> 8;
    $90 = $89 & 255;
    $91 = $90&255;
    $92 = $sp;
    HEAP8[$92>>0] = $91;
    $93 = $v;
    $94 = $93&65535;
    $95 = $94 & 255;
    $96 = $95&255;
    $97 = $sp;
    $98 = ((($97)) + 1|0);
    HEAP8[$98>>0] = $96;
    $99 = $sp;
    $100 = ((($99)) + 2|0);
    $sp = $100;
    $101 = $sp;
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    $104 = $sp;
    $105 = ((($104)) + 1|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = $gamma_shift;
    $109 = $107 >> $108;
    $110 = $gamma_16_table;
    $111 = (($110) + ($109<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + ($103<<1)|0);
    $114 = HEAP16[$113>>1]|0;
    $v = $114;
    $115 = $v;
    $116 = $115&65535;
    $117 = $116 >> 8;
    $118 = $117 & 255;
    $119 = $118&255;
    $120 = $sp;
    HEAP8[$120>>0] = $119;
    $121 = $v;
    $122 = $121&65535;
    $123 = $122 & 255;
    $124 = $123&255;
    $125 = $sp;
    $126 = ((($125)) + 1|0);
    HEAP8[$126>>0] = $124;
    $127 = $sp;
    $128 = ((($127)) + 2|0);
    $sp = $128;
    $129 = $sp;
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = $sp;
    $133 = ((($132)) + 1|0);
    $134 = HEAP8[$133>>0]|0;
    $135 = $134&255;
    $136 = $gamma_shift;
    $137 = $135 >> $136;
    $138 = $gamma_16_table;
    $139 = (($138) + ($137<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) + ($131<<1)|0);
    $142 = HEAP16[$141>>1]|0;
    $v = $142;
    $143 = $v;
    $144 = $143&65535;
    $145 = $144 >> 8;
    $146 = $145 & 255;
    $147 = $146&255;
    $148 = $sp;
    HEAP8[$148>>0] = $147;
    $149 = $v;
    $150 = $149&65535;
    $151 = $150 & 255;
    $152 = $151&255;
    $153 = $sp;
    $154 = ((($153)) + 1|0);
    HEAP8[$154>>0] = $152;
    $155 = $sp;
    $156 = ((($155)) + 2|0);
    $sp = $156;
    $157 = $i;
    $158 = (($157) + 1)|0;
    $i = $158;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 6:  {
  $159 = $0;
  $160 = ((($159)) + 9|0);
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = ($162|0)==(8);
  $164 = $1;
  $sp = $164;
  $i = 0;
  if ($163) {
   while(1) {
    $165 = $i;
    $166 = $row_width;
    $167 = ($165>>>0)<($166>>>0);
    if (!($167)) {
     break;
    }
    $168 = $sp;
    $169 = HEAP8[$168>>0]|0;
    $170 = $169&255;
    $171 = $gamma_table;
    $172 = (($171) + ($170)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = $sp;
    HEAP8[$174>>0] = $173;
    $175 = $sp;
    $176 = ((($175)) + 1|0);
    $sp = $176;
    $177 = $sp;
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $180 = $gamma_table;
    $181 = (($180) + ($179)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $sp;
    HEAP8[$183>>0] = $182;
    $184 = $sp;
    $185 = ((($184)) + 1|0);
    $sp = $185;
    $186 = $sp;
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $gamma_table;
    $190 = (($189) + ($188)|0);
    $191 = HEAP8[$190>>0]|0;
    $192 = $sp;
    HEAP8[$192>>0] = $191;
    $193 = $sp;
    $194 = ((($193)) + 1|0);
    $sp = $194;
    $195 = $sp;
    $196 = ((($195)) + 1|0);
    $sp = $196;
    $197 = $i;
    $198 = (($197) + 1)|0;
    $i = $198;
   }
   STACKTOP = sp;return;
  } else {
   while(1) {
    $199 = $i;
    $200 = $row_width;
    $201 = ($199>>>0)<($200>>>0);
    if (!($201)) {
     break;
    }
    $202 = $sp;
    $203 = HEAP8[$202>>0]|0;
    $204 = $203&255;
    $205 = $sp;
    $206 = ((($205)) + 1|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    $209 = $gamma_shift;
    $210 = $208 >> $209;
    $211 = $gamma_16_table;
    $212 = (($211) + ($210<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = (($213) + ($204<<1)|0);
    $215 = HEAP16[$214>>1]|0;
    $v1 = $215;
    $216 = $v1;
    $217 = $216&65535;
    $218 = $217 >> 8;
    $219 = $218 & 255;
    $220 = $219&255;
    $221 = $sp;
    HEAP8[$221>>0] = $220;
    $222 = $v1;
    $223 = $222&65535;
    $224 = $223 & 255;
    $225 = $224&255;
    $226 = $sp;
    $227 = ((($226)) + 1|0);
    HEAP8[$227>>0] = $225;
    $228 = $sp;
    $229 = ((($228)) + 2|0);
    $sp = $229;
    $230 = $sp;
    $231 = HEAP8[$230>>0]|0;
    $232 = $231&255;
    $233 = $sp;
    $234 = ((($233)) + 1|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = $235&255;
    $237 = $gamma_shift;
    $238 = $236 >> $237;
    $239 = $gamma_16_table;
    $240 = (($239) + ($238<<2)|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = (($241) + ($232<<1)|0);
    $243 = HEAP16[$242>>1]|0;
    $v1 = $243;
    $244 = $v1;
    $245 = $244&65535;
    $246 = $245 >> 8;
    $247 = $246 & 255;
    $248 = $247&255;
    $249 = $sp;
    HEAP8[$249>>0] = $248;
    $250 = $v1;
    $251 = $250&65535;
    $252 = $251 & 255;
    $253 = $252&255;
    $254 = $sp;
    $255 = ((($254)) + 1|0);
    HEAP8[$255>>0] = $253;
    $256 = $sp;
    $257 = ((($256)) + 2|0);
    $sp = $257;
    $258 = $sp;
    $259 = HEAP8[$258>>0]|0;
    $260 = $259&255;
    $261 = $sp;
    $262 = ((($261)) + 1|0);
    $263 = HEAP8[$262>>0]|0;
    $264 = $263&255;
    $265 = $gamma_shift;
    $266 = $264 >> $265;
    $267 = $gamma_16_table;
    $268 = (($267) + ($266<<2)|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($269) + ($260<<1)|0);
    $271 = HEAP16[$270>>1]|0;
    $v1 = $271;
    $272 = $v1;
    $273 = $272&65535;
    $274 = $273 >> 8;
    $275 = $274 & 255;
    $276 = $275&255;
    $277 = $sp;
    HEAP8[$277>>0] = $276;
    $278 = $v1;
    $279 = $278&65535;
    $280 = $279 & 255;
    $281 = $280&255;
    $282 = $sp;
    $283 = ((($282)) + 1|0);
    HEAP8[$283>>0] = $281;
    $284 = $sp;
    $285 = ((($284)) + 4|0);
    $sp = $285;
    $286 = $i;
    $287 = (($286) + 1)|0;
    $i = $287;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $288 = $0;
  $289 = ((($288)) + 9|0);
  $290 = HEAP8[$289>>0]|0;
  $291 = $290&255;
  $292 = ($291|0)==(8);
  $293 = $1;
  $sp = $293;
  $i = 0;
  if ($292) {
   while(1) {
    $294 = $i;
    $295 = $row_width;
    $296 = ($294>>>0)<($295>>>0);
    if (!($296)) {
     break;
    }
    $297 = $sp;
    $298 = HEAP8[$297>>0]|0;
    $299 = $298&255;
    $300 = $gamma_table;
    $301 = (($300) + ($299)|0);
    $302 = HEAP8[$301>>0]|0;
    $303 = $sp;
    HEAP8[$303>>0] = $302;
    $304 = $sp;
    $305 = ((($304)) + 2|0);
    $sp = $305;
    $306 = $i;
    $307 = (($306) + 1)|0;
    $i = $307;
   }
   STACKTOP = sp;return;
  } else {
   while(1) {
    $308 = $i;
    $309 = $row_width;
    $310 = ($308>>>0)<($309>>>0);
    if (!($310)) {
     break;
    }
    $311 = $sp;
    $312 = HEAP8[$311>>0]|0;
    $313 = $312&255;
    $314 = $sp;
    $315 = ((($314)) + 1|0);
    $316 = HEAP8[$315>>0]|0;
    $317 = $316&255;
    $318 = $gamma_shift;
    $319 = $317 >> $318;
    $320 = $gamma_16_table;
    $321 = (($320) + ($319<<2)|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (($322) + ($313<<1)|0);
    $324 = HEAP16[$323>>1]|0;
    $v2 = $324;
    $325 = $v2;
    $326 = $325&65535;
    $327 = $326 >> 8;
    $328 = $327 & 255;
    $329 = $328&255;
    $330 = $sp;
    HEAP8[$330>>0] = $329;
    $331 = $v2;
    $332 = $331&65535;
    $333 = $332 & 255;
    $334 = $333&255;
    $335 = $sp;
    $336 = ((($335)) + 1|0);
    HEAP8[$336>>0] = $334;
    $337 = $sp;
    $338 = ((($337)) + 4|0);
    $sp = $338;
    $339 = $i;
    $340 = (($339) + 1)|0;
    $i = $340;
   }
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $341 = $0;
  $342 = ((($341)) + 9|0);
  $343 = HEAP8[$342>>0]|0;
  $344 = $343&255;
  $345 = ($344|0)==(2);
  L37: do {
   if ($345) {
    $346 = $1;
    $sp = $346;
    $i = 0;
    while(1) {
     $347 = $i;
     $348 = $row_width;
     $349 = ($347>>>0)<($348>>>0);
     if (!($349)) {
      break L37;
     }
     $350 = $sp;
     $351 = HEAP8[$350>>0]|0;
     $352 = $351&255;
     $353 = $352 & 192;
     $a = $353;
     $354 = $sp;
     $355 = HEAP8[$354>>0]|0;
     $356 = $355&255;
     $357 = $356 & 48;
     $b = $357;
     $358 = $sp;
     $359 = HEAP8[$358>>0]|0;
     $360 = $359&255;
     $361 = $360 & 12;
     $c = $361;
     $362 = $sp;
     $363 = HEAP8[$362>>0]|0;
     $364 = $363&255;
     $365 = $364 & 3;
     $d = $365;
     $366 = $a;
     $367 = $a;
     $368 = $367 >> 2;
     $369 = $366 | $368;
     $370 = $a;
     $371 = $370 >> 4;
     $372 = $369 | $371;
     $373 = $a;
     $374 = $373 >> 6;
     $375 = $372 | $374;
     $376 = $gamma_table;
     $377 = (($376) + ($375)|0);
     $378 = HEAP8[$377>>0]|0;
     $379 = $378&255;
     $380 = $379 & 192;
     $381 = $b;
     $382 = $381 << 2;
     $383 = $b;
     $384 = $382 | $383;
     $385 = $b;
     $386 = $385 >> 2;
     $387 = $384 | $386;
     $388 = $b;
     $389 = $388 >> 4;
     $390 = $387 | $389;
     $391 = $gamma_table;
     $392 = (($391) + ($390)|0);
     $393 = HEAP8[$392>>0]|0;
     $394 = $393&255;
     $395 = $394 >> 2;
     $396 = $395 & 48;
     $397 = $380 | $396;
     $398 = $c;
     $399 = $398 << 4;
     $400 = $c;
     $401 = $400 << 2;
     $402 = $399 | $401;
     $403 = $c;
     $404 = $402 | $403;
     $405 = $c;
     $406 = $405 >> 2;
     $407 = $404 | $406;
     $408 = $gamma_table;
     $409 = (($408) + ($407)|0);
     $410 = HEAP8[$409>>0]|0;
     $411 = $410&255;
     $412 = $411 >> 4;
     $413 = $412 & 12;
     $414 = $397 | $413;
     $415 = $d;
     $416 = $415 << 6;
     $417 = $d;
     $418 = $417 << 4;
     $419 = $416 | $418;
     $420 = $d;
     $421 = $420 << 2;
     $422 = $419 | $421;
     $423 = $d;
     $424 = $422 | $423;
     $425 = $gamma_table;
     $426 = (($425) + ($424)|0);
     $427 = HEAP8[$426>>0]|0;
     $428 = $427&255;
     $429 = $428 >> 6;
     $430 = $414 | $429;
     $431 = $430&255;
     $432 = $sp;
     HEAP8[$432>>0] = $431;
     $433 = $sp;
     $434 = ((($433)) + 1|0);
     $sp = $434;
     $435 = $i;
     $436 = (($435) + 4)|0;
     $i = $436;
    }
   }
  } while(0);
  $437 = $0;
  $438 = ((($437)) + 9|0);
  $439 = HEAP8[$438>>0]|0;
  $440 = $439&255;
  $441 = ($440|0)==(4);
  if ($441) {
   $442 = $1;
   $sp = $442;
   $i = 0;
   while(1) {
    $443 = $i;
    $444 = $row_width;
    $445 = ($443>>>0)<($444>>>0);
    if (!($445)) {
     break;
    }
    $446 = $sp;
    $447 = HEAP8[$446>>0]|0;
    $448 = $447&255;
    $449 = $448 & 240;
    $msb = $449;
    $450 = $sp;
    $451 = HEAP8[$450>>0]|0;
    $452 = $451&255;
    $453 = $452 & 15;
    $lsb = $453;
    $454 = $msb;
    $455 = $msb;
    $456 = $455 >> 4;
    $457 = $454 | $456;
    $458 = $gamma_table;
    $459 = (($458) + ($457)|0);
    $460 = HEAP8[$459>>0]|0;
    $461 = $460&255;
    $462 = $461 & 240;
    $463 = $lsb;
    $464 = $463 << 4;
    $465 = $lsb;
    $466 = $464 | $465;
    $467 = $gamma_table;
    $468 = (($467) + ($466)|0);
    $469 = HEAP8[$468>>0]|0;
    $470 = $469&255;
    $471 = $470 >> 4;
    $472 = $462 | $471;
    $473 = $472&255;
    $474 = $sp;
    HEAP8[$474>>0] = $473;
    $475 = $sp;
    $476 = ((($475)) + 1|0);
    $sp = $476;
    $477 = $i;
    $478 = (($477) + 2)|0;
    $i = $478;
   }
   STACKTOP = sp;return;
  }
  $479 = $0;
  $480 = ((($479)) + 9|0);
  $481 = HEAP8[$480>>0]|0;
  $482 = $481&255;
  $483 = ($482|0)==(8);
  if ($483) {
   $484 = $1;
   $sp = $484;
   $i = 0;
   while(1) {
    $485 = $i;
    $486 = $row_width;
    $487 = ($485>>>0)<($486>>>0);
    if (!($487)) {
     break;
    }
    $488 = $sp;
    $489 = HEAP8[$488>>0]|0;
    $490 = $489&255;
    $491 = $gamma_table;
    $492 = (($491) + ($490)|0);
    $493 = HEAP8[$492>>0]|0;
    $494 = $sp;
    HEAP8[$494>>0] = $493;
    $495 = $sp;
    $496 = ((($495)) + 1|0);
    $sp = $496;
    $497 = $i;
    $498 = (($497) + 1)|0;
    $i = $498;
   }
   STACKTOP = sp;return;
  }
  $499 = $0;
  $500 = ((($499)) + 9|0);
  $501 = HEAP8[$500>>0]|0;
  $502 = $501&255;
  $503 = ($502|0)==(16);
  if (!($503)) {
   STACKTOP = sp;return;
  }
  $504 = $1;
  $sp = $504;
  $i = 0;
  while(1) {
   $505 = $i;
   $506 = $row_width;
   $507 = ($505>>>0)<($506>>>0);
   if (!($507)) {
    break;
   }
   $508 = $sp;
   $509 = HEAP8[$508>>0]|0;
   $510 = $509&255;
   $511 = $sp;
   $512 = ((($511)) + 1|0);
   $513 = HEAP8[$512>>0]|0;
   $514 = $513&255;
   $515 = $gamma_shift;
   $516 = $514 >> $515;
   $517 = $gamma_16_table;
   $518 = (($517) + ($516<<2)|0);
   $519 = HEAP32[$518>>2]|0;
   $520 = (($519) + ($510<<1)|0);
   $521 = HEAP16[$520>>1]|0;
   $v3 = $521;
   $522 = $v3;
   $523 = $522&65535;
   $524 = $523 >> 8;
   $525 = $524 & 255;
   $526 = $525&255;
   $527 = $sp;
   HEAP8[$527>>0] = $526;
   $528 = $v3;
   $529 = $528&65535;
   $530 = $529 & 255;
   $531 = $530&255;
   $532 = $sp;
   $533 = ((($532)) + 1|0);
   HEAP8[$533>>0] = $531;
   $534 = $sp;
   $535 = ((($534)) + 2|0);
   $sp = $535;
   $536 = $i;
   $537 = (($536) + 1)|0;
   $i = $537;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _png_do_encode_alpha($row_info,$row,$png_ptr) {
 $row_info = $row_info|0;
 $row = $row|0;
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gamma_shift = 0, $row_width = 0, $step = 0, $step2 = 0, $table = 0, $table1 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $png_ptr;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $row_width = $4;
 $5 = $0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 & 4;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $0;
   $12 = ((($11)) + 9|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ($14|0)==(8);
   if ($15) {
    $16 = $2;
    $17 = ((($16)) + 492|0);
    $18 = HEAP32[$17>>2]|0;
    $table = $18;
    $19 = $table;
    $20 = ($19|0)!=(0|0);
    if (!($20)) {
     break;
    }
    $21 = $0;
    $22 = ((($21)) + 8|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 & 2;
    $26 = ($25|0)!=(0);
    $27 = $26 ? 4 : 2;
    $step = $27;
    $28 = $step;
    $29 = (($28) - 1)|0;
    $30 = $1;
    $31 = (($30) + ($29)|0);
    $1 = $31;
    while(1) {
     $32 = $row_width;
     $33 = ($32>>>0)>(0);
     if (!($33)) {
      break;
     }
     $34 = $1;
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $37 = $table;
     $38 = (($37) + ($36)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $1;
     HEAP8[$40>>0] = $39;
     $41 = $row_width;
     $42 = (($41) + -1)|0;
     $row_width = $42;
     $43 = $step;
     $44 = $1;
     $45 = (($44) + ($43)|0);
     $1 = $45;
    }
    STACKTOP = sp;return;
   }
   $46 = $0;
   $47 = ((($46)) + 9|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = ($49|0)==(16);
   if ($50) {
    $51 = $2;
    $52 = ((($51)) + 500|0);
    $53 = HEAP32[$52>>2]|0;
    $table1 = $53;
    $54 = $2;
    $55 = ((($54)) + 476|0);
    $56 = HEAP32[$55>>2]|0;
    $gamma_shift = $56;
    $57 = $table1;
    $58 = ($57|0)!=(0|0);
    if ($58) {
     $59 = $0;
     $60 = ((($59)) + 8|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $62 & 2;
     $64 = ($63|0)!=(0);
     $65 = $64 ? 8 : 4;
     $step2 = $65;
     $66 = $step2;
     $67 = (($66) - 2)|0;
     $68 = $1;
     $69 = (($68) + ($67)|0);
     $1 = $69;
     while(1) {
      $70 = $row_width;
      $71 = ($70>>>0)>(0);
      if (!($71)) {
       break;
      }
      $72 = $1;
      $73 = HEAP8[$72>>0]|0;
      $74 = $73&255;
      $75 = $1;
      $76 = ((($75)) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = $77&255;
      $79 = $gamma_shift;
      $80 = $78 >> $79;
      $81 = $table1;
      $82 = (($81) + ($80<<2)|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + ($74<<1)|0);
      $85 = HEAP16[$84>>1]|0;
      $v = $85;
      $86 = $v;
      $87 = $86&65535;
      $88 = $87 >> 8;
      $89 = $88 & 255;
      $90 = $89&255;
      $91 = $1;
      HEAP8[$91>>0] = $90;
      $92 = $v;
      $93 = $92&65535;
      $94 = $93 & 255;
      $95 = $94&255;
      $96 = $1;
      $97 = ((($96)) + 1|0);
      HEAP8[$97>>0] = $95;
      $98 = $row_width;
      $99 = (($98) + -1)|0;
      $row_width = $99;
      $100 = $step2;
      $101 = $1;
      $102 = (($101) + ($100)|0);
      $1 = $102;
     }
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $103 = $2;
 _png_warning($103,16121);
 STACKTOP = sp;return;
}
function _png_do_scale_16_to_8($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $ep = 0, $sp = 0, $tmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(16);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $sp = $7;
 $8 = $1;
 $dp = $8;
 $9 = $sp;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + ($12)|0);
 $ep = $13;
 while(1) {
  $14 = $sp;
  $15 = $ep;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $sp;
  $18 = ((($17)) + 1|0);
  $sp = $18;
  $19 = HEAP8[$17>>0]|0;
  $20 = $19&255;
  $tmp = $20;
  $21 = $sp;
  $22 = ((($21)) + 1|0);
  $sp = $22;
  $23 = HEAP8[$21>>0]|0;
  $24 = $23&255;
  $25 = $tmp;
  $26 = (($24) - ($25))|0;
  $27 = (($26) + 128)|0;
  $28 = ($27*65535)|0;
  $29 = $28 >> 24;
  $30 = $tmp;
  $31 = (($30) + ($29))|0;
  $tmp = $31;
  $32 = $tmp;
  $33 = $32&255;
  $34 = $dp;
  $35 = ((($34)) + 1|0);
  $dp = $35;
  HEAP8[$34>>0] = $33;
 }
 $36 = $0;
 $37 = ((($36)) + 9|0);
 HEAP8[$37>>0] = 8;
 $38 = $0;
 $39 = ((($38)) + 10|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41<<3;
 $43 = $42&255;
 $44 = $0;
 $45 = ((($44)) + 11|0);
 HEAP8[$45>>0] = $43;
 $46 = $0;
 $47 = HEAP32[$46>>2]|0;
 $48 = $0;
 $49 = ((($48)) + 10|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = Math_imul($47, $51)|0;
 $53 = $0;
 $54 = ((($53)) + 4|0);
 HEAP32[$54>>2] = $52;
 STACKTOP = sp;return;
}
function _png_do_chop($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dp = 0, $ep = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(16);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $sp = $7;
 $8 = $1;
 $dp = $8;
 $9 = $sp;
 $10 = $0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + ($12)|0);
 $ep = $13;
 while(1) {
  $14 = $sp;
  $15 = $ep;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $sp;
  $18 = HEAP8[$17>>0]|0;
  $19 = $dp;
  $20 = ((($19)) + 1|0);
  $dp = $20;
  HEAP8[$19>>0] = $18;
  $21 = $sp;
  $22 = ((($21)) + 2|0);
  $sp = $22;
 }
 $23 = $0;
 $24 = ((($23)) + 9|0);
 HEAP8[$24>>0] = 8;
 $25 = $0;
 $26 = ((($25)) + 10|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28<<3;
 $30 = $29&255;
 $31 = $0;
 $32 = ((($31)) + 11|0);
 HEAP8[$32>>0] = $30;
 $33 = $0;
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = ((($35)) + 10|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = Math_imul($34, $38)|0;
 $40 = $0;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 STACKTOP = sp;return;
}
function _png_do_quantize($row_info,$row,$palette_lookup,$quantize_lookup) {
 $row_info = $row_info|0;
 $row = $row|0;
 $palette_lookup = $palette_lookup|0;
 $quantize_lookup = $quantize_lookup|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0;
 var $b3 = 0, $dp = 0, $g = 0, $g2 = 0, $i = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $p4 = 0, $r = 0, $r1 = 0, $row_width = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $palette_lookup;
 $3 = $quantize_lookup;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $row_width = $5;
 $6 = $0;
 $7 = ((($6)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)==(8);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(2);
 $16 = $2;
 $17 = ($16|0)!=(0|0);
 $or$cond = $15 & $17;
 if ($or$cond) {
  $18 = $1;
  $sp = $18;
  $19 = $1;
  $dp = $19;
  $i = 0;
  while(1) {
   $20 = $i;
   $21 = $row_width;
   $22 = ($20>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $sp;
   $24 = ((($23)) + 1|0);
   $sp = $24;
   $25 = HEAP8[$23>>0]|0;
   $26 = $25&255;
   $r = $26;
   $27 = $sp;
   $28 = ((($27)) + 1|0);
   $sp = $28;
   $29 = HEAP8[$27>>0]|0;
   $30 = $29&255;
   $g = $30;
   $31 = $sp;
   $32 = ((($31)) + 1|0);
   $sp = $32;
   $33 = HEAP8[$31>>0]|0;
   $34 = $33&255;
   $b = $34;
   $35 = $r;
   $36 = $35 >> 3;
   $37 = $36 & 31;
   $38 = $37 << 10;
   $39 = $g;
   $40 = $39 >> 3;
   $41 = $40 & 31;
   $42 = $41 << 5;
   $43 = $38 | $42;
   $44 = $b;
   $45 = $44 >> 3;
   $46 = $45 & 31;
   $47 = $43 | $46;
   $p = $47;
   $48 = $p;
   $49 = $2;
   $50 = (($49) + ($48)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $dp;
   $53 = ((($52)) + 1|0);
   $dp = $53;
   HEAP8[$52>>0] = $51;
   $54 = $i;
   $55 = (($54) + 1)|0;
   $i = $55;
  }
  $56 = $0;
  $57 = ((($56)) + 8|0);
  HEAP8[$57>>0] = 3;
  $58 = $0;
  $59 = ((($58)) + 10|0);
  HEAP8[$59>>0] = 1;
  $60 = $0;
  $61 = ((($60)) + 9|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $0;
  $64 = ((($63)) + 11|0);
  HEAP8[$64>>0] = $62;
  $65 = $0;
  $66 = ((($65)) + 11|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = ($68|0)>=(8);
  $70 = $row_width;
  $71 = $0;
  $72 = ((($71)) + 11|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  if ($69) {
   $75 = $74 >>> 3;
   $76 = Math_imul($70, $75)|0;
   $82 = $76;
  } else {
   $77 = Math_imul($70, $74)|0;
   $78 = (($77) + 7)|0;
   $79 = $78 >>> 3;
   $82 = $79;
  }
  $80 = $0;
  $81 = ((($80)) + 4|0);
  HEAP32[$81>>2] = $82;
  STACKTOP = sp;return;
 }
 $83 = $0;
 $84 = ((($83)) + 8|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = $85&255;
 $87 = ($86|0)==(6);
 $88 = $2;
 $89 = ($88|0)!=(0|0);
 $or$cond3 = $87 & $89;
 if (!($or$cond3)) {
  $157 = $0;
  $158 = ((($157)) + 8|0);
  $159 = HEAP8[$158>>0]|0;
  $160 = $159&255;
  $161 = ($160|0)==(3);
  $162 = $3;
  $163 = ($162|0)!=(0|0);
  $or$cond5 = $161 & $163;
  if (!($or$cond5)) {
   STACKTOP = sp;return;
  }
  $164 = $1;
  $sp = $164;
  $i = 0;
  while(1) {
   $165 = $i;
   $166 = $row_width;
   $167 = ($165>>>0)<($166>>>0);
   if (!($167)) {
    break;
   }
   $168 = $sp;
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = $3;
   $172 = (($171) + ($170)|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $sp;
   HEAP8[$174>>0] = $173;
   $175 = $i;
   $176 = (($175) + 1)|0;
   $i = $176;
   $177 = $sp;
   $178 = ((($177)) + 1|0);
   $sp = $178;
  }
  STACKTOP = sp;return;
 }
 $90 = $1;
 $sp = $90;
 $91 = $1;
 $dp = $91;
 $i = 0;
 while(1) {
  $92 = $i;
  $93 = $row_width;
  $94 = ($92>>>0)<($93>>>0);
  if (!($94)) {
   break;
  }
  $95 = $sp;
  $96 = ((($95)) + 1|0);
  $sp = $96;
  $97 = HEAP8[$95>>0]|0;
  $98 = $97&255;
  $r1 = $98;
  $99 = $sp;
  $100 = ((($99)) + 1|0);
  $sp = $100;
  $101 = HEAP8[$99>>0]|0;
  $102 = $101&255;
  $g2 = $102;
  $103 = $sp;
  $104 = ((($103)) + 1|0);
  $sp = $104;
  $105 = HEAP8[$103>>0]|0;
  $106 = $105&255;
  $b3 = $106;
  $107 = $sp;
  $108 = ((($107)) + 1|0);
  $sp = $108;
  $109 = $r1;
  $110 = $109 >> 3;
  $111 = $110 & 31;
  $112 = $111 << 10;
  $113 = $g2;
  $114 = $113 >> 3;
  $115 = $114 & 31;
  $116 = $115 << 5;
  $117 = $112 | $116;
  $118 = $b3;
  $119 = $118 >> 3;
  $120 = $119 & 31;
  $121 = $117 | $120;
  $p4 = $121;
  $122 = $p4;
  $123 = $2;
  $124 = (($123) + ($122)|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $dp;
  $127 = ((($126)) + 1|0);
  $dp = $127;
  HEAP8[$126>>0] = $125;
  $128 = $i;
  $129 = (($128) + 1)|0;
  $i = $129;
 }
 $130 = $0;
 $131 = ((($130)) + 8|0);
 HEAP8[$131>>0] = 3;
 $132 = $0;
 $133 = ((($132)) + 10|0);
 HEAP8[$133>>0] = 1;
 $134 = $0;
 $135 = ((($134)) + 9|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $0;
 $138 = ((($137)) + 11|0);
 HEAP8[$138>>0] = $136;
 $139 = $0;
 $140 = ((($139)) + 11|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = $141&255;
 $143 = ($142|0)>=(8);
 $144 = $row_width;
 $145 = $0;
 $146 = ((($145)) + 11|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&255;
 if ($143) {
  $149 = $148 >>> 3;
  $150 = Math_imul($144, $149)|0;
  $156 = $150;
 } else {
  $151 = Math_imul($144, $148)|0;
  $152 = (($151) + 7)|0;
  $153 = $152 >>> 3;
  $156 = $153;
 }
 $154 = $0;
 $155 = ((($154)) + 4|0);
 HEAP32[$155>>2] = $156;
 STACKTOP = sp;return;
}
function _png_do_expand_16($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, $sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(8);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10|0)!=(3);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = $0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($12) + ($15)|0);
 $sp = $16;
 $17 = $sp;
 $18 = $0;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20)|0);
 $dp = $21;
 while(1) {
  $22 = $dp;
  $23 = $sp;
  $24 = ($22>>>0)>($23>>>0);
  if (!($24)) {
   break;
  }
  $25 = $sp;
  $26 = ((($25)) + -1|0);
  $sp = $26;
  $27 = HEAP8[$26>>0]|0;
  $28 = $dp;
  $29 = ((($28)) + -1|0);
  HEAP8[$29>>0] = $27;
  $30 = $dp;
  $31 = ((($30)) + -2|0);
  HEAP8[$31>>0] = $27;
  $32 = $dp;
  $33 = ((($32)) + -2|0);
  $dp = $33;
 }
 $34 = $0;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36<<1;
 HEAP32[$35>>2] = $37;
 $38 = $0;
 $39 = ((($38)) + 9|0);
 HEAP8[$39>>0] = 16;
 $40 = $0;
 $41 = ((($40)) + 10|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43<<4;
 $45 = $44&255;
 $46 = $0;
 $47 = ((($46)) + 11|0);
 HEAP8[$47>>0] = $45;
 STACKTOP = sp;return;
}
function _png_do_read_invert_alpha($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0;
 var $dp2 = 0, $dp5 = 0, $dp8 = 0, $i = 0, $i3 = 0, $i6 = 0, $i9 = 0, $row_width = 0, $sp = 0, $sp1 = 0, $sp4 = 0, $sp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $row_width = $3;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(6);
 $9 = $0;
 if ($8) {
  $10 = ((($9)) + 9|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(8);
  $14 = $1;
  $15 = $0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($14) + ($17)|0);
  if ($13) {
   $sp = $18;
   $19 = $sp;
   $dp = $19;
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $row_width;
    $22 = ($20>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $sp;
    $24 = ((($23)) + -1|0);
    $sp = $24;
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (255 - ($26))|0;
    $28 = $27&255;
    $29 = $dp;
    $30 = ((($29)) + -1|0);
    $dp = $30;
    HEAP8[$30>>0] = $28;
    $31 = $sp;
    $32 = ((($31)) + -3|0);
    $sp = $32;
    $33 = $sp;
    $dp = $33;
    $34 = $i;
    $35 = (($34) + 1)|0;
    $i = $35;
   }
   STACKTOP = sp;return;
  } else {
   $sp1 = $18;
   $36 = $sp1;
   $dp2 = $36;
   $i3 = 0;
   while(1) {
    $37 = $i3;
    $38 = $row_width;
    $39 = ($37>>>0)<($38>>>0);
    if (!($39)) {
     break;
    }
    $40 = $sp1;
    $41 = ((($40)) + -1|0);
    $sp1 = $41;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = (255 - ($43))|0;
    $45 = $44&255;
    $46 = $dp2;
    $47 = ((($46)) + -1|0);
    $dp2 = $47;
    HEAP8[$47>>0] = $45;
    $48 = $sp1;
    $49 = ((($48)) + -1|0);
    $sp1 = $49;
    $50 = HEAP8[$49>>0]|0;
    $51 = $50&255;
    $52 = (255 - ($51))|0;
    $53 = $52&255;
    $54 = $dp2;
    $55 = ((($54)) + -1|0);
    $dp2 = $55;
    HEAP8[$55>>0] = $53;
    $56 = $sp1;
    $57 = ((($56)) + -6|0);
    $sp1 = $57;
    $58 = $sp1;
    $dp2 = $58;
    $59 = $i3;
    $60 = (($59) + 1)|0;
    $i3 = $60;
   }
   STACKTOP = sp;return;
  }
 }
 $61 = ((($9)) + 8|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = ($63|0)==(4);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $0;
 $66 = ((($65)) + 9|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = ($68|0)==(8);
 $70 = $1;
 $71 = $0;
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($70) + ($73)|0);
 if ($69) {
  $sp4 = $74;
  $75 = $sp4;
  $dp5 = $75;
  $i6 = 0;
  while(1) {
   $76 = $i6;
   $77 = $row_width;
   $78 = ($76>>>0)<($77>>>0);
   if (!($78)) {
    break;
   }
   $79 = $sp4;
   $80 = ((($79)) + -1|0);
   $sp4 = $80;
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = (255 - ($82))|0;
   $84 = $83&255;
   $85 = $dp5;
   $86 = ((($85)) + -1|0);
   $dp5 = $86;
   HEAP8[$86>>0] = $84;
   $87 = $sp4;
   $88 = ((($87)) + -1|0);
   $sp4 = $88;
   $89 = HEAP8[$88>>0]|0;
   $90 = $dp5;
   $91 = ((($90)) + -1|0);
   $dp5 = $91;
   HEAP8[$91>>0] = $89;
   $92 = $i6;
   $93 = (($92) + 1)|0;
   $i6 = $93;
  }
  STACKTOP = sp;return;
 } else {
  $sp7 = $74;
  $94 = $sp7;
  $dp8 = $94;
  $i9 = 0;
  while(1) {
   $95 = $i9;
   $96 = $row_width;
   $97 = ($95>>>0)<($96>>>0);
   if (!($97)) {
    break;
   }
   $98 = $sp7;
   $99 = ((($98)) + -1|0);
   $sp7 = $99;
   $100 = HEAP8[$99>>0]|0;
   $101 = $100&255;
   $102 = (255 - ($101))|0;
   $103 = $102&255;
   $104 = $dp8;
   $105 = ((($104)) + -1|0);
   $dp8 = $105;
   HEAP8[$105>>0] = $103;
   $106 = $sp7;
   $107 = ((($106)) + -1|0);
   $sp7 = $107;
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = (255 - ($109))|0;
   $111 = $110&255;
   $112 = $dp8;
   $113 = ((($112)) + -1|0);
   $dp8 = $113;
   HEAP8[$113>>0] = $111;
   $114 = $sp7;
   $115 = ((($114)) + -2|0);
   $sp7 = $115;
   $116 = $sp7;
   $dp8 = $116;
   $117 = $i9;
   $118 = (($117) + 1)|0;
   $i9 = $118;
  }
  STACKTOP = sp;return;
 }
}
function _png_do_unshift($row_info,$row,$sig_bits) {
 $row_info = $row_info|0;
 $row = $row|0;
 $sig_bits = $sig_bits|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b3 = 0, $b6 = 0, $bit_depth = 0, $bp = 0, $bp1 = 0, $bp4 = 0, $bp7 = 0, $bp_end = 0, $bp_end2 = 0, $bp_end5 = 0, $bp_end8 = 0, $c = 0;
 var $channel = 0, $channel9 = 0, $channels = 0, $color_type = 0, $gray_shift = 0, $have_shift = 0, $mask = 0, $shift = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $shift = sp + 80|0;
 $0 = $row_info;
 $1 = $row;
 $2 = $sig_bits;
 $3 = $0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $color_type = $6;
 $7 = $color_type;
 $8 = ($7|0)!=(3);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $channels = 0;
 $9 = $0;
 $10 = ((($9)) + 9|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $bit_depth = $12;
 $13 = $color_type;
 $14 = $13 & 2;
 $15 = ($14|0)!=(0);
 $16 = $bit_depth;
 $17 = $2;
 if ($15) {
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($16) - ($19))|0;
  $21 = $channels;
  $22 = (($21) + 1)|0;
  $channels = $22;
  $23 = (($shift) + ($21<<2)|0);
  HEAP32[$23>>2] = $20;
  $24 = $bit_depth;
  $25 = $2;
  $26 = ((($25)) + 1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) - ($28))|0;
  $30 = $channels;
  $31 = (($30) + 1)|0;
  $channels = $31;
  $32 = (($shift) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $bit_depth;
  $34 = $2;
  $35 = ((($34)) + 2|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($33) - ($37))|0;
  $39 = $channels;
  $40 = (($39) + 1)|0;
  $channels = $40;
  $41 = (($shift) + ($39<<2)|0);
  HEAP32[$41>>2] = $38;
 } else {
  $42 = ((($17)) + 3|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($16) - ($44))|0;
  $46 = $channels;
  $47 = (($46) + 1)|0;
  $channels = $47;
  $48 = (($shift) + ($46<<2)|0);
  HEAP32[$48>>2] = $45;
 }
 $49 = $color_type;
 $50 = $49 & 4;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $bit_depth;
  $53 = $2;
  $54 = ((($53)) + 4|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($52) - ($56))|0;
  $58 = $channels;
  $59 = (($58) + 1)|0;
  $channels = $59;
  $60 = (($shift) + ($58<<2)|0);
  HEAP32[$60>>2] = $57;
 }
 $have_shift = 0;
 $c = 0;
 while(1) {
  $61 = $c;
  $62 = $channels;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $c;
  $65 = (($shift) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)<=(0);
  if ($67) {
   label = 11;
  } else {
   $68 = $c;
   $69 = (($shift) + ($68<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $bit_depth;
   $72 = ($70|0)>=($71|0);
   if ($72) {
    label = 11;
   } else {
    $have_shift = 1;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $73 = $c;
   $74 = (($shift) + ($73<<2)|0);
   HEAP32[$74>>2] = 0;
  }
  $75 = $c;
  $76 = (($75) + 1)|0;
  $c = $76;
 }
 $77 = $have_shift;
 $78 = ($77|0)==(0);
 if ($78) {
  STACKTOP = sp;return;
 }
 $79 = $bit_depth;
 switch ($79|0) {
 case 2:  {
  $80 = $1;
  $bp = $80;
  $81 = $bp;
  $82 = $0;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($81) + ($84)|0);
  $bp_end = $85;
  while(1) {
   $86 = $bp;
   $87 = $bp_end;
   $88 = ($86>>>0)<($87>>>0);
   if (!($88)) {
    break;
   }
   $89 = $bp;
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 >> 1;
   $93 = $92 & 85;
   $b = $93;
   $94 = $b;
   $95 = $94&255;
   $96 = $bp;
   $97 = ((($96)) + 1|0);
   $bp = $97;
   HEAP8[$96>>0] = $95;
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $98 = $1;
  $bp1 = $98;
  $99 = $bp1;
  $100 = $0;
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($99) + ($102)|0);
  $bp_end2 = $103;
  $104 = HEAP32[$shift>>2]|0;
  $gray_shift = $104;
  $105 = $gray_shift;
  $106 = 15 >> $105;
  $mask = $106;
  $107 = $mask;
  $108 = $107 << 4;
  $109 = $mask;
  $110 = $109 | $108;
  $mask = $110;
  while(1) {
   $111 = $bp1;
   $112 = $bp_end2;
   $113 = ($111>>>0)<($112>>>0);
   if (!($113)) {
    break;
   }
   $114 = $bp1;
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = $gray_shift;
   $118 = $116 >> $117;
   $119 = $mask;
   $120 = $118 & $119;
   $b3 = $120;
   $121 = $b3;
   $122 = $121&255;
   $123 = $bp1;
   $124 = ((($123)) + 1|0);
   $bp1 = $124;
   HEAP8[$123>>0] = $122;
  }
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $125 = $1;
  $bp4 = $125;
  $126 = $bp4;
  $127 = $0;
  $128 = ((($127)) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($126) + ($129)|0);
  $bp_end5 = $130;
  $channel = 0;
  while(1) {
   $131 = $bp4;
   $132 = $bp_end5;
   $133 = ($131>>>0)<($132>>>0);
   if (!($133)) {
    break;
   }
   $134 = $bp4;
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = $channel;
   $138 = (($shift) + ($137<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $136 >> $139;
   $b6 = $140;
   $141 = $channel;
   $142 = (($141) + 1)|0;
   $channel = $142;
   $143 = $channels;
   $144 = ($142|0)>=($143|0);
   $$ = $144 ? 0 : $142;
   $channel = $$;
   $145 = $b6;
   $146 = $145&255;
   $147 = $bp4;
   $148 = ((($147)) + 1|0);
   $bp4 = $148;
   HEAP8[$147>>0] = $146;
  }
  STACKTOP = sp;return;
  break;
 }
 case 16:  {
  $149 = $1;
  $bp7 = $149;
  $150 = $bp7;
  $151 = $0;
  $152 = ((($151)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) + ($153)|0);
  $bp_end8 = $154;
  $channel9 = 0;
  while(1) {
   $155 = $bp7;
   $156 = $bp_end8;
   $157 = ($155>>>0)<($156>>>0);
   if (!($157)) {
    break;
   }
   $158 = $bp7;
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = $160 << 8;
   $162 = $bp7;
   $163 = ((($162)) + 1|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = (($161) + ($165))|0;
   $value = $166;
   $167 = $channel9;
   $168 = (($shift) + ($167<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $value;
   $171 = $170 >> $169;
   $value = $171;
   $172 = $channel9;
   $173 = (($172) + 1)|0;
   $channel9 = $173;
   $174 = $channels;
   $175 = ($173|0)>=($174|0);
   $$1 = $175 ? 0 : $173;
   $channel9 = $$1;
   $176 = $value;
   $177 = $176 >> 8;
   $178 = $177&255;
   $179 = $bp7;
   $180 = ((($179)) + 1|0);
   $bp7 = $180;
   HEAP8[$179>>0] = $178;
   $181 = $value;
   $182 = $181&255;
   $183 = $bp7;
   $184 = ((($183)) + 1|0);
   $bp7 = $184;
   HEAP8[$183>>0] = $182;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _png_do_unpack($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp2 = 0, $dp5 = 0, $i = 0, $row_width = 0, $shift = 0, $shift3 = 0;
 var $shift6 = 0, $sp = 0, $sp1 = 0, $sp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)<(8);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = HEAP32[$7>>2]|0;
 $row_width = $8;
 $9 = $0;
 $10 = ((($9)) + 9|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 L4: do {
  switch ($12|0) {
  case 1:  {
   $13 = $1;
   $14 = $row_width;
   $15 = (($14) - 1)|0;
   $16 = $15 >>> 3;
   $17 = (($13) + ($16)|0);
   $sp = $17;
   $18 = $1;
   $19 = $row_width;
   $20 = (($18) + ($19)|0);
   $21 = ((($20)) + -1|0);
   $dp = $21;
   $22 = $row_width;
   $23 = (($22) + 7)|0;
   $24 = $23 & 7;
   $25 = (7 - ($24))|0;
   $shift = $25;
   $i = 0;
   while(1) {
    $26 = $i;
    $27 = $row_width;
    $28 = ($26>>>0)<($27>>>0);
    if (!($28)) {
     break L4;
    }
    $29 = $sp;
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $shift;
    $33 = $31 >> $32;
    $34 = $33 & 1;
    $35 = $34&255;
    $36 = $dp;
    HEAP8[$36>>0] = $35;
    $37 = $shift;
    $38 = ($37|0)==(7);
    if ($38) {
     $shift = 0;
     $39 = $sp;
     $40 = ((($39)) + -1|0);
     $sp = $40;
    } else {
     $41 = $shift;
     $42 = (($41) + 1)|0;
     $shift = $42;
    }
    $43 = $dp;
    $44 = ((($43)) + -1|0);
    $dp = $44;
    $45 = $i;
    $46 = (($45) + 1)|0;
    $i = $46;
   }
   break;
  }
  case 2:  {
   $47 = $1;
   $48 = $row_width;
   $49 = (($48) - 1)|0;
   $50 = $49 >>> 2;
   $51 = (($47) + ($50)|0);
   $sp1 = $51;
   $52 = $1;
   $53 = $row_width;
   $54 = (($52) + ($53)|0);
   $55 = ((($54)) + -1|0);
   $dp2 = $55;
   $56 = $row_width;
   $57 = (($56) + 3)|0;
   $58 = $57 & 3;
   $59 = (3 - ($58))|0;
   $60 = $59 << 1;
   $shift3 = $60;
   $i = 0;
   while(1) {
    $61 = $i;
    $62 = $row_width;
    $63 = ($61>>>0)<($62>>>0);
    if (!($63)) {
     break L4;
    }
    $64 = $sp1;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = $shift3;
    $68 = $66 >> $67;
    $69 = $68 & 3;
    $70 = $69&255;
    $71 = $dp2;
    HEAP8[$71>>0] = $70;
    $72 = $shift3;
    $73 = ($72|0)==(6);
    if ($73) {
     $shift3 = 0;
     $74 = $sp1;
     $75 = ((($74)) + -1|0);
     $sp1 = $75;
    } else {
     $76 = $shift3;
     $77 = (($76) + 2)|0;
     $shift3 = $77;
    }
    $78 = $dp2;
    $79 = ((($78)) + -1|0);
    $dp2 = $79;
    $80 = $i;
    $81 = (($80) + 1)|0;
    $i = $81;
   }
   break;
  }
  case 4:  {
   $82 = $1;
   $83 = $row_width;
   $84 = (($83) - 1)|0;
   $85 = $84 >>> 1;
   $86 = (($82) + ($85)|0);
   $sp4 = $86;
   $87 = $1;
   $88 = $row_width;
   $89 = (($87) + ($88)|0);
   $90 = ((($89)) + -1|0);
   $dp5 = $90;
   $91 = $row_width;
   $92 = (($91) + 1)|0;
   $93 = $92 & 1;
   $94 = (1 - ($93))|0;
   $95 = $94 << 2;
   $shift6 = $95;
   $i = 0;
   while(1) {
    $96 = $i;
    $97 = $row_width;
    $98 = ($96>>>0)<($97>>>0);
    if (!($98)) {
     break L4;
    }
    $99 = $sp4;
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = $shift6;
    $103 = $101 >> $102;
    $104 = $103 & 15;
    $105 = $104&255;
    $106 = $dp5;
    HEAP8[$106>>0] = $105;
    $107 = $shift6;
    $108 = ($107|0)==(4);
    if ($108) {
     $shift6 = 0;
     $109 = $sp4;
     $110 = ((($109)) + -1|0);
     $sp4 = $110;
    } else {
     $shift6 = 4;
    }
    $111 = $dp5;
    $112 = ((($111)) + -1|0);
    $dp5 = $112;
    $113 = $i;
    $114 = (($113) + 1)|0;
    $i = $114;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $115 = $0;
 $116 = ((($115)) + 9|0);
 HEAP8[$116>>0] = 8;
 $117 = $0;
 $118 = ((($117)) + 10|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $120<<3;
 $122 = $121&255;
 $123 = $0;
 $124 = ((($123)) + 11|0);
 HEAP8[$124>>0] = $122;
 $125 = $row_width;
 $126 = $0;
 $127 = ((($126)) + 10|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = $128&255;
 $130 = Math_imul($125, $129)|0;
 $131 = $0;
 $132 = ((($131)) + 4|0);
 HEAP32[$132>>2] = $130;
 STACKTOP = sp;return;
}
function _png_do_read_filler($row_info,$row,$filler,$flags) {
 $row_info = $row_info|0;
 $row = $row|0;
 $filler = $filler|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp10 = 0, $dp12 = 0, $dp14 = 0, $dp2 = 0;
 var $dp4 = 0, $dp6 = 0, $dp8 = 0, $hi_filler = 0, $i = 0, $lo_filler = 0, $row_width = 0, $sp = 0, $sp1 = 0, $sp11 = 0, $sp13 = 0, $sp3 = 0, $sp5 = 0, $sp7 = 0, $sp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $filler;
 $3 = $flags;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $row_width = $5;
 $6 = $2;
 $7 = $6 >>> 8;
 $8 = $7&255;
 $hi_filler = $8;
 $9 = $2;
 $10 = $9&255;
 $lo_filler = $10;
 $11 = $0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)==(0);
 $16 = $0;
 if ($15) {
  $17 = ((($16)) + 9|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($19|0)==(8);
  if ($20) {
   $21 = $3;
   $22 = $21 & 128;
   $23 = ($22|0)!=(0);
   $24 = $1;
   $25 = $row_width;
   $26 = (($24) + ($25)|0);
   if ($23) {
    $sp = $26;
    $27 = $sp;
    $28 = $row_width;
    $29 = (($27) + ($28)|0);
    $dp = $29;
    $i = 1;
    while(1) {
     $30 = $i;
     $31 = $row_width;
     $32 = ($30>>>0)<($31>>>0);
     $33 = $lo_filler;
     $34 = $dp;
     $35 = ((($34)) + -1|0);
     $dp = $35;
     HEAP8[$35>>0] = $33;
     if (!($32)) {
      break;
     }
     $36 = $sp;
     $37 = ((($36)) + -1|0);
     $sp = $37;
     $38 = HEAP8[$37>>0]|0;
     $39 = $dp;
     $40 = ((($39)) + -1|0);
     $dp = $40;
     HEAP8[$40>>0] = $38;
     $41 = $i;
     $42 = (($41) + 1)|0;
     $i = $42;
    }
    $43 = $0;
    $44 = ((($43)) + 10|0);
    HEAP8[$44>>0] = 2;
    $45 = $0;
    $46 = ((($45)) + 11|0);
    HEAP8[$46>>0] = 16;
    $47 = $row_width;
    $48 = $47<<1;
    $49 = $0;
    $50 = ((($49)) + 4|0);
    HEAP32[$50>>2] = $48;
    STACKTOP = sp;return;
   } else {
    $sp1 = $26;
    $51 = $sp1;
    $52 = $row_width;
    $53 = (($51) + ($52)|0);
    $dp2 = $53;
    $i = 0;
    while(1) {
     $54 = $i;
     $55 = $row_width;
     $56 = ($54>>>0)<($55>>>0);
     if (!($56)) {
      break;
     }
     $57 = $sp1;
     $58 = ((($57)) + -1|0);
     $sp1 = $58;
     $59 = HEAP8[$58>>0]|0;
     $60 = $dp2;
     $61 = ((($60)) + -1|0);
     $dp2 = $61;
     HEAP8[$61>>0] = $59;
     $62 = $lo_filler;
     $63 = $dp2;
     $64 = ((($63)) + -1|0);
     $dp2 = $64;
     HEAP8[$64>>0] = $62;
     $65 = $i;
     $66 = (($65) + 1)|0;
     $i = $66;
    }
    $67 = $0;
    $68 = ((($67)) + 10|0);
    HEAP8[$68>>0] = 2;
    $69 = $0;
    $70 = ((($69)) + 11|0);
    HEAP8[$70>>0] = 16;
    $71 = $row_width;
    $72 = $71<<1;
    $73 = $0;
    $74 = ((($73)) + 4|0);
    HEAP32[$74>>2] = $72;
    STACKTOP = sp;return;
   }
  }
  $75 = $0;
  $76 = ((($75)) + 9|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = ($78|0)==(16);
  if (!($79)) {
   STACKTOP = sp;return;
  }
  $80 = $3;
  $81 = $80 & 128;
  $82 = ($81|0)!=(0);
  $83 = $1;
  $84 = $row_width;
  $85 = $84<<1;
  $86 = (($83) + ($85)|0);
  if ($82) {
   $sp3 = $86;
   $87 = $sp3;
   $88 = $row_width;
   $89 = $88<<1;
   $90 = (($87) + ($89)|0);
   $dp4 = $90;
   $i = 1;
   while(1) {
    $91 = $i;
    $92 = $row_width;
    $93 = ($91>>>0)<($92>>>0);
    $94 = $lo_filler;
    $95 = $dp4;
    $96 = ((($95)) + -1|0);
    $dp4 = $96;
    HEAP8[$96>>0] = $94;
    $97 = $hi_filler;
    $98 = $dp4;
    $99 = ((($98)) + -1|0);
    $dp4 = $99;
    HEAP8[$99>>0] = $97;
    if (!($93)) {
     break;
    }
    $100 = $sp3;
    $101 = ((($100)) + -1|0);
    $sp3 = $101;
    $102 = HEAP8[$101>>0]|0;
    $103 = $dp4;
    $104 = ((($103)) + -1|0);
    $dp4 = $104;
    HEAP8[$104>>0] = $102;
    $105 = $sp3;
    $106 = ((($105)) + -1|0);
    $sp3 = $106;
    $107 = HEAP8[$106>>0]|0;
    $108 = $dp4;
    $109 = ((($108)) + -1|0);
    $dp4 = $109;
    HEAP8[$109>>0] = $107;
    $110 = $i;
    $111 = (($110) + 1)|0;
    $i = $111;
   }
   $112 = $0;
   $113 = ((($112)) + 10|0);
   HEAP8[$113>>0] = 2;
   $114 = $0;
   $115 = ((($114)) + 11|0);
   HEAP8[$115>>0] = 32;
   $116 = $row_width;
   $117 = $116<<2;
   $118 = $0;
   $119 = ((($118)) + 4|0);
   HEAP32[$119>>2] = $117;
   STACKTOP = sp;return;
  } else {
   $sp5 = $86;
   $120 = $sp5;
   $121 = $row_width;
   $122 = $121<<1;
   $123 = (($120) + ($122)|0);
   $dp6 = $123;
   $i = 0;
   while(1) {
    $124 = $i;
    $125 = $row_width;
    $126 = ($124>>>0)<($125>>>0);
    if (!($126)) {
     break;
    }
    $127 = $sp5;
    $128 = ((($127)) + -1|0);
    $sp5 = $128;
    $129 = HEAP8[$128>>0]|0;
    $130 = $dp6;
    $131 = ((($130)) + -1|0);
    $dp6 = $131;
    HEAP8[$131>>0] = $129;
    $132 = $sp5;
    $133 = ((($132)) + -1|0);
    $sp5 = $133;
    $134 = HEAP8[$133>>0]|0;
    $135 = $dp6;
    $136 = ((($135)) + -1|0);
    $dp6 = $136;
    HEAP8[$136>>0] = $134;
    $137 = $lo_filler;
    $138 = $dp6;
    $139 = ((($138)) + -1|0);
    $dp6 = $139;
    HEAP8[$139>>0] = $137;
    $140 = $hi_filler;
    $141 = $dp6;
    $142 = ((($141)) + -1|0);
    $dp6 = $142;
    HEAP8[$142>>0] = $140;
    $143 = $i;
    $144 = (($143) + 1)|0;
    $i = $144;
   }
   $145 = $0;
   $146 = ((($145)) + 10|0);
   HEAP8[$146>>0] = 2;
   $147 = $0;
   $148 = ((($147)) + 11|0);
   HEAP8[$148>>0] = 32;
   $149 = $row_width;
   $150 = $149<<2;
   $151 = $0;
   $152 = ((($151)) + 4|0);
   HEAP32[$152>>2] = $150;
   STACKTOP = sp;return;
  }
 }
 $153 = ((($16)) + 8|0);
 $154 = HEAP8[$153>>0]|0;
 $155 = $154&255;
 $156 = ($155|0)==(2);
 if (!($156)) {
  STACKTOP = sp;return;
 }
 $157 = $0;
 $158 = ((($157)) + 9|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159&255;
 $161 = ($160|0)==(8);
 if ($161) {
  $162 = $3;
  $163 = $162 & 128;
  $164 = ($163|0)!=(0);
  $165 = $1;
  $166 = $row_width;
  $167 = ($166*3)|0;
  $168 = (($165) + ($167)|0);
  if ($164) {
   $sp7 = $168;
   $169 = $sp7;
   $170 = $row_width;
   $171 = (($169) + ($170)|0);
   $dp8 = $171;
   $i = 1;
   while(1) {
    $172 = $i;
    $173 = $row_width;
    $174 = ($172>>>0)<($173>>>0);
    $175 = $lo_filler;
    $176 = $dp8;
    $177 = ((($176)) + -1|0);
    $dp8 = $177;
    HEAP8[$177>>0] = $175;
    if (!($174)) {
     break;
    }
    $178 = $sp7;
    $179 = ((($178)) + -1|0);
    $sp7 = $179;
    $180 = HEAP8[$179>>0]|0;
    $181 = $dp8;
    $182 = ((($181)) + -1|0);
    $dp8 = $182;
    HEAP8[$182>>0] = $180;
    $183 = $sp7;
    $184 = ((($183)) + -1|0);
    $sp7 = $184;
    $185 = HEAP8[$184>>0]|0;
    $186 = $dp8;
    $187 = ((($186)) + -1|0);
    $dp8 = $187;
    HEAP8[$187>>0] = $185;
    $188 = $sp7;
    $189 = ((($188)) + -1|0);
    $sp7 = $189;
    $190 = HEAP8[$189>>0]|0;
    $191 = $dp8;
    $192 = ((($191)) + -1|0);
    $dp8 = $192;
    HEAP8[$192>>0] = $190;
    $193 = $i;
    $194 = (($193) + 1)|0;
    $i = $194;
   }
   $195 = $0;
   $196 = ((($195)) + 10|0);
   HEAP8[$196>>0] = 4;
   $197 = $0;
   $198 = ((($197)) + 11|0);
   HEAP8[$198>>0] = 32;
   $199 = $row_width;
   $200 = $199<<2;
   $201 = $0;
   $202 = ((($201)) + 4|0);
   HEAP32[$202>>2] = $200;
   STACKTOP = sp;return;
  } else {
   $sp9 = $168;
   $203 = $sp9;
   $204 = $row_width;
   $205 = (($203) + ($204)|0);
   $dp10 = $205;
   $i = 0;
   while(1) {
    $206 = $i;
    $207 = $row_width;
    $208 = ($206>>>0)<($207>>>0);
    if (!($208)) {
     break;
    }
    $209 = $sp9;
    $210 = ((($209)) + -1|0);
    $sp9 = $210;
    $211 = HEAP8[$210>>0]|0;
    $212 = $dp10;
    $213 = ((($212)) + -1|0);
    $dp10 = $213;
    HEAP8[$213>>0] = $211;
    $214 = $sp9;
    $215 = ((($214)) + -1|0);
    $sp9 = $215;
    $216 = HEAP8[$215>>0]|0;
    $217 = $dp10;
    $218 = ((($217)) + -1|0);
    $dp10 = $218;
    HEAP8[$218>>0] = $216;
    $219 = $sp9;
    $220 = ((($219)) + -1|0);
    $sp9 = $220;
    $221 = HEAP8[$220>>0]|0;
    $222 = $dp10;
    $223 = ((($222)) + -1|0);
    $dp10 = $223;
    HEAP8[$223>>0] = $221;
    $224 = $lo_filler;
    $225 = $dp10;
    $226 = ((($225)) + -1|0);
    $dp10 = $226;
    HEAP8[$226>>0] = $224;
    $227 = $i;
    $228 = (($227) + 1)|0;
    $i = $228;
   }
   $229 = $0;
   $230 = ((($229)) + 10|0);
   HEAP8[$230>>0] = 4;
   $231 = $0;
   $232 = ((($231)) + 11|0);
   HEAP8[$232>>0] = 32;
   $233 = $row_width;
   $234 = $233<<2;
   $235 = $0;
   $236 = ((($235)) + 4|0);
   HEAP32[$236>>2] = $234;
   STACKTOP = sp;return;
  }
 }
 $237 = $0;
 $238 = ((($237)) + 9|0);
 $239 = HEAP8[$238>>0]|0;
 $240 = $239&255;
 $241 = ($240|0)==(16);
 if (!($241)) {
  STACKTOP = sp;return;
 }
 $242 = $3;
 $243 = $242 & 128;
 $244 = ($243|0)!=(0);
 $245 = $1;
 $246 = $row_width;
 $247 = ($246*6)|0;
 $248 = (($245) + ($247)|0);
 if ($244) {
  $sp11 = $248;
  $249 = $sp11;
  $250 = $row_width;
  $251 = $250<<1;
  $252 = (($249) + ($251)|0);
  $dp12 = $252;
  $i = 1;
  while(1) {
   $253 = $i;
   $254 = $row_width;
   $255 = ($253>>>0)<($254>>>0);
   $256 = $lo_filler;
   $257 = $dp12;
   $258 = ((($257)) + -1|0);
   $dp12 = $258;
   HEAP8[$258>>0] = $256;
   $259 = $hi_filler;
   $260 = $dp12;
   $261 = ((($260)) + -1|0);
   $dp12 = $261;
   HEAP8[$261>>0] = $259;
   if (!($255)) {
    break;
   }
   $262 = $sp11;
   $263 = ((($262)) + -1|0);
   $sp11 = $263;
   $264 = HEAP8[$263>>0]|0;
   $265 = $dp12;
   $266 = ((($265)) + -1|0);
   $dp12 = $266;
   HEAP8[$266>>0] = $264;
   $267 = $sp11;
   $268 = ((($267)) + -1|0);
   $sp11 = $268;
   $269 = HEAP8[$268>>0]|0;
   $270 = $dp12;
   $271 = ((($270)) + -1|0);
   $dp12 = $271;
   HEAP8[$271>>0] = $269;
   $272 = $sp11;
   $273 = ((($272)) + -1|0);
   $sp11 = $273;
   $274 = HEAP8[$273>>0]|0;
   $275 = $dp12;
   $276 = ((($275)) + -1|0);
   $dp12 = $276;
   HEAP8[$276>>0] = $274;
   $277 = $sp11;
   $278 = ((($277)) + -1|0);
   $sp11 = $278;
   $279 = HEAP8[$278>>0]|0;
   $280 = $dp12;
   $281 = ((($280)) + -1|0);
   $dp12 = $281;
   HEAP8[$281>>0] = $279;
   $282 = $sp11;
   $283 = ((($282)) + -1|0);
   $sp11 = $283;
   $284 = HEAP8[$283>>0]|0;
   $285 = $dp12;
   $286 = ((($285)) + -1|0);
   $dp12 = $286;
   HEAP8[$286>>0] = $284;
   $287 = $sp11;
   $288 = ((($287)) + -1|0);
   $sp11 = $288;
   $289 = HEAP8[$288>>0]|0;
   $290 = $dp12;
   $291 = ((($290)) + -1|0);
   $dp12 = $291;
   HEAP8[$291>>0] = $289;
   $292 = $i;
   $293 = (($292) + 1)|0;
   $i = $293;
  }
  $294 = $0;
  $295 = ((($294)) + 10|0);
  HEAP8[$295>>0] = 4;
  $296 = $0;
  $297 = ((($296)) + 11|0);
  HEAP8[$297>>0] = 64;
  $298 = $row_width;
  $299 = $298<<3;
  $300 = $0;
  $301 = ((($300)) + 4|0);
  HEAP32[$301>>2] = $299;
  STACKTOP = sp;return;
 } else {
  $sp13 = $248;
  $302 = $sp13;
  $303 = $row_width;
  $304 = $303<<1;
  $305 = (($302) + ($304)|0);
  $dp14 = $305;
  $i = 0;
  while(1) {
   $306 = $i;
   $307 = $row_width;
   $308 = ($306>>>0)<($307>>>0);
   if (!($308)) {
    break;
   }
   $309 = $sp13;
   $310 = ((($309)) + -1|0);
   $sp13 = $310;
   $311 = HEAP8[$310>>0]|0;
   $312 = $dp14;
   $313 = ((($312)) + -1|0);
   $dp14 = $313;
   HEAP8[$313>>0] = $311;
   $314 = $sp13;
   $315 = ((($314)) + -1|0);
   $sp13 = $315;
   $316 = HEAP8[$315>>0]|0;
   $317 = $dp14;
   $318 = ((($317)) + -1|0);
   $dp14 = $318;
   HEAP8[$318>>0] = $316;
   $319 = $sp13;
   $320 = ((($319)) + -1|0);
   $sp13 = $320;
   $321 = HEAP8[$320>>0]|0;
   $322 = $dp14;
   $323 = ((($322)) + -1|0);
   $dp14 = $323;
   HEAP8[$323>>0] = $321;
   $324 = $sp13;
   $325 = ((($324)) + -1|0);
   $sp13 = $325;
   $326 = HEAP8[$325>>0]|0;
   $327 = $dp14;
   $328 = ((($327)) + -1|0);
   $dp14 = $328;
   HEAP8[$328>>0] = $326;
   $329 = $sp13;
   $330 = ((($329)) + -1|0);
   $sp13 = $330;
   $331 = HEAP8[$330>>0]|0;
   $332 = $dp14;
   $333 = ((($332)) + -1|0);
   $dp14 = $333;
   HEAP8[$333>>0] = $331;
   $334 = $sp13;
   $335 = ((($334)) + -1|0);
   $sp13 = $335;
   $336 = HEAP8[$335>>0]|0;
   $337 = $dp14;
   $338 = ((($337)) + -1|0);
   $dp14 = $338;
   HEAP8[$338>>0] = $336;
   $339 = $lo_filler;
   $340 = $dp14;
   $341 = ((($340)) + -1|0);
   $dp14 = $341;
   HEAP8[$341>>0] = $339;
   $342 = $hi_filler;
   $343 = $dp14;
   $344 = ((($343)) + -1|0);
   $dp14 = $344;
   HEAP8[$344>>0] = $342;
   $345 = $i;
   $346 = (($345) + 1)|0;
   $i = $346;
  }
  $347 = $0;
  $348 = ((($347)) + 10|0);
  HEAP8[$348>>0] = 4;
  $349 = $0;
  $350 = ((($349)) + 11|0);
  HEAP8[$350>>0] = 64;
  $351 = $row_width;
  $352 = $351<<3;
  $353 = $0;
  $354 = ((($353)) + 4|0);
  HEAP32[$354>>2] = $352;
  STACKTOP = sp;return;
 }
}
function _png_do_read_swap_alpha($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp10 = 0, $dp2 = 0;
 var $dp6 = 0, $i = 0, $i12 = 0, $i4 = 0, $i8 = 0, $row_width = 0, $save = 0, $save11 = 0, $save3 = 0, $save7 = 0, $sp = 0, $sp1 = 0, $sp5 = 0, $sp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save3 = sp + 64|0;
 $save11 = sp + 60|0;
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $row_width = $3;
 $4 = $0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)==(6);
 $9 = $0;
 if ($8) {
  $10 = ((($9)) + 9|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)==(8);
  $14 = $1;
  $15 = $0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($14) + ($17)|0);
  if ($13) {
   $sp = $18;
   $19 = $sp;
   $dp = $19;
   $i = 0;
   while(1) {
    $20 = $i;
    $21 = $row_width;
    $22 = ($20>>>0)<($21>>>0);
    if (!($22)) {
     break;
    }
    $23 = $sp;
    $24 = ((($23)) + -1|0);
    $sp = $24;
    $25 = HEAP8[$24>>0]|0;
    $save = $25;
    $26 = $sp;
    $27 = ((($26)) + -1|0);
    $sp = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $dp;
    $30 = ((($29)) + -1|0);
    $dp = $30;
    HEAP8[$30>>0] = $28;
    $31 = $sp;
    $32 = ((($31)) + -1|0);
    $sp = $32;
    $33 = HEAP8[$32>>0]|0;
    $34 = $dp;
    $35 = ((($34)) + -1|0);
    $dp = $35;
    HEAP8[$35>>0] = $33;
    $36 = $sp;
    $37 = ((($36)) + -1|0);
    $sp = $37;
    $38 = HEAP8[$37>>0]|0;
    $39 = $dp;
    $40 = ((($39)) + -1|0);
    $dp = $40;
    HEAP8[$40>>0] = $38;
    $41 = $save;
    $42 = $dp;
    $43 = ((($42)) + -1|0);
    $dp = $43;
    HEAP8[$43>>0] = $41;
    $44 = $i;
    $45 = (($44) + 1)|0;
    $i = $45;
   }
   STACKTOP = sp;return;
  } else {
   $sp1 = $18;
   $46 = $sp1;
   $dp2 = $46;
   $i4 = 0;
   while(1) {
    $47 = $i4;
    $48 = $row_width;
    $49 = ($47>>>0)<($48>>>0);
    if (!($49)) {
     break;
    }
    $50 = $sp1;
    $51 = ((($50)) + -1|0);
    $sp1 = $51;
    $52 = HEAP8[$51>>0]|0;
    HEAP8[$save3>>0] = $52;
    $53 = $sp1;
    $54 = ((($53)) + -1|0);
    $sp1 = $54;
    $55 = HEAP8[$54>>0]|0;
    $56 = ((($save3)) + 1|0);
    HEAP8[$56>>0] = $55;
    $57 = $sp1;
    $58 = ((($57)) + -1|0);
    $sp1 = $58;
    $59 = HEAP8[$58>>0]|0;
    $60 = $dp2;
    $61 = ((($60)) + -1|0);
    $dp2 = $61;
    HEAP8[$61>>0] = $59;
    $62 = $sp1;
    $63 = ((($62)) + -1|0);
    $sp1 = $63;
    $64 = HEAP8[$63>>0]|0;
    $65 = $dp2;
    $66 = ((($65)) + -1|0);
    $dp2 = $66;
    HEAP8[$66>>0] = $64;
    $67 = $sp1;
    $68 = ((($67)) + -1|0);
    $sp1 = $68;
    $69 = HEAP8[$68>>0]|0;
    $70 = $dp2;
    $71 = ((($70)) + -1|0);
    $dp2 = $71;
    HEAP8[$71>>0] = $69;
    $72 = $sp1;
    $73 = ((($72)) + -1|0);
    $sp1 = $73;
    $74 = HEAP8[$73>>0]|0;
    $75 = $dp2;
    $76 = ((($75)) + -1|0);
    $dp2 = $76;
    HEAP8[$76>>0] = $74;
    $77 = $sp1;
    $78 = ((($77)) + -1|0);
    $sp1 = $78;
    $79 = HEAP8[$78>>0]|0;
    $80 = $dp2;
    $81 = ((($80)) + -1|0);
    $dp2 = $81;
    HEAP8[$81>>0] = $79;
    $82 = $sp1;
    $83 = ((($82)) + -1|0);
    $sp1 = $83;
    $84 = HEAP8[$83>>0]|0;
    $85 = $dp2;
    $86 = ((($85)) + -1|0);
    $dp2 = $86;
    HEAP8[$86>>0] = $84;
    $87 = HEAP8[$save3>>0]|0;
    $88 = $dp2;
    $89 = ((($88)) + -1|0);
    $dp2 = $89;
    HEAP8[$89>>0] = $87;
    $90 = ((($save3)) + 1|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $dp2;
    $93 = ((($92)) + -1|0);
    $dp2 = $93;
    HEAP8[$93>>0] = $91;
    $94 = $i4;
    $95 = (($94) + 1)|0;
    $i4 = $95;
   }
   STACKTOP = sp;return;
  }
 }
 $96 = ((($9)) + 8|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = ($98|0)==(4);
 if (!($99)) {
  STACKTOP = sp;return;
 }
 $100 = $0;
 $101 = ((($100)) + 9|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = ($103|0)==(8);
 $105 = $1;
 $106 = $0;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($105) + ($108)|0);
 if ($104) {
  $sp5 = $109;
  $110 = $sp5;
  $dp6 = $110;
  $i8 = 0;
  while(1) {
   $111 = $i8;
   $112 = $row_width;
   $113 = ($111>>>0)<($112>>>0);
   if (!($113)) {
    break;
   }
   $114 = $sp5;
   $115 = ((($114)) + -1|0);
   $sp5 = $115;
   $116 = HEAP8[$115>>0]|0;
   $save7 = $116;
   $117 = $sp5;
   $118 = ((($117)) + -1|0);
   $sp5 = $118;
   $119 = HEAP8[$118>>0]|0;
   $120 = $dp6;
   $121 = ((($120)) + -1|0);
   $dp6 = $121;
   HEAP8[$121>>0] = $119;
   $122 = $save7;
   $123 = $dp6;
   $124 = ((($123)) + -1|0);
   $dp6 = $124;
   HEAP8[$124>>0] = $122;
   $125 = $i8;
   $126 = (($125) + 1)|0;
   $i8 = $126;
  }
  STACKTOP = sp;return;
 } else {
  $sp9 = $109;
  $127 = $sp9;
  $dp10 = $127;
  $i12 = 0;
  while(1) {
   $128 = $i12;
   $129 = $row_width;
   $130 = ($128>>>0)<($129>>>0);
   if (!($130)) {
    break;
   }
   $131 = $sp9;
   $132 = ((($131)) + -1|0);
   $sp9 = $132;
   $133 = HEAP8[$132>>0]|0;
   HEAP8[$save11>>0] = $133;
   $134 = $sp9;
   $135 = ((($134)) + -1|0);
   $sp9 = $135;
   $136 = HEAP8[$135>>0]|0;
   $137 = ((($save11)) + 1|0);
   HEAP8[$137>>0] = $136;
   $138 = $sp9;
   $139 = ((($138)) + -1|0);
   $sp9 = $139;
   $140 = HEAP8[$139>>0]|0;
   $141 = $dp10;
   $142 = ((($141)) + -1|0);
   $dp10 = $142;
   HEAP8[$142>>0] = $140;
   $143 = $sp9;
   $144 = ((($143)) + -1|0);
   $sp9 = $144;
   $145 = HEAP8[$144>>0]|0;
   $146 = $dp10;
   $147 = ((($146)) + -1|0);
   $dp10 = $147;
   HEAP8[$147>>0] = $145;
   $148 = HEAP8[$save11>>0]|0;
   $149 = $dp10;
   $150 = ((($149)) + -1|0);
   $dp10 = $150;
   HEAP8[$150>>0] = $148;
   $151 = ((($save11)) + 1|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $dp10;
   $154 = ((($153)) + -1|0);
   $dp10 = $154;
   HEAP8[$154>>0] = $152;
   $155 = $i12;
   $156 = (($155) + 1)|0;
   $i12 = $156;
  }
  STACKTOP = sp;return;
 }
}
function _png_get_uint_31($png_ptr,$buf) {
 $png_ptr = $png_ptr|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $buf;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = $1;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = (($5) + ($10))|0;
 $12 = $1;
 $13 = ((($12)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = (($11) + ($16))|0;
 $18 = $1;
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = (($17) + ($21))|0;
 $uval = $22;
 $23 = $uval;
 $24 = ($23>>>0)>(2147483647);
 if ($24) {
  $25 = $0;
  _png_error($25,16194);
  // unreachable;
 } else {
  $26 = $uval;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _png_read_sig($png_ptr,$info_ptr) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num_checked = 0, $num_to_check = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $0;
 $3 = ((($2)) + 433|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)>=(8);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = ((($7)) + 433|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $num_checked = $10;
 $11 = $num_checked;
 $12 = (8 - ($11))|0;
 $num_to_check = $12;
 $13 = $0;
 $14 = ((($13)) + 768|0);
 HEAP32[$14>>2] = 17;
 $15 = $0;
 $16 = $num_checked;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 $19 = (($18) + ($16)|0);
 $20 = $num_to_check;
 _png_read_data($15,$19,$20);
 $21 = $0;
 $22 = ((($21)) + 433|0);
 HEAP8[$22>>0] = 8;
 $23 = $1;
 $24 = ((($23)) + 32|0);
 $25 = $num_checked;
 $26 = $num_to_check;
 $27 = (_png_sig_cmp($24,$25,$26)|0);
 $28 = ($27|0)!=(0);
 $29 = $num_checked;
 if (!($28)) {
  $40 = ($29>>>0)<(3);
  if (!($40)) {
   STACKTOP = sp;return;
  }
  $41 = $0;
  $42 = ((($41)) + 208|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 | 4096;
  HEAP32[$42>>2] = $44;
  STACKTOP = sp;return;
 }
 $30 = ($29>>>0)<(4);
 if (!($30)) {
  $39 = $0;
  _png_error($39,16243);
  // unreachable;
 }
 $31 = $1;
 $32 = ((($31)) + 32|0);
 $33 = $num_checked;
 $34 = $num_to_check;
 $35 = (($34) - 4)|0;
 $36 = (_png_sig_cmp($32,$33,$35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $0;
  _png_error($38,16228);
  // unreachable;
 } else {
  $39 = $0;
  _png_error($39,16243);
  // unreachable;
 }
}
function _png_read_chunk_header($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $0 = $png_ptr;
 $1 = $0;
 $2 = ((($1)) + 768|0);
 HEAP32[$2>>2] = 33;
 $3 = $0;
 _png_read_data($3,$buf,8);
 $4 = $0;
 $5 = (_png_get_uint_31($4,$buf)|0);
 $length = $5;
 $6 = ((($buf)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = 255 & $8;
 $10 = $9 << 24;
 $11 = ((($buf)) + 4|0);
 $12 = ((($11)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = 255 & $14;
 $16 = $15 << 16;
 $17 = $10 | $16;
 $18 = ((($buf)) + 4|0);
 $19 = ((($18)) + 2|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = 255 & $21;
 $23 = $22 << 8;
 $24 = $17 | $23;
 $25 = ((($buf)) + 4|0);
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = 255 & $28;
 $30 = $29 << 0;
 $31 = $24 | $30;
 $32 = $0;
 $33 = ((($32)) + 376|0);
 HEAP32[$33>>2] = $31;
 $34 = $0;
 _png_reset_crc($34);
 $35 = $0;
 $36 = ((($buf)) + 4|0);
 _png_calculate_crc($35,$36,4);
 $37 = $0;
 $38 = $0;
 $39 = ((($38)) + 376|0);
 $40 = HEAP32[$39>>2]|0;
 _png_check_chunk_name($37,$40);
 $41 = $0;
 $42 = ((($41)) + 768|0);
 HEAP32[$42>>2] = 65;
 $43 = $length;
 STACKTOP = sp;return ($43|0);
}
function _png_check_chunk_name($png_ptr,$chunk_name) {
 $png_ptr = $png_ptr|0;
 $chunk_name = $chunk_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0;
 var $i = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $chunk_name;
 $i = 1;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<=(4);
  if (!($3)) {
   label = 7;
   break;
  }
  $4 = $1;
  $5 = $4 & 255;
  $c = $5;
  $6 = $c;
  $7 = ($6|0)<(65);
  $8 = $c;
  $9 = ($8|0)>(122);
  $or$cond = $7 | $9;
  if ($or$cond) {
   label = 5;
   break;
  }
  $10 = $c;
  $11 = ($10|0)>(90);
  $12 = $c;
  $13 = ($12|0)<(97);
  $or$cond3 = $11 & $13;
  if ($or$cond3) {
   label = 5;
   break;
  }
  $15 = $1;
  $16 = $15 >>> 8;
  $1 = $16;
  $17 = $i;
  $18 = (($17) + 1)|0;
  $i = $18;
 }
 if ((label|0) == 5) {
  $14 = $0;
  _png_chunk_error($14,16282);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _png_crc_read($png_ptr,$buf,$length) {
 $png_ptr = $png_ptr|0;
 $buf = $buf|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $buf;
 $2 = $length;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _png_read_data($5,$6,$7);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 _png_calculate_crc($8,$9,$10);
 STACKTOP = sp;return;
}
function _png_crc_finish($png_ptr,$skip) {
 $png_ptr = $png_ptr|0;
 $skip = $skip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $tmpbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpbuf = sp + 16|0;
 $1 = $png_ptr;
 $2 = $skip;
 while(1) {
  $3 = $2;
  $4 = ($3>>>0)>(0);
  if (!($4)) {
   break;
  }
  $len = 1024;
  $5 = $len;
  $6 = $2;
  $7 = ($5>>>0)>($6>>>0);
  if ($7) {
   $8 = $2;
   $len = $8;
  }
  $9 = $len;
  $10 = $2;
  $11 = (($10) - ($9))|0;
  $2 = $11;
  $12 = $1;
  $13 = $len;
  _png_crc_read($12,$tmpbuf,$13);
 }
 $14 = $1;
 $15 = (_png_crc_error($14)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 $17 = $1;
 $18 = ((($17)) + 376|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 29;
 $21 = 1 & $20;
 $22 = ($21|0)!=(0);
 $23 = $1;
 $24 = ((($23)) + 212|0);
 $25 = HEAP32[$24>>2]|0;
 if ($22) {
  $26 = $25 & 512;
  $27 = ($26|0)==(0);
  if (!($27)) {
   $31 = $1;
   _png_chunk_error($31,16301);
   // unreachable;
  }
 } else {
  $28 = $25 & 1024;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $31 = $1;
   _png_chunk_error($31,16301);
   // unreachable;
  }
 }
 $30 = $1;
 _png_chunk_warning($30,16301);
 $0 = 1;
 $32 = $0;
 STACKTOP = sp;return ($32|0);
}
function _png_crc_error($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crc = 0, $crc_bytes = 0, $need_crc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $crc_bytes = sp + 16|0;
 $1 = $png_ptr;
 $need_crc = 1;
 $2 = $1;
 $3 = ((($2)) + 376|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 29;
 $6 = 1 & $5;
 $7 = ($6|0)!=(0);
 $8 = $1;
 $9 = ((($8)) + 212|0);
 $10 = HEAP32[$9>>2]|0;
 if ($7) {
  $11 = $10 & 768;
  $12 = ($11|0)==(768);
  if ($12) {
   $need_crc = 0;
  }
 } else {
  $13 = $10 & 2048;
  $14 = ($13|0)!=(0);
  if ($14) {
   $need_crc = 0;
  }
 }
 $15 = $1;
 $16 = ((($15)) + 768|0);
 HEAP32[$16>>2] = 129;
 $17 = $1;
 _png_read_data($17,$crc_bytes,4);
 $18 = $need_crc;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = HEAP8[$crc_bytes>>0]|0;
  $21 = $20&255;
  $22 = $21 << 24;
  $23 = ((($crc_bytes)) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 << 16;
  $27 = (($22) + ($26))|0;
  $28 = ((($crc_bytes)) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 8;
  $32 = (($27) + ($31))|0;
  $33 = ((($crc_bytes)) + 3|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($32) + ($35))|0;
  $crc = $36;
  $37 = $crc;
  $38 = $1;
  $39 = ((($38)) + 404|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)!=($40|0);
  $42 = $41&1;
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 } else {
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _png_handle_IHDR($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit_depth = 0, $buf = 0, $color_type = 0, $compression_type = 0;
 var $filter_type = 0, $height = 0, $interlace_type = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 40|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  _png_chunk_error($8,16311);
  // unreachable;
 }
 $9 = $2;
 $10 = ($9|0)!=(13);
 $11 = $0;
 if ($10) {
  _png_chunk_error($11,16324);
  // unreachable;
 }
 $12 = ((($11)) + 208|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | 1;
 HEAP32[$12>>2] = $14;
 $15 = $0;
 _png_crc_read($15,$buf,13);
 $16 = $0;
 (_png_crc_finish($16,0)|0);
 $17 = $0;
 $18 = (_png_get_uint_31($17,$buf)|0);
 $width = $18;
 $19 = $0;
 $20 = ((($buf)) + 4|0);
 $21 = (_png_get_uint_31($19,$20)|0);
 $height = $21;
 $22 = ((($buf)) + 8|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $bit_depth = $24;
 $25 = ((($buf)) + 9|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $color_type = $27;
 $28 = ((($buf)) + 10|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $compression_type = $30;
 $31 = ((($buf)) + 11|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $filter_type = $33;
 $34 = ((($buf)) + 12|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $interlace_type = $36;
 $37 = $width;
 $38 = $0;
 $39 = ((($38)) + 348|0);
 HEAP32[$39>>2] = $37;
 $40 = $height;
 $41 = $0;
 $42 = ((($41)) + 352|0);
 HEAP32[$42>>2] = $40;
 $43 = $bit_depth;
 $44 = $43&255;
 $45 = $0;
 $46 = ((($45)) + 428|0);
 HEAP8[$46>>0] = $44;
 $47 = $interlace_type;
 $48 = $47&255;
 $49 = $0;
 $50 = ((($49)) + 424|0);
 HEAP8[$50>>0] = $48;
 $51 = $color_type;
 $52 = $51&255;
 $53 = $0;
 $54 = ((($53)) + 427|0);
 HEAP8[$54>>0] = $52;
 $55 = $filter_type;
 $56 = $55&255;
 $57 = $0;
 $58 = ((($57)) + 680|0);
 HEAP8[$58>>0] = $56;
 $59 = $compression_type;
 $60 = $59&255;
 $61 = $0;
 $62 = ((($61)) + 712|0);
 HEAP8[$62>>0] = $60;
 $63 = $0;
 $64 = ((($63)) + 427|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 switch ($66|0) {
 case 6:  {
  $73 = $0;
  $74 = ((($73)) + 431|0);
  HEAP8[$74>>0] = 4;
  break;
 }
 case 4:  {
  $71 = $0;
  $72 = ((($71)) + 431|0);
  HEAP8[$72>>0] = 2;
  break;
 }
 case 2:  {
  $69 = $0;
  $70 = ((($69)) + 431|0);
  HEAP8[$70>>0] = 3;
  break;
 }
 default: {
  $67 = $0;
  $68 = ((($67)) + 431|0);
  HEAP8[$68>>0] = 1;
 }
 }
 $75 = $0;
 $76 = ((($75)) + 428|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = $0;
 $80 = ((($79)) + 431|0);
 $81 = HEAP8[$80>>0]|0;
 $82 = $81&255;
 $83 = Math_imul($78, $82)|0;
 $84 = $83&255;
 $85 = $0;
 $86 = ((($85)) + 430|0);
 HEAP8[$86>>0] = $84;
 $87 = $0;
 $88 = ((($87)) + 430|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = ($90|0)>=(8);
 $92 = $0;
 $93 = ((($92)) + 348|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $0;
 $96 = ((($95)) + 430|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 if ($91) {
  $99 = $98 >>> 3;
  $100 = Math_imul($94, $99)|0;
  $106 = $100;
  $104 = $0;
  $105 = ((($104)) + 364|0);
  HEAP32[$105>>2] = $106;
  $107 = $0;
  $108 = $1;
  $109 = $width;
  $110 = $height;
  $111 = $bit_depth;
  $112 = $color_type;
  $113 = $interlace_type;
  $114 = $compression_type;
  $115 = $filter_type;
  _png_set_IHDR($107,$108,$109,$110,$111,$112,$113,$114,$115);
  STACKTOP = sp;return;
 } else {
  $101 = Math_imul($94, $98)|0;
  $102 = (($101) + 7)|0;
  $103 = $102 >>> 3;
  $106 = $103;
  $104 = $0;
  $105 = ((($104)) + 364|0);
  HEAP32[$105>>2] = $106;
  $107 = $0;
  $108 = $1;
  $109 = $width;
  $110 = $height;
  $111 = $bit_depth;
  $112 = $color_type;
  $113 = $interlace_type;
  $114 = $compression_type;
  $115 = $filter_type;
  _png_set_IHDR($107,$108,$109,$110,$111,$112,$113,$114,$115);
  STACKTOP = sp;return;
 }
}
function _png_handle_PLTE($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buf = 0, $i = 0, $max_palette_length = 0, $num = 0, $pal_ptr = 0, $palette = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $palette = sp + 32|0;
 $buf = sp + 28|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2;
 $12 = ($11|0)!=(0);
 $13 = $0;
 if ($12) {
  _png_chunk_error($13,16345);
  // unreachable;
 }
 $14 = ((($13)) + 208|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)!=(0);
 $18 = $0;
 if ($17) {
  $19 = $2;
  (_png_crc_finish($18,$19)|0);
  $20 = $0;
  _png_chunk_benign_error($20,16311);
  STACKTOP = sp;return;
 }
 $21 = ((($18)) + 208|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 | 2;
 HEAP32[$21>>2] = $23;
 $24 = $0;
 $25 = ((($24)) + 427|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 & 2;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = $0;
  $31 = $2;
  (_png_crc_finish($30,$31)|0);
  $32 = $0;
  _png_chunk_benign_error($32,16355);
  STACKTOP = sp;return;
 }
 $33 = $2;
 $34 = ($33>>>0)>(768);
 if (!($34)) {
  $35 = $2;
  $36 = (($35>>>0) % 3)&-1;
  $37 = ($36|0)!=(0);
  if (!($37)) {
   $46 = $2;
   $47 = (($46|0) / 3)&-1;
   $num = $47;
   $48 = $0;
   $49 = ((($48)) + 427|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = ($51|0)==(3);
   if ($52) {
    $53 = $0;
    $54 = ((($53)) + 428|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = 1 << $56;
    $max_palette_length = $57;
   } else {
    $max_palette_length = 256;
   }
   $58 = $num;
   $59 = $max_palette_length;
   $60 = ($58|0)>($59|0);
   if ($60) {
    $61 = $max_palette_length;
    $num = $61;
   }
   $i = 0;
   $pal_ptr = $palette;
   while(1) {
    $62 = $i;
    $63 = $num;
    $64 = ($62|0)<($63|0);
    $65 = $0;
    if (!($64)) {
     break;
    }
    _png_crc_read($65,$buf,3);
    $66 = HEAP8[$buf>>0]|0;
    $67 = $pal_ptr;
    HEAP8[$67>>0] = $66;
    $68 = ((($buf)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $pal_ptr;
    $71 = ((($70)) + 1|0);
    HEAP8[$71>>0] = $69;
    $72 = ((($buf)) + 2|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $pal_ptr;
    $75 = ((($74)) + 2|0);
    HEAP8[$75>>0] = $73;
    $76 = $i;
    $77 = (($76) + 1)|0;
    $i = $77;
    $78 = $pal_ptr;
    $79 = ((($78)) + 3|0);
    $pal_ptr = $79;
   }
   $80 = $2;
   $81 = $num;
   $82 = ($81*3)|0;
   $83 = (($80) - ($82))|0;
   (_png_crc_finish($65,$83)|0);
   $84 = $0;
   $85 = $1;
   $86 = $num;
   _png_set_PLTE($84,$85,$palette,$86);
   $87 = $0;
   $88 = ((($87)) + 420|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89&65535;
   $91 = ($90|0)>(0);
   if ($91) {
    label = 25;
   } else {
    $92 = $1;
    $93 = ($92|0)!=(0|0);
    if ($93) {
     $94 = $1;
     $95 = ((($94)) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $96 & 16;
     $98 = ($97|0)!=(0);
     if ($98) {
      label = 25;
     }
    }
   }
   if ((label|0) == 25) {
    $99 = $0;
    $100 = ((($99)) + 420|0);
    HEAP16[$100>>1] = 0;
    $101 = $1;
    $102 = ($101|0)!=(0|0);
    if ($102) {
     $103 = $1;
     $104 = ((($103)) + 22|0);
     HEAP16[$104>>1] = 0;
    }
    $105 = $0;
    _png_chunk_benign_error($105,16380);
   }
   $106 = $1;
   $107 = ($106|0)!=(0|0);
   if ($107) {
    $108 = $1;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $110 & 64;
    $112 = ($111|0)!=(0);
    if ($112) {
     $113 = $0;
     _png_chunk_benign_error($113,16399);
    }
   }
   $114 = $1;
   $115 = ($114|0)!=(0|0);
   if (!($115)) {
    STACKTOP = sp;return;
   }
   $116 = $1;
   $117 = ((($116)) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 32;
   $120 = ($119|0)!=(0);
   if (!($120)) {
    STACKTOP = sp;return;
   }
   $121 = $0;
   _png_chunk_benign_error($121,16418);
   STACKTOP = sp;return;
  }
 }
 $38 = $0;
 $39 = $2;
 (_png_crc_finish($38,$39)|0);
 $40 = $0;
 $41 = ((($40)) + 427|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ($43|0)!=(3);
 $45 = $0;
 if (!($44)) {
  _png_chunk_error($45,16324);
  // unreachable;
 }
 _png_chunk_benign_error($45,16324);
 STACKTOP = sp;return;
}
function _png_handle_IEND($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $13 = $0;
  _png_chunk_error($13,16311);
  // unreachable;
 }
 $8 = $0;
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $0;
  _png_chunk_error($13,16311);
  // unreachable;
 }
 $14 = $0;
 $15 = ((($14)) + 208|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | 24;
 HEAP32[$15>>2] = $17;
 $18 = $0;
 $19 = $2;
 (_png_crc_finish($18,$19)|0);
 $20 = $2;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $0;
 _png_chunk_benign_error($22,16324);
 STACKTOP = sp;return;
}
function _png_handle_gAMA($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $igamma = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 16|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ($16|0)!=(4);
 $18 = $0;
 if ($17) {
  $19 = $2;
  (_png_crc_finish($18,$19)|0);
  $20 = $0;
  _png_chunk_benign_error($20,16324);
  STACKTOP = sp;return;
 }
 _png_crc_read($18,$buf,4);
 $21 = $0;
 $22 = (_png_crc_finish($21,0)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = (_png_get_fixed_point(0,$buf)|0);
 $igamma = $24;
 $25 = $0;
 $26 = $0;
 $27 = ((($26)) + 792|0);
 $28 = $igamma;
 _png_colorspace_set_gamma($25,$27,$28);
 $29 = $0;
 $30 = $1;
 _png_colorspace_sync($29,$30);
 STACKTOP = sp;return;
}
function _png_get_fixed_point($png_ptr,$buf) {
 $png_ptr = $png_ptr|0;
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $buf;
 $3 = $2;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = $2;
 $8 = ((($7)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = (($6) + ($11))|0;
 $13 = $2;
 $14 = ((($13)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = (($12) + ($17))|0;
 $19 = $2;
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($18) + ($22))|0;
 $uval = $23;
 $24 = $uval;
 $25 = ($24>>>0)<=(2147483647);
 if ($25) {
  $26 = $uval;
  $0 = $26;
  $30 = $0;
  STACKTOP = sp;return ($30|0);
 }
 $27 = $1;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $1;
  _png_warning($29,16437);
 }
 $0 = -1;
 $30 = $0;
 STACKTOP = sp;return ($30|0);
}
function _png_handle_sBIT($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0;
 var $or$cond = 0, $sample_depth = 0, $truelen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 20|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 2;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $2;
   (_png_crc_finish($23,$24)|0);
   $25 = $0;
   _png_chunk_benign_error($25,16345);
   STACKTOP = sp;return;
  }
 }
 $26 = $0;
 $27 = ((($26)) + 427|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($29|0)==(3);
 if ($30) {
  $truelen = 3;
  $sample_depth = 8;
 } else {
  $31 = $0;
  $32 = ((($31)) + 431|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $truelen = $34;
  $35 = $0;
  $36 = ((($35)) + 428|0);
  $37 = HEAP8[$36>>0]|0;
  $sample_depth = $37;
 }
 $38 = $2;
 $39 = $truelen;
 $40 = ($38|0)!=($39|0);
 $41 = $2;
 $42 = ($41>>>0)>(4);
 $or$cond = $40 | $42;
 if ($or$cond) {
  $43 = $0;
  _png_chunk_benign_error($43,16324);
  $44 = $0;
  $45 = $2;
  (_png_crc_finish($44,$45)|0);
  STACKTOP = sp;return;
 }
 $46 = $sample_depth;
 $47 = ((($buf)) + 3|0);
 HEAP8[$47>>0] = $46;
 $48 = ((($buf)) + 2|0);
 HEAP8[$48>>0] = $46;
 $49 = ((($buf)) + 1|0);
 HEAP8[$49>>0] = $46;
 HEAP8[$buf>>0] = $46;
 $50 = $0;
 $51 = $truelen;
 _png_crc_read($50,$buf,$51);
 $52 = $0;
 $53 = (_png_crc_finish($52,0)|0);
 $54 = ($53|0)!=(0);
 if ($54) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $55 = $i;
  $56 = $truelen;
  $57 = ($55>>>0)<($56>>>0);
  if (!($57)) {
   break;
  }
  $58 = $i;
  $59 = (($buf) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($61|0)==(0);
  if ($62) {
   label = 18;
   break;
  }
  $63 = $i;
  $64 = (($buf) + ($63)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $sample_depth;
  $68 = $67&255;
  $69 = ($66|0)>($68|0);
  if ($69) {
   label = 18;
   break;
  }
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 if ((label|0) == 18) {
  $70 = $0;
  _png_chunk_benign_error($70,16324);
  STACKTOP = sp;return;
 }
 $73 = $0;
 $74 = ((($73)) + 427|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 & 2;
 $78 = ($77|0)!=(0);
 $79 = HEAP8[$buf>>0]|0;
 $80 = $0;
 $81 = ((($80)) + 508|0);
 if ($78) {
  HEAP8[$81>>0] = $79;
  $82 = ((($buf)) + 1|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $0;
  $85 = ((($84)) + 508|0);
  $86 = ((($85)) + 1|0);
  HEAP8[$86>>0] = $83;
  $87 = ((($buf)) + 2|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $0;
  $90 = ((($89)) + 508|0);
  $91 = ((($90)) + 2|0);
  HEAP8[$91>>0] = $88;
  $92 = ((($buf)) + 3|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $0;
  $95 = ((($94)) + 508|0);
  $96 = ((($95)) + 4|0);
  HEAP8[$96>>0] = $93;
 } else {
  $97 = ((($81)) + 3|0);
  HEAP8[$97>>0] = $79;
  $98 = HEAP8[$buf>>0]|0;
  $99 = $0;
  $100 = ((($99)) + 508|0);
  HEAP8[$100>>0] = $98;
  $101 = HEAP8[$buf>>0]|0;
  $102 = $0;
  $103 = ((($102)) + 508|0);
  $104 = ((($103)) + 1|0);
  HEAP8[$104>>0] = $101;
  $105 = HEAP8[$buf>>0]|0;
  $106 = $0;
  $107 = ((($106)) + 508|0);
  $108 = ((($107)) + 2|0);
  HEAP8[$108>>0] = $105;
  $109 = ((($buf)) + 1|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $0;
  $112 = ((($111)) + 508|0);
  $113 = ((($112)) + 4|0);
  HEAP8[$113>>0] = $110;
 }
 $114 = $0;
 $115 = $1;
 $116 = $0;
 $117 = ((($116)) + 508|0);
 _png_set_sBIT($114,$115,$117);
 STACKTOP = sp;return;
}
function _png_handle_cHRM($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $buf = 0, $xy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 48|0;
 $xy = sp;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ($16|0)!=(32);
 $18 = $0;
 if ($17) {
  $19 = $2;
  (_png_crc_finish($18,$19)|0);
  $20 = $0;
  _png_chunk_benign_error($20,16324);
  STACKTOP = sp;return;
 }
 _png_crc_read($18,$buf,32);
 $21 = $0;
 $22 = (_png_crc_finish($21,0)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = (_png_get_fixed_point(0,$buf)|0);
 $25 = ((($xy)) + 24|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($buf)) + 4|0);
 $27 = (_png_get_fixed_point(0,$26)|0);
 $28 = ((($xy)) + 28|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($buf)) + 8|0);
 $30 = (_png_get_fixed_point(0,$29)|0);
 HEAP32[$xy>>2] = $30;
 $31 = ((($buf)) + 12|0);
 $32 = (_png_get_fixed_point(0,$31)|0);
 $33 = ((($xy)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($buf)) + 16|0);
 $35 = (_png_get_fixed_point(0,$34)|0);
 $36 = ((($xy)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($buf)) + 20|0);
 $38 = (_png_get_fixed_point(0,$37)|0);
 $39 = ((($xy)) + 12|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($buf)) + 24|0);
 $41 = (_png_get_fixed_point(0,$40)|0);
 $42 = ((($xy)) + 16|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($buf)) + 28|0);
 $44 = (_png_get_fixed_point(0,$43)|0);
 $45 = ((($xy)) + 20|0);
 HEAP32[$45>>2] = $44;
 $46 = ((($xy)) + 24|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(-1);
 if (!($48)) {
  $49 = ((($xy)) + 28|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)==(-1);
  if (!($51)) {
   $52 = HEAP32[$xy>>2]|0;
   $53 = ($52|0)==(-1);
   if (!($53)) {
    $54 = ((($xy)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(-1);
    if (!($56)) {
     $57 = ((($xy)) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(-1);
     if (!($59)) {
      $60 = ((($xy)) + 12|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(-1);
      if (!($62)) {
       $63 = ((($xy)) + 16|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)==(-1);
       if (!($65)) {
        $66 = ((($xy)) + 20|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($67|0)==(-1);
        if (!($68)) {
         $70 = $0;
         $71 = ((($70)) + 792|0);
         $72 = ((($71)) + 74|0);
         $73 = HEAP16[$72>>1]|0;
         $74 = $73&65535;
         $75 = $74 & 32768;
         $76 = ($75|0)!=(0);
         if ($76) {
          STACKTOP = sp;return;
         }
         $77 = $0;
         $78 = ((($77)) + 792|0);
         $79 = ((($78)) + 74|0);
         $80 = HEAP16[$79>>1]|0;
         $81 = $80&65535;
         $82 = $81 & 16;
         $83 = ($82|0)!=(0);
         $84 = $0;
         $85 = ((($84)) + 792|0);
         $86 = ((($85)) + 74|0);
         $87 = HEAP16[$86>>1]|0;
         $88 = $87&65535;
         if ($83) {
          $89 = $88 | 32768;
          $90 = $89&65535;
          HEAP16[$86>>1] = $90;
          $91 = $0;
          $92 = $1;
          _png_colorspace_sync($91,$92);
          $93 = $0;
          _png_chunk_benign_error($93,16345);
          STACKTOP = sp;return;
         } else {
          $94 = $88 | 16;
          $95 = $94&65535;
          HEAP16[$86>>1] = $95;
          $96 = $0;
          $97 = $0;
          $98 = ((($97)) + 792|0);
          (_png_colorspace_set_chromaticities($96,$98,$xy,1)|0);
          $99 = $0;
          $100 = $1;
          _png_colorspace_sync($99,$100);
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $69 = $0;
 _png_chunk_benign_error($69,16474);
 STACKTOP = sp;return;
}
function _png_handle_sRGB($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $intent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $intent = sp + 12|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ($16|0)!=(1);
 $18 = $0;
 if ($17) {
  $19 = $2;
  (_png_crc_finish($18,$19)|0);
  $20 = $0;
  _png_chunk_benign_error($20,16324);
  STACKTOP = sp;return;
 }
 _png_crc_read($18,$intent,1);
 $21 = $0;
 $22 = (_png_crc_finish($21,0)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 792|0);
 $26 = ((($25)) + 74|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = $28 & 32768;
 $30 = ($29|0)!=(0);
 if ($30) {
  STACKTOP = sp;return;
 }
 $31 = $0;
 $32 = ((($31)) + 792|0);
 $33 = ((($32)) + 74|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34&65535;
 $36 = $35 & 4;
 $37 = ($36|0)!=(0);
 $38 = $0;
 if ($37) {
  $39 = ((($38)) + 792|0);
  $40 = ((($39)) + 74|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = $42 | 32768;
  $44 = $43&65535;
  HEAP16[$40>>1] = $44;
  $45 = $0;
  $46 = $1;
  _png_colorspace_sync($45,$46);
  $47 = $0;
  _png_chunk_benign_error($47,16489);
  STACKTOP = sp;return;
 } else {
  $48 = $0;
  $49 = ((($48)) + 792|0);
  $50 = HEAP8[$intent>>0]|0;
  $51 = $50&255;
  (_png_colorspace_set_sRGB($38,$49,$51)|0);
  $52 = $0;
  $53 = $1;
  _png_colorspace_sync($52,$53);
  STACKTOP = sp;return;
 }
}
function _png_handle_iCCP($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $errmsg = 0, $finished = 0, $keyword = 0, $keyword_length = 0, $local_buffer = 0, $or$cond = 0, $profile = 0, $profile_header = 0, $profile_length = 0, $read_length = 0, $size = 0, $tag_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $keyword = sp + 1204|0;
 $profile_header = sp + 1072|0;
 $local_buffer = sp + 48|0;
 $size = sp + 12|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 HEAP32[$2>>2] = $length;
 $errmsg = 0;
 $finished = 0;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 6;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = HEAP32[$2>>2]|0;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16>>>0)<(9);
 $18 = $0;
 if ($17) {
  $19 = HEAP32[$2>>2]|0;
  (_png_crc_finish($18,$19)|0);
  $20 = $0;
  _png_chunk_benign_error($20,16507);
  STACKTOP = sp;return;
 }
 $21 = ((($18)) + 792|0);
 $22 = ((($21)) + 74|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = $24 & 32768;
 $26 = ($25|0)!=(0);
 $27 = $0;
 if ($26) {
  $28 = HEAP32[$2>>2]|0;
  (_png_crc_finish($27,$28)|0);
  STACKTOP = sp;return;
 }
 $29 = ((($27)) + 792|0);
 $30 = ((($29)) + 74|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = $32 & 4;
 $34 = ($33|0)==(0);
 do {
  if ($34) {
   $read_length = 81;
   $35 = $read_length;
   $36 = HEAP32[$2>>2]|0;
   $37 = ($35>>>0)>($36>>>0);
   if ($37) {
    $38 = HEAP32[$2>>2]|0;
    $read_length = $38;
   }
   $39 = $0;
   $40 = $read_length;
   _png_crc_read($39,$keyword,$40);
   $41 = $read_length;
   $42 = HEAP32[$2>>2]|0;
   $43 = (($42) - ($41))|0;
   HEAP32[$2>>2] = $43;
   $keyword_length = 0;
   while(1) {
    $44 = $keyword_length;
    $45 = ($44>>>0)<(80);
    if ($45) {
     $46 = $keyword_length;
     $47 = $read_length;
     $48 = ($46>>>0)<($47>>>0);
     if ($48) {
      $49 = $keyword_length;
      $50 = (($keyword) + ($49)|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51 << 24 >> 24;
      $53 = ($52|0)!=(0);
      $281 = $53;
     } else {
      $281 = 0;
     }
    } else {
     $281 = 0;
    }
    $54 = $keyword_length;
    if (!($281)) {
     break;
    }
    $55 = (($54) + 1)|0;
    $keyword_length = $55;
   }
   $56 = ($54>>>0)>=(1);
   $57 = $keyword_length;
   $58 = ($57>>>0)<=(79);
   $or$cond = $56 & $58;
   if (!($or$cond)) {
    $errmsg = 16653;
    break;
   }
   $59 = $keyword_length;
   $60 = (($59) + 1)|0;
   $61 = $read_length;
   $62 = ($60>>>0)<($61>>>0);
   if ($62) {
    $63 = $keyword_length;
    $64 = (($63) + 1)|0;
    $65 = (($keyword) + ($64)|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = $keyword_length;
     $70 = (($69) + 2)|0;
     $71 = $read_length;
     $72 = (($71) - ($70))|0;
     $read_length = $72;
     $73 = $0;
     $74 = (_png_inflate_claim($73,1766015824)|0);
     $75 = ($74|0)==(0);
     if (!($75)) {
      $260 = $0;
      $261 = ((($260)) + 224|0);
      $262 = ((($261)) + 24|0);
      $263 = HEAP32[$262>>2]|0;
      $errmsg = $263;
      break;
     }
     HEAP32[$size>>2] = 132;
     $76 = $keyword_length;
     $77 = (($76) + 2)|0;
     $78 = (($keyword) + ($77)|0);
     $79 = $0;
     $80 = ((($79)) + 224|0);
     HEAP32[$80>>2] = $78;
     $81 = $read_length;
     $82 = $0;
     $83 = ((($82)) + 224|0);
     $84 = ((($83)) + 4|0);
     HEAP32[$84>>2] = $81;
     $85 = $0;
     (_png_inflate_read($85,$local_buffer,1024,$2,$profile_header,$size,0)|0);
     $86 = HEAP32[$size>>2]|0;
     $87 = ($86|0)==(0);
     L38: do {
      if ($87) {
       $88 = HEAP8[$profile_header>>0]|0;
       $89 = $88&255;
       $90 = $89 << 24;
       $91 = ((($profile_header)) + 1|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = $92&255;
       $94 = $93 << 16;
       $95 = (($90) + ($94))|0;
       $96 = ((($profile_header)) + 2|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97&255;
       $99 = $98 << 8;
       $100 = (($95) + ($99))|0;
       $101 = ((($profile_header)) + 3|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = $102&255;
       $104 = (($100) + ($103))|0;
       $profile_length = $104;
       $105 = $0;
       $106 = $0;
       $107 = ((($106)) + 792|0);
       $108 = $profile_length;
       $109 = (_png_icc_check_length($105,$107,$keyword,$108)|0);
       $110 = ($109|0)!=(0);
       if ($110) {
        $111 = $0;
        $112 = $0;
        $113 = ((($112)) + 792|0);
        $114 = $profile_length;
        $115 = $0;
        $116 = ((($115)) + 427|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = $117&255;
        $119 = (_png_icc_check_header($111,$113,$keyword,$114,$profile_header,$118)|0);
        $120 = ($119|0)!=(0);
        if ($120) {
         $121 = ((($profile_header)) + 128|0);
         $122 = HEAP8[$121>>0]|0;
         $123 = $122&255;
         $124 = $123 << 24;
         $125 = ((($profile_header)) + 128|0);
         $126 = ((($125)) + 1|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = $127&255;
         $129 = $128 << 16;
         $130 = (($124) + ($129))|0;
         $131 = ((($profile_header)) + 128|0);
         $132 = ((($131)) + 2|0);
         $133 = HEAP8[$132>>0]|0;
         $134 = $133&255;
         $135 = $134 << 8;
         $136 = (($130) + ($135))|0;
         $137 = ((($profile_header)) + 128|0);
         $138 = ((($137)) + 3|0);
         $139 = HEAP8[$138>>0]|0;
         $140 = $139&255;
         $141 = (($136) + ($140))|0;
         $tag_count = $141;
         $142 = $0;
         $143 = $profile_length;
         $144 = (_png_read_buffer($142,$143,2)|0);
         $profile = $144;
         $145 = $profile;
         $146 = ($145|0)!=(0|0);
         if (!($146)) {
          $errmsg = 16606;
          break;
         }
         $147 = $profile;
         _memcpy(($147|0),($profile_header|0),132)|0;
         $148 = $tag_count;
         $149 = ($148*12)|0;
         HEAP32[$size>>2] = $149;
         $150 = $0;
         $151 = $profile;
         $152 = ((($151)) + 132|0);
         (_png_inflate_read($150,$local_buffer,1024,$2,$152,$size,0)|0);
         $153 = HEAP32[$size>>2]|0;
         $154 = ($153|0)==(0);
         $155 = $0;
         if (!($154)) {
          $251 = ((($155)) + 224|0);
          $252 = ((($251)) + 24|0);
          $253 = HEAP32[$252>>2]|0;
          $errmsg = $253;
          break;
         }
         $156 = $0;
         $157 = ((($156)) + 792|0);
         $158 = $profile_length;
         $159 = $profile;
         $160 = (_png_icc_check_tag_table($155,$157,$keyword,$158,$159)|0);
         $161 = ($160|0)!=(0);
         if ($161) {
          $162 = $profile_length;
          $163 = (($162) - 132)|0;
          $164 = $tag_count;
          $165 = ($164*12)|0;
          $166 = (($163) - ($165))|0;
          HEAP32[$size>>2] = $166;
          $167 = $0;
          $168 = $profile;
          $169 = ((($168)) + 132|0);
          $170 = $tag_count;
          $171 = ($170*12)|0;
          $172 = (($169) + ($171)|0);
          (_png_inflate_read($167,$local_buffer,1024,$2,$172,$size,1)|0);
          $173 = HEAP32[$2>>2]|0;
          $174 = ($173>>>0)>(0);
          do {
           if ($174) {
            $175 = $0;
            $176 = ((($175)) + 212|0);
            $177 = HEAP32[$176>>2]|0;
            $178 = $177 & 1048576;
            $179 = ($178|0)!=(0);
            if ($179) {
             break;
            }
            $errmsg = 16584;
            break L38;
           }
          } while(0);
          $180 = HEAP32[$size>>2]|0;
          $181 = ($180|0)==(0);
          if (!($181)) {
           $245 = HEAP32[$size>>2]|0;
           $246 = ($245>>>0)>(0);
           if ($246) {
            $errmsg = 16620;
            break;
           } else {
            $247 = $0;
            $248 = ((($247)) + 224|0);
            $249 = ((($248)) + 24|0);
            $250 = HEAP32[$249>>2]|0;
            $errmsg = $250;
            break;
           }
          }
          $182 = HEAP32[$2>>2]|0;
          $183 = ($182>>>0)>(0);
          if ($183) {
           $184 = $0;
           _png_chunk_warning($184,16584);
          }
          $185 = $0;
          $186 = HEAP32[$2>>2]|0;
          (_png_crc_finish($185,$186)|0);
          $finished = 1;
          $187 = $0;
          $188 = $0;
          $189 = ((($188)) + 792|0);
          $190 = $profile;
          $191 = $0;
          $192 = ((($191)) + 224|0);
          $193 = ((($192)) + 48|0);
          $194 = HEAP32[$193>>2]|0;
          _png_icc_set_sRGB($187,$189,$190,$194);
          $195 = $1;
          $196 = ($195|0)!=(0|0);
          do {
           if ($196) {
            $197 = $0;
            $198 = $1;
            _png_free_data($197,$198,16,0);
            $199 = $0;
            $200 = $keyword_length;
            $201 = (($200) + 1)|0;
            $202 = (_png_malloc_base($199,$201)|0);
            $203 = $1;
            $204 = ((($203)) + 116|0);
            HEAP32[$204>>2] = $202;
            $205 = $1;
            $206 = ((($205)) + 116|0);
            $207 = HEAP32[$206>>2]|0;
            $208 = ($207|0)!=(0|0);
            if ($208) {
             $209 = $1;
             $210 = ((($209)) + 116|0);
             $211 = HEAP32[$210>>2]|0;
             $212 = $keyword_length;
             $213 = (($212) + 1)|0;
             _memcpy(($211|0),($keyword|0),($213|0))|0;
             $214 = $profile_length;
             $215 = $1;
             $216 = ((($215)) + 124|0);
             HEAP32[$216>>2] = $214;
             $217 = $profile;
             $218 = $1;
             $219 = ((($218)) + 120|0);
             HEAP32[$219>>2] = $217;
             $220 = $0;
             $221 = ((($220)) + 756|0);
             HEAP32[$221>>2] = 0;
             $222 = $1;
             $223 = ((($222)) + 232|0);
             $224 = HEAP32[$223>>2]|0;
             $225 = $224 | 16;
             HEAP32[$223>>2] = $225;
             $226 = $1;
             $227 = ((($226)) + 8|0);
             $228 = HEAP32[$227>>2]|0;
             $229 = $228 | 4096;
             HEAP32[$227>>2] = $229;
             break;
            } else {
             $230 = $0;
             $231 = ((($230)) + 792|0);
             $232 = ((($231)) + 74|0);
             $233 = HEAP16[$232>>1]|0;
             $234 = $233&65535;
             $235 = $234 | 32768;
             $236 = $235&65535;
             HEAP16[$232>>1] = $236;
             $errmsg = 16606;
             break;
            }
           }
          } while(0);
          $237 = $1;
          $238 = ($237|0)!=(0|0);
          if ($238) {
           $239 = $0;
           $240 = $1;
           _png_colorspace_sync($239,$240);
          }
          $241 = $errmsg;
          $242 = ($241|0)==(0|0);
          if (!($242)) {
           break;
          }
          $243 = $0;
          $244 = ((($243)) + 220|0);
          HEAP32[$244>>2] = 0;
          STACKTOP = sp;return;
         }
        }
       }
      } else {
       $254 = $0;
       $255 = ((($254)) + 224|0);
       $256 = ((($255)) + 24|0);
       $257 = HEAP32[$256>>2]|0;
       $errmsg = $257;
      }
     } while(0);
     $258 = $0;
     $259 = ((($258)) + 220|0);
     HEAP32[$259>>2] = 0;
     break;
    }
   }
   $errmsg = 16630;
  } else {
   $errmsg = 16489;
  }
 } while(0);
 $264 = $finished;
 $265 = ($264|0)==(0);
 if ($265) {
  $266 = $0;
  $267 = HEAP32[$2>>2]|0;
  (_png_crc_finish($266,$267)|0);
 }
 $268 = $0;
 $269 = ((($268)) + 792|0);
 $270 = ((($269)) + 74|0);
 $271 = HEAP16[$270>>1]|0;
 $272 = $271&65535;
 $273 = $272 | 32768;
 $274 = $273&65535;
 HEAP16[$270>>1] = $274;
 $275 = $0;
 $276 = $1;
 _png_colorspace_sync($275,$276);
 $277 = $errmsg;
 $278 = ($277|0)!=(0|0);
 if (!($278)) {
  STACKTOP = sp;return;
 }
 $279 = $0;
 $280 = $errmsg;
 _png_chunk_benign_error($279,$280);
 STACKTOP = sp;return;
}
function _png_inflate_claim($png_ptr,$owner) {
 $png_ptr = $png_ptr|0;
 $owner = $owner|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $msg = sp + 16|0;
 $0 = $png_ptr;
 $1 = $owner;
 $2 = $0;
 $3 = ((($2)) + 220|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 220|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >>> 24;
  $10 = $9 & 255;
  $11 = $10&255;
  HEAP8[$msg>>0] = $11;
  $12 = $0;
  $13 = ((($12)) + 220|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 >>> 16;
  $16 = $15 & 255;
  $17 = $16&255;
  $18 = ((($msg)) + 1|0);
  HEAP8[$18>>0] = $17;
  $19 = $0;
  $20 = ((($19)) + 220|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 >>> 8;
  $23 = $22 & 255;
  $24 = $23&255;
  $25 = ((($msg)) + 2|0);
  HEAP8[$25>>0] = $24;
  $26 = $0;
  $27 = ((($26)) + 220|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = ((($msg)) + 3|0);
  HEAP8[$31>>0] = $30;
  (_png_safecat($msg,64,4,16517)|0);
  $32 = $0;
  _png_chunk_warning($32,$msg);
  $33 = $0;
  $34 = ((($33)) + 220|0);
  HEAP32[$34>>2] = 0;
 }
 $35 = $0;
 $36 = ((($35)) + 224|0);
 HEAP32[$36>>2] = 0;
 $37 = $0;
 $38 = ((($37)) + 224|0);
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = $0;
 $41 = ((($40)) + 224|0);
 $42 = ((($41)) + 12|0);
 HEAP32[$42>>2] = 0;
 $43 = $0;
 $44 = ((($43)) + 224|0);
 $45 = ((($44)) + 16|0);
 HEAP32[$45>>2] = 0;
 $46 = $0;
 $47 = ((($46)) + 212|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 & 2;
 $50 = ($49|0)!=(0);
 $51 = $0;
 $52 = ((($51)) + 224|0);
 if ($50) {
  $53 = (_inflateReset($52)|0);
  $ret = $53;
 } else {
  $54 = (_inflateInit_($52,19299,56)|0);
  $ret = $54;
  $55 = $ret;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $0;
   $58 = ((($57)) + 212|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 | 2;
   HEAP32[$58>>2] = $60;
  }
 }
 $61 = $ret;
 $62 = ($61|0)==(0);
 if ($62) {
  $63 = $1;
  $64 = $0;
  $65 = ((($64)) + 220|0);
  HEAP32[$65>>2] = $63;
  $68 = $ret;
  STACKTOP = sp;return ($68|0);
 } else {
  $66 = $0;
  $67 = $ret;
  _png_zstream_error($66,$67);
  $68 = $ret;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _png_inflate_read($png_ptr,$read_buffer,$read_size,$chunk_bytes,$next_out,$out_size,$finish) {
 $png_ptr = $png_ptr|0;
 $read_buffer = $read_buffer|0;
 $read_size = $read_size|0;
 $chunk_bytes = $chunk_bytes|0;
 $next_out = $next_out|0;
 $out_size = $out_size|0;
 $finish = $finish|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $read_buffer;
 $3 = $read_size;
 $4 = $chunk_bytes;
 $5 = $next_out;
 $6 = $out_size;
 $7 = $finish;
 $8 = $1;
 $9 = ((($8)) + 220|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 376|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 if (!($14)) {
  $101 = $1;
  $102 = ((($101)) + 224|0);
  $103 = ((($102)) + 24|0);
  HEAP32[$103>>2] = 16532;
  $0 = -2;
  $104 = $0;
  STACKTOP = sp;return ($104|0);
 }
 $15 = $5;
 $16 = $1;
 $17 = ((($16)) + 224|0);
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $15;
 $19 = $1;
 $20 = ((($19)) + 224|0);
 $21 = ((($20)) + 16|0);
 HEAP32[$21>>2] = 0;
 while(1) {
  $22 = $1;
  $23 = ((($22)) + 224|0);
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = $3;
   $28 = $4;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($27>>>0)>($29>>>0);
   if ($30) {
    $31 = $4;
    $32 = HEAP32[$31>>2]|0;
    $3 = $32;
   }
   $33 = $3;
   $34 = $4;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) - ($33))|0;
   HEAP32[$34>>2] = $36;
   $37 = $3;
   $38 = ($37>>>0)>(0);
   if ($38) {
    $39 = $1;
    $40 = $2;
    $41 = $3;
    _png_crc_read($39,$40,$41);
   }
   $42 = $2;
   $43 = $1;
   $44 = ((($43)) + 224|0);
   HEAP32[$44>>2] = $42;
   $45 = $3;
   $46 = $1;
   $47 = ((($46)) + 224|0);
   $48 = ((($47)) + 4|0);
   HEAP32[$48>>2] = $45;
  }
  $49 = $1;
  $50 = ((($49)) + 224|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $avail = -1;
   $54 = $avail;
   $55 = $6;
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54>>>0)>($56>>>0);
   if ($57) {
    $58 = $6;
    $59 = HEAP32[$58>>2]|0;
    $avail = $59;
   }
   $60 = $avail;
   $61 = $6;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($62) - ($60))|0;
   HEAP32[$61>>2] = $63;
   $64 = $avail;
   $65 = $1;
   $66 = ((($65)) + 224|0);
   $67 = ((($66)) + 16|0);
   HEAP32[$67>>2] = $64;
  }
  $68 = $1;
  $69 = ((($68)) + 224|0);
  $70 = $4;
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71>>>0)>(0);
  if ($72) {
   $76 = 0;
  } else {
   $73 = $7;
   $74 = ($73|0)!=(0);
   $75 = $74 ? 4 : 2;
   $76 = $75;
  }
  $77 = (_inflate($69,$76)|0);
  $ret = $77;
  $78 = $ret;
  $79 = ($78|0)==(0);
  if (!($79)) {
   break;
  }
  $80 = $6;
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81>>>0)>(0);
  if ($82) {
   continue;
  }
  $83 = $1;
  $84 = ((($83)) + 224|0);
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($86>>>0)>(0);
  if (!($87)) {
   break;
  }
 }
 $88 = $1;
 $89 = ((($88)) + 224|0);
 $90 = ((($89)) + 16|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $6;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + ($91))|0;
 HEAP32[$92>>2] = $94;
 $95 = $1;
 $96 = ((($95)) + 224|0);
 $97 = ((($96)) + 16|0);
 HEAP32[$97>>2] = 0;
 $98 = $1;
 $99 = $ret;
 _png_zstream_error($98,$99);
 $100 = $ret;
 $0 = $100;
 $104 = $0;
 STACKTOP = sp;return ($104|0);
}
function _png_read_buffer($png_ptr,$new_size,$warn) {
 $png_ptr = $png_ptr|0;
 $new_size = $new_size|0;
 $warn = $warn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $new_size;
 $2 = $warn;
 $3 = $0;
 $4 = ((($3)) + 756|0);
 $5 = HEAP32[$4>>2]|0;
 $buffer = $5;
 $6 = $buffer;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = $0;
  $10 = ((($9)) + 760|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8>>>0)>($11>>>0);
  if ($12) {
   $13 = $0;
   $14 = ((($13)) + 756|0);
   HEAP32[$14>>2] = 0;
   $15 = $0;
   $16 = ((($15)) + 756|0);
   HEAP32[$16>>2] = 0;
   $17 = $0;
   $18 = ((($17)) + 760|0);
   HEAP32[$18>>2] = 0;
   $19 = $0;
   $20 = $buffer;
   _png_free($19,$20);
   $buffer = 0;
  }
 }
 $21 = $buffer;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $39 = $buffer;
  STACKTOP = sp;return ($39|0);
 }
 $23 = $0;
 $24 = $1;
 $25 = (_png_malloc_base($23,$24)|0);
 $buffer = $25;
 $26 = $buffer;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $buffer;
  $29 = $0;
  $30 = ((($29)) + 756|0);
  HEAP32[$30>>2] = $28;
  $31 = $1;
  $32 = $0;
  $33 = ((($32)) + 760|0);
  HEAP32[$33>>2] = $31;
  $39 = $buffer;
  STACKTOP = sp;return ($39|0);
 }
 $34 = $2;
 $35 = ($34|0)<(2);
 if (!($35)) {
  $39 = $buffer;
  STACKTOP = sp;return ($39|0);
 }
 $36 = $2;
 $37 = ($36|0)!=(0);
 $38 = $0;
 if (!($37)) {
  _png_chunk_error($38,16550);
  // unreachable;
 }
 _png_chunk_warning($38,16550);
 $39 = $buffer;
 STACKTOP = sp;return ($39|0);
}
function _png_handle_sPLT($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $data_length = 0, $dl = 0;
 var $entry_size = 0, $entry_start = 0, $i = 0, $max_dl = 0, $new_palette = 0, $pp = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $new_palette = sp + 32|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $skip = 0;
 $3 = $0;
 $4 = ((($3)) + 724|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 724|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  $11 = $0;
  if ($10) {
   $12 = $2;
   (_png_crc_finish($11,$12)|0);
   STACKTOP = sp;return;
  }
  $13 = ((($11)) + 724|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = $0;
   _png_warning($17,16665);
   $18 = $0;
   $19 = $2;
   (_png_crc_finish($18,$19)|0);
   STACKTOP = sp;return;
  }
 }
 $20 = $0;
 $21 = ((($20)) + 208|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)==(0);
 $25 = $0;
 if ($24) {
  _png_chunk_error($25,16332);
  // unreachable;
 }
 $26 = ((($25)) + 208|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 4;
 $29 = ($28|0)!=(0);
 $30 = $0;
 $31 = $2;
 if ($29) {
  (_png_crc_finish($30,$31)|0);
  $32 = $0;
  _png_chunk_benign_error($32,16311);
  STACKTOP = sp;return;
 }
 $33 = (($31) + 1)|0;
 $34 = (_png_read_buffer($30,$33,2)|0);
 $buffer = $34;
 $35 = $buffer;
 $36 = ($35|0)==(0|0);
 $37 = $0;
 if ($36) {
  $38 = $2;
  (_png_crc_finish($37,$38)|0);
  $39 = $0;
  _png_chunk_benign_error($39,16606);
  STACKTOP = sp;return;
 }
 $40 = $buffer;
 $41 = $2;
 _png_crc_read($37,$40,$41);
 $42 = $0;
 $43 = $skip;
 $44 = (_png_crc_finish($42,$43)|0);
 $45 = ($44|0)!=(0);
 if ($45) {
  STACKTOP = sp;return;
 }
 $46 = $2;
 $47 = $buffer;
 $48 = (($47) + ($46)|0);
 HEAP8[$48>>0] = 0;
 $49 = $buffer;
 $entry_start = $49;
 while(1) {
  $50 = $entry_start;
  $51 = HEAP8[$50>>0]|0;
  $52 = ($51<<24>>24)!=(0);
  $53 = $entry_start;
  $54 = ((($53)) + 1|0);
  $entry_start = $54;
  if (!($52)) {
   break;
  }
 }
 $55 = $2;
 $56 = ($55>>>0)<(2);
 if (!($56)) {
  $57 = $entry_start;
  $58 = $buffer;
  $59 = $2;
  $60 = (($59) - 2)|0;
  $61 = (($58) + ($60)|0);
  $62 = ($57>>>0)>($61>>>0);
  if (!($62)) {
   $64 = $entry_start;
   $65 = ((($64)) + 1|0);
   $entry_start = $65;
   $66 = HEAP8[$64>>0]|0;
   $67 = ((($new_palette)) + 4|0);
   HEAP8[$67>>0] = $66;
   $68 = ((($new_palette)) + 4|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = ($70|0)==(8);
   $72 = $71 ? 6 : 10;
   $entry_size = $72;
   $73 = $2;
   $74 = $entry_start;
   $75 = $buffer;
   $76 = $74;
   $77 = $75;
   $78 = (($76) - ($77))|0;
   $79 = (($73) - ($78))|0;
   $data_length = $79;
   $80 = $data_length;
   $81 = $entry_size;
   $82 = (($80>>>0) % ($81>>>0))&-1;
   $83 = ($82|0)!=(0);
   if ($83) {
    $84 = $0;
    _png_warning($84,16719);
    STACKTOP = sp;return;
   }
   $85 = $data_length;
   $86 = $entry_size;
   $87 = (($85>>>0) / ($86>>>0))&-1;
   $dl = $87;
   $max_dl = 429496729;
   $88 = $dl;
   $89 = $max_dl;
   $90 = ($88>>>0)>($89>>>0);
   if ($90) {
    $91 = $0;
    _png_warning($91,16745);
    STACKTOP = sp;return;
   }
   $92 = $data_length;
   $93 = $entry_size;
   $94 = (($92>>>0) / ($93>>>0))&-1;
   $95 = ((($new_palette)) + 12|0);
   HEAP32[$95>>2] = $94;
   $96 = $0;
   $97 = ((($new_palette)) + 12|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98*10)|0;
   $100 = (_png_malloc_warn($96,$99)|0);
   $101 = ((($new_palette)) + 8|0);
   HEAP32[$101>>2] = $100;
   $102 = ((($new_palette)) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==(0|0);
   if ($104) {
    $105 = $0;
    _png_warning($105,16765);
    STACKTOP = sp;return;
   }
   $i = 0;
   while(1) {
    $106 = $i;
    $107 = ((($new_palette)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($106|0)<($108|0);
    if (!($109)) {
     break;
    }
    $110 = ((($new_palette)) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $i;
    $113 = (($111) + (($112*10)|0)|0);
    $pp = $113;
    $114 = ((($new_palette)) + 4|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115&255;
    $117 = ($116|0)==(8);
    $118 = $entry_start;
    if ($117) {
     $119 = ((($118)) + 1|0);
     $entry_start = $119;
     $120 = HEAP8[$118>>0]|0;
     $121 = $120&255;
     $122 = $pp;
     HEAP16[$122>>1] = $121;
     $123 = $entry_start;
     $124 = ((($123)) + 1|0);
     $entry_start = $124;
     $125 = HEAP8[$123>>0]|0;
     $126 = $125&255;
     $127 = $pp;
     $128 = ((($127)) + 2|0);
     HEAP16[$128>>1] = $126;
     $129 = $entry_start;
     $130 = ((($129)) + 1|0);
     $entry_start = $130;
     $131 = HEAP8[$129>>0]|0;
     $132 = $131&255;
     $133 = $pp;
     $134 = ((($133)) + 4|0);
     HEAP16[$134>>1] = $132;
     $135 = $entry_start;
     $136 = ((($135)) + 1|0);
     $entry_start = $136;
     $137 = HEAP8[$135>>0]|0;
     $138 = $137&255;
     $139 = $pp;
     $140 = ((($139)) + 6|0);
     HEAP16[$140>>1] = $138;
    } else {
     $141 = HEAP8[$118>>0]|0;
     $142 = $141&255;
     $143 = $142 << 8;
     $144 = $entry_start;
     $145 = ((($144)) + 1|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = $146&255;
     $148 = (($143) + ($147))|0;
     $149 = $148&65535;
     $150 = $pp;
     HEAP16[$150>>1] = $149;
     $151 = $entry_start;
     $152 = ((($151)) + 2|0);
     $entry_start = $152;
     $153 = $entry_start;
     $154 = HEAP8[$153>>0]|0;
     $155 = $154&255;
     $156 = $155 << 8;
     $157 = $entry_start;
     $158 = ((($157)) + 1|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     $161 = (($156) + ($160))|0;
     $162 = $161&65535;
     $163 = $pp;
     $164 = ((($163)) + 2|0);
     HEAP16[$164>>1] = $162;
     $165 = $entry_start;
     $166 = ((($165)) + 2|0);
     $entry_start = $166;
     $167 = $entry_start;
     $168 = HEAP8[$167>>0]|0;
     $169 = $168&255;
     $170 = $169 << 8;
     $171 = $entry_start;
     $172 = ((($171)) + 1|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = (($170) + ($174))|0;
     $176 = $175&65535;
     $177 = $pp;
     $178 = ((($177)) + 4|0);
     HEAP16[$178>>1] = $176;
     $179 = $entry_start;
     $180 = ((($179)) + 2|0);
     $entry_start = $180;
     $181 = $entry_start;
     $182 = HEAP8[$181>>0]|0;
     $183 = $182&255;
     $184 = $183 << 8;
     $185 = $entry_start;
     $186 = ((($185)) + 1|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = (($184) + ($188))|0;
     $190 = $189&65535;
     $191 = $pp;
     $192 = ((($191)) + 6|0);
     HEAP16[$192>>1] = $190;
     $193 = $entry_start;
     $194 = ((($193)) + 2|0);
     $entry_start = $194;
    }
    $195 = $entry_start;
    $196 = HEAP8[$195>>0]|0;
    $197 = $196&255;
    $198 = $197 << 8;
    $199 = $entry_start;
    $200 = ((($199)) + 1|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = (($198) + ($202))|0;
    $204 = $203&65535;
    $205 = $pp;
    $206 = ((($205)) + 8|0);
    HEAP16[$206>>1] = $204;
    $207 = $entry_start;
    $208 = ((($207)) + 2|0);
    $entry_start = $208;
    $209 = $i;
    $210 = (($209) + 1)|0;
    $i = $210;
   }
   $211 = $buffer;
   HEAP32[$new_palette>>2] = $211;
   $212 = $0;
   $213 = $1;
   _png_set_sPLT($212,$213,$new_palette,1);
   $214 = $0;
   $215 = ((($new_palette)) + 8|0);
   $216 = HEAP32[$215>>2]|0;
   _png_free($214,$216);
   STACKTOP = sp;return;
  }
 }
 $63 = $0;
 _png_warning($63,16698);
 STACKTOP = sp;return;
}
function _png_handle_tRNS($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buf1 = 0, $or$cond = 0, $or$cond3 = 0, $readbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $readbuf = sp + 24|0;
 $buf = sp + 18|0;
 $buf1 = sp + 12|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 16;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $2;
   (_png_crc_finish($23,$24)|0);
   $25 = $0;
   _png_chunk_benign_error($25,16345);
   STACKTOP = sp;return;
  }
 }
 $26 = $0;
 $27 = ((($26)) + 427|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = ($29|0)==(0);
 do {
  if ($30) {
   $31 = $2;
   $32 = ($31|0)!=(2);
   $33 = $0;
   if (!($32)) {
    _png_crc_read($33,$buf,2);
    $36 = $0;
    $37 = ((($36)) + 420|0);
    HEAP16[$37>>1] = 1;
    $38 = HEAP8[$buf>>0]|0;
    $39 = $38&255;
    $40 = $39 << 8;
    $41 = ((($buf)) + 1|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = (($40) + ($43))|0;
    $45 = $44&65535;
    $46 = $0;
    $47 = ((($46)) + 524|0);
    $48 = ((($47)) + 8|0);
    HEAP16[$48>>1] = $45;
    break;
   }
   $34 = $2;
   (_png_crc_finish($33,$34)|0);
   $35 = $0;
   _png_chunk_benign_error($35,16324);
   STACKTOP = sp;return;
  } else {
   $49 = $0;
   $50 = ((($49)) + 427|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = ($52|0)==(2);
   if ($53) {
    $54 = $2;
    $55 = ($54|0)!=(6);
    $56 = $0;
    if (!($55)) {
     $59 = $2;
     _png_crc_read($56,$buf1,$59);
     $60 = $0;
     $61 = ((($60)) + 420|0);
     HEAP16[$61>>1] = 1;
     $62 = HEAP8[$buf1>>0]|0;
     $63 = $62&255;
     $64 = $63 << 8;
     $65 = ((($buf1)) + 1|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = (($64) + ($67))|0;
     $69 = $68&65535;
     $70 = $0;
     $71 = ((($70)) + 524|0);
     $72 = ((($71)) + 2|0);
     HEAP16[$72>>1] = $69;
     $73 = ((($buf1)) + 2|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74&255;
     $76 = $75 << 8;
     $77 = ((($buf1)) + 2|0);
     $78 = ((($77)) + 1|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = (($76) + ($80))|0;
     $82 = $81&65535;
     $83 = $0;
     $84 = ((($83)) + 524|0);
     $85 = ((($84)) + 4|0);
     HEAP16[$85>>1] = $82;
     $86 = ((($buf1)) + 4|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $88 << 8;
     $90 = ((($buf1)) + 4|0);
     $91 = ((($90)) + 1|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = (($89) + ($93))|0;
     $95 = $94&65535;
     $96 = $0;
     $97 = ((($96)) + 524|0);
     $98 = ((($97)) + 6|0);
     HEAP16[$98>>1] = $95;
     break;
    }
    $57 = $2;
    (_png_crc_finish($56,$57)|0);
    $58 = $0;
    _png_chunk_benign_error($58,16324);
    STACKTOP = sp;return;
   }
   $99 = $0;
   $100 = ((($99)) + 427|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ($102|0)==(3);
   $104 = $0;
   if (!($103)) {
    $130 = $2;
    (_png_crc_finish($104,$130)|0);
    $131 = $0;
    _png_chunk_benign_error($131,16801);
    STACKTOP = sp;return;
   }
   $105 = ((($104)) + 208|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 & 2;
   $108 = ($107|0)==(0);
   if ($108) {
    $109 = $0;
    $110 = $2;
    (_png_crc_finish($109,$110)|0);
    $111 = $0;
    _png_chunk_benign_error($111,16311);
    STACKTOP = sp;return;
   }
   $112 = $2;
   $113 = $0;
   $114 = ((($113)) + 412|0);
   $115 = HEAP16[$114>>1]|0;
   $116 = $115&65535;
   $117 = ($112>>>0)>($116>>>0);
   $118 = $2;
   $119 = ($118>>>0)>(256);
   $or$cond = $117 | $119;
   $120 = $2;
   $121 = ($120|0)==(0);
   $or$cond3 = $or$cond | $121;
   $122 = $0;
   if (!($or$cond3)) {
    $125 = $2;
    _png_crc_read($122,$readbuf,$125);
    $126 = $2;
    $127 = $126&65535;
    $128 = $0;
    $129 = ((($128)) + 420|0);
    HEAP16[$129>>1] = $127;
    break;
   }
   $123 = $2;
   (_png_crc_finish($122,$123)|0);
   $124 = $0;
   _png_chunk_benign_error($124,16324);
   STACKTOP = sp;return;
  }
 } while(0);
 $132 = $0;
 $133 = (_png_crc_finish($132,0)|0);
 $134 = ($133|0)!=(0);
 $135 = $0;
 if ($134) {
  $136 = ((($135)) + 420|0);
  HEAP16[$136>>1] = 0;
  STACKTOP = sp;return;
 } else {
  $137 = $1;
  $138 = $0;
  $139 = ((($138)) + 420|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140&65535;
  $142 = $0;
  $143 = ((($142)) + 524|0);
  _png_set_tRNS($135,$137,$readbuf,$141,$143);
  STACKTOP = sp;return;
 }
}
function _png_handle_bKGD($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $background = 0, $buf = 0, $truelen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 26|0;
 $background = sp + 16|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 do {
  if (!($12)) {
   $13 = $0;
   $14 = ((($13)) + 427|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(3);
   if ($17) {
    $18 = $0;
    $19 = ((($18)) + 208|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & 2;
    $22 = ($21|0)==(0);
    if ($22) {
     break;
    }
   }
   $26 = $1;
   $27 = ($26|0)!=(0|0);
   if ($27) {
    $28 = $1;
    $29 = ((($28)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30 & 32;
    $32 = ($31|0)!=(0);
    if ($32) {
     $33 = $0;
     $34 = $2;
     (_png_crc_finish($33,$34)|0);
     $35 = $0;
     _png_chunk_benign_error($35,16345);
     STACKTOP = sp;return;
    }
   }
   $36 = $0;
   $37 = ((($36)) + 427|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==(3);
   do {
    if ($40) {
     $truelen = 1;
    } else {
     $41 = $0;
     $42 = ((($41)) + 427|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = $44 & 2;
     $46 = ($45|0)!=(0);
     if ($46) {
      $truelen = 6;
      break;
     } else {
      $truelen = 2;
      break;
     }
    }
   } while(0);
   $47 = $2;
   $48 = $truelen;
   $49 = ($47|0)!=($48|0);
   $50 = $0;
   if ($49) {
    $51 = $2;
    (_png_crc_finish($50,$51)|0);
    $52 = $0;
    _png_chunk_benign_error($52,16324);
    STACKTOP = sp;return;
   }
   $53 = $truelen;
   _png_crc_read($50,$buf,$53);
   $54 = $0;
   $55 = (_png_crc_finish($54,0)|0);
   $56 = ($55|0)!=(0);
   if ($56) {
    STACKTOP = sp;return;
   }
   $57 = $0;
   $58 = ((($57)) + 427|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = ($60|0)==(3);
   do {
    if ($61) {
     $62 = HEAP8[$buf>>0]|0;
     HEAP8[$background>>0] = $62;
     $63 = $1;
     $64 = ($63|0)!=(0|0);
     do {
      if ($64) {
       $65 = $1;
       $66 = ((($65)) + 20|0);
       $67 = HEAP16[$66>>1]|0;
       $68 = $67&65535;
       $69 = ($68|0)!=(0);
       if ($69) {
        $70 = HEAP8[$buf>>0]|0;
        $71 = $70&255;
        $72 = $1;
        $73 = ((($72)) + 20|0);
        $74 = HEAP16[$73>>1]|0;
        $75 = $74&65535;
        $76 = ($71|0)>=($75|0);
        if (!($76)) {
         $78 = HEAP8[$buf>>0]|0;
         $79 = $78&255;
         $80 = $0;
         $81 = ((($80)) + 408|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = (($82) + (($79*3)|0)|0);
         $84 = HEAP8[$83>>0]|0;
         $85 = $84&255;
         $86 = ((($background)) + 2|0);
         HEAP16[$86>>1] = $85;
         $87 = HEAP8[$buf>>0]|0;
         $88 = $87&255;
         $89 = $0;
         $90 = ((($89)) + 408|0);
         $91 = HEAP32[$90>>2]|0;
         $92 = (($91) + (($88*3)|0)|0);
         $93 = ((($92)) + 1|0);
         $94 = HEAP8[$93>>0]|0;
         $95 = $94&255;
         $96 = ((($background)) + 4|0);
         HEAP16[$96>>1] = $95;
         $97 = HEAP8[$buf>>0]|0;
         $98 = $97&255;
         $99 = $0;
         $100 = ((($99)) + 408|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = (($101) + (($98*3)|0)|0);
         $103 = ((($102)) + 2|0);
         $104 = HEAP8[$103>>0]|0;
         $105 = $104&255;
         $106 = ((($background)) + 6|0);
         HEAP16[$106>>1] = $105;
         break;
        }
        $77 = $0;
        _png_chunk_benign_error($77,16828);
        STACKTOP = sp;return;
       } else {
        label = 24;
       }
      } else {
       label = 24;
      }
     } while(0);
     if ((label|0) == 24) {
      $107 = ((($background)) + 6|0);
      HEAP16[$107>>1] = 0;
      $108 = ((($background)) + 4|0);
      HEAP16[$108>>1] = 0;
      $109 = ((($background)) + 2|0);
      HEAP16[$109>>1] = 0;
     }
     $110 = ((($background)) + 8|0);
     HEAP16[$110>>1] = 0;
    } else {
     $111 = $0;
     $112 = ((($111)) + 427|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = $114 & 2;
     $116 = ($115|0)==(0);
     HEAP8[$background>>0] = 0;
     $117 = HEAP8[$buf>>0]|0;
     $118 = $117&255;
     $119 = $118 << 8;
     $120 = ((($buf)) + 1|0);
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = (($119) + ($122))|0;
     $124 = $123&65535;
     if ($116) {
      $125 = ((($background)) + 8|0);
      HEAP16[$125>>1] = $124;
      $126 = ((($background)) + 6|0);
      HEAP16[$126>>1] = $124;
      $127 = ((($background)) + 4|0);
      HEAP16[$127>>1] = $124;
      $128 = ((($background)) + 2|0);
      HEAP16[$128>>1] = $124;
      break;
     } else {
      $129 = ((($background)) + 2|0);
      HEAP16[$129>>1] = $124;
      $130 = ((($buf)) + 2|0);
      $131 = HEAP8[$130>>0]|0;
      $132 = $131&255;
      $133 = $132 << 8;
      $134 = ((($buf)) + 2|0);
      $135 = ((($134)) + 1|0);
      $136 = HEAP8[$135>>0]|0;
      $137 = $136&255;
      $138 = (($133) + ($137))|0;
      $139 = $138&65535;
      $140 = ((($background)) + 4|0);
      HEAP16[$140>>1] = $139;
      $141 = ((($buf)) + 4|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = $143 << 8;
      $145 = ((($buf)) + 4|0);
      $146 = ((($145)) + 1|0);
      $147 = HEAP8[$146>>0]|0;
      $148 = $147&255;
      $149 = (($144) + ($148))|0;
      $150 = $149&65535;
      $151 = ((($background)) + 6|0);
      HEAP16[$151>>1] = $150;
      $152 = ((($background)) + 8|0);
      HEAP16[$152>>1] = 0;
      break;
     }
    }
   } while(0);
   $153 = $0;
   $154 = $1;
   _png_set_bKGD($153,$154,$background);
   STACKTOP = sp;return;
  }
 } while(0);
 $23 = $0;
 $24 = $2;
 (_png_crc_finish($23,$24)|0);
 $25 = $0;
 _png_chunk_benign_error($25,16311);
 STACKTOP = sp;return;
}
function _png_handle_hIST($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $i = 0, $num = 0, $or$cond = 0, $readbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $readbuf = sp + 24|0;
 $buf = sp + 536|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $13 = $0;
  $14 = ((($13)) + 208|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 2;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $21 = $1;
   $22 = ($21|0)!=(0|0);
   if ($22) {
    $23 = $1;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 64;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $0;
     $29 = $2;
     (_png_crc_finish($28,$29)|0);
     $30 = $0;
     _png_chunk_benign_error($30,16345);
     STACKTOP = sp;return;
    }
   }
   $31 = $2;
   $32 = (($31>>>0) / 2)&-1;
   $num = $32;
   $33 = $num;
   $34 = $0;
   $35 = ((($34)) + 412|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = ($33|0)!=($37|0);
   $39 = $num;
   $40 = ($39>>>0)>(256);
   $or$cond = $38 | $40;
   if ($or$cond) {
    $41 = $0;
    $42 = $2;
    (_png_crc_finish($41,$42)|0);
    $43 = $0;
    _png_chunk_benign_error($43,16324);
    STACKTOP = sp;return;
   }
   $i = 0;
   while(1) {
    $44 = $i;
    $45 = $num;
    $46 = ($44>>>0)<($45>>>0);
    $47 = $0;
    if (!($46)) {
     break;
    }
    _png_crc_read($47,$buf,2);
    $48 = HEAP8[$buf>>0]|0;
    $49 = $48&255;
    $50 = $49 << 8;
    $51 = ((($buf)) + 1|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = (($50) + ($53))|0;
    $55 = $54&65535;
    $56 = $i;
    $57 = (($readbuf) + ($56<<1)|0);
    HEAP16[$57>>1] = $55;
    $58 = $i;
    $59 = (($58) + 1)|0;
    $i = $59;
   }
   $60 = (_png_crc_finish($47,0)|0);
   $61 = ($60|0)!=(0);
   if ($61) {
    STACKTOP = sp;return;
   }
   $62 = $0;
   $63 = $1;
   _png_set_hIST($62,$63,$readbuf);
   STACKTOP = sp;return;
  }
 }
 $18 = $0;
 $19 = $2;
 (_png_crc_finish($18,$19)|0);
 $20 = $0;
 _png_chunk_benign_error($20,16311);
 STACKTOP = sp;return;
}
function _png_handle_pHYs($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $res_x = 0, $res_y = 0, $unit_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 128;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $2;
   (_png_crc_finish($23,$24)|0);
   $25 = $0;
   _png_chunk_benign_error($25,16345);
   STACKTOP = sp;return;
  }
 }
 $26 = $2;
 $27 = ($26|0)!=(9);
 $28 = $0;
 if ($27) {
  $29 = $2;
  (_png_crc_finish($28,$29)|0);
  $30 = $0;
  _png_chunk_benign_error($30,16324);
  STACKTOP = sp;return;
 }
 _png_crc_read($28,$buf,9);
 $31 = $0;
 $32 = (_png_crc_finish($31,0)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = HEAP8[$buf>>0]|0;
 $35 = $34&255;
 $36 = $35 << 24;
 $37 = ((($buf)) + 1|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 16;
 $41 = (($36) + ($40))|0;
 $42 = ((($buf)) + 2|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 << 8;
 $46 = (($41) + ($45))|0;
 $47 = ((($buf)) + 3|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (($46) + ($49))|0;
 $res_x = $50;
 $51 = ((($buf)) + 4|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53 << 24;
 $55 = ((($buf)) + 4|0);
 $56 = ((($55)) + 1|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $58 << 16;
 $60 = (($54) + ($59))|0;
 $61 = ((($buf)) + 4|0);
 $62 = ((($61)) + 2|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $64 << 8;
 $66 = (($60) + ($65))|0;
 $67 = ((($buf)) + 4|0);
 $68 = ((($67)) + 3|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = (($66) + ($70))|0;
 $res_y = $71;
 $72 = ((($buf)) + 8|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $unit_type = $74;
 $75 = $0;
 $76 = $1;
 $77 = $res_x;
 $78 = $res_y;
 $79 = $unit_type;
 _png_set_pHYs($75,$76,$77,$78,$79);
 STACKTOP = sp;return;
}
function _png_handle_oFFs($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $buf = 0;
 var $offset_x = 0, $offset_y = 0, $unit_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 256;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $2;
   (_png_crc_finish($23,$24)|0);
   $25 = $0;
   _png_chunk_benign_error($25,16345);
   STACKTOP = sp;return;
  }
 }
 $26 = $2;
 $27 = ($26|0)!=(9);
 $28 = $0;
 if ($27) {
  $29 = $2;
  (_png_crc_finish($28,$29)|0);
  $30 = $0;
  _png_chunk_benign_error($30,16324);
  STACKTOP = sp;return;
 }
 _png_crc_read($28,$buf,9);
 $31 = $0;
 $32 = (_png_crc_finish($31,0)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = HEAP8[$buf>>0]|0;
 $35 = $34&255;
 $36 = $35 & 128;
 $37 = ($36|0)!=(0);
 $38 = HEAP8[$buf>>0]|0;
 $39 = $38&255;
 $40 = $39 << 24;
 $41 = ((($buf)) + 1|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 16;
 $45 = (($40) + ($44))|0;
 $46 = ((($buf)) + 2|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $48 << 8;
 $50 = (($45) + ($49))|0;
 $51 = ((($buf)) + 3|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = (($50) + ($53))|0;
 if ($37) {
  $55 = $54 ^ -1;
  $56 = (($55) + 1)|0;
  $57 = $56 & 2147483647;
  $58 = (0 - ($57))|0;
  $59 = $58;
 } else {
  $59 = $54;
 }
 $offset_x = $59;
 $60 = ((($buf)) + 4|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $62 & 128;
 $64 = ($63|0)!=(0);
 $65 = ((($buf)) + 4|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 << 24;
 $69 = ((($buf)) + 4|0);
 $70 = ((($69)) + 1|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $72 << 16;
 $74 = (($68) + ($73))|0;
 $75 = ((($buf)) + 4|0);
 $76 = ((($75)) + 2|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = $78 << 8;
 $80 = (($74) + ($79))|0;
 $81 = ((($buf)) + 4|0);
 $82 = ((($81)) + 3|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = (($80) + ($84))|0;
 if ($64) {
  $86 = $85 ^ -1;
  $87 = (($86) + 1)|0;
  $88 = $87 & 2147483647;
  $89 = (0 - ($88))|0;
  $90 = $89;
 } else {
  $90 = $85;
 }
 $offset_y = $90;
 $91 = ((($buf)) + 8|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $unit_type = $93;
 $94 = $0;
 $95 = $1;
 $96 = $offset_x;
 $97 = $offset_y;
 $98 = $unit_type;
 _png_set_oFFs($94,$95,$96,$97,$98);
 STACKTOP = sp;return;
}
function _png_handle_pCAL($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $X0 = 0, $X1 = 0, $buf = 0, $buffer = 0, $endptr = 0, $i = 0, $nparams = 0, $params = 0, $type = 0, $units = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 1024;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $2;
   (_png_crc_finish($23,$24)|0);
   $25 = $0;
   _png_chunk_benign_error($25,16345);
   STACKTOP = sp;return;
  }
 }
 $26 = $0;
 $27 = $2;
 $28 = (($27) + 1)|0;
 $29 = (_png_read_buffer($26,$28,2)|0);
 $buffer = $29;
 $30 = $buffer;
 $31 = ($30|0)==(0|0);
 $32 = $0;
 if ($31) {
  $33 = $2;
  (_png_crc_finish($32,$33)|0);
  $34 = $0;
  _png_chunk_benign_error($34,16606);
  STACKTOP = sp;return;
 }
 $35 = $buffer;
 $36 = $2;
 _png_crc_read($32,$35,$36);
 $37 = $0;
 $38 = (_png_crc_finish($37,0)|0);
 $39 = ($38|0)!=(0);
 if ($39) {
  STACKTOP = sp;return;
 }
 $40 = $2;
 $41 = $buffer;
 $42 = (($41) + ($40)|0);
 HEAP8[$42>>0] = 0;
 $43 = $buffer;
 $buf = $43;
 while(1) {
  $44 = $buf;
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)!=(0);
  if (!($46)) {
   break;
  }
  $47 = $buf;
  $48 = ((($47)) + 1|0);
  $buf = $48;
 }
 $49 = $buffer;
 $50 = $2;
 $51 = (($49) + ($50)|0);
 $endptr = $51;
 $52 = $endptr;
 $53 = $buf;
 $54 = $52;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = ($56|0)<=(12);
 if ($57) {
  $58 = $0;
  _png_chunk_benign_error($58,16324);
  STACKTOP = sp;return;
 }
 $59 = $buf;
 $60 = ((($59)) + 1|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61&255;
 $63 = $62 & 128;
 $64 = ($63|0)!=(0);
 $65 = $buf;
 $66 = ((($65)) + 1|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $68 << 24;
 $70 = $buf;
 $71 = ((($70)) + 1|0);
 $72 = ((($71)) + 1|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 << 16;
 $76 = (($69) + ($75))|0;
 $77 = $buf;
 $78 = ((($77)) + 1|0);
 $79 = ((($78)) + 2|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $81 << 8;
 $83 = (($76) + ($82))|0;
 $84 = $buf;
 $85 = ((($84)) + 1|0);
 $86 = ((($85)) + 3|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = (($83) + ($88))|0;
 if ($64) {
  $90 = $89 ^ -1;
  $91 = (($90) + 1)|0;
  $92 = $91 & 2147483647;
  $93 = (0 - ($92))|0;
  $94 = $93;
 } else {
  $94 = $89;
 }
 $X0 = $94;
 $95 = $buf;
 $96 = ((($95)) + 5|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $98 & 128;
 $100 = ($99|0)!=(0);
 $101 = $buf;
 $102 = ((($101)) + 5|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $104 << 24;
 $106 = $buf;
 $107 = ((($106)) + 5|0);
 $108 = ((($107)) + 1|0);
 $109 = HEAP8[$108>>0]|0;
 $110 = $109&255;
 $111 = $110 << 16;
 $112 = (($105) + ($111))|0;
 $113 = $buf;
 $114 = ((($113)) + 5|0);
 $115 = ((($114)) + 2|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = $117 << 8;
 $119 = (($112) + ($118))|0;
 $120 = $buf;
 $121 = ((($120)) + 5|0);
 $122 = ((($121)) + 3|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123&255;
 $125 = (($119) + ($124))|0;
 if ($100) {
  $126 = $125 ^ -1;
  $127 = (($126) + 1)|0;
  $128 = $127 & 2147483647;
  $129 = (0 - ($128))|0;
  $130 = $129;
 } else {
  $130 = $125;
 }
 $X1 = $130;
 $131 = $buf;
 $132 = ((($131)) + 9|0);
 $133 = HEAP8[$132>>0]|0;
 $type = $133;
 $134 = $buf;
 $135 = ((($134)) + 10|0);
 $136 = HEAP8[$135>>0]|0;
 $nparams = $136;
 $137 = $buf;
 $138 = ((($137)) + 11|0);
 $units = $138;
 $139 = $type;
 $140 = $139&255;
 $141 = ($140|0)==(0);
 if ($141) {
  $142 = $nparams;
  $143 = $142&255;
  $144 = ($143|0)!=(2);
  if (!($144)) {
   label = 22;
  }
 } else {
  label = 22;
 }
 do {
  if ((label|0) == 22) {
   $145 = $type;
   $146 = $145&255;
   $147 = ($146|0)==(1);
   if ($147) {
    $148 = $nparams;
    $149 = $148&255;
    $150 = ($149|0)!=(3);
    if ($150) {
     break;
    }
   }
   $151 = $type;
   $152 = $151&255;
   $153 = ($152|0)==(2);
   if ($153) {
    $154 = $nparams;
    $155 = $154&255;
    $156 = ($155|0)!=(3);
    if ($156) {
     break;
    }
   }
   $157 = $type;
   $158 = $157&255;
   $159 = ($158|0)==(3);
   if ($159) {
    $160 = $nparams;
    $161 = $160&255;
    $162 = ($161|0)!=(4);
    if ($162) {
     break;
    }
   }
   $164 = $type;
   $165 = $164&255;
   $166 = ($165|0)>=(4);
   if ($166) {
    $167 = $0;
    _png_chunk_benign_error($167,16866);
   }
   $168 = $units;
   $buf = $168;
   while(1) {
    $169 = $buf;
    $170 = HEAP8[$169>>0]|0;
    $171 = ($170<<24>>24)!=(0);
    if (!($171)) {
     break;
    }
    $172 = $buf;
    $173 = ((($172)) + 1|0);
    $buf = $173;
   }
   $174 = $0;
   $175 = $nparams;
   $176 = $175&255;
   $177 = $176<<2;
   $178 = (_png_malloc_warn($174,$177)|0);
   $params = $178;
   $179 = $params;
   $180 = ($179|0)==(0|0);
   if ($180) {
    $181 = $0;
    _png_chunk_benign_error($181,16606);
    STACKTOP = sp;return;
   }
   $i = 0;
   while(1) {
    $182 = $i;
    $183 = $nparams;
    $184 = $183&255;
    $185 = ($182|0)<($184|0);
    if (!($185)) {
     label = 45;
     break;
    }
    $186 = $buf;
    $187 = ((($186)) + 1|0);
    $buf = $187;
    $188 = $buf;
    $189 = $i;
    $190 = $params;
    $191 = (($190) + ($189<<2)|0);
    HEAP32[$191>>2] = $188;
    while(1) {
     $192 = $buf;
     $193 = $endptr;
     $194 = ($192>>>0)<=($193>>>0);
     if (!($194)) {
      break;
     }
     $195 = $buf;
     $196 = HEAP8[$195>>0]|0;
     $197 = $196&255;
     $198 = ($197|0)!=(0);
     if (!($198)) {
      break;
     }
     $199 = $buf;
     $200 = ((($199)) + 1|0);
     $buf = $200;
    }
    $201 = $buf;
    $202 = $endptr;
    $203 = ($201>>>0)>($202>>>0);
    if ($203) {
     label = 43;
     break;
    }
    $207 = $i;
    $208 = (($207) + 1)|0;
    $i = $208;
   }
   if ((label|0) == 43) {
    $204 = $0;
    $205 = $params;
    _png_free($204,$205);
    $206 = $0;
    _png_chunk_benign_error($206,16893);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 45) {
    $209 = $0;
    $210 = $1;
    $211 = $buffer;
    $212 = $X0;
    $213 = $X1;
    $214 = $type;
    $215 = $214&255;
    $216 = $nparams;
    $217 = $216&255;
    $218 = $units;
    $219 = $params;
    _png_set_pCAL($209,$210,$211,$212,$213,$215,$217,$218,$219);
    $220 = $0;
    $221 = $params;
    _png_free($220,$221);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $163 = $0;
 _png_chunk_benign_error($163,16842);
 STACKTOP = sp;return;
}
function _png_handle_sCAL($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buffer = 0, $heighti = 0, $i = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = sp + 8|0;
 $state = sp + 4|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 $8 = $0;
 if ($7) {
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = ((($8)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 4;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $0;
  $14 = $2;
  (_png_crc_finish($13,$14)|0);
  $15 = $0;
  _png_chunk_benign_error($15,16311);
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 16384;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $0;
   $24 = $2;
   (_png_crc_finish($23,$24)|0);
   $25 = $0;
   _png_chunk_benign_error($25,16345);
   STACKTOP = sp;return;
  }
 }
 $26 = $2;
 $27 = ($26>>>0)<(4);
 $28 = $0;
 $29 = $2;
 if ($27) {
  (_png_crc_finish($28,$29)|0);
  $30 = $0;
  _png_chunk_benign_error($30,16324);
  STACKTOP = sp;return;
 }
 $31 = (($29) + 1)|0;
 $32 = (_png_read_buffer($28,$31,2)|0);
 $buffer = $32;
 $33 = $buffer;
 $34 = ($33|0)==(0|0);
 $35 = $0;
 if ($34) {
  _png_chunk_benign_error($35,16606);
  $36 = $0;
  $37 = $2;
  (_png_crc_finish($36,$37)|0);
  STACKTOP = sp;return;
 }
 $38 = $buffer;
 $39 = $2;
 _png_crc_read($35,$38,$39);
 $40 = $2;
 $41 = $buffer;
 $42 = (($41) + ($40)|0);
 HEAP8[$42>>0] = 0;
 $43 = $0;
 $44 = (_png_crc_finish($43,0)|0);
 $45 = ($44|0)!=(0);
 if ($45) {
  STACKTOP = sp;return;
 }
 $46 = $buffer;
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = ($48|0)!=(1);
 if ($49) {
  $50 = $buffer;
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)!=(2);
  if ($53) {
   $54 = $0;
   _png_chunk_benign_error($54,16906);
   STACKTOP = sp;return;
  }
 }
 HEAP32[$i>>2] = 1;
 HEAP32[$state>>2] = 0;
 $55 = $buffer;
 $56 = $2;
 $57 = (_png_check_fp_number($55,$56,$state,$i)|0);
 $58 = ($57|0)==(0);
 if (!($58)) {
  $59 = HEAP32[$i>>2]|0;
  $60 = $2;
  $61 = ($59>>>0)>=($60>>>0);
  if (!($61)) {
   $62 = HEAP32[$i>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[$i>>2] = $63;
   $64 = $buffer;
   $65 = (($64) + ($62)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = ($67|0)!=(0);
   if (!($68)) {
    $70 = HEAP32[$state>>2]|0;
    $71 = $70 & 392;
    $72 = ($71|0)==(264);
    $73 = $72&1;
    $74 = ($73|0)==(0);
    if ($74) {
     $75 = $0;
     _png_chunk_benign_error($75,16936);
     STACKTOP = sp;return;
    }
    $76 = HEAP32[$i>>2]|0;
    $heighti = $76;
    HEAP32[$state>>2] = 0;
    $77 = $buffer;
    $78 = $2;
    $79 = (_png_check_fp_number($77,$78,$state,$i)|0);
    $80 = ($79|0)==(0);
    if (!($80)) {
     $81 = HEAP32[$i>>2]|0;
     $82 = $2;
     $83 = ($81|0)!=($82|0);
     if (!($83)) {
      $85 = HEAP32[$state>>2]|0;
      $86 = $85 & 392;
      $87 = ($86|0)==(264);
      $88 = $87&1;
      $89 = ($88|0)==(0);
      $90 = $0;
      if ($89) {
       _png_chunk_benign_error($90,16973);
       STACKTOP = sp;return;
      } else {
       $91 = $1;
       $92 = $buffer;
       $93 = HEAP8[$92>>0]|0;
       $94 = $93&255;
       $95 = $buffer;
       $96 = ((($95)) + 1|0);
       $97 = $buffer;
       $98 = $heighti;
       $99 = (($97) + ($98)|0);
       _png_set_sCAL_s($90,$91,$94,$96,$99);
       STACKTOP = sp;return;
      }
     }
    }
    $84 = $0;
    _png_chunk_benign_error($84,16955);
    STACKTOP = sp;return;
   }
  }
 }
 $69 = $0;
 _png_chunk_benign_error($69,16919);
 STACKTOP = sp;return;
}
function _png_handle_tIME($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf = 0, $mod_time = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 24|0;
 $mod_time = sp + 16|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $0;
 $4 = ((($3)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $0;
  _png_chunk_error($8,16332);
  // unreachable;
 }
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 512;
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = $0;
   $17 = $2;
   (_png_crc_finish($16,$17)|0);
   $18 = $0;
   _png_chunk_benign_error($18,16345);
   STACKTOP = sp;return;
  }
 }
 $19 = $0;
 $20 = ((($19)) + 208|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 4;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $0;
  $25 = ((($24)) + 208|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 8;
  HEAP32[$25>>2] = $27;
 }
 $28 = $2;
 $29 = ($28|0)!=(7);
 $30 = $0;
 if ($29) {
  $31 = $2;
  (_png_crc_finish($30,$31)|0);
  $32 = $0;
  _png_chunk_benign_error($32,16324);
  STACKTOP = sp;return;
 }
 _png_crc_read($30,$buf,7);
 $33 = $0;
 $34 = (_png_crc_finish($33,0)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = ((($buf)) + 6|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = ((($mod_time)) + 6|0);
 HEAP8[$38>>0] = $37;
 $39 = ((($buf)) + 5|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ((($mod_time)) + 5|0);
 HEAP8[$41>>0] = $40;
 $42 = ((($buf)) + 4|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = ((($mod_time)) + 4|0);
 HEAP8[$44>>0] = $43;
 $45 = ((($buf)) + 3|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ((($mod_time)) + 3|0);
 HEAP8[$47>>0] = $46;
 $48 = ((($buf)) + 2|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = ((($mod_time)) + 2|0);
 HEAP8[$50>>0] = $49;
 $51 = HEAP8[$buf>>0]|0;
 $52 = $51&255;
 $53 = $52 << 8;
 $54 = ((($buf)) + 1|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = (($53) + ($56))|0;
 $58 = $57&65535;
 HEAP16[$mod_time>>1] = $58;
 $59 = $0;
 $60 = $1;
 _png_set_tIME($59,$60,$mod_time);
 STACKTOP = sp;return;
}
function _png_handle_tEXt($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $buffer = 0, $key = 0;
 var $skip = 0, $text = 0, $text_info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $text_info = sp + 16|0;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $skip = 0;
 $3 = $0;
 $4 = ((($3)) + 724|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 724|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  $11 = $0;
  if ($10) {
   $12 = $2;
   (_png_crc_finish($11,$12)|0);
   STACKTOP = sp;return;
  }
  $13 = ((($11)) + 724|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = $0;
   $18 = $2;
   (_png_crc_finish($17,$18)|0);
   $19 = $0;
   _png_chunk_benign_error($19,16993);
   STACKTOP = sp;return;
  }
 }
 $20 = $0;
 $21 = ((($20)) + 208|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)==(0);
 $25 = $0;
 if ($24) {
  _png_chunk_error($25,16332);
  // unreachable;
 }
 $26 = ((($25)) + 208|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 4;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $0;
  $31 = ((($30)) + 208|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 8;
  HEAP32[$31>>2] = $33;
 }
 $34 = $0;
 $35 = $2;
 $36 = (($35) + 1)|0;
 $37 = (_png_read_buffer($34,$36,1)|0);
 $buffer = $37;
 $38 = $buffer;
 $39 = ($38|0)==(0|0);
 $40 = $0;
 if ($39) {
  _png_chunk_benign_error($40,16606);
  STACKTOP = sp;return;
 }
 $41 = $buffer;
 $42 = $2;
 _png_crc_read($40,$41,$42);
 $43 = $0;
 $44 = $skip;
 $45 = (_png_crc_finish($43,$44)|0);
 $46 = ($45|0)!=(0);
 if ($46) {
  STACKTOP = sp;return;
 }
 $47 = $buffer;
 $key = $47;
 $48 = $2;
 $49 = $key;
 $50 = (($49) + ($48)|0);
 HEAP8[$50>>0] = 0;
 $51 = $key;
 $text = $51;
 while(1) {
  $52 = $text;
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)!=(0);
  $55 = $text;
  if (!($54)) {
   break;
  }
  $56 = ((($55)) + 1|0);
  $text = $56;
 }
 $57 = $key;
 $58 = $2;
 $59 = (($57) + ($58)|0);
 $60 = ($55|0)!=($59|0);
 if ($60) {
  $61 = $text;
  $62 = ((($61)) + 1|0);
  $text = $62;
 }
 HEAP32[$text_info>>2] = -1;
 $63 = $key;
 $64 = ((($text_info)) + 4|0);
 HEAP32[$64>>2] = $63;
 $65 = ((($text_info)) + 20|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($text_info)) + 24|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($text_info)) + 16|0);
 HEAP32[$67>>2] = 0;
 $68 = $text;
 $69 = ((($text_info)) + 8|0);
 HEAP32[$69>>2] = $68;
 $70 = $text;
 $71 = (_strlen($70)|0);
 $72 = ((($text_info)) + 12|0);
 HEAP32[$72>>2] = $71;
 $73 = $0;
 $74 = $1;
 $75 = (_png_set_text_2($73,$74,$text_info,1)|0);
 $76 = ($75|0)!=(0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $0;
 _png_warning($77,17017);
 STACKTOP = sp;return;
}
function _png_handle_zTXt($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $errmsg = 0, $keyword_length = 0, $or$cond = 0, $text = 0, $uncompressed_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uncompressed_length = sp + 28|0;
 $text = sp;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $errmsg = 0;
 $3 = $0;
 $4 = ((($3)) + 724|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 724|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  $11 = $0;
  if ($10) {
   $12 = $2;
   (_png_crc_finish($11,$12)|0);
   STACKTOP = sp;return;
  }
  $13 = ((($11)) + 724|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = $0;
   $18 = $2;
   (_png_crc_finish($17,$18)|0);
   $19 = $0;
   _png_chunk_benign_error($19,16993);
   STACKTOP = sp;return;
  }
 }
 $20 = $0;
 $21 = ((($20)) + 208|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)==(0);
 $25 = $0;
 if ($24) {
  _png_chunk_error($25,16332);
  // unreachable;
 }
 $26 = ((($25)) + 208|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 4;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $0;
  $31 = ((($30)) + 208|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 8;
  HEAP32[$31>>2] = $33;
 }
 $34 = $0;
 $35 = $2;
 $36 = (_png_read_buffer($34,$35,2)|0);
 $buffer = $36;
 $37 = $buffer;
 $38 = ($37|0)==(0|0);
 $39 = $0;
 if ($38) {
  $40 = $2;
  (_png_crc_finish($39,$40)|0);
  $41 = $0;
  _png_chunk_benign_error($41,16606);
  STACKTOP = sp;return;
 }
 $42 = $buffer;
 $43 = $2;
 _png_crc_read($39,$42,$43);
 $44 = $0;
 $45 = (_png_crc_finish($44,0)|0);
 $46 = ($45|0)!=(0);
 if ($46) {
  STACKTOP = sp;return;
 }
 $keyword_length = 0;
 while(1) {
  $47 = $keyword_length;
  $48 = $2;
  $49 = ($47>>>0)<($48>>>0);
  if (!($49)) {
   break;
  }
  $50 = $keyword_length;
  $51 = $buffer;
  $52 = (($51) + ($50)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)!=(0);
  if (!($55)) {
   break;
  }
  $56 = $keyword_length;
  $57 = (($56) + 1)|0;
  $keyword_length = $57;
 }
 $58 = $keyword_length;
 $59 = ($58>>>0)>(79);
 $60 = $keyword_length;
 $61 = ($60>>>0)<(1);
 $or$cond = $59 | $61;
 do {
  if ($or$cond) {
   $errmsg = 16653;
  } else {
   $62 = $keyword_length;
   $63 = (($62) + 3)|0;
   $64 = $2;
   $65 = ($63>>>0)>($64>>>0);
   if ($65) {
    $errmsg = 16620;
    break;
   }
   $66 = $keyword_length;
   $67 = (($66) + 1)|0;
   $68 = $buffer;
   $69 = (($68) + ($67)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = ($71|0)!=(0);
   if ($72) {
    $errmsg = 17059;
    break;
   }
   HEAP32[$uncompressed_length>>2] = -1;
   $73 = $0;
   $74 = $2;
   $75 = $keyword_length;
   $76 = (($75) + 2)|0;
   $77 = (_png_decompress_chunk($73,$74,$76,$uncompressed_length,1)|0);
   $78 = ($77|0)==(1);
   $79 = $0;
   if (!($78)) {
    $104 = ((($79)) + 224|0);
    $105 = ((($104)) + 24|0);
    $106 = HEAP32[$105>>2]|0;
    $errmsg = $106;
    break;
   }
   $80 = ((($79)) + 756|0);
   $81 = HEAP32[$80>>2]|0;
   $buffer = $81;
   $82 = HEAP32[$uncompressed_length>>2]|0;
   $83 = $keyword_length;
   $84 = (($83) + 2)|0;
   $85 = (($82) + ($84))|0;
   $86 = $buffer;
   $87 = (($86) + ($85)|0);
   HEAP8[$87>>0] = 0;
   HEAP32[$text>>2] = 0;
   $88 = $buffer;
   $89 = ((($text)) + 4|0);
   HEAP32[$89>>2] = $88;
   $90 = $buffer;
   $91 = $keyword_length;
   $92 = (($90) + ($91)|0);
   $93 = ((($92)) + 2|0);
   $94 = ((($text)) + 8|0);
   HEAP32[$94>>2] = $93;
   $95 = HEAP32[$uncompressed_length>>2]|0;
   $96 = ((($text)) + 12|0);
   HEAP32[$96>>2] = $95;
   $97 = ((($text)) + 16|0);
   HEAP32[$97>>2] = 0;
   $98 = ((($text)) + 20|0);
   HEAP32[$98>>2] = 0;
   $99 = ((($text)) + 24|0);
   HEAP32[$99>>2] = 0;
   $100 = $0;
   $101 = $1;
   $102 = (_png_set_text_2($100,$101,$text,1)|0);
   $103 = ($102|0)!=(0);
   if ($103) {
    $errmsg = 17084;
   }
  }
 } while(0);
 $107 = $errmsg;
 $108 = ($107|0)!=(0|0);
 if (!($108)) {
  STACKTOP = sp;return;
 }
 $109 = $0;
 $110 = $errmsg;
 _png_chunk_benign_error($109,$110);
 STACKTOP = sp;return;
}
function _png_decompress_chunk($png_ptr,$chunklength,$prefix_size,$newlength,$terminate) {
 $png_ptr = $png_ptr|0;
 $chunklength = $chunklength|0;
 $prefix_size = $prefix_size|0;
 $newlength = $newlength|0;
 $terminate = $terminate|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer_size = 0, $limit = 0, $lzsize = 0, $new_size = 0, $old_ptr = 0, $ret = 0, $text = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lzsize = sp + 16|0;
 $1 = $png_ptr;
 $2 = $chunklength;
 $3 = $prefix_size;
 $4 = $newlength;
 $5 = $terminate;
 $limit = -1;
 $6 = $1;
 $7 = ((($6)) + 728|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)>(0);
 if ($9) {
  $10 = $1;
  $11 = ((($10)) + 728|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $limit;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 728|0);
   $17 = HEAP32[$16>>2]|0;
   $limit = $17;
  }
 }
 $18 = $limit;
 $19 = $3;
 $20 = $5;
 $21 = ($20|0)!=(0);
 $22 = $21&1;
 $23 = (($19) + ($22))|0;
 $24 = ($18>>>0)>=($23>>>0);
 if (!($24)) {
  $148 = $1;
  _png_zstream_error($148,-4);
  $0 = -4;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 $25 = $3;
 $26 = $5;
 $27 = ($26|0)!=(0);
 $28 = $27&1;
 $29 = (($25) + ($28))|0;
 $30 = $limit;
 $31 = (($30) - ($29))|0;
 $limit = $31;
 $32 = $limit;
 $33 = $4;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($32>>>0)<($34>>>0);
 if ($35) {
  $36 = $limit;
  $37 = $4;
  HEAP32[$37>>2] = $36;
 }
 $38 = $1;
 $39 = $1;
 $40 = ((($39)) + 376|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_png_inflate_claim($38,$41)|0);
 $ret = $42;
 $43 = $ret;
 $44 = ($43|0)==(0);
 if ($44) {
  $45 = $2;
  $46 = $3;
  $47 = (($45) - ($46))|0;
  HEAP32[$lzsize>>2] = $47;
  $48 = $1;
  $49 = $1;
  $50 = ((($49)) + 376|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $1;
  $53 = ((($52)) + 756|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  $56 = (($54) + ($55)|0);
  $57 = $4;
  $58 = (_png_inflate($48,$51,1,$56,$lzsize,0,$57)|0);
  $ret = $58;
  $59 = $ret;
  $60 = ($59|0)==(1);
  do {
   if ($60) {
    $61 = $1;
    $62 = ((($61)) + 224|0);
    $63 = (_inflateReset($62)|0);
    $64 = ($63|0)==(0);
    if (!($64)) {
     $137 = $1;
     $138 = $ret;
     _png_zstream_error($137,$138);
     $139 = $ret;
     $140 = ($139|0)==(1);
     if (!($140)) {
      break;
     }
     $ret = -7;
     break;
    }
    $65 = $4;
    $66 = HEAP32[$65>>2]|0;
    $new_size = $66;
    $67 = $3;
    $68 = $new_size;
    $69 = (($67) + ($68))|0;
    $70 = $5;
    $71 = ($70|0)!=(0);
    $72 = $71&1;
    $73 = (($69) + ($72))|0;
    $buffer_size = $73;
    $74 = $1;
    $75 = $buffer_size;
    $76 = (_png_malloc_base($74,$75)|0);
    $text = $76;
    $77 = $text;
    $78 = ($77|0)!=(0|0);
    if (!($78)) {
     $ret = -4;
     $136 = $1;
     _png_zstream_error($136,-4);
     break;
    }
    $79 = $1;
    $80 = $1;
    $81 = ((($80)) + 376|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $1;
    $84 = ((($83)) + 756|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $3;
    $87 = (($85) + ($86)|0);
    $88 = $text;
    $89 = $3;
    $90 = (($88) + ($89)|0);
    $91 = $4;
    $92 = (_png_inflate($79,$82,1,$87,$lzsize,$90,$91)|0);
    $ret = $92;
    $93 = $ret;
    $94 = ($93|0)==(1);
    do {
     if ($94) {
      $95 = $new_size;
      $96 = $4;
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if (!($98)) {
       $ret = -7;
       break;
      }
      $99 = $5;
      $100 = ($99|0)!=(0);
      if ($100) {
       $101 = $3;
       $102 = $4;
       $103 = HEAP32[$102>>2]|0;
       $104 = (($101) + ($103))|0;
       $105 = $text;
       $106 = (($105) + ($104)|0);
       HEAP8[$106>>0] = 0;
      }
      $107 = $3;
      $108 = ($107>>>0)>(0);
      if ($108) {
       $109 = $text;
       $110 = $1;
       $111 = ((($110)) + 756|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $3;
       _memcpy(($109|0),($112|0),($113|0))|0;
      }
      $114 = $1;
      $115 = ((($114)) + 756|0);
      $116 = HEAP32[$115>>2]|0;
      $old_ptr = $116;
      $117 = $text;
      $118 = $1;
      $119 = ((($118)) + 756|0);
      HEAP32[$119>>2] = $117;
      $120 = $buffer_size;
      $121 = $1;
      $122 = ((($121)) + 760|0);
      HEAP32[$122>>2] = $120;
      $123 = $old_ptr;
      $text = $123;
     } else {
      $124 = $ret;
      $125 = ($124|0)==(0);
      if ($125) {
       $ret = -7;
      }
     }
    } while(0);
    $126 = $1;
    $127 = $text;
    _png_free($126,$127);
    $128 = $ret;
    $129 = ($128|0)==(1);
    if ($129) {
     $130 = $2;
     $131 = $3;
     $132 = (($130) - ($131))|0;
     $133 = HEAP32[$lzsize>>2]|0;
     $134 = ($132|0)!=($133|0);
     if ($134) {
      $135 = $1;
      _png_chunk_benign_error($135,16584);
     }
    }
   } else {
    $141 = $ret;
    $142 = ($141|0)==(0);
    if ($142) {
     $ret = -7;
    }
   }
  } while(0);
  $143 = $1;
  $144 = ((($143)) + 220|0);
  HEAP32[$144>>2] = 0;
 } else {
  $145 = $ret;
  $146 = ($145|0)==(1);
  if ($146) {
   $ret = -7;
  }
 }
 $147 = $ret;
 $0 = $147;
 $149 = $0;
 STACKTOP = sp;return ($149|0);
}
function _png_inflate($png_ptr,$owner,$finish,$input,$input_size_ptr,$output,$output_size_ptr) {
 $png_ptr = $png_ptr|0;
 $owner = $owner|0;
 $finish = $finish|0;
 $input = $input|0;
 $input_size_ptr = $input_size_ptr|0;
 $output = $output|0;
 $output_size_ptr = $output_size_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $avail = 0, $avail_in = 0, $avail_out = 0, $local_buffer = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $local_buffer = sp + 48|0;
 $1 = $png_ptr;
 $2 = $owner;
 $3 = $finish;
 $4 = $input;
 $5 = $input_size_ptr;
 $6 = $output;
 $7 = $output_size_ptr;
 $8 = $1;
 $9 = ((($8)) + 220|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = ($10|0)==($11|0);
 if (!($12)) {
  $116 = $1;
  $117 = ((($116)) + 224|0);
  $118 = ((($117)) + 24|0);
  HEAP32[$118>>2] = 16532;
  $0 = -2;
  $119 = $0;
  STACKTOP = sp;return ($119|0);
 }
 $13 = $7;
 $14 = HEAP32[$13>>2]|0;
 $avail_out = $14;
 $15 = $5;
 $16 = HEAP32[$15>>2]|0;
 $avail_in = $16;
 $17 = $4;
 $18 = $1;
 $19 = ((($18)) + 224|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $21 = ((($20)) + 224|0);
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 224|0);
 $25 = ((($24)) + 16|0);
 HEAP32[$25>>2] = 0;
 $26 = $6;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $6;
  $29 = $1;
  $30 = ((($29)) + 224|0);
  $31 = ((($30)) + 12|0);
  HEAP32[$31>>2] = $28;
 }
 while(1) {
  $32 = $1;
  $33 = ((($32)) + 224|0);
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $avail_in;
  $37 = (($36) + ($35))|0;
  $avail_in = $37;
  $avail = -1;
  $38 = $avail_in;
  $39 = $avail;
  $40 = ($38>>>0)<($39>>>0);
  if ($40) {
   $41 = $avail_in;
   $avail = $41;
  }
  $42 = $avail;
  $43 = $avail_in;
  $44 = (($43) - ($42))|0;
  $avail_in = $44;
  $45 = $avail;
  $46 = $1;
  $47 = ((($46)) + 224|0);
  $48 = ((($47)) + 4|0);
  HEAP32[$48>>2] = $45;
  $49 = $1;
  $50 = ((($49)) + 224|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $avail_out;
  $54 = (($53) + ($52))|0;
  $avail_out = $54;
  $avail = -1;
  $55 = $6;
  $56 = ($55|0)==(0|0);
  if ($56) {
   $57 = $1;
   $58 = ((($57)) + 224|0);
   $59 = ((($58)) + 12|0);
   HEAP32[$59>>2] = $local_buffer;
   $60 = $avail;
   $61 = (1024)<($60>>>0);
   if ($61) {
    $avail = 1024;
   }
  }
  $62 = $avail_out;
  $63 = $avail;
  $64 = ($62>>>0)<($63>>>0);
  if ($64) {
   $65 = $avail_out;
   $avail = $65;
  }
  $66 = $avail;
  $67 = $1;
  $68 = ((($67)) + 224|0);
  $69 = ((($68)) + 16|0);
  HEAP32[$69>>2] = $66;
  $70 = $avail;
  $71 = $avail_out;
  $72 = (($71) - ($70))|0;
  $avail_out = $72;
  $73 = $1;
  $74 = ((($73)) + 224|0);
  $75 = $avail_out;
  $76 = ($75>>>0)>(0);
  if ($76) {
   $80 = 0;
  } else {
   $77 = $3;
   $78 = ($77|0)!=(0);
   $79 = $78 ? 4 : 2;
   $80 = $79;
  }
  $81 = (_inflate($74,$80)|0);
  $ret = $81;
  $82 = $ret;
  $83 = ($82|0)==(0);
  if (!($83)) {
   break;
  }
 }
 $84 = $6;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = $1;
  $87 = ((($86)) + 224|0);
  $88 = ((($87)) + 12|0);
  HEAP32[$88>>2] = 0;
 }
 $89 = $1;
 $90 = ((($89)) + 224|0);
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $avail_in;
 $94 = (($93) + ($92))|0;
 $avail_in = $94;
 $95 = $1;
 $96 = ((($95)) + 224|0);
 $97 = ((($96)) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $avail_out;
 $100 = (($99) + ($98))|0;
 $avail_out = $100;
 $101 = $avail_out;
 $102 = ($101>>>0)>(0);
 if ($102) {
  $103 = $avail_out;
  $104 = $7;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) - ($103))|0;
  HEAP32[$104>>2] = $106;
 }
 $107 = $avail_in;
 $108 = ($107>>>0)>(0);
 if ($108) {
  $109 = $avail_in;
  $110 = $5;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) - ($109))|0;
  HEAP32[$110>>2] = $112;
 }
 $113 = $1;
 $114 = $ret;
 _png_zstream_error($113,$114);
 $115 = $ret;
 $0 = $115;
 $119 = $0;
 STACKTOP = sp;return ($119|0);
}
function _png_handle_iTXt($png_ptr,$info_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $compressed = 0, $errmsg = 0, $language_offset = 0, $or$cond = 0, $prefix_length = 0, $text = 0, $translated_keyword_offset = 0, $uncompressed_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $uncompressed_length = sp + 28|0;
 $text = sp;
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $errmsg = 0;
 $3 = $0;
 $4 = ((($3)) + 724|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = ((($7)) + 724|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  $11 = $0;
  if ($10) {
   $12 = $2;
   (_png_crc_finish($11,$12)|0);
   STACKTOP = sp;return;
  }
  $13 = ((($11)) + 724|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ($15|0)==(1);
  if ($16) {
   $17 = $0;
   $18 = $2;
   (_png_crc_finish($17,$18)|0);
   $19 = $0;
   _png_chunk_benign_error($19,16993);
   STACKTOP = sp;return;
  }
 }
 $20 = $0;
 $21 = ((($20)) + 208|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 1;
 $24 = ($23|0)==(0);
 $25 = $0;
 if ($24) {
  _png_chunk_error($25,16332);
  // unreachable;
 }
 $26 = ((($25)) + 208|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 & 4;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $0;
  $31 = ((($30)) + 208|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 8;
  HEAP32[$31>>2] = $33;
 }
 $34 = $0;
 $35 = $2;
 $36 = (($35) + 1)|0;
 $37 = (_png_read_buffer($34,$36,1)|0);
 $buffer = $37;
 $38 = $buffer;
 $39 = ($38|0)==(0|0);
 $40 = $0;
 if ($39) {
  $41 = $2;
  (_png_crc_finish($40,$41)|0);
  $42 = $0;
  _png_chunk_benign_error($42,16606);
  STACKTOP = sp;return;
 }
 $43 = $buffer;
 $44 = $2;
 _png_crc_read($40,$43,$44);
 $45 = $0;
 $46 = (_png_crc_finish($45,0)|0);
 $47 = ($46|0)!=(0);
 if ($47) {
  STACKTOP = sp;return;
 }
 $prefix_length = 0;
 while(1) {
  $48 = $prefix_length;
  $49 = $2;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $prefix_length;
  $52 = $buffer;
  $53 = (($52) + ($51)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = ($55|0)!=(0);
  if (!($56)) {
   break;
  }
  $57 = $prefix_length;
  $58 = (($57) + 1)|0;
  $prefix_length = $58;
 }
 $59 = $prefix_length;
 $60 = ($59>>>0)>(79);
 $61 = $prefix_length;
 $62 = ($61>>>0)<(1);
 $or$cond = $60 | $62;
 L28: do {
  if ($or$cond) {
   $errmsg = 16653;
  } else {
   $63 = $prefix_length;
   $64 = (($63) + 5)|0;
   $65 = $2;
   $66 = ($64>>>0)>($65>>>0);
   if ($66) {
    $errmsg = 16620;
    break;
   }
   $67 = $prefix_length;
   $68 = (($67) + 1)|0;
   $69 = $buffer;
   $70 = (($69) + ($68)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = ($72|0)==(0);
   do {
    if (!($73)) {
     $74 = $prefix_length;
     $75 = (($74) + 1)|0;
     $76 = $buffer;
     $77 = (($76) + ($75)|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = ($79|0)==(1);
     if ($80) {
      $81 = $prefix_length;
      $82 = (($81) + 2)|0;
      $83 = $buffer;
      $84 = (($83) + ($82)|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = ($86|0)==(0);
      if ($87) {
       break;
      }
     }
     $errmsg = 17104;
     break L28;
    }
   } while(0);
   $88 = $prefix_length;
   $89 = (($88) + 1)|0;
   $90 = $buffer;
   $91 = (($90) + ($89)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = ($93|0)!=(0);
   $95 = $94&1;
   $compressed = $95;
   HEAP32[$uncompressed_length>>2] = 0;
   $96 = $prefix_length;
   $97 = (($96) + 3)|0;
   $prefix_length = $97;
   $98 = $prefix_length;
   $language_offset = $98;
   while(1) {
    $99 = $prefix_length;
    $100 = $2;
    $101 = ($99>>>0)<($100>>>0);
    if (!($101)) {
     break;
    }
    $102 = $prefix_length;
    $103 = $buffer;
    $104 = (($103) + ($102)|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = ($106|0)!=(0);
    if (!($107)) {
     break;
    }
    $108 = $prefix_length;
    $109 = (($108) + 1)|0;
    $prefix_length = $109;
   }
   $110 = $prefix_length;
   $111 = (($110) + 1)|0;
   $prefix_length = $111;
   $translated_keyword_offset = $111;
   while(1) {
    $112 = $prefix_length;
    $113 = $2;
    $114 = ($112>>>0)<($113>>>0);
    if (!($114)) {
     break;
    }
    $115 = $prefix_length;
    $116 = $buffer;
    $117 = (($116) + ($115)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = ($119|0)!=(0);
    if (!($120)) {
     break;
    }
    $121 = $prefix_length;
    $122 = (($121) + 1)|0;
    $prefix_length = $122;
   }
   $123 = $prefix_length;
   $124 = (($123) + 1)|0;
   $prefix_length = $124;
   $125 = $compressed;
   $126 = ($125|0)==(0);
   if ($126) {
    $127 = $prefix_length;
    $128 = $2;
    $129 = ($127>>>0)<=($128>>>0);
    if ($129) {
     $130 = $2;
     $131 = $prefix_length;
     $132 = (($130) - ($131))|0;
     HEAP32[$uncompressed_length>>2] = $132;
    } else {
     label = 35;
    }
   } else {
    label = 35;
   }
   do {
    if ((label|0) == 35) {
     $133 = $compressed;
     $134 = ($133|0)!=(0);
     if ($134) {
      $135 = $prefix_length;
      $136 = $2;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       HEAP32[$uncompressed_length>>2] = -1;
       $138 = $0;
       $139 = $2;
       $140 = $prefix_length;
       $141 = (_png_decompress_chunk($138,$139,$140,$uncompressed_length,1)|0);
       $142 = ($141|0)==(1);
       $143 = $0;
       if ($142) {
        $144 = ((($143)) + 756|0);
        $145 = HEAP32[$144>>2]|0;
        $buffer = $145;
        break;
       } else {
        $146 = ((($143)) + 224|0);
        $147 = ((($146)) + 24|0);
        $148 = HEAP32[$147>>2]|0;
        $errmsg = $148;
        break;
       }
      }
     }
     $errmsg = 16620;
    }
   } while(0);
   $149 = $errmsg;
   $150 = ($149|0)==(0|0);
   if ($150) {
    $151 = HEAP32[$uncompressed_length>>2]|0;
    $152 = $prefix_length;
    $153 = (($151) + ($152))|0;
    $154 = $buffer;
    $155 = (($154) + ($153)|0);
    HEAP8[$155>>0] = 0;
    $156 = $compressed;
    $157 = ($156|0)==(0);
    if ($157) {
     HEAP32[$text>>2] = 1;
    } else {
     HEAP32[$text>>2] = 2;
    }
    $158 = $buffer;
    $159 = ((($text)) + 4|0);
    HEAP32[$159>>2] = $158;
    $160 = $buffer;
    $161 = $language_offset;
    $162 = (($160) + ($161)|0);
    $163 = ((($text)) + 20|0);
    HEAP32[$163>>2] = $162;
    $164 = $buffer;
    $165 = $translated_keyword_offset;
    $166 = (($164) + ($165)|0);
    $167 = ((($text)) + 24|0);
    HEAP32[$167>>2] = $166;
    $168 = $buffer;
    $169 = $prefix_length;
    $170 = (($168) + ($169)|0);
    $171 = ((($text)) + 8|0);
    HEAP32[$171>>2] = $170;
    $172 = ((($text)) + 12|0);
    HEAP32[$172>>2] = 0;
    $173 = HEAP32[$uncompressed_length>>2]|0;
    $174 = ((($text)) + 16|0);
    HEAP32[$174>>2] = $173;
    $175 = $0;
    $176 = $1;
    $177 = (_png_set_text_2($175,$176,$text,1)|0);
    $178 = ($177|0)!=(0);
    if ($178) {
     $errmsg = 17084;
    }
   }
  }
 } while(0);
 $179 = $errmsg;
 $180 = ($179|0)!=(0|0);
 if (!($180)) {
  STACKTOP = sp;return;
 }
 $181 = $0;
 $182 = $errmsg;
 _png_chunk_benign_error($181,$182);
 STACKTOP = sp;return;
}
function _png_handle_unknown($png_ptr,$info_ptr,$length,$keep) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $length = $length|0;
 $keep = $keep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $handled = 0;
 var $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $length;
 $3 = $keep;
 $handled = 0;
 $4 = $0;
 $5 = ((($4)) + 652|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 L1: do {
  if ($7) {
   $8 = $0;
   $9 = $2;
   $10 = (_png_cache_unknown_chunk($8,$9)|0);
   $11 = ($10|0)!=(0);
   if (!($11)) {
    $3 = 1;
    break;
   }
   $12 = $0;
   $13 = ((($12)) + 652|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $0;
   $16 = $0;
   $17 = ((($16)) + 732|0);
   $18 = (FUNCTION_TABLE_iii[$14 & 31]($15,$17)|0);
   $ret = $18;
   $19 = $ret;
   $20 = ($19|0)<(0);
   if ($20) {
    $21 = $0;
    _png_chunk_error($21,17161);
    // unreachable;
   }
   $22 = $ret;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $handled = 1;
    $3 = 1;
    break;
   }
   $24 = $3;
   $25 = ($24|0)<(2);
   if ($25) {
    $26 = $0;
    $27 = ((($26)) + 656|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)<(2);
    if ($29) {
     $30 = $0;
     _png_chunk_warning($30,17181);
     $31 = $0;
     _png_app_warning($31,17203);
    }
    $3 = 2;
   }
  } else {
   $32 = $3;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $0;
    $35 = ((($34)) + 656|0);
    $36 = HEAP32[$35>>2]|0;
    $3 = $36;
   }
   $37 = $3;
   $38 = ($37|0)==(3);
   do {
    if (!($38)) {
     $39 = $3;
     $40 = ($39|0)==(2);
     if ($40) {
      $41 = $0;
      $42 = ((($41)) + 376|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $43 >>> 29;
      $45 = 1 & $44;
      $46 = ($45|0)!=(0);
      if ($46) {
       break;
      }
     }
     $51 = $0;
     $52 = $2;
     (_png_crc_finish($51,$52)|0);
     break L1;
    }
   } while(0);
   $47 = $0;
   $48 = $2;
   $49 = (_png_cache_unknown_chunk($47,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $3 = 1;
   }
  }
 } while(0);
 $53 = $3;
 $54 = ($53|0)==(3);
 if ($54) {
  label = 23;
 } else {
  $55 = $3;
  $56 = ($55|0)==(2);
  if ($56) {
   $57 = $0;
   $58 = ((($57)) + 376|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 >>> 29;
   $61 = 1 & $60;
   $62 = ($61|0)!=(0);
   if ($62) {
    label = 23;
   }
  }
 }
 L31: do {
  if ((label|0) == 23) {
   $63 = $0;
   $64 = ((($63)) + 724|0);
   $65 = HEAP32[$64>>2]|0;
   switch ($65|0) {
   case 1:  {
    break L31;
    break;
   }
   case 2:  {
    $66 = $0;
    $67 = ((($66)) + 724|0);
    HEAP32[$67>>2] = 1;
    $68 = $0;
    _png_chunk_benign_error($68,16993);
    break L31;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    $69 = $0;
    $70 = ((($69)) + 724|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + -1)|0;
    HEAP32[$70>>2] = $72;
   }
   }
   $73 = $0;
   $74 = $1;
   $75 = $0;
   $76 = ((($75)) + 732|0);
   _png_set_unknown_chunks($73,$74,$76,1);
   $handled = 1;
  }
 } while(0);
 $77 = $0;
 $78 = ((($77)) + 732|0);
 $79 = ((($78)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = $0;
  $83 = $0;
  $84 = ((($83)) + 732|0);
  $85 = ((($84)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  _png_free($82,$86);
 }
 $87 = $0;
 $88 = ((($87)) + 732|0);
 $89 = ((($88)) + 8|0);
 HEAP32[$89>>2] = 0;
 $90 = $handled;
 $91 = ($90|0)==(0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = $0;
 $93 = ((($92)) + 376|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 >>> 29;
 $96 = 1 & $95;
 $97 = ($96|0)!=(0);
 if ($97) {
  STACKTOP = sp;return;
 } else {
  $98 = $0;
  _png_chunk_error($98,17279);
  // unreachable;
 }
}
function _png_cache_unknown_chunk($png_ptr,$length) {
 $png_ptr = $png_ptr|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $limit = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $length;
 $limit = -1;
 $3 = $1;
 $4 = ((($3)) + 732|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = $1;
  $10 = ((($9)) + 732|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  _png_free($8,$12);
  $13 = $1;
  $14 = ((($13)) + 732|0);
  $15 = ((($14)) + 8|0);
  HEAP32[$15>>2] = 0;
 }
 $16 = $1;
 $17 = ((($16)) + 728|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)>(0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 728|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $limit;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $25 = $1;
   $26 = ((($25)) + 728|0);
   $27 = HEAP32[$26>>2]|0;
   $limit = $27;
  }
 }
 $28 = $2;
 $29 = $limit;
 $30 = ($28>>>0)<=($29>>>0);
 do {
  if ($30) {
   $31 = $1;
   $32 = ((($31)) + 376|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 >>> 24;
   $35 = $34 & 255;
   $36 = $35&255;
   $37 = $1;
   $38 = ((($37)) + 732|0);
   HEAP8[$38>>0] = $36;
   $39 = $1;
   $40 = ((($39)) + 376|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 >>> 16;
   $43 = $42 & 255;
   $44 = $43&255;
   $45 = $1;
   $46 = ((($45)) + 732|0);
   $47 = ((($46)) + 1|0);
   HEAP8[$47>>0] = $44;
   $48 = $1;
   $49 = ((($48)) + 376|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 >>> 8;
   $52 = $51 & 255;
   $53 = $52&255;
   $54 = $1;
   $55 = ((($54)) + 732|0);
   $56 = ((($55)) + 2|0);
   HEAP8[$56>>0] = $53;
   $57 = $1;
   $58 = ((($57)) + 376|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 255;
   $61 = $60&255;
   $62 = $1;
   $63 = ((($62)) + 732|0);
   $64 = ((($63)) + 3|0);
   HEAP8[$64>>0] = $61;
   $65 = $1;
   $66 = ((($65)) + 732|0);
   $67 = ((($66)) + 4|0);
   HEAP8[$67>>0] = 0;
   $68 = $2;
   $69 = $1;
   $70 = ((($69)) + 732|0);
   $71 = ((($70)) + 12|0);
   HEAP32[$71>>2] = $68;
   $72 = $1;
   $73 = ((($72)) + 208|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74&255;
   $76 = $1;
   $77 = ((($76)) + 732|0);
   $78 = ((($77)) + 16|0);
   HEAP8[$78>>0] = $75;
   $79 = $2;
   $80 = ($79|0)==(0);
   $81 = $1;
   if ($80) {
    $82 = ((($81)) + 732|0);
    $83 = ((($82)) + 8|0);
    HEAP32[$83>>2] = 0;
    break;
   } else {
    $84 = $2;
    $85 = (_png_malloc_warn($81,$84)|0);
    $86 = $1;
    $87 = ((($86)) + 732|0);
    $88 = ((($87)) + 8|0);
    HEAP32[$88>>2] = $85;
    break;
   }
  }
 } while(0);
 $89 = $1;
 $90 = ((($89)) + 732|0);
 $91 = ((($90)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)==(0|0);
 $94 = $2;
 $95 = ($94>>>0)>(0);
 $or$cond = $93 & $95;
 if ($or$cond) {
  $96 = $1;
  $97 = $2;
  (_png_crc_finish($96,$97)|0);
  $98 = $1;
  _png_chunk_benign_error($98,17125);
  $0 = 0;
  $108 = $0;
  STACKTOP = sp;return ($108|0);
 }
 $99 = $2;
 $100 = ($99>>>0)>(0);
 if ($100) {
  $101 = $1;
  $102 = $1;
  $103 = ((($102)) + 732|0);
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $2;
  _png_crc_read($101,$105,$106);
 }
 $107 = $1;
 (_png_crc_finish($107,0)|0);
 $0 = 1;
 $108 = $0;
 STACKTOP = sp;return ($108|0);
}
function _png_combine_row($png_ptr,$dp,$display) {
 $png_ptr = $png_ptr|0;
 $dp = $dp|0;
 $display = $display|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes_to_copy = 0, $bytes_to_jump = 0, $c = 0, $c2 = 0, $dp16 = 0, $dp32 = 0, $end_byte = 0, $end_mask = 0, $end_ptr = 0, $m = 0, $mask = 0;
 var $offset = 0, $or$cond = 0, $pass = 0, $pixel_depth = 0, $pixels_per_byte = 0, $row_width = 0, $skip = 0, $skip1 = 0, $sp = 0, $sp16 = 0, $sp32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $dp;
 $2 = $display;
 $3 = $0;
 $4 = ((($3)) + 435|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $pixel_depth = $6;
 $7 = $0;
 $8 = ((($7)) + 384|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 1|0);
 $sp = $10;
 $11 = $0;
 $12 = ((($11)) + 348|0);
 $13 = HEAP32[$12>>2]|0;
 $row_width = $13;
 $14 = $0;
 $15 = ((($14)) + 425|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $pass = $17;
 $end_ptr = 0;
 $end_byte = 0;
 $18 = $pixel_depth;
 $19 = ($18|0)==(0);
 $20 = $0;
 if ($19) {
  _png_error($20,17304);
  // unreachable;
 }
 $21 = ((($20)) + 396|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $0;
  $25 = ((($24)) + 396|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $pixel_depth;
  $28 = ($27>>>0)>=(8);
  $29 = $row_width;
  $30 = $pixel_depth;
  if ($28) {
   $31 = $30 >>> 3;
   $32 = Math_imul($29, $31)|0;
   $37 = $32;
  } else {
   $33 = Math_imul($29, $30)|0;
   $34 = (($33) + 7)|0;
   $35 = $34 >>> 3;
   $37 = $35;
  }
  $36 = ($26|0)!=($37|0);
  if ($36) {
   $38 = $0;
   _png_error($38,17329);
   // unreachable;
  }
 }
 $39 = $row_width;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = $0;
  _png_error($41,17365);
  // unreachable;
 }
 $42 = $pixel_depth;
 $43 = $row_width;
 $44 = Math_imul($42, $43)|0;
 $45 = $44 & 7;
 $end_mask = $45;
 $46 = $end_mask;
 $47 = ($46|0)!=(0);
 do {
  if ($47) {
   $48 = $1;
   $49 = $pixel_depth;
   $50 = ($49>>>0)>=(8);
   $51 = $row_width;
   $52 = $pixel_depth;
   if ($50) {
    $53 = $52 >>> 3;
    $54 = Math_imul($51, $53)|0;
    $59 = $54;
   } else {
    $55 = Math_imul($51, $52)|0;
    $56 = (($55) + 7)|0;
    $57 = $56 >>> 3;
    $59 = $57;
   }
   $58 = (($48) + ($59)|0);
   $60 = ((($58)) + -1|0);
   $end_ptr = $60;
   $61 = $end_ptr;
   $62 = HEAP8[$61>>0]|0;
   $end_byte = $62;
   $63 = $0;
   $64 = ((($63)) + 216|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 & 65536;
   $67 = ($66|0)!=(0);
   $68 = $end_mask;
   if ($67) {
    $69 = 255 << $68;
    $end_mask = $69;
    break;
   } else {
    $70 = 255 >> $68;
    $end_mask = $70;
    break;
   }
  }
 } while(0);
 $71 = $0;
 $72 = ((($71)) + 424|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = ($74|0)!=(0);
 L25: do {
  if ($75) {
   $76 = $0;
   $77 = ((($76)) + 216|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 & 2;
   $80 = ($79|0)!=(0);
   $81 = $pass;
   $82 = ($81>>>0)<(6);
   $or$cond = $80 & $82;
   if ($or$cond) {
    $83 = $2;
    $84 = ($83|0)==(0);
    if (!($84)) {
     $85 = $2;
     $86 = ($85|0)==(1);
     if (!($86)) {
      label = 88;
      break;
     }
     $87 = $pass;
     $88 = $87 & 1;
     $89 = ($88|0)!=(0);
     if (!($89)) {
      label = 88;
      break;
     }
    }
    $90 = $row_width;
    $91 = $pass;
    $92 = 1 & $91;
    $93 = $pass;
    $94 = (($93) + 1)|0;
    $95 = $94 >>> 1;
    $96 = (3 - ($95))|0;
    $97 = $92 << $96;
    $98 = $97 & 7;
    $99 = ($90>>>0)<=($98>>>0);
    if ($99) {
     STACKTOP = sp;return;
    }
    $100 = $pixel_depth;
    $101 = ($100>>>0)<(8);
    $102 = $pixel_depth;
    if ($101) {
     $103 = (8 / ($102>>>0))&-1;
     $pixels_per_byte = $103;
     $104 = $0;
     $105 = ((($104)) + 216|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $106 & 65536;
     $108 = ($107|0)!=(0);
     $109 = $2;
     $110 = ($109|0)!=(0);
     $111 = $pass;
     if ($108) {
      if ($110) {
       $112 = $111 >>> 1;
       $113 = $pixel_depth;
       $114 = ($113|0)==(1);
       if ($114) {
        $119 = 0;
       } else {
        $115 = $pixel_depth;
        $116 = ($115|0)==(2);
        $117 = $116 ? 1 : 2;
        $119 = $117;
       }
       $118 = (468 + (($119*12)|0)|0);
       $120 = (($118) + ($112<<2)|0);
       $121 = HEAP32[$120>>2]|0;
       $131 = $121;
      } else {
       $122 = $pixel_depth;
       $123 = ($122|0)==(1);
       if ($123) {
        $128 = 0;
       } else {
        $124 = $pixel_depth;
        $125 = ($124|0)==(2);
        $126 = $125 ? 1 : 2;
        $128 = $126;
       }
       $127 = (540 + (($128*24)|0)|0);
       $129 = (($127) + ($111<<2)|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = $130;
      }
      $mask = $131;
     } else {
      if ($110) {
       $132 = $111 >>> 1;
       $133 = $pixel_depth;
       $134 = ($133|0)==(1);
       if ($134) {
        $139 = 0;
       } else {
        $135 = $pixel_depth;
        $136 = ($135|0)==(2);
        $137 = $136 ? 1 : 2;
        $139 = $137;
       }
       $138 = ((504) + (($139*12)|0)|0);
       $140 = (($138) + ($132<<2)|0);
       $141 = HEAP32[$140>>2]|0;
       $151 = $141;
      } else {
       $142 = $pixel_depth;
       $143 = ($142|0)==(1);
       if ($143) {
        $148 = 0;
       } else {
        $144 = $pixel_depth;
        $145 = ($144|0)==(2);
        $146 = $145 ? 1 : 2;
        $148 = $146;
       }
       $147 = ((612) + (($148*24)|0)|0);
       $149 = (($147) + ($111<<2)|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = $150;
      }
      $mask = $151;
     }
     while(1) {
      $152 = $mask;
      $m = $152;
      $153 = $m;
      $154 = $153 >>> 8;
      $155 = $m;
      $156 = $155 << 24;
      $157 = $154 | $156;
      $mask = $157;
      $158 = $m;
      $159 = $158 & 255;
      $m = $159;
      $160 = $m;
      $161 = ($160|0)!=(0);
      do {
       if ($161) {
        $162 = $m;
        $163 = ($162|0)!=(255);
        if ($163) {
         $164 = $1;
         $165 = HEAP8[$164>>0]|0;
         $166 = $165&255;
         $167 = $m;
         $168 = $167 ^ -1;
         $169 = $166 & $168;
         $170 = $sp;
         $171 = HEAP8[$170>>0]|0;
         $172 = $171&255;
         $173 = $m;
         $174 = $172 & $173;
         $175 = $169 | $174;
         $176 = $175&255;
         $177 = $1;
         HEAP8[$177>>0] = $176;
         break;
        } else {
         $178 = $sp;
         $179 = HEAP8[$178>>0]|0;
         $180 = $1;
         HEAP8[$180>>0] = $179;
         break;
        }
       }
      } while(0);
      $181 = $row_width;
      $182 = $pixels_per_byte;
      $183 = ($181>>>0)<=($182>>>0);
      if ($183) {
       break L25;
      }
      $184 = $pixels_per_byte;
      $185 = $row_width;
      $186 = (($185) - ($184))|0;
      $row_width = $186;
      $187 = $1;
      $188 = ((($187)) + 1|0);
      $1 = $188;
      $189 = $sp;
      $190 = ((($189)) + 1|0);
      $sp = $190;
     }
    }
    $191 = $102 & 7;
    $192 = ($191|0)!=(0);
    if ($192) {
     $193 = $0;
     _png_error($193,17390);
     // unreachable;
    }
    $194 = $pixel_depth;
    $195 = $194 >>> 3;
    $pixel_depth = $195;
    $196 = $pixel_depth;
    $197 = $row_width;
    $198 = Math_imul($197, $196)|0;
    $row_width = $198;
    $199 = $pass;
    $200 = 1 & $199;
    $201 = $pass;
    $202 = (($201) + 1)|0;
    $203 = $202 >>> 1;
    $204 = (3 - ($203))|0;
    $205 = $200 << $204;
    $206 = $205 & 7;
    $207 = $pixel_depth;
    $208 = Math_imul($206, $207)|0;
    $offset = $208;
    $209 = $offset;
    $210 = $row_width;
    $211 = (($210) - ($209))|0;
    $row_width = $211;
    $212 = $offset;
    $213 = $1;
    $214 = (($213) + ($212)|0);
    $1 = $214;
    $215 = $offset;
    $216 = $sp;
    $217 = (($216) + ($215)|0);
    $sp = $217;
    $218 = $2;
    $219 = ($218|0)!=(0);
    if ($219) {
     $220 = $pass;
     $221 = (6 - ($220))|0;
     $222 = $221 >>> 1;
     $223 = 1 << $222;
     $224 = $pixel_depth;
     $225 = Math_imul($223, $224)|0;
     $bytes_to_copy = $225;
     $226 = $bytes_to_copy;
     $227 = $row_width;
     $228 = ($226>>>0)>($227>>>0);
     if ($228) {
      $229 = $row_width;
      $bytes_to_copy = $229;
     }
    } else {
     $230 = $pixel_depth;
     $bytes_to_copy = $230;
    }
    $231 = $pass;
    $232 = (7 - ($231))|0;
    $233 = $232 >>> 1;
    $234 = 1 << $233;
    $235 = $pixel_depth;
    $236 = Math_imul($234, $235)|0;
    $bytes_to_jump = $236;
    $237 = $bytes_to_copy;
    switch ($237|0) {
    case 1:  {
     while(1) {
      $238 = $sp;
      $239 = HEAP8[$238>>0]|0;
      $240 = $1;
      HEAP8[$240>>0] = $239;
      $241 = $row_width;
      $242 = $bytes_to_jump;
      $243 = ($241>>>0)<=($242>>>0);
      if ($243) {
       break;
      }
      $244 = $bytes_to_jump;
      $245 = $1;
      $246 = (($245) + ($244)|0);
      $1 = $246;
      $247 = $bytes_to_jump;
      $248 = $sp;
      $249 = (($248) + ($247)|0);
      $sp = $249;
      $250 = $bytes_to_jump;
      $251 = $row_width;
      $252 = (($251) - ($250))|0;
      $row_width = $252;
     }
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     while(1) {
      $253 = $sp;
      $254 = HEAP8[$253>>0]|0;
      $255 = $1;
      HEAP8[$255>>0] = $254;
      $256 = $sp;
      $257 = ((($256)) + 1|0);
      $258 = HEAP8[$257>>0]|0;
      $259 = $1;
      $260 = ((($259)) + 1|0);
      HEAP8[$260>>0] = $258;
      $261 = $row_width;
      $262 = $bytes_to_jump;
      $263 = ($261>>>0)<=($262>>>0);
      if ($263) {
       label = 94;
       break;
      }
      $264 = $bytes_to_jump;
      $265 = $sp;
      $266 = (($265) + ($264)|0);
      $sp = $266;
      $267 = $bytes_to_jump;
      $268 = $1;
      $269 = (($268) + ($267)|0);
      $1 = $269;
      $270 = $bytes_to_jump;
      $271 = $row_width;
      $272 = (($271) - ($270))|0;
      $row_width = $272;
      $273 = $row_width;
      $274 = ($273>>>0)>(1);
      if (!($274)) {
       break;
      }
     }
     if ((label|0) == 94) {
      STACKTOP = sp;return;
     }
     $275 = $sp;
     $276 = HEAP8[$275>>0]|0;
     $277 = $1;
     HEAP8[$277>>0] = $276;
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     while(1) {
      $278 = $sp;
      $279 = HEAP8[$278>>0]|0;
      $280 = $1;
      HEAP8[$280>>0] = $279;
      $281 = $sp;
      $282 = ((($281)) + 1|0);
      $283 = HEAP8[$282>>0]|0;
      $284 = $1;
      $285 = ((($284)) + 1|0);
      HEAP8[$285>>0] = $283;
      $286 = $sp;
      $287 = ((($286)) + 2|0);
      $288 = HEAP8[$287>>0]|0;
      $289 = $1;
      $290 = ((($289)) + 2|0);
      HEAP8[$290>>0] = $288;
      $291 = $row_width;
      $292 = $bytes_to_jump;
      $293 = ($291>>>0)<=($292>>>0);
      if ($293) {
       break;
      }
      $294 = $bytes_to_jump;
      $295 = $sp;
      $296 = (($295) + ($294)|0);
      $sp = $296;
      $297 = $bytes_to_jump;
      $298 = $1;
      $299 = (($298) + ($297)|0);
      $1 = $299;
      $300 = $bytes_to_jump;
      $301 = $row_width;
      $302 = (($301) - ($300))|0;
      $row_width = $302;
     }
     STACKTOP = sp;return;
     break;
    }
    default: {
     $303 = $bytes_to_copy;
     $304 = ($303>>>0)<(16);
     if ($304) {
      $305 = $1;
      $306 = $305;
      $307 = (($306) - 0)|0;
      $308 = $307 & 1;
      $309 = ($308|0)==(0);
      if ($309) {
       $310 = $sp;
       $311 = $310;
       $312 = (($311) - 0)|0;
       $313 = $312 & 1;
       $314 = ($313|0)==(0);
       if ($314) {
        $315 = $bytes_to_copy;
        $316 = (($315>>>0) % 2)&-1;
        $317 = ($316|0)==(0);
        if ($317) {
         $318 = $bytes_to_jump;
         $319 = (($318>>>0) % 2)&-1;
         $320 = ($319|0)==(0);
         if ($320) {
          $321 = $1;
          $322 = $321;
          $323 = (($322) - 0)|0;
          $324 = $323 & 3;
          $325 = ($324|0)==(0);
          $326 = $325&1;
          $327 = ($326|0)!=(0);
          do {
           if ($327) {
            $328 = $sp;
            $329 = $328;
            $330 = (($329) - 0)|0;
            $331 = $330 & 3;
            $332 = ($331|0)==(0);
            $333 = $332&1;
            $334 = ($333|0)!=(0);
            if (!($334)) {
             break;
            }
            $335 = $bytes_to_copy;
            $336 = (($335>>>0) % 4)&-1;
            $337 = ($336|0)==(0);
            if (!($337)) {
             break;
            }
            $338 = $bytes_to_jump;
            $339 = (($338>>>0) % 4)&-1;
            $340 = ($339|0)==(0);
            if (!($340)) {
             break;
            }
            $341 = $1;
            $dp32 = $341;
            $342 = $sp;
            $sp32 = $342;
            $343 = $bytes_to_jump;
            $344 = $bytes_to_copy;
            $345 = (($343) - ($344))|0;
            $346 = (($345>>>0) / 4)&-1;
            $skip = $346;
            while(1) {
             $347 = $bytes_to_copy;
             $c = $347;
             while(1) {
              $348 = $sp32;
              $349 = ((($348)) + 4|0);
              $sp32 = $349;
              $350 = HEAP32[$348>>2]|0;
              $351 = $dp32;
              $352 = ((($351)) + 4|0);
              $dp32 = $352;
              HEAP32[$351>>2] = $350;
              $353 = $c;
              $354 = (($353) - 4)|0;
              $c = $354;
              $355 = $c;
              $356 = ($355>>>0)>(0);
              if (!($356)) {
               break;
              }
             }
             $357 = $row_width;
             $358 = $bytes_to_jump;
             $359 = ($357>>>0)<=($358>>>0);
             if ($359) {
              label = 94;
              break;
             }
             $360 = $skip;
             $361 = $dp32;
             $362 = (($361) + ($360<<2)|0);
             $dp32 = $362;
             $363 = $skip;
             $364 = $sp32;
             $365 = (($364) + ($363<<2)|0);
             $sp32 = $365;
             $366 = $bytes_to_jump;
             $367 = $row_width;
             $368 = (($367) - ($366))|0;
             $row_width = $368;
             $369 = $bytes_to_copy;
             $370 = $row_width;
             $371 = ($369>>>0)<=($370>>>0);
             if (!($371)) {
              break;
             }
            }
            if ((label|0) == 94) {
             STACKTOP = sp;return;
            }
            $372 = $dp32;
            $1 = $372;
            $373 = $sp32;
            $sp = $373;
            while(1) {
             $374 = $sp;
             $375 = ((($374)) + 1|0);
             $sp = $375;
             $376 = HEAP8[$374>>0]|0;
             $377 = $1;
             $378 = ((($377)) + 1|0);
             $1 = $378;
             HEAP8[$377>>0] = $376;
             $379 = $row_width;
             $380 = (($379) + -1)|0;
             $row_width = $380;
             $381 = ($380>>>0)>(0);
             if (!($381)) {
              break;
             }
            }
            STACKTOP = sp;return;
           }
          } while(0);
          $382 = $1;
          $dp16 = $382;
          $383 = $sp;
          $sp16 = $383;
          $384 = $bytes_to_jump;
          $385 = $bytes_to_copy;
          $386 = (($384) - ($385))|0;
          $387 = (($386>>>0) / 2)&-1;
          $skip1 = $387;
          while(1) {
           $388 = $bytes_to_copy;
           $c2 = $388;
           while(1) {
            $389 = $sp16;
            $390 = ((($389)) + 2|0);
            $sp16 = $390;
            $391 = HEAP16[$389>>1]|0;
            $392 = $dp16;
            $393 = ((($392)) + 2|0);
            $dp16 = $393;
            HEAP16[$392>>1] = $391;
            $394 = $c2;
            $395 = (($394) - 2)|0;
            $c2 = $395;
            $396 = $c2;
            $397 = ($396>>>0)>(0);
            if (!($397)) {
             break;
            }
           }
           $398 = $row_width;
           $399 = $bytes_to_jump;
           $400 = ($398>>>0)<=($399>>>0);
           if ($400) {
            label = 94;
            break;
           }
           $401 = $skip1;
           $402 = $dp16;
           $403 = (($402) + ($401<<1)|0);
           $dp16 = $403;
           $404 = $skip1;
           $405 = $sp16;
           $406 = (($405) + ($404<<1)|0);
           $sp16 = $406;
           $407 = $bytes_to_jump;
           $408 = $row_width;
           $409 = (($408) - ($407))|0;
           $row_width = $409;
           $410 = $bytes_to_copy;
           $411 = $row_width;
           $412 = ($410>>>0)<=($411>>>0);
           if (!($412)) {
            break;
           }
          }
          if ((label|0) == 94) {
           STACKTOP = sp;return;
          }
          $413 = $dp16;
          $1 = $413;
          $414 = $sp16;
          $sp = $414;
          while(1) {
           $415 = $sp;
           $416 = ((($415)) + 1|0);
           $sp = $416;
           $417 = HEAP8[$415>>0]|0;
           $418 = $1;
           $419 = ((($418)) + 1|0);
           $1 = $419;
           HEAP8[$418>>0] = $417;
           $420 = $row_width;
           $421 = (($420) + -1)|0;
           $row_width = $421;
           $422 = ($421>>>0)>(0);
           if (!($422)) {
            break;
           }
          }
          STACKTOP = sp;return;
         }
        }
       }
      }
     }
     while(1) {
      $423 = $1;
      $424 = $sp;
      $425 = $bytes_to_copy;
      _memcpy(($423|0),($424|0),($425|0))|0;
      $426 = $row_width;
      $427 = $bytes_to_jump;
      $428 = ($426>>>0)<=($427>>>0);
      if ($428) {
       break;
      }
      $429 = $bytes_to_jump;
      $430 = $sp;
      $431 = (($430) + ($429)|0);
      $sp = $431;
      $432 = $bytes_to_jump;
      $433 = $1;
      $434 = (($433) + ($432)|0);
      $1 = $434;
      $435 = $bytes_to_jump;
      $436 = $row_width;
      $437 = (($436) - ($435))|0;
      $row_width = $437;
      $438 = $bytes_to_copy;
      $439 = $row_width;
      $440 = ($438>>>0)>($439>>>0);
      if (!($440)) {
       continue;
      }
      $441 = $row_width;
      $bytes_to_copy = $441;
     }
     STACKTOP = sp;return;
    }
    }
   } else {
    label = 88;
   }
  } else {
   label = 88;
  }
 } while(0);
 if ((label|0) == 88) {
  $442 = $1;
  $443 = $sp;
  $444 = $pixel_depth;
  $445 = ($444>>>0)>=(8);
  $446 = $row_width;
  $447 = $pixel_depth;
  if ($445) {
   $448 = $447 >>> 3;
   $449 = Math_imul($446, $448)|0;
   $453 = $449;
  } else {
   $450 = Math_imul($446, $447)|0;
   $451 = (($450) + 7)|0;
   $452 = $451 >>> 3;
   $453 = $452;
  }
  _memcpy(($442|0),($443|0),($453|0))|0;
 }
 $454 = $end_ptr;
 $455 = ($454|0)!=(0|0);
 if (!($455)) {
  STACKTOP = sp;return;
 }
 $456 = $end_byte;
 $457 = $456&255;
 $458 = $end_mask;
 $459 = $457 & $458;
 $460 = $end_ptr;
 $461 = HEAP8[$460>>0]|0;
 $462 = $461&255;
 $463 = $end_mask;
 $464 = $463 ^ -1;
 $465 = $462 & $464;
 $466 = $459 | $465;
 $467 = $466&255;
 $468 = $end_ptr;
 HEAP8[$468>>0] = $467;
 STACKTOP = sp;return;
}
function _png_do_read_interlace($row_info,$row,$pass,$transformations) {
 $row_info = $row_info|0;
 $row = $row|0;
 $pass = $pass|0;
 $transformations = $transformations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $dp14 = 0, $dp2 = 0, $dp26 = 0;
 var $dshift = 0, $dshift16 = 0, $dshift4 = 0, $final_width = 0, $i = 0, $i20 = 0, $i28 = 0, $i9 = 0, $j = 0, $j11 = 0, $j23 = 0, $j30 = 0, $jstop = 0, $jstop21 = 0, $jstop27 = 0, $jstop8 = 0, $or$cond = 0, $pixel_bytes = 0, $s_end = 0, $s_end18 = 0;
 var $s_end6 = 0, $s_inc = 0, $s_inc19 = 0, $s_inc7 = 0, $s_start = 0, $s_start17 = 0, $s_start5 = 0, $sp = 0, $sp1 = 0, $sp13 = 0, $sp25 = 0, $sshift = 0, $sshift15 = 0, $sshift3 = 0, $tmp = 0, $tmp12 = 0, $tmp24 = 0, $v = 0, $v10 = 0, $v22 = 0;
 var $v29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v29 = sp + 176|0;
 $0 = $row_info;
 $1 = $row;
 $2 = $pass;
 $3 = $transformations;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 $6 = $0;
 $7 = ($6|0)!=(0|0);
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = (684 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = Math_imul($9, $12)|0;
 $final_width = $13;
 $14 = $0;
 $15 = ((($14)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 L4: do {
  switch ($17|0) {
  case 1:  {
   $18 = $1;
   $19 = $0;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) - 1)|0;
   $22 = $21 >>> 3;
   $23 = (($18) + ($22)|0);
   $sp = $23;
   $24 = $1;
   $25 = $final_width;
   $26 = (($25) - 1)|0;
   $27 = $26 >>> 3;
   $28 = (($24) + ($27)|0);
   $dp = $28;
   $29 = $2;
   $30 = (684 + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $jstop = $31;
   $32 = $3;
   $33 = $32 & 65536;
   $34 = ($33|0)!=(0);
   $35 = $0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 7)|0;
   $38 = $37 & 7;
   if ($34) {
    $sshift = $38;
    $39 = $final_width;
    $40 = (($39) + 7)|0;
    $41 = $40 & 7;
    $dshift = $41;
    $s_start = 7;
    $s_end = 0;
    $s_inc = -1;
   } else {
    $42 = (7 - ($38))|0;
    $sshift = $42;
    $43 = $final_width;
    $44 = (($43) + 7)|0;
    $45 = $44 & 7;
    $46 = (7 - ($45))|0;
    $dshift = $46;
    $s_start = 0;
    $s_end = 7;
    $s_inc = 1;
   }
   $i = 0;
   while(1) {
    $47 = $i;
    $48 = $0;
    $49 = HEAP32[$48>>2]|0;
    $50 = ($47>>>0)<($49>>>0);
    if (!($50)) {
     break L4;
    }
    $51 = $sp;
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $sshift;
    $55 = $53 >> $54;
    $56 = $55 & 1;
    $57 = $56&255;
    $v = $57;
    $j = 0;
    while(1) {
     $58 = $j;
     $59 = $jstop;
     $60 = ($58|0)<($59|0);
     if (!($60)) {
      break;
     }
     $61 = $dp;
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&255;
     $64 = $dshift;
     $65 = (7 - ($64))|0;
     $66 = 32639 >> $65;
     $67 = $63 & $66;
     $tmp = $67;
     $68 = $v;
     $69 = $68&255;
     $70 = $dshift;
     $71 = $69 << $70;
     $72 = $tmp;
     $73 = $72 | $71;
     $tmp = $73;
     $74 = $tmp;
     $75 = $74 & 255;
     $76 = $75&255;
     $77 = $dp;
     HEAP8[$77>>0] = $76;
     $78 = $dshift;
     $79 = $s_end;
     $80 = ($78|0)==($79|0);
     if ($80) {
      $81 = $s_start;
      $dshift = $81;
      $82 = $dp;
      $83 = ((($82)) + -1|0);
      $dp = $83;
     } else {
      $84 = $s_inc;
      $85 = $dshift;
      $86 = (($85) + ($84))|0;
      $dshift = $86;
     }
     $87 = $j;
     $88 = (($87) + 1)|0;
     $j = $88;
    }
    $89 = $sshift;
    $90 = $s_end;
    $91 = ($89|0)==($90|0);
    if ($91) {
     $92 = $s_start;
     $sshift = $92;
     $93 = $sp;
     $94 = ((($93)) + -1|0);
     $sp = $94;
    } else {
     $95 = $s_inc;
     $96 = $sshift;
     $97 = (($96) + ($95))|0;
     $sshift = $97;
    }
    $98 = $i;
    $99 = (($98) + 1)|0;
    $i = $99;
   }
   break;
  }
  case 2:  {
   $100 = $1;
   $101 = $0;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102) - 1)|0;
   $104 = $103 >>> 2;
   $105 = (($100) + ($104)|0);
   $sp1 = $105;
   $106 = $1;
   $107 = $final_width;
   $108 = (($107) - 1)|0;
   $109 = $108 >>> 2;
   $110 = (($106) + ($109)|0);
   $dp2 = $110;
   $111 = $2;
   $112 = (684 + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $jstop8 = $113;
   $114 = $3;
   $115 = $114 & 65536;
   $116 = ($115|0)!=(0);
   $117 = $0;
   $118 = HEAP32[$117>>2]|0;
   $119 = (($118) + 3)|0;
   $120 = $119 & 3;
   if ($116) {
    $121 = $120 << 1;
    $sshift3 = $121;
    $122 = $final_width;
    $123 = (($122) + 3)|0;
    $124 = $123 & 3;
    $125 = $124 << 1;
    $dshift4 = $125;
    $s_start5 = 6;
    $s_end6 = 0;
    $s_inc7 = -2;
   } else {
    $126 = (3 - ($120))|0;
    $127 = $126 << 1;
    $sshift3 = $127;
    $128 = $final_width;
    $129 = (($128) + 3)|0;
    $130 = $129 & 3;
    $131 = (3 - ($130))|0;
    $132 = $131 << 1;
    $dshift4 = $132;
    $s_start5 = 0;
    $s_end6 = 6;
    $s_inc7 = 2;
   }
   $i9 = 0;
   while(1) {
    $133 = $i9;
    $134 = $0;
    $135 = HEAP32[$134>>2]|0;
    $136 = ($133>>>0)<($135>>>0);
    if (!($136)) {
     break L4;
    }
    $137 = $sp1;
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $140 = $sshift3;
    $141 = $139 >> $140;
    $142 = $141 & 3;
    $143 = $142&255;
    $v10 = $143;
    $j11 = 0;
    while(1) {
     $144 = $j11;
     $145 = $jstop8;
     $146 = ($144|0)<($145|0);
     if (!($146)) {
      break;
     }
     $147 = $dp2;
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = $dshift4;
     $151 = (6 - ($150))|0;
     $152 = 16191 >> $151;
     $153 = $149 & $152;
     $tmp12 = $153;
     $154 = $v10;
     $155 = $154&255;
     $156 = $dshift4;
     $157 = $155 << $156;
     $158 = $tmp12;
     $159 = $158 | $157;
     $tmp12 = $159;
     $160 = $tmp12;
     $161 = $160 & 255;
     $162 = $161&255;
     $163 = $dp2;
     HEAP8[$163>>0] = $162;
     $164 = $dshift4;
     $165 = $s_end6;
     $166 = ($164|0)==($165|0);
     if ($166) {
      $167 = $s_start5;
      $dshift4 = $167;
      $168 = $dp2;
      $169 = ((($168)) + -1|0);
      $dp2 = $169;
     } else {
      $170 = $s_inc7;
      $171 = $dshift4;
      $172 = (($171) + ($170))|0;
      $dshift4 = $172;
     }
     $173 = $j11;
     $174 = (($173) + 1)|0;
     $j11 = $174;
    }
    $175 = $sshift3;
    $176 = $s_end6;
    $177 = ($175|0)==($176|0);
    if ($177) {
     $178 = $s_start5;
     $sshift3 = $178;
     $179 = $sp1;
     $180 = ((($179)) + -1|0);
     $sp1 = $180;
    } else {
     $181 = $s_inc7;
     $182 = $sshift3;
     $183 = (($182) + ($181))|0;
     $sshift3 = $183;
    }
    $184 = $i9;
    $185 = (($184) + 1)|0;
    $i9 = $185;
   }
   break;
  }
  case 4:  {
   $186 = $1;
   $187 = $0;
   $188 = HEAP32[$187>>2]|0;
   $189 = (($188) - 1)|0;
   $190 = $189 >>> 1;
   $191 = (($186) + ($190)|0);
   $sp13 = $191;
   $192 = $1;
   $193 = $final_width;
   $194 = (($193) - 1)|0;
   $195 = $194 >>> 1;
   $196 = (($192) + ($195)|0);
   $dp14 = $196;
   $197 = $2;
   $198 = (684 + ($197<<2)|0);
   $199 = HEAP32[$198>>2]|0;
   $jstop21 = $199;
   $200 = $3;
   $201 = $200 & 65536;
   $202 = ($201|0)!=(0);
   $203 = $0;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($204) + 1)|0;
   $206 = $205 & 1;
   if ($202) {
    $207 = $206 << 2;
    $sshift15 = $207;
    $208 = $final_width;
    $209 = (($208) + 1)|0;
    $210 = $209 & 1;
    $211 = $210 << 2;
    $dshift16 = $211;
    $s_start17 = 4;
    $s_end18 = 0;
    $s_inc19 = -4;
   } else {
    $212 = (1 - ($206))|0;
    $213 = $212 << 2;
    $sshift15 = $213;
    $214 = $final_width;
    $215 = (($214) + 1)|0;
    $216 = $215 & 1;
    $217 = (1 - ($216))|0;
    $218 = $217 << 2;
    $dshift16 = $218;
    $s_start17 = 0;
    $s_end18 = 4;
    $s_inc19 = 4;
   }
   $i20 = 0;
   while(1) {
    $219 = $i20;
    $220 = $0;
    $221 = HEAP32[$220>>2]|0;
    $222 = ($219>>>0)<($221>>>0);
    if (!($222)) {
     break L4;
    }
    $223 = $sp13;
    $224 = HEAP8[$223>>0]|0;
    $225 = $224&255;
    $226 = $sshift15;
    $227 = $225 >> $226;
    $228 = $227 & 15;
    $229 = $228&255;
    $v22 = $229;
    $j23 = 0;
    while(1) {
     $230 = $j23;
     $231 = $jstop21;
     $232 = ($230|0)<($231|0);
     if (!($232)) {
      break;
     }
     $233 = $dp14;
     $234 = HEAP8[$233>>0]|0;
     $235 = $234&255;
     $236 = $dshift16;
     $237 = (4 - ($236))|0;
     $238 = 3855 >> $237;
     $239 = $235 & $238;
     $tmp24 = $239;
     $240 = $v22;
     $241 = $240&255;
     $242 = $dshift16;
     $243 = $241 << $242;
     $244 = $tmp24;
     $245 = $244 | $243;
     $tmp24 = $245;
     $246 = $tmp24;
     $247 = $246 & 255;
     $248 = $247&255;
     $249 = $dp14;
     HEAP8[$249>>0] = $248;
     $250 = $dshift16;
     $251 = $s_end18;
     $252 = ($250|0)==($251|0);
     if ($252) {
      $253 = $s_start17;
      $dshift16 = $253;
      $254 = $dp14;
      $255 = ((($254)) + -1|0);
      $dp14 = $255;
     } else {
      $256 = $s_inc19;
      $257 = $dshift16;
      $258 = (($257) + ($256))|0;
      $dshift16 = $258;
     }
     $259 = $j23;
     $260 = (($259) + 1)|0;
     $j23 = $260;
    }
    $261 = $sshift15;
    $262 = $s_end18;
    $263 = ($261|0)==($262|0);
    if ($263) {
     $264 = $s_start17;
     $sshift15 = $264;
     $265 = $sp13;
     $266 = ((($265)) + -1|0);
     $sp13 = $266;
    } else {
     $267 = $s_inc19;
     $268 = $sshift15;
     $269 = (($268) + ($267))|0;
     $sshift15 = $269;
    }
    $270 = $i20;
    $271 = (($270) + 1)|0;
    $i20 = $271;
   }
   break;
  }
  default: {
   $272 = $0;
   $273 = ((($272)) + 11|0);
   $274 = HEAP8[$273>>0]|0;
   $275 = $274&255;
   $276 = $275 >> 3;
   $pixel_bytes = $276;
   $277 = $1;
   $278 = $0;
   $279 = HEAP32[$278>>2]|0;
   $280 = (($279) - 1)|0;
   $281 = $pixel_bytes;
   $282 = Math_imul($280, $281)|0;
   $283 = (($277) + ($282)|0);
   $sp25 = $283;
   $284 = $1;
   $285 = $final_width;
   $286 = (($285) - 1)|0;
   $287 = $pixel_bytes;
   $288 = Math_imul($286, $287)|0;
   $289 = (($284) + ($288)|0);
   $dp26 = $289;
   $290 = $2;
   $291 = (684 + ($290<<2)|0);
   $292 = HEAP32[$291>>2]|0;
   $jstop27 = $292;
   $i28 = 0;
   while(1) {
    $293 = $i28;
    $294 = $0;
    $295 = HEAP32[$294>>2]|0;
    $296 = ($293>>>0)<($295>>>0);
    if (!($296)) {
     break L4;
    }
    $297 = $sp25;
    $298 = $pixel_bytes;
    _memcpy(($v29|0),($297|0),($298|0))|0;
    $j30 = 0;
    while(1) {
     $299 = $j30;
     $300 = $jstop27;
     $301 = ($299|0)<($300|0);
     if (!($301)) {
      break;
     }
     $302 = $dp26;
     $303 = $pixel_bytes;
     _memcpy(($302|0),($v29|0),($303|0))|0;
     $304 = $pixel_bytes;
     $305 = $dp26;
     $306 = (0 - ($304))|0;
     $307 = (($305) + ($306)|0);
     $dp26 = $307;
     $308 = $j30;
     $309 = (($308) + 1)|0;
     $j30 = $309;
    }
    $310 = $pixel_bytes;
    $311 = $sp25;
    $312 = (0 - ($310))|0;
    $313 = (($311) + ($312)|0);
    $sp25 = $313;
    $314 = $i28;
    $315 = (($314) + 1)|0;
    $i28 = $315;
   }
  }
  }
 } while(0);
 $316 = $final_width;
 $317 = $0;
 HEAP32[$317>>2] = $316;
 $318 = $0;
 $319 = ((($318)) + 11|0);
 $320 = HEAP8[$319>>0]|0;
 $321 = $320&255;
 $322 = ($321|0)>=(8);
 $323 = $final_width;
 $324 = $0;
 $325 = ((($324)) + 11|0);
 $326 = HEAP8[$325>>0]|0;
 $327 = $326&255;
 if ($322) {
  $328 = $327 >>> 3;
  $329 = Math_imul($323, $328)|0;
  $335 = $329;
 } else {
  $330 = Math_imul($323, $327)|0;
  $331 = (($330) + 7)|0;
  $332 = $331 >>> 3;
  $335 = $332;
 }
 $333 = $0;
 $334 = ((($333)) + 4|0);
 HEAP32[$334>>2] = $335;
 STACKTOP = sp;return;
}
function _png_read_filter_row($pp,$row_info,$row,$prev_row,$filter) {
 $pp = $pp|0;
 $row_info = $row_info|0;
 $row = $row|0;
 $prev_row = $prev_row|0;
 $filter = $filter|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pp;
 $1 = $row_info;
 $2 = $row;
 $3 = $prev_row;
 $4 = $filter;
 $5 = $4;
 $6 = ($5|0)>(0);
 $7 = $4;
 $8 = ($7|0)<(5);
 $or$cond = $6 & $8;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 776|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $0;
  _png_init_filter_functions($13);
 }
 $14 = $4;
 $15 = (($14) - 1)|0;
 $16 = $0;
 $17 = ((($16)) + 776|0);
 $18 = (($17) + ($15<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = $2;
 $22 = $3;
 FUNCTION_TABLE_viii[$19 & 63]($20,$21,$22);
 STACKTOP = sp;return;
}
function _png_init_filter_functions($pp) {
 $pp = $pp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bpp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pp;
 $1 = $0;
 $2 = ((($1)) + 430|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + 7)|0;
 $6 = $5 >> 3;
 $bpp = $6;
 $7 = $0;
 $8 = ((($7)) + 776|0);
 HEAP32[$8>>2] = 28;
 $9 = $0;
 $10 = ((($9)) + 776|0);
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = 29;
 $12 = $0;
 $13 = ((($12)) + 776|0);
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = 30;
 $15 = $bpp;
 $16 = ($15|0)==(1);
 $17 = $0;
 $18 = ((($17)) + 776|0);
 $19 = ((($18)) + 12|0);
 if ($16) {
  HEAP32[$19>>2] = 31;
  STACKTOP = sp;return;
 } else {
  HEAP32[$19>>2] = 32;
  STACKTOP = sp;return;
 }
}
function _png_read_filter_row_sub($row_info,$row,$prev_row) {
 $row_info = $row_info|0;
 $row = $row|0;
 $prev_row = $prev_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bpp = 0, $i = 0, $istop = 0, $rp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $prev_row;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $istop = $5;
 $6 = $0;
 $7 = ((($6)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) + 7)|0;
 $11 = $10 >> 3;
 $bpp = $11;
 $12 = $1;
 $13 = $bpp;
 $14 = (($12) + ($13)|0);
 $rp = $14;
 $15 = $bpp;
 $i = $15;
 while(1) {
  $16 = $i;
  $17 = $istop;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $rp;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $rp;
  $23 = $bpp;
  $24 = (0 - ($23))|0;
  $25 = (($22) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($21) + ($27))|0;
  $29 = $28 & 255;
  $30 = $29&255;
  $31 = $rp;
  HEAP8[$31>>0] = $30;
  $32 = $rp;
  $33 = ((($32)) + 1|0);
  $rp = $33;
  $34 = $i;
  $35 = (($34) + 1)|0;
  $i = $35;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_up($row_info,$row,$prev_row) {
 $row_info = $row_info|0;
 $row = $row|0;
 $prev_row = $prev_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $istop = 0, $pp = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $prev_row;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $istop = $5;
 $6 = $1;
 $rp = $6;
 $7 = $2;
 $pp = $7;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $istop;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $rp;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $pp;
  $15 = ((($14)) + 1|0);
  $pp = $15;
  $16 = HEAP8[$14>>0]|0;
  $17 = $16&255;
  $18 = (($13) + ($17))|0;
  $19 = $18 & 255;
  $20 = $19&255;
  $21 = $rp;
  HEAP8[$21>>0] = $20;
  $22 = $rp;
  $23 = ((($22)) + 1|0);
  $rp = $23;
  $24 = $i;
  $25 = (($24) + 1)|0;
  $i = $25;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_avg($row_info,$row,$prev_row) {
 $row_info = $row_info|0;
 $row = $row|0;
 $prev_row = $prev_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bpp = 0, $i = 0, $istop = 0, $pp = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $prev_row;
 $3 = $1;
 $rp = $3;
 $4 = $2;
 $pp = $4;
 $5 = $0;
 $6 = ((($5)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($8) + 7)|0;
 $10 = $9 >> 3;
 $bpp = $10;
 $11 = $0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $bpp;
 $15 = (($13) - ($14))|0;
 $istop = $15;
 $i = 0;
 while(1) {
  $16 = $i;
  $17 = $bpp;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $rp;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $pp;
  $23 = ((($22)) + 1|0);
  $pp = $23;
  $24 = HEAP8[$22>>0]|0;
  $25 = $24&255;
  $26 = (($25|0) / 2)&-1;
  $27 = (($21) + ($26))|0;
  $28 = $27 & 255;
  $29 = $28&255;
  $30 = $rp;
  HEAP8[$30>>0] = $29;
  $31 = $rp;
  $32 = ((($31)) + 1|0);
  $rp = $32;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 $i = 0;
 while(1) {
  $35 = $i;
  $36 = $istop;
  $37 = ($35>>>0)<($36>>>0);
  if (!($37)) {
   break;
  }
  $38 = $rp;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $pp;
  $42 = ((($41)) + 1|0);
  $pp = $42;
  $43 = HEAP8[$41>>0]|0;
  $44 = $43&255;
  $45 = $rp;
  $46 = $bpp;
  $47 = (0 - ($46))|0;
  $48 = (($45) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($44) + ($50))|0;
  $52 = (($51|0) / 2)&-1;
  $53 = (($40) + ($52))|0;
  $54 = $53 & 255;
  $55 = $54&255;
  $56 = $rp;
  HEAP8[$56>>0] = $55;
  $57 = $rp;
  $58 = ((($57)) + 1|0);
  $rp = $58;
  $59 = $i;
  $60 = (($59) + 1)|0;
  $i = $60;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_paeth_1byte_pixel($row_info,$row,$prev_row) {
 $row_info = $row_info|0;
 $row = $row|0;
 $prev_row = $prev_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $c = 0, $p = 0, $pa = 0, $pb = 0;
 var $pc = 0, $rp_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $prev_row;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6)|0);
 $rp_end = $7;
 $8 = $2;
 $9 = ((($8)) + 1|0);
 $2 = $9;
 $10 = HEAP8[$8>>0]|0;
 $11 = $10&255;
 $c = $11;
 $12 = $1;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $c;
 $16 = (($14) + ($15))|0;
 $a = $16;
 $17 = $a;
 $18 = $17&255;
 $19 = $1;
 $20 = ((($19)) + 1|0);
 $1 = $20;
 HEAP8[$19>>0] = $18;
 while(1) {
  $21 = $1;
  $22 = $rp_end;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $a;
  $25 = $24 & 255;
  $a = $25;
  $26 = $2;
  $27 = ((($26)) + 1|0);
  $2 = $27;
  $28 = HEAP8[$26>>0]|0;
  $29 = $28&255;
  $b = $29;
  $30 = $b;
  $31 = $c;
  $32 = (($30) - ($31))|0;
  $p = $32;
  $33 = $a;
  $34 = $c;
  $35 = (($33) - ($34))|0;
  $pc = $35;
  $36 = $p;
  $37 = ($36|0)<(0);
  $38 = $p;
  $39 = (0 - ($38))|0;
  $40 = $37 ? $39 : $38;
  $pa = $40;
  $41 = $pc;
  $42 = ($41|0)<(0);
  $43 = $pc;
  $44 = (0 - ($43))|0;
  $45 = $42 ? $44 : $43;
  $pb = $45;
  $46 = $p;
  $47 = $pc;
  $48 = (($46) + ($47))|0;
  $49 = ($48|0)<(0);
  $50 = $p;
  $51 = $pc;
  $52 = (($50) + ($51))|0;
  $53 = (0 - ($52))|0;
  $54 = $49 ? $53 : $52;
  $pc = $54;
  $55 = $pb;
  $56 = $pa;
  $57 = ($55|0)<($56|0);
  if ($57) {
   $58 = $pb;
   $pa = $58;
   $59 = $b;
   $a = $59;
  }
  $60 = $pc;
  $61 = $pa;
  $62 = ($60|0)<($61|0);
  if ($62) {
   $63 = $c;
   $a = $63;
  }
  $64 = $b;
  $c = $64;
  $65 = $1;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $a;
  $69 = (($68) + ($67))|0;
  $a = $69;
  $70 = $a;
  $71 = $70&255;
  $72 = $1;
  $73 = ((($72)) + 1|0);
  $1 = $73;
  HEAP8[$72>>0] = $71;
 }
 STACKTOP = sp;return;
}
function _png_read_filter_row_paeth_multibyte_pixel($row_info,$row,$prev_row) {
 $row_info = $row_info|0;
 $row = $row|0;
 $prev_row = $prev_row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $a = 0, $a1 = 0, $b = 0, $bpp = 0;
 var $c = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, $rp_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $prev_row;
 $3 = $0;
 $4 = ((($3)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($6) + 7)|0;
 $8 = $7 >> 3;
 $bpp = $8;
 $9 = $1;
 $10 = $bpp;
 $11 = (($9) + ($10)|0);
 $rp_end = $11;
 while(1) {
  $12 = $1;
  $13 = $rp_end;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $2;
  $19 = ((($18)) + 1|0);
  $2 = $19;
  $20 = HEAP8[$18>>0]|0;
  $21 = $20&255;
  $22 = (($17) + ($21))|0;
  $a = $22;
  $23 = $a;
  $24 = $23&255;
  $25 = $1;
  $26 = ((($25)) + 1|0);
  $1 = $26;
  HEAP8[$25>>0] = $24;
 }
 $27 = $0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $bpp;
 $31 = (($29) - ($30))|0;
 $32 = $rp_end;
 $33 = (($32) + ($31)|0);
 $rp_end = $33;
 while(1) {
  $34 = $1;
  $35 = $rp_end;
  $36 = ($34>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = $2;
  $38 = $bpp;
  $39 = (0 - ($38))|0;
  $40 = (($37) + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $c = $42;
  $43 = $1;
  $44 = $bpp;
  $45 = (0 - ($44))|0;
  $46 = (($43) + ($45)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $a1 = $48;
  $49 = $2;
  $50 = ((($49)) + 1|0);
  $2 = $50;
  $51 = HEAP8[$49>>0]|0;
  $52 = $51&255;
  $b = $52;
  $53 = $b;
  $54 = $c;
  $55 = (($53) - ($54))|0;
  $p = $55;
  $56 = $a1;
  $57 = $c;
  $58 = (($56) - ($57))|0;
  $pc = $58;
  $59 = $p;
  $60 = ($59|0)<(0);
  $61 = $p;
  $62 = (0 - ($61))|0;
  $63 = $60 ? $62 : $61;
  $pa = $63;
  $64 = $pc;
  $65 = ($64|0)<(0);
  $66 = $pc;
  $67 = (0 - ($66))|0;
  $68 = $65 ? $67 : $66;
  $pb = $68;
  $69 = $p;
  $70 = $pc;
  $71 = (($69) + ($70))|0;
  $72 = ($71|0)<(0);
  $73 = $p;
  $74 = $pc;
  $75 = (($73) + ($74))|0;
  $76 = (0 - ($75))|0;
  $77 = $72 ? $76 : $75;
  $pc = $77;
  $78 = $pb;
  $79 = $pa;
  $80 = ($78|0)<($79|0);
  if ($80) {
   $81 = $pb;
   $pa = $81;
   $82 = $b;
   $a1 = $82;
  }
  $83 = $pc;
  $84 = $pa;
  $85 = ($83|0)<($84|0);
  if ($85) {
   $86 = $c;
   $a1 = $86;
  }
  $87 = $1;
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $a1;
  $91 = (($90) + ($89))|0;
  $a1 = $91;
  $92 = $a1;
  $93 = $92&255;
  $94 = $1;
  $95 = ((($94)) + 1|0);
  $1 = $95;
  HEAP8[$94>>0] = $93;
 }
 STACKTOP = sp;return;
}
function _png_read_IDAT_data($png_ptr,$output,$avail_out) {
 $png_ptr = $png_ptr|0;
 $output = $output|0;
 $avail_out = $avail_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail_in = 0, $buffer = 0, $out = 0, $ret = 0;
 var $tmpbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpbuf = sp + 32|0;
 $0 = $png_ptr;
 $1 = $output;
 $2 = $avail_out;
 $3 = $1;
 $4 = $0;
 $5 = ((($4)) + 224|0);
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = $3;
 $7 = $0;
 $8 = ((($7)) + 224|0);
 $9 = ((($8)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
 }
 L3: while(1) {
  $12 = $0;
  $13 = ((($12)) + 224|0);
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   while(1) {
    $17 = $0;
    $18 = ((($17)) + 400|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0);
    $21 = $0;
    if (!($20)) {
     break;
    }
    (_png_crc_finish($21,0)|0);
    $22 = $0;
    $23 = (_png_read_chunk_header($22)|0);
    $24 = $0;
    $25 = ((($24)) + 400|0);
    HEAP32[$25>>2] = $23;
    $26 = $0;
    $27 = ((($26)) + 376|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)!=(1229209940);
    if ($29) {
     label = 6;
     break L3;
    }
   }
   $31 = ((($21)) + 764|0);
   $32 = HEAP32[$31>>2]|0;
   $avail_in = $32;
   $33 = $avail_in;
   $34 = $0;
   $35 = ((($34)) + 400|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($33>>>0)>($36>>>0);
   if ($37) {
    $38 = $0;
    $39 = ((($38)) + 400|0);
    $40 = HEAP32[$39>>2]|0;
    $avail_in = $40;
   }
   $41 = $0;
   $42 = $avail_in;
   $43 = (_png_read_buffer($41,$42,0)|0);
   $buffer = $43;
   $44 = $0;
   $45 = $buffer;
   $46 = $avail_in;
   _png_crc_read($44,$45,$46);
   $47 = $avail_in;
   $48 = $0;
   $49 = ((($48)) + 400|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) - ($47))|0;
   HEAP32[$49>>2] = $51;
   $52 = $buffer;
   $53 = $0;
   $54 = ((($53)) + 224|0);
   HEAP32[$54>>2] = $52;
   $55 = $avail_in;
   $56 = $0;
   $57 = ((($56)) + 224|0);
   $58 = ((($57)) + 4|0);
   HEAP32[$58>>2] = $55;
  }
  $59 = $1;
  $60 = ($59|0)!=(0|0);
  if ($60) {
   $out = -1;
   $61 = $out;
   $62 = $2;
   $63 = ($61>>>0)>($62>>>0);
   if ($63) {
    $64 = $2;
    $out = $64;
   }
   $65 = $out;
   $66 = $2;
   $67 = (($66) - ($65))|0;
   $2 = $67;
   $68 = $out;
   $69 = $0;
   $70 = ((($69)) + 224|0);
   $71 = ((($70)) + 16|0);
   HEAP32[$71>>2] = $68;
  } else {
   $72 = $0;
   $73 = ((($72)) + 224|0);
   $74 = ((($73)) + 12|0);
   HEAP32[$74>>2] = $tmpbuf;
   $75 = $0;
   $76 = ((($75)) + 224|0);
   $77 = ((($76)) + 16|0);
   HEAP32[$77>>2] = 1024;
  }
  $78 = $0;
  $79 = ((($78)) + 224|0);
  $80 = (_inflate($79,0)|0);
  $ret = $80;
  $81 = $1;
  $82 = ($81|0)!=(0|0);
  $83 = $0;
  $84 = ((($83)) + 224|0);
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  if ($82) {
   $87 = $2;
   $88 = (($87) + ($86))|0;
   $2 = $88;
  } else {
   $89 = (1024 - ($86))|0;
   $90 = $2;
   $91 = (($90) + ($89))|0;
   $2 = $91;
  }
  $92 = $0;
  $93 = ((($92)) + 224|0);
  $94 = ((($93)) + 16|0);
  HEAP32[$94>>2] = 0;
  $95 = $ret;
  $96 = ($95|0)==(1);
  if ($96) {
   label = 19;
   break;
  }
  $118 = $ret;
  $119 = ($118|0)!=(0);
  if ($119) {
   label = 23;
   break;
  }
  $129 = $2;
  $130 = ($129>>>0)>(0);
  if (!($130)) {
   break;
  }
 }
 do {
  if ((label|0) == 6) {
   $30 = $0;
   _png_error($30,17425);
   // unreachable;
  }
  else if ((label|0) == 19) {
   $97 = $0;
   $98 = ((($97)) + 224|0);
   $99 = ((($98)) + 12|0);
   HEAP32[$99>>2] = 0;
   $100 = $0;
   $101 = ((($100)) + 208|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $102 | 8;
   HEAP32[$101>>2] = $103;
   $104 = $0;
   $105 = ((($104)) + 212|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $106 | 8;
   HEAP32[$105>>2] = $107;
   $108 = $0;
   $109 = ((($108)) + 224|0);
   $110 = ((($109)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111>>>0)>(0);
   if (!($112)) {
    $113 = $0;
    $114 = ((($113)) + 400|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115>>>0)>(0);
    if (!($116)) {
     break;
    }
   }
   $117 = $0;
   _png_chunk_benign_error($117,17447);
  }
  else if ((label|0) == 23) {
   $120 = $0;
   $121 = $ret;
   _png_zstream_error($120,$121);
   $122 = $1;
   $123 = ($122|0)!=(0|0);
   $124 = $0;
   $125 = $0;
   $126 = ((($125)) + 224|0);
   $127 = ((($126)) + 24|0);
   $128 = HEAP32[$127>>2]|0;
   if ($123) {
    _png_chunk_error($124,$128);
    // unreachable;
   }
   _png_chunk_benign_error($124,$128);
   STACKTOP = sp;return;
  }
 } while(0);
 $131 = $2;
 $132 = ($131>>>0)>(0);
 if (!($132)) {
  STACKTOP = sp;return;
 }
 $133 = $1;
 $134 = ($133|0)!=(0|0);
 $135 = $0;
 if ($134) {
  _png_error($135,17425);
  // unreachable;
 }
 _png_chunk_benign_error($135,17469);
 STACKTOP = sp;return;
}
function _png_read_finish_IDAT($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ((($1)) + 212|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 8;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $0;
  _png_read_IDAT_data($6,0,0);
  $7 = $0;
  $8 = ((($7)) + 224|0);
  $9 = ((($8)) + 12|0);
  HEAP32[$9>>2] = 0;
  $10 = $0;
  $11 = ((($10)) + 212|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 8;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = $0;
   $16 = ((($15)) + 208|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 | 8;
   HEAP32[$16>>2] = $18;
   $19 = $0;
   $20 = ((($19)) + 212|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 | 8;
   HEAP32[$20>>2] = $22;
  }
 }
 $23 = $0;
 $24 = ((($23)) + 220|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1229209940);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $0;
 $28 = ((($27)) + 224|0);
 HEAP32[$28>>2] = 0;
 $29 = $0;
 $30 = ((($29)) + 224|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = $0;
 $33 = ((($32)) + 220|0);
 HEAP32[$33>>2] = 0;
 $34 = $0;
 $35 = $0;
 $36 = ((($35)) + 400|0);
 $37 = HEAP32[$36>>2]|0;
 (_png_crc_finish($34,$37)|0);
 STACKTOP = sp;return;
}
function _png_read_finish_row($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ((($1)) + 372|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $0;
 $6 = ((($5)) + 372|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 356|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<($10>>>0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 424|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $0;
  $18 = ((($17)) + 372|0);
  HEAP32[$18>>2] = 0;
  $19 = $0;
  $20 = ((($19)) + 380|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $0;
  $23 = ((($22)) + 364|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  _memset(($21|0),0,($25|0))|0;
  while(1) {
   $26 = $0;
   $27 = ((($26)) + 425|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = (($28) + 1)<<24>>24;
   HEAP8[$27>>0] = $29;
   $30 = $0;
   $31 = ((($30)) + 425|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = ($33|0)>=(7);
   if ($34) {
    break;
   }
   $35 = $0;
   $36 = ((($35)) + 348|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $0;
   $39 = ((($38)) + 425|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = (17489 + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = (($37) + ($44))|0;
   $46 = (($45) - 1)|0;
   $47 = $0;
   $48 = ((($47)) + 425|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = (17496 + ($50)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($46) - ($53))|0;
   $55 = $0;
   $56 = ((($55)) + 425|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = (17489 + ($58)|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = (($54>>>0) / ($61>>>0))&-1;
   $63 = $0;
   $64 = ((($63)) + 368|0);
   HEAP32[$64>>2] = $62;
   $65 = $0;
   $66 = ((($65)) + 216|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 & 2;
   $69 = ($68|0)==(0);
   if (!($69)) {
    break;
   }
   $70 = $0;
   $71 = ((($70)) + 352|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $0;
   $74 = ((($73)) + 425|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = (17503 + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = (($72) + ($79))|0;
   $81 = (($80) - 1)|0;
   $82 = $0;
   $83 = ((($82)) + 425|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (17510 + ($85)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = (($81) - ($88))|0;
   $90 = $0;
   $91 = ((($90)) + 425|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $92&255;
   $94 = (17503 + ($93)|0);
   $95 = HEAP8[$94>>0]|0;
   $96 = $95&255;
   $97 = (($89>>>0) / ($96>>>0))&-1;
   $98 = $0;
   $99 = ((($98)) + 356|0);
   HEAP32[$99>>2] = $97;
   $100 = $0;
   $101 = ((($100)) + 356|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(0);
   if ($103) {
    continue;
   }
   $104 = $0;
   $105 = ((($104)) + 368|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0);
   if (!($107)) {
    break;
   }
  }
  $108 = $0;
  $109 = ((($108)) + 425|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = ($111|0)<(7);
  if ($112) {
   STACKTOP = sp;return;
  }
 }
 $113 = $0;
 _png_read_finish_IDAT($113);
 STACKTOP = sp;return;
}
function _png_read_start_row($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $extra = 0, $max_pixel_depth = 0, $row_bytes = 0, $temp = 0, $user_pixel_depth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 _png_init_read_transformations($1);
 $2 = $0;
 $3 = ((($2)) + 424|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(0);
 $7 = $0;
 if ($6) {
  $8 = ((($7)) + 216|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2;
  $11 = ($10|0)==(0);
  $12 = $0;
  $13 = ((($12)) + 352|0);
  $14 = HEAP32[$13>>2]|0;
  if ($11) {
   $15 = HEAP8[17517]|0;
   $16 = $15&255;
   $17 = (($14) + ($16))|0;
   $18 = (($17) - 1)|0;
   $19 = HEAP8[17524]|0;
   $20 = $19&255;
   $21 = (($18) - ($20))|0;
   $22 = HEAP8[17517]|0;
   $23 = $22&255;
   $24 = (($21>>>0) / ($23>>>0))&-1;
   $25 = $0;
   $26 = ((($25)) + 356|0);
   HEAP32[$26>>2] = $24;
  } else {
   $27 = $0;
   $28 = ((($27)) + 356|0);
   HEAP32[$28>>2] = $14;
  }
  $29 = $0;
  $30 = ((($29)) + 348|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = ((($32)) + 425|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (17531 + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($31) + ($38))|0;
  $40 = (($39) - 1)|0;
  $41 = $0;
  $42 = ((($41)) + 425|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (17538 + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($40) - ($47))|0;
  $49 = $0;
  $50 = ((($49)) + 425|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (17531 + ($52)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($48>>>0) / ($55>>>0))&-1;
  $57 = $0;
  $58 = ((($57)) + 368|0);
  HEAP32[$58>>2] = $56;
 } else {
  $59 = ((($7)) + 352|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $0;
  $62 = ((($61)) + 356|0);
  HEAP32[$62>>2] = $60;
  $63 = $0;
  $64 = ((($63)) + 348|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $0;
  $67 = ((($66)) + 368|0);
  HEAP32[$67>>2] = $65;
 }
 $68 = $0;
 $69 = ((($68)) + 430|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $max_pixel_depth = $71;
 $72 = $0;
 $73 = ((($72)) + 216|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 & 4;
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = $0;
  $78 = ((($77)) + 428|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)<(8);
  if ($81) {
   $max_pixel_depth = 8;
  }
 }
 $82 = $0;
 $83 = ((($82)) + 216|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $84 & 4096;
 $86 = ($85|0)!=(0);
 do {
  if ($86) {
   $87 = $0;
   $88 = ((($87)) + 427|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = ($90|0)==(3);
   $92 = $0;
   if ($91) {
    $93 = ((($92)) + 420|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = ($95|0)!=(0);
    if ($96) {
     $max_pixel_depth = 32;
     break;
    } else {
     $max_pixel_depth = 24;
     break;
    }
   }
   $97 = ((($92)) + 427|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = ($99|0)==(0);
   if (!($100)) {
    $110 = $0;
    $111 = ((($110)) + 427|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112&255;
    $114 = ($113|0)==(2);
    if (!($114)) {
     break;
    }
    $115 = $0;
    $116 = ((($115)) + 420|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = $117&65535;
    $119 = ($118|0)!=(0);
    if (!($119)) {
     break;
    }
    $120 = $max_pixel_depth;
    $121 = $120<<2;
    $max_pixel_depth = $121;
    $122 = $max_pixel_depth;
    $123 = (($122|0) / 3)&-1;
    $max_pixel_depth = $123;
    break;
   }
   $101 = $max_pixel_depth;
   $102 = ($101|0)<(8);
   if ($102) {
    $max_pixel_depth = 8;
   }
   $103 = $0;
   $104 = ((($103)) + 420|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = $105&65535;
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = $max_pixel_depth;
    $109 = $108<<1;
    $max_pixel_depth = $109;
   }
  }
 } while(0);
 $124 = $0;
 $125 = ((($124)) + 216|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $126 & 512;
 $128 = ($127|0)!=(0);
 do {
  if ($128) {
   $129 = $0;
   $130 = ((($129)) + 216|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 & 4096;
   $133 = ($132|0)!=(0);
   $134 = $0;
   if (!($133)) {
    $141 = ((($134)) + 216|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $142 & -513;
    HEAP32[$141>>2] = $143;
    break;
   }
   $135 = ((($134)) + 428|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = ($137|0)<(16);
   if ($138) {
    $139 = $max_pixel_depth;
    $140 = $139<<1;
    $max_pixel_depth = $140;
   }
  }
 } while(0);
 $144 = $0;
 $145 = ((($144)) + 216|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $146 & 32768;
 $148 = ($147|0)!=(0);
 do {
  if ($148) {
   $149 = $0;
   $150 = ((($149)) + 427|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = ($152|0)==(0);
   if ($153) {
    $154 = $max_pixel_depth;
    $155 = ($154|0)<=(8);
    if ($155) {
     $max_pixel_depth = 16;
     break;
    } else {
     $max_pixel_depth = 32;
     break;
    }
   }
   $156 = $0;
   $157 = ((($156)) + 427|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = ($159|0)==(2);
   if (!($160)) {
    $161 = $0;
    $162 = ((($161)) + 427|0);
    $163 = HEAP8[$162>>0]|0;
    $164 = $163&255;
    $165 = ($164|0)==(3);
    if (!($165)) {
     break;
    }
   }
   $166 = $max_pixel_depth;
   $167 = ($166|0)<=(32);
   if ($167) {
    $max_pixel_depth = 32;
    break;
   } else {
    $max_pixel_depth = 64;
    break;
   }
  }
 } while(0);
 $168 = $0;
 $169 = ((($168)) + 216|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $170 & 16384;
 $172 = ($171|0)!=(0);
 do {
  if ($172) {
   $173 = $0;
   $174 = ((($173)) + 420|0);
   $175 = HEAP16[$174>>1]|0;
   $176 = $175&65535;
   $177 = ($176|0)!=(0);
   if ($177) {
    $178 = $0;
    $179 = ((($178)) + 216|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = $180 & 4096;
    $182 = ($181|0)!=(0);
    if (!($182)) {
     label = 41;
    }
   } else {
    label = 41;
   }
   if ((label|0) == 41) {
    $183 = $0;
    $184 = ((($183)) + 216|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = $185 & 32768;
    $187 = ($186|0)!=(0);
    if (!($187)) {
     $188 = $0;
     $189 = ((($188)) + 427|0);
     $190 = HEAP8[$189>>0]|0;
     $191 = $190&255;
     $192 = ($191|0)==(4);
     if (!($192)) {
      $195 = $max_pixel_depth;
      $196 = ($195|0)<=(8);
      $197 = $0;
      $198 = ((($197)) + 427|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199&255;
      $201 = ($200|0)==(6);
      if ($196) {
       if ($201) {
        $max_pixel_depth = 32;
        break;
       } else {
        $max_pixel_depth = 24;
        break;
       }
      } else {
       if ($201) {
        $max_pixel_depth = 64;
        break;
       } else {
        $max_pixel_depth = 48;
        break;
       }
      }
     }
    }
   }
   $193 = $max_pixel_depth;
   $194 = ($193|0)<=(16);
   if ($194) {
    $max_pixel_depth = 32;
    break;
   } else {
    $max_pixel_depth = 64;
    break;
   }
  }
 } while(0);
 $202 = $0;
 $203 = ((($202)) + 216|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $204 & 1048576;
 $206 = ($205|0)!=(0);
 if ($206) {
  $207 = $0;
  $208 = ((($207)) + 204|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&255;
  $211 = $0;
  $212 = ((($211)) + 205|0);
  $213 = HEAP8[$212>>0]|0;
  $214 = $213&255;
  $215 = Math_imul($210, $214)|0;
  $user_pixel_depth = $215;
  $216 = $user_pixel_depth;
  $217 = $max_pixel_depth;
  $218 = ($216|0)>($217|0);
  if ($218) {
   $219 = $user_pixel_depth;
   $max_pixel_depth = $219;
  }
 }
 $220 = $max_pixel_depth;
 $221 = $220&255;
 $222 = $0;
 $223 = ((($222)) + 434|0);
 HEAP8[$223>>0] = $221;
 $224 = $0;
 $225 = ((($224)) + 435|0);
 HEAP8[$225>>0] = 0;
 $226 = $0;
 $227 = ((($226)) + 348|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = (($228) + 7)|0;
 $230 = $229 & -8;
 $row_bytes = $230;
 $231 = $max_pixel_depth;
 $232 = ($231|0)>=(8);
 $233 = $row_bytes;
 $234 = $max_pixel_depth;
 if ($232) {
  $235 = $234 >>> 3;
  $236 = Math_imul($233, $235)|0;
  $241 = $236;
 } else {
  $237 = Math_imul($233, $234)|0;
  $238 = (($237) + 7)|0;
  $239 = $238 >>> 3;
  $241 = $239;
 }
 $240 = (($241) + 1)|0;
 $242 = $max_pixel_depth;
 $243 = (($242) + 7)|0;
 $244 = $243 >> 3;
 $245 = (($240) + ($244))|0;
 $row_bytes = $245;
 $246 = $row_bytes;
 $247 = (($246) + 48)|0;
 $248 = $0;
 $249 = ((($248)) + 752|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = ($247>>>0)>($250>>>0);
 if ($251) {
  $252 = $0;
  $253 = $0;
  $254 = ((($253)) + 696|0);
  $255 = HEAP32[$254>>2]|0;
  _png_free($252,$255);
  $256 = $0;
  $257 = $0;
  $258 = ((($257)) + 772|0);
  $259 = HEAP32[$258>>2]|0;
  _png_free($256,$259);
  $260 = $0;
  $261 = ((($260)) + 424|0);
  $262 = HEAP8[$261>>0]|0;
  $263 = $262&255;
  $264 = ($263|0)!=(0);
  $265 = $0;
  $266 = $row_bytes;
  $267 = (($266) + 48)|0;
  if ($264) {
   $268 = (_png_calloc($265,$267)|0);
   $269 = $0;
   $270 = ((($269)) + 696|0);
   HEAP32[$270>>2] = $268;
  } else {
   $271 = (_png_malloc($265,$267)|0);
   $272 = $0;
   $273 = ((($272)) + 696|0);
   HEAP32[$273>>2] = $271;
  }
  $274 = $0;
  $275 = $row_bytes;
  $276 = (($275) + 48)|0;
  $277 = (_png_malloc($274,$276)|0);
  $278 = $0;
  $279 = ((($278)) + 772|0);
  HEAP32[$279>>2] = $277;
  $280 = $0;
  $281 = ((($280)) + 696|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = ((($282)) + 32|0);
  $temp = $283;
  $284 = $temp;
  $285 = $284;
  $286 = (($285) - 0)|0;
  $287 = $286 & 15;
  $extra = $287;
  $288 = $temp;
  $289 = $extra;
  $290 = (0 - ($289))|0;
  $291 = (($288) + ($290)|0);
  $292 = ((($291)) + -1|0);
  $293 = $0;
  $294 = ((($293)) + 384|0);
  HEAP32[$294>>2] = $292;
  $295 = $0;
  $296 = ((($295)) + 772|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = ((($297)) + 32|0);
  $temp = $298;
  $299 = $temp;
  $300 = $299;
  $301 = (($300) - 0)|0;
  $302 = $301 & 15;
  $extra = $302;
  $303 = $temp;
  $304 = $extra;
  $305 = (0 - ($304))|0;
  $306 = (($303) + ($305)|0);
  $307 = ((($306)) + -1|0);
  $308 = $0;
  $309 = ((($308)) + 380|0);
  HEAP32[$309>>2] = $307;
  $310 = $row_bytes;
  $311 = (($310) + 48)|0;
  $312 = $0;
  $313 = ((($312)) + 752|0);
  HEAP32[$313>>2] = $311;
 }
 $314 = $0;
 $315 = ((($314)) + 364|0);
 $316 = HEAP32[$315>>2]|0;
 $317 = ($316>>>0)>(4294967294);
 $318 = $0;
 if ($317) {
  _png_error($318,17545);
  // unreachable;
 }
 $319 = ((($318)) + 380|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = $0;
 $322 = ((($321)) + 364|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = (($323) + 1)|0;
 _memset(($320|0),0,($324|0))|0;
 $325 = $0;
 $326 = ((($325)) + 756|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = ($327|0)!=(0|0);
 if ($328) {
  $329 = $0;
  $330 = ((($329)) + 756|0);
  $331 = HEAP32[$330>>2]|0;
  $buffer = $331;
  $332 = $0;
  $333 = ((($332)) + 760|0);
  HEAP32[$333>>2] = 0;
  $334 = $0;
  $335 = ((($334)) + 756|0);
  HEAP32[$335>>2] = 0;
  $336 = $0;
  $337 = $buffer;
  _png_free($336,$337);
 }
 $338 = $0;
 $339 = (_png_inflate_claim($338,1229209940)|0);
 $340 = ($339|0)!=(0);
 $341 = $0;
 if ($340) {
  $342 = $0;
  $343 = ((($342)) + 224|0);
  $344 = ((($343)) + 24|0);
  $345 = HEAP32[$344>>2]|0;
  _png_error($341,$345);
  // unreachable;
 } else {
  $346 = ((($341)) + 212|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $347 | 64;
  HEAP32[$346>>2] = $348;
  STACKTOP = sp;return;
 }
}
function _png_set_bKGD($png_ptr,$info_ptr,$background) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $background = $background|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $background;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 170|0);
 $11 = $2;
 ;HEAP16[$10>>1]=HEAP16[$11>>1]|0;HEAP16[$10+2>>1]=HEAP16[$11+2>>1]|0;HEAP16[$10+4>>1]=HEAP16[$11+4>>1]|0;HEAP16[$10+6>>1]=HEAP16[$11+6>>1]|0;HEAP16[$10+8>>1]=HEAP16[$11+8>>1]|0;
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 | 32;
 HEAP32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function _png_set_hIST($png_ptr,$info_ptr,$hist) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $hist = $hist|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $hist;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ((($7)) + 20|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = ($15|0)>(256);
  if (!($16)) {
   $18 = $0;
   $19 = $1;
   _png_free_data($18,$19,8,0);
   $20 = $0;
   $21 = (_png_malloc_warn($20,512)|0);
   $22 = $1;
   $23 = ((($22)) + 204|0);
   HEAP32[$23>>2] = $21;
   $24 = $1;
   $25 = ((($24)) + 204|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   if ($27) {
    $28 = $0;
    _png_warning($28,17636);
    STACKTOP = sp;return;
   }
   $29 = $1;
   $30 = ((($29)) + 232|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 | 8;
   HEAP32[$30>>2] = $32;
   $i = 0;
   while(1) {
    $33 = $i;
    $34 = $1;
    $35 = ((($34)) + 20|0);
    $36 = HEAP16[$35>>1]|0;
    $37 = $36&65535;
    $38 = ($33|0)<($37|0);
    if (!($38)) {
     break;
    }
    $39 = $i;
    $40 = $2;
    $41 = (($40) + ($39<<1)|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = $i;
    $44 = $1;
    $45 = ((($44)) + 204|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + ($43<<1)|0);
    HEAP16[$47>>1] = $42;
    $48 = $i;
    $49 = (($48) + 1)|0;
    $i = $49;
   }
   $50 = $1;
   $51 = ((($50)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 | 64;
   HEAP32[$51>>2] = $53;
   STACKTOP = sp;return;
  }
 }
 $17 = $0;
 _png_warning($17,17590);
 STACKTOP = sp;return;
}
function _png_set_IHDR($png_ptr,$info_ptr,$width,$height,$bit_depth,$color_type,$interlace_type,$compression_type,$filter_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $width = $width|0;
 $height = $height|0;
 $bit_depth = $bit_depth|0;
 $color_type = $color_type|0;
 $interlace_type = $interlace_type|0;
 $compression_type = $compression_type|0;
 $filter_type = $filter_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $width;
 $3 = $height;
 $4 = $bit_depth;
 $5 = $color_type;
 $6 = $interlace_type;
 $7 = $compression_type;
 $8 = $filter_type;
 $9 = $0;
 $10 = ($9|0)==(0|0);
 $11 = $1;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $1;
 HEAP32[$14>>2] = $13;
 $15 = $3;
 $16 = $1;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $4;
 $19 = $18&255;
 $20 = $1;
 $21 = ((($20)) + 24|0);
 HEAP8[$21>>0] = $19;
 $22 = $5;
 $23 = $22&255;
 $24 = $1;
 $25 = ((($24)) + 25|0);
 HEAP8[$25>>0] = $23;
 $26 = $7;
 $27 = $26&255;
 $28 = $1;
 $29 = ((($28)) + 26|0);
 HEAP8[$29>>0] = $27;
 $30 = $8;
 $31 = $30&255;
 $32 = $1;
 $33 = ((($32)) + 27|0);
 HEAP8[$33>>0] = $31;
 $34 = $6;
 $35 = $34&255;
 $36 = $1;
 $37 = ((($36)) + 28|0);
 HEAP8[$37>>0] = $35;
 $38 = $0;
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $41 = $1;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $1;
 $45 = ((($44)) + 24|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $1;
 $49 = ((($48)) + 25|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $1;
 $53 = ((($52)) + 28|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $1;
 $57 = ((($56)) + 26|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $1;
 $61 = ((($60)) + 27|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 _png_check_IHDR($38,$40,$43,$47,$51,$55,$59,$63);
 $64 = $1;
 $65 = ((($64)) + 25|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = ($67|0)==(3);
 $69 = $1;
 do {
  if ($68) {
   $70 = ((($69)) + 29|0);
   HEAP8[$70>>0] = 1;
  } else {
   $71 = ((($69)) + 25|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = $73 & 2;
   $75 = ($74|0)!=(0);
   $76 = $1;
   $77 = ((($76)) + 29|0);
   if ($75) {
    HEAP8[$77>>0] = 3;
    break;
   } else {
    HEAP8[$77>>0] = 1;
    break;
   }
  }
 } while(0);
 $78 = $1;
 $79 = ((($78)) + 25|0);
 $80 = HEAP8[$79>>0]|0;
 $81 = $80&255;
 $82 = $81 & 4;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $1;
  $85 = ((($84)) + 29|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = (($86) + 1)<<24>>24;
  HEAP8[$85>>0] = $87;
 }
 $88 = $1;
 $89 = ((($88)) + 29|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 $92 = $1;
 $93 = ((($92)) + 24|0);
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = Math_imul($91, $95)|0;
 $97 = $96&255;
 $98 = $1;
 $99 = ((($98)) + 30|0);
 HEAP8[$99>>0] = $97;
 $100 = $1;
 $101 = ((($100)) + 30|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = ($103|0)>=(8);
 $105 = $2;
 $106 = $1;
 $107 = ((($106)) + 30|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 if ($104) {
  $110 = $109 >>> 3;
  $111 = Math_imul($105, $110)|0;
  $117 = $111;
 } else {
  $112 = Math_imul($105, $109)|0;
  $113 = (($112) + 7)|0;
  $114 = $113 >>> 3;
  $117 = $114;
 }
 $115 = $1;
 $116 = ((($115)) + 12|0);
 HEAP32[$116>>2] = $117;
 STACKTOP = sp;return;
}
function _png_set_oFFs($png_ptr,$info_ptr,$offset_x,$offset_y,$unit_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $offset_x = $offset_x|0;
 $offset_y = $offset_y|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $offset_x;
 $3 = $offset_y;
 $4 = $unit_type;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 180|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $1;
 $14 = ((($13)) + 184|0);
 HEAP32[$14>>2] = $12;
 $15 = $4;
 $16 = $15&255;
 $17 = $1;
 $18 = ((($17)) + 188|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 | 256;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _png_set_pCAL($png_ptr,$info_ptr,$purpose,$X0,$X1,$type,$nparams,$units,$params) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $purpose = $purpose|0;
 $X0 = $X0|0;
 $X1 = $X1|0;
 $type = $type|0;
 $nparams = $nparams|0;
 $units = $units|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $length = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $purpose;
 $3 = $X0;
 $4 = $X1;
 $5 = $type;
 $6 = $nparams;
 $7 = $units;
 $8 = $params;
 $9 = $0;
 $10 = ($9|0)==(0|0);
 $11 = $1;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 $13 = $2;
 $14 = ($13|0)==(0|0);
 $or$cond3 = $or$cond | $14;
 $15 = $7;
 $16 = ($15|0)==(0|0);
 $or$cond5 = $or$cond3 | $16;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $17 = $6;
 $18 = ($17|0)>(0);
 $19 = $8;
 $20 = ($19|0)==(0|0);
 $or$cond7 = $18 & $20;
 if ($or$cond7) {
  STACKTOP = sp;return;
 }
 $21 = $2;
 $22 = (_strlen($21)|0);
 $23 = (($22) + 1)|0;
 $length = $23;
 $24 = $5;
 $25 = ($24|0)<(0);
 $26 = $5;
 $27 = ($26|0)>(3);
 $or$cond9 = $25 | $27;
 if ($or$cond9) {
  $28 = $0;
  _png_error($28,17676);
  // unreachable;
 }
 $29 = $6;
 $30 = ($29|0)<(0);
 $31 = $6;
 $32 = ($31|0)>(255);
 $or$cond11 = $30 | $32;
 if ($or$cond11) {
  $33 = $0;
  _png_error($33,17703);
  // unreachable;
 }
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = $6;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   label = 13;
   break;
  }
  $37 = $i;
  $38 = $8;
  $39 = (($38) + ($37<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   label = 11;
   break;
  }
  $42 = $i;
  $43 = $8;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $i;
  $47 = $8;
  $48 = (($47) + ($46<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_strlen($49)|0);
  $51 = (_png_check_fp_string($45,$50)|0);
  $52 = ($51|0)!=(0);
  if (!($52)) {
   label = 11;
   break;
  }
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 if ((label|0) == 11) {
  $53 = $0;
  _png_error($53,17732);
  // unreachable;
 }
 else if ((label|0) == 13) {
  $56 = $0;
  $57 = $length;
  $58 = (_png_malloc_warn($56,$57)|0);
  $59 = $1;
  $60 = ((($59)) + 208|0);
  HEAP32[$60>>2] = $58;
  $61 = $1;
  $62 = ((($61)) + 208|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0|0);
  if ($64) {
   $65 = $0;
   _png_warning($65,17766);
   STACKTOP = sp;return;
  }
  $66 = $1;
  $67 = ((($66)) + 208|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $2;
  $70 = $length;
  _memcpy(($68|0),($69|0),($70|0))|0;
  $71 = $3;
  $72 = $1;
  $73 = ((($72)) + 212|0);
  HEAP32[$73>>2] = $71;
  $74 = $4;
  $75 = $1;
  $76 = ((($75)) + 216|0);
  HEAP32[$76>>2] = $74;
  $77 = $5;
  $78 = $77&255;
  $79 = $1;
  $80 = ((($79)) + 228|0);
  HEAP8[$80>>0] = $78;
  $81 = $6;
  $82 = $81&255;
  $83 = $1;
  $84 = ((($83)) + 229|0);
  HEAP8[$84>>0] = $82;
  $85 = $7;
  $86 = (_strlen($85)|0);
  $87 = (($86) + 1)|0;
  $length = $87;
  $88 = $0;
  $89 = $length;
  $90 = (_png_malloc_warn($88,$89)|0);
  $91 = $1;
  $92 = ((($91)) + 220|0);
  HEAP32[$92>>2] = $90;
  $93 = $1;
  $94 = ((($93)) + 220|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $97 = $0;
   _png_warning($97,17803);
   STACKTOP = sp;return;
  }
  $98 = $1;
  $99 = ((($98)) + 220|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $7;
  $102 = $length;
  _memcpy(($100|0),($101|0),($102|0))|0;
  $103 = $0;
  $104 = $6;
  $105 = (($104) + 1)|0;
  $106 = $105<<2;
  $107 = (_png_malloc_warn($103,$106)|0);
  $108 = $1;
  $109 = ((($108)) + 224|0);
  HEAP32[$109>>2] = $107;
  $110 = $1;
  $111 = ((($110)) + 224|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(0|0);
  if ($113) {
   $114 = $0;
   _png_warning($114,17838);
   STACKTOP = sp;return;
  }
  $115 = $1;
  $116 = ((($115)) + 224|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $6;
  $119 = (($118) + 1)|0;
  $120 = $119<<2;
  _memset(($117|0),0,($120|0))|0;
  $i = 0;
  while(1) {
   $121 = $i;
   $122 = $6;
   $123 = ($121|0)<($122|0);
   if (!($123)) {
    label = 24;
    break;
   }
   $124 = $i;
   $125 = $8;
   $126 = (($125) + ($124<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (_strlen($127)|0);
   $129 = (($128) + 1)|0;
   $length = $129;
   $130 = $0;
   $131 = $length;
   $132 = (_png_malloc_warn($130,$131)|0);
   $133 = $i;
   $134 = $1;
   $135 = ((($134)) + 224|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($136) + ($133<<2)|0);
   HEAP32[$137>>2] = $132;
   $138 = $i;
   $139 = $1;
   $140 = ((($139)) + 224|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) + ($138<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)==(0|0);
   if ($144) {
    label = 22;
    break;
   }
   $146 = $i;
   $147 = $1;
   $148 = ((($147)) + 224|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + ($146<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $i;
   $153 = $8;
   $154 = (($153) + ($152<<2)|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $length;
   _memcpy(($151|0),($155|0),($156|0))|0;
   $157 = $i;
   $158 = (($157) + 1)|0;
   $i = $158;
  }
  if ((label|0) == 22) {
   $145 = $0;
   _png_warning($145,17874);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 24) {
   $159 = $1;
   $160 = ((($159)) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $161 | 1024;
   HEAP32[$160>>2] = $162;
   $163 = $1;
   $164 = ((($163)) + 232|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = $165 | 128;
   HEAP32[$164>>2] = $166;
   STACKTOP = sp;return;
  }
 }
}
function _png_set_sCAL_s($png_ptr,$info_ptr,$unit,$swidth,$sheight) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $unit = $unit|0;
 $swidth = $swidth|0;
 $sheight = $sheight|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $lengthh = 0, $lengthw = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $unit;
 $3 = $swidth;
 $4 = $sheight;
 $lengthw = 0;
 $lengthh = 0;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ($9|0)!=(1);
 $11 = $2;
 $12 = ($11|0)!=(2);
 $or$cond3 = $10 & $12;
 if ($or$cond3) {
  $13 = $0;
  _png_error($13,17913);
  // unreachable;
 }
 $14 = $3;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $27 = $0;
  _png_error($27,17931);
  // unreachable;
 }
 $16 = $3;
 $17 = (_strlen($16)|0);
 $lengthw = $17;
 $18 = ($17|0)==(0);
 if ($18) {
  $27 = $0;
  _png_error($27,17931);
  // unreachable;
 }
 $19 = $3;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($21|0)==(45);
 if ($22) {
  $27 = $0;
  _png_error($27,17931);
  // unreachable;
 }
 $23 = $3;
 $24 = $lengthw;
 $25 = (_png_check_fp_string($23,$24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $0;
  _png_error($27,17931);
  // unreachable;
 }
 $28 = $4;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $41 = $0;
  _png_error($41,17950);
  // unreachable;
 }
 $30 = $4;
 $31 = (_strlen($30)|0);
 $lengthh = $31;
 $32 = ($31|0)==(0);
 if ($32) {
  $41 = $0;
  _png_error($41,17950);
  // unreachable;
 }
 $33 = $4;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = ($35|0)==(45);
 if ($36) {
  $41 = $0;
  _png_error($41,17950);
  // unreachable;
 }
 $37 = $4;
 $38 = $lengthh;
 $39 = (_png_check_fp_string($37,$38)|0);
 $40 = ($39|0)!=(0);
 if (!($40)) {
  $41 = $0;
  _png_error($41,17950);
  // unreachable;
 }
 $42 = $2;
 $43 = $42&255;
 $44 = $1;
 $45 = ((($44)) + 252|0);
 HEAP8[$45>>0] = $43;
 $46 = $lengthw;
 $47 = (($46) + 1)|0;
 $lengthw = $47;
 $48 = $0;
 $49 = $lengthw;
 $50 = (_png_malloc_warn($48,$49)|0);
 $51 = $1;
 $52 = ((($51)) + 256|0);
 HEAP32[$52>>2] = $50;
 $53 = $1;
 $54 = ((($53)) + 256|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $57 = $0;
  _png_warning($57,17970);
  STACKTOP = sp;return;
 }
 $58 = $1;
 $59 = ((($58)) + 256|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $3;
 $62 = $lengthw;
 _memcpy(($60|0),($61|0),($62|0))|0;
 $63 = $lengthh;
 $64 = (($63) + 1)|0;
 $lengthh = $64;
 $65 = $0;
 $66 = $lengthh;
 $67 = (_png_malloc_warn($65,$66)|0);
 $68 = $1;
 $69 = ((($68)) + 260|0);
 HEAP32[$69>>2] = $67;
 $70 = $1;
 $71 = ((($70)) + 260|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0|0);
 if ($73) {
  $74 = $0;
  $75 = $1;
  $76 = ((($75)) + 256|0);
  $77 = HEAP32[$76>>2]|0;
  _png_free($74,$77);
  $78 = $1;
  $79 = ((($78)) + 256|0);
  HEAP32[$79>>2] = 0;
  $80 = $0;
  _png_warning($80,17970);
  STACKTOP = sp;return;
 } else {
  $81 = $1;
  $82 = ((($81)) + 260|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $4;
  $85 = $lengthh;
  _memcpy(($83|0),($84|0),($85|0))|0;
  $86 = $1;
  $87 = ((($86)) + 8|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $88 | 16384;
  HEAP32[$87>>2] = $89;
  $90 = $1;
  $91 = ((($90)) + 232|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 | 256;
  HEAP32[$91>>2] = $93;
  STACKTOP = sp;return;
 }
}
function _png_set_pHYs($png_ptr,$info_ptr,$res_x,$res_y,$unit_type) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $res_x = $res_x|0;
 $res_y = $res_y|0;
 $unit_type = $unit_type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $res_x;
 $3 = $res_y;
 $4 = $unit_type;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = $1;
 $11 = ((($10)) + 192|0);
 HEAP32[$11>>2] = $9;
 $12 = $3;
 $13 = $1;
 $14 = ((($13)) + 196|0);
 HEAP32[$14>>2] = $12;
 $15 = $4;
 $16 = $15&255;
 $17 = $1;
 $18 = ((($17)) + 200|0);
 HEAP8[$18>>0] = $16;
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 | 128;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function _png_set_PLTE($png_ptr,$info_ptr,$palette,$num_palette) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $palette = $palette|0;
 $num_palette = $num_palette|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $max_palette_length = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $palette;
 $3 = $num_palette;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 $6 = $1;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 25|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)==(3);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 24|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = 1 << $16;
  $18 = $17;
 } else {
  $18 = 256;
 }
 $max_palette_length = $18;
 $19 = $3;
 $20 = ($19|0)<(0);
 if (!($20)) {
  $21 = $3;
  $22 = $max_palette_length;
  $23 = ($21|0)>($22|0);
  if (!($23)) {
   $30 = $3;
   $31 = ($30|0)>(0);
   $32 = $2;
   $33 = ($32|0)==(0|0);
   $or$cond3 = $31 & $33;
   if ($or$cond3) {
    $41 = $0;
    _png_error($41,18040);
    // unreachable;
   }
   $34 = $3;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = $0;
    $37 = ((($36)) + 676|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & 1;
    $40 = ($39|0)==(0);
    if ($40) {
     $41 = $0;
     _png_error($41,18040);
     // unreachable;
    }
   }
   $42 = $0;
   $43 = $1;
   _png_free_data($42,$43,4096,0);
   $44 = $0;
   $45 = (_png_calloc($44,768)|0);
   $46 = $0;
   $47 = ((($46)) + 408|0);
   HEAP32[$47>>2] = $45;
   $48 = $3;
   $49 = ($48|0)>(0);
   if ($49) {
    $50 = $0;
    $51 = ((($50)) + 408|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $2;
    $54 = $3;
    $55 = ($54*3)|0;
    _memcpy(($52|0),($53|0),($55|0))|0;
   }
   $56 = $0;
   $57 = ((($56)) + 408|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = ((($59)) + 16|0);
   HEAP32[$60>>2] = $58;
   $61 = $3;
   $62 = $61&65535;
   $63 = $0;
   $64 = ((($63)) + 412|0);
   HEAP16[$64>>1] = $62;
   $65 = $1;
   $66 = ((($65)) + 20|0);
   HEAP16[$66>>1] = $62;
   $67 = $1;
   $68 = ((($67)) + 232|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $69 | 4096;
   HEAP32[$68>>2] = $70;
   $71 = $1;
   $72 = ((($71)) + 8|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 | 8;
   HEAP32[$72>>2] = $74;
   STACKTOP = sp;return;
  }
 }
 $24 = $1;
 $25 = ((($24)) + 25|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)==(3);
 $29 = $0;
 if ($28) {
  _png_error($29,18017);
  // unreachable;
 }
 _png_warning($29,18017);
 STACKTOP = sp;return;
}
function _png_set_sBIT($png_ptr,$info_ptr,$sig_bit) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $sig_bit = $sig_bit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $sig_bit;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 148|0);
 $11 = $2;
 ;HEAP8[$10>>0]=HEAP8[$11>>0]|0;HEAP8[$10+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$11+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$11+4>>0]|0;
 $12 = $1;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 | 2;
 HEAP32[$13>>2] = $15;
 STACKTOP = sp;return;
}
function _png_set_text_2($png_ptr,$info_ptr,$text_ptr,$num_text) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $text_ptr = $text_ptr|0;
 $num_text = $num_text|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $key_len = 0, $lang_key_len = 0, $lang_len = 0, $max_text = 0, $new_text = 0, $old_num_text = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $text_length = 0, $textp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $info_ptr;
 $3 = $text_ptr;
 $4 = $num_text;
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 $9 = $4;
 $10 = ($9|0)<=(0);
 $or$cond3 = $or$cond | $10;
 $11 = $3;
 $12 = ($11|0)==(0|0);
 $or$cond5 = $or$cond3 | $12;
 if ($or$cond5) {
  $0 = 0;
  $290 = $0;
  STACKTOP = sp;return ($290|0);
 }
 $13 = $4;
 $14 = $2;
 $15 = ((($14)) + 132|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 128|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) - ($19))|0;
 $21 = ($13|0)>($20|0);
 do {
  if ($21) {
   $22 = $2;
   $23 = ((($22)) + 128|0);
   $24 = HEAP32[$23>>2]|0;
   $old_num_text = $24;
   $new_text = 0;
   $25 = $old_num_text;
   $max_text = $25;
   $26 = $4;
   $27 = $max_text;
   $28 = (2147483647 - ($27))|0;
   $29 = ($26|0)<=($28|0);
   if ($29) {
    $30 = $4;
    $31 = $max_text;
    $32 = (($31) + ($30))|0;
    $max_text = $32;
    $33 = $max_text;
    $34 = ($33|0)<(2147483639);
    if ($34) {
     $35 = $max_text;
     $36 = (($35) + 8)|0;
     $37 = $36 & -8;
     $max_text = $37;
    } else {
     $max_text = 2147483647;
    }
    $38 = $1;
    $39 = $2;
    $40 = ((($39)) + 136|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $old_num_text;
    $43 = $max_text;
    $44 = $old_num_text;
    $45 = (($43) - ($44))|0;
    $46 = (_png_realloc_array($38,$41,$42,$45,28)|0);
    $new_text = $46;
   }
   $47 = $new_text;
   $48 = ($47|0)==(0|0);
   $49 = $1;
   if (!($48)) {
    $50 = $2;
    $51 = ((($50)) + 136|0);
    $52 = HEAP32[$51>>2]|0;
    _png_free($49,$52);
    $53 = $new_text;
    $54 = $2;
    $55 = ((($54)) + 136|0);
    HEAP32[$55>>2] = $53;
    $56 = $2;
    $57 = ((($56)) + 232|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $58 | 16384;
    HEAP32[$57>>2] = $59;
    $60 = $max_text;
    $61 = $2;
    $62 = ((($61)) + 132|0);
    HEAP32[$62>>2] = $60;
    break;
   }
   _png_chunk_report($49,18056,1);
   $0 = 1;
   $290 = $0;
   STACKTOP = sp;return ($290|0);
  }
 } while(0);
 $i = 0;
 L19: while(1) {
  $63 = $i;
  $64 = $4;
  $65 = ($63|0)<($64|0);
  if (!($65)) {
   label = 44;
   break;
  }
  $66 = $2;
  $67 = ((($66)) + 128|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $2;
  $70 = ((($69)) + 136|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + (($68*28)|0)|0);
  $textp = $72;
  $73 = $i;
  $74 = $3;
  $75 = (($74) + (($73*28)|0)|0);
  $76 = ((($75)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)==(0|0);
  do {
   if (!($78)) {
    $79 = $i;
    $80 = $3;
    $81 = (($80) + (($79*28)|0)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)<(-1);
    if (!($83)) {
     $84 = $i;
     $85 = $3;
     $86 = (($85) + (($84*28)|0)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)>=(3);
     if (!($88)) {
      $90 = $i;
      $91 = $3;
      $92 = (($91) + (($90*28)|0)|0);
      $93 = ((($92)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = (_strlen($94)|0);
      $key_len = $95;
      $96 = $i;
      $97 = $3;
      $98 = (($97) + (($96*28)|0)|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)<=(0);
      do {
       if ($100) {
        $lang_len = 0;
        $lang_key_len = 0;
       } else {
        $101 = $i;
        $102 = $3;
        $103 = (($102) + (($101*28)|0)|0);
        $104 = ((($103)) + 20|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = ($105|0)!=(0|0);
        if ($106) {
         $107 = $i;
         $108 = $3;
         $109 = (($108) + (($107*28)|0)|0);
         $110 = ((($109)) + 20|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = (_strlen($111)|0);
         $lang_len = $112;
        } else {
         $lang_len = 0;
        }
        $113 = $i;
        $114 = $3;
        $115 = (($114) + (($113*28)|0)|0);
        $116 = ((($115)) + 24|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = ($117|0)!=(0|0);
        if ($118) {
         $119 = $i;
         $120 = $3;
         $121 = (($120) + (($119*28)|0)|0);
         $122 = ((($121)) + 24|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = (_strlen($123)|0);
         $lang_key_len = $124;
         break;
        } else {
         $lang_key_len = 0;
         break;
        }
       }
      } while(0);
      $125 = $i;
      $126 = $3;
      $127 = (($126) + (($125*28)|0)|0);
      $128 = ((($127)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($129|0)==(0|0);
      if ($130) {
       label = 28;
      } else {
       $131 = $i;
       $132 = $3;
       $133 = (($132) + (($131*28)|0)|0);
       $134 = ((($133)) + 8|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = HEAP8[$135>>0]|0;
       $137 = $136 << 24 >> 24;
       $138 = ($137|0)==(0);
       if ($138) {
        label = 28;
       } else {
        $145 = $i;
        $146 = $3;
        $147 = (($146) + (($145*28)|0)|0);
        $148 = ((($147)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (_strlen($149)|0);
        $text_length = $150;
        $151 = $i;
        $152 = $3;
        $153 = (($152) + (($151*28)|0)|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = $textp;
        HEAP32[$155>>2] = $154;
       }
      }
      do {
       if ((label|0) == 28) {
        label = 0;
        $text_length = 0;
        $139 = $i;
        $140 = $3;
        $141 = (($140) + (($139*28)|0)|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = ($142|0)>(0);
        $144 = $textp;
        if ($143) {
         HEAP32[$144>>2] = 1;
         break;
        } else {
         HEAP32[$144>>2] = -1;
         break;
        }
       }
      } while(0);
      $156 = $1;
      $157 = $key_len;
      $158 = $text_length;
      $159 = (($157) + ($158))|0;
      $160 = $lang_len;
      $161 = (($159) + ($160))|0;
      $162 = $lang_key_len;
      $163 = (($161) + ($162))|0;
      $164 = (($163) + 4)|0;
      $165 = (_png_malloc_base($156,$164)|0);
      $166 = $textp;
      $167 = ((($166)) + 4|0);
      HEAP32[$167>>2] = $165;
      $168 = $textp;
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       label = 33;
       break L19;
      }
      $173 = $textp;
      $174 = ((($173)) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = $i;
      $177 = $3;
      $178 = (($177) + (($176*28)|0)|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $key_len;
      _memcpy(($175|0),($180|0),($181|0))|0;
      $182 = $textp;
      $183 = ((($182)) + 4|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $key_len;
      $186 = (($184) + ($185)|0);
      HEAP8[$186>>0] = 0;
      $187 = $i;
      $188 = $3;
      $189 = (($188) + (($187*28)|0)|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = ($190|0)>(0);
      $192 = $textp;
      if ($191) {
       $193 = ((($192)) + 4|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = $key_len;
       $196 = (($194) + ($195)|0);
       $197 = ((($196)) + 1|0);
       $198 = $textp;
       $199 = ((($198)) + 20|0);
       HEAP32[$199>>2] = $197;
       $200 = $textp;
       $201 = ((($200)) + 20|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = $i;
       $204 = $3;
       $205 = (($204) + (($203*28)|0)|0);
       $206 = ((($205)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = $lang_len;
       _memcpy(($202|0),($207|0),($208|0))|0;
       $209 = $textp;
       $210 = ((($209)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = $lang_len;
       $213 = (($211) + ($212)|0);
       HEAP8[$213>>0] = 0;
       $214 = $textp;
       $215 = ((($214)) + 20|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = $lang_len;
       $218 = (($216) + ($217)|0);
       $219 = ((($218)) + 1|0);
       $220 = $textp;
       $221 = ((($220)) + 24|0);
       HEAP32[$221>>2] = $219;
       $222 = $textp;
       $223 = ((($222)) + 24|0);
       $224 = HEAP32[$223>>2]|0;
       $225 = $i;
       $226 = $3;
       $227 = (($226) + (($225*28)|0)|0);
       $228 = ((($227)) + 24|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = $lang_key_len;
       _memcpy(($224|0),($229|0),($230|0))|0;
       $231 = $textp;
       $232 = ((($231)) + 24|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = $lang_key_len;
       $235 = (($233) + ($234)|0);
       HEAP8[$235>>0] = 0;
       $236 = $textp;
       $237 = ((($236)) + 24|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = $lang_key_len;
       $240 = (($238) + ($239)|0);
       $241 = ((($240)) + 1|0);
       $242 = $textp;
       $243 = ((($242)) + 8|0);
       HEAP32[$243>>2] = $241;
      } else {
       $244 = ((($192)) + 20|0);
       HEAP32[$244>>2] = 0;
       $245 = $textp;
       $246 = ((($245)) + 24|0);
       HEAP32[$246>>2] = 0;
       $247 = $textp;
       $248 = ((($247)) + 4|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = $key_len;
       $251 = (($249) + ($250)|0);
       $252 = ((($251)) + 1|0);
       $253 = $textp;
       $254 = ((($253)) + 8|0);
       HEAP32[$254>>2] = $252;
      }
      $255 = $text_length;
      $256 = ($255|0)!=(0);
      if ($256) {
       $257 = $textp;
       $258 = ((($257)) + 8|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = $i;
       $261 = $3;
       $262 = (($261) + (($260*28)|0)|0);
       $263 = ((($262)) + 8|0);
       $264 = HEAP32[$263>>2]|0;
       $265 = $text_length;
       _memcpy(($259|0),($264|0),($265|0))|0;
      }
      $266 = $textp;
      $267 = ((($266)) + 8|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = $text_length;
      $270 = (($268) + ($269)|0);
      HEAP8[$270>>0] = 0;
      $271 = $textp;
      $272 = HEAP32[$271>>2]|0;
      $273 = ($272|0)>(0);
      if ($273) {
       $274 = $textp;
       $275 = ((($274)) + 12|0);
       HEAP32[$275>>2] = 0;
       $276 = $text_length;
       $277 = $textp;
       $278 = ((($277)) + 16|0);
       HEAP32[$278>>2] = $276;
      } else {
       $279 = $text_length;
       $280 = $textp;
       $281 = ((($280)) + 12|0);
       HEAP32[$281>>2] = $279;
       $282 = $textp;
       $283 = ((($282)) + 16|0);
       HEAP32[$283>>2] = 0;
      }
      $284 = $2;
      $285 = ((($284)) + 128|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = (($286) + 1)|0;
      HEAP32[$285>>2] = $287;
      break;
     }
    }
    $89 = $1;
    _png_chunk_report($89,18077,1);
   }
  } while(0);
  $288 = $i;
  $289 = (($288) + 1)|0;
  $i = $289;
 }
 if ((label|0) == 33) {
  $172 = $1;
  _png_chunk_report($172,18115,1);
  $0 = 1;
  $290 = $0;
  STACKTOP = sp;return ($290|0);
 }
 else if ((label|0) == 44) {
  $0 = 0;
  $290 = $0;
  STACKTOP = sp;return ($290|0);
 }
 return (0)|0;
}
function _png_set_tIME($png_ptr,$info_ptr,$mod_time) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $mod_time = $mod_time|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $mod_time;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 $5 = $1;
 $6 = ($5|0)==(0|0);
 $or$cond = $4 | $6;
 $7 = $2;
 $8 = ($7|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $9 = $0;
 $10 = ((($9)) + 208|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 512;
 $13 = ($12|0)!=(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = $2;
 $15 = ((($14)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = $2;
  $20 = ((($19)) + 2|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)>(12);
  if (!($23)) {
   $24 = $2;
   $25 = ((($24)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = $2;
    $30 = ((($29)) + 3|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ($32|0)>(31);
    if (!($33)) {
     $34 = $2;
     $35 = ((($34)) + 4|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($37|0)>(23);
     if (!($38)) {
      $39 = $2;
      $40 = ((($39)) + 5|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41&255;
      $43 = ($42|0)>(59);
      if (!($43)) {
       $44 = $2;
       $45 = ((($44)) + 6|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = $46&255;
       $48 = ($47|0)>(60);
       if (!($48)) {
        $50 = $1;
        $51 = ((($50)) + 140|0);
        $52 = $2;
        ;HEAP16[$51>>1]=HEAP16[$52>>1]|0;HEAP16[$51+2>>1]=HEAP16[$52+2>>1]|0;HEAP16[$51+4>>1]=HEAP16[$52+4>>1]|0;HEAP16[$51+6>>1]=HEAP16[$52+6>>1]|0;
        $53 = $1;
        $54 = ((($53)) + 8|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = $55 | 512;
        HEAP32[$54>>2] = $56;
        STACKTOP = sp;return;
       }
      }
     }
    }
   }
  }
 }
 $49 = $0;
 _png_warning($49,18141);
 STACKTOP = sp;return;
}
function _png_set_tRNS($png_ptr,$info_ptr,$trans_alpha,$num_trans,$trans_color) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $trans_alpha = $trans_alpha|0;
 $num_trans = $num_trans|0;
 $trans_color = $trans_color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $or$cond = 0, $or$cond3 = 0, $sample_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $trans_alpha;
 $3 = $num_trans;
 $4 = $trans_color;
 $5 = $0;
 $6 = ($5|0)==(0|0);
 $7 = $1;
 $8 = ($7|0)==(0|0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $0;
  $12 = $1;
  _png_free_data($11,$12,8192,0);
  $13 = $0;
  $14 = (_png_malloc($13,256)|0);
  $15 = $1;
  $16 = ((($15)) + 156|0);
  HEAP32[$16>>2] = $14;
  $17 = $0;
  $18 = ((($17)) + 520|0);
  HEAP32[$18>>2] = $14;
  $19 = $3;
  $20 = ($19|0)>(0);
  $21 = $3;
  $22 = ($21|0)<=(256);
  $or$cond3 = $20 & $22;
  if ($or$cond3) {
   $23 = $1;
   $24 = ((($23)) + 156|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $2;
   $27 = $3;
   _memcpy(($25|0),($26|0),($27|0))|0;
  }
 }
 $28 = $4;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = $1;
  $31 = ((($30)) + 24|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($33|0)<(16);
  do {
   if ($34) {
    $35 = $1;
    $36 = ((($35)) + 24|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = 1 << $38;
    $40 = (($39) - 1)|0;
    $sample_max = $40;
    $41 = $1;
    $42 = ((($41)) + 25|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $4;
     $47 = ((($46)) + 8|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = $sample_max;
     $51 = ($49|0)>($50|0);
     if (!($51)) {
      label = 9;
     }
    } else {
     label = 9;
    }
    if ((label|0) == 9) {
     $52 = $1;
     $53 = ((($52)) + 25|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = ($55|0)==(2);
     if (!($56)) {
      break;
     }
     $57 = $4;
     $58 = ((($57)) + 2|0);
     $59 = HEAP16[$58>>1]|0;
     $60 = $59&65535;
     $61 = $sample_max;
     $62 = ($60|0)>($61|0);
     if (!($62)) {
      $63 = $4;
      $64 = ((($63)) + 4|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = $65&65535;
      $67 = $sample_max;
      $68 = ($66|0)>($67|0);
      if (!($68)) {
       $69 = $4;
       $70 = ((($69)) + 6|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = $71&65535;
       $73 = $sample_max;
       $74 = ($72|0)>($73|0);
       if (!($74)) {
        break;
       }
      }
     }
    }
    $75 = $0;
    _png_warning($75,18169);
   }
  } while(0);
  $76 = $1;
  $77 = ((($76)) + 160|0);
  $78 = $4;
  ;HEAP16[$77>>1]=HEAP16[$78>>1]|0;HEAP16[$77+2>>1]=HEAP16[$78+2>>1]|0;HEAP16[$77+4>>1]=HEAP16[$78+4>>1]|0;HEAP16[$77+6>>1]=HEAP16[$78+6>>1]|0;HEAP16[$77+8>>1]=HEAP16[$78+8>>1]|0;
  $79 = $3;
  $80 = ($79|0)==(0);
  if ($80) {
   $3 = 1;
  }
 }
 $81 = $3;
 $82 = $81&65535;
 $83 = $1;
 $84 = ((($83)) + 22|0);
 HEAP16[$84>>1] = $82;
 $85 = $3;
 $86 = ($85|0)!=(0);
 if (!($86)) {
  STACKTOP = sp;return;
 }
 $87 = $1;
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 | 16;
 HEAP32[$88>>2] = $90;
 $91 = $1;
 $92 = ((($91)) + 232|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $93 | 8192;
 HEAP32[$92>>2] = $94;
 STACKTOP = sp;return;
}
function _png_set_sPLT($png_ptr,$info_ptr,$entries,$nentries) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $entries = $entries|0;
 $nentries = $nentries|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $length = 0, $np = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $entries;
 $3 = $nentries;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 $6 = $1;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 $8 = $3;
 $9 = ($8|0)<=(0);
 $or$cond3 = $or$cond | $9;
 $10 = $2;
 $11 = ($10|0)==(0|0);
 $or$cond5 = $or$cond3 | $11;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 244|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 248|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (_png_realloc_array($12,$15,$18,$19,16)|0);
 $np = $20;
 $21 = $np;
 $22 = ($21|0)==(0|0);
 $23 = $0;
 if ($22) {
  _png_chunk_report($23,18219,1);
  STACKTOP = sp;return;
 }
 $24 = $1;
 $25 = ((($24)) + 244|0);
 $26 = HEAP32[$25>>2]|0;
 _png_free($23,$26);
 $27 = $np;
 $28 = $1;
 $29 = ((($28)) + 244|0);
 HEAP32[$29>>2] = $27;
 $30 = $1;
 $31 = ((($30)) + 232|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 | 32;
 HEAP32[$31>>2] = $33;
 $34 = $1;
 $35 = ((($34)) + 248|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $np;
 $38 = (($37) + ($36<<4)|0);
 $np = $38;
 while(1) {
  $39 = $2;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   label = 7;
  } else {
   $42 = $2;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    label = 7;
   } else {
    $47 = $2;
    $48 = ((($47)) + 4|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $np;
    $51 = ((($50)) + 4|0);
    HEAP8[$51>>0] = $49;
    $52 = $2;
    $53 = HEAP32[$52>>2]|0;
    $54 = (_strlen($53)|0);
    $55 = (($54) + 1)|0;
    $length = $55;
    $56 = $0;
    $57 = $length;
    $58 = (_png_malloc_base($56,$57)|0);
    $59 = $np;
    HEAP32[$59>>2] = $58;
    $60 = $np;
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(0|0);
    if ($62) {
     break;
    }
    $63 = $np;
    $64 = HEAP32[$63>>2]|0;
    $65 = $2;
    $66 = HEAP32[$65>>2]|0;
    $67 = $length;
    _memcpy(($64|0),($66|0),($67|0))|0;
    $68 = $0;
    $69 = $2;
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (_png_malloc_array($68,$71,10)|0);
    $73 = $np;
    $74 = ((($73)) + 8|0);
    HEAP32[$74>>2] = $72;
    $75 = $np;
    $76 = ((($75)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0|0);
    if ($78) {
     label = 10;
     break;
    }
    $83 = $2;
    $84 = ((($83)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $np;
    $87 = ((($86)) + 12|0);
    HEAP32[$87>>2] = $85;
    $88 = $np;
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $2;
    $92 = ((($91)) + 8|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $2;
    $95 = ((($94)) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96*10)|0;
    _memcpy(($90|0),($93|0),($97|0))|0;
    $98 = $1;
    $99 = ((($98)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 | 8192;
    HEAP32[$99>>2] = $101;
    $102 = $1;
    $103 = ((($102)) + 248|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 1)|0;
    HEAP32[$103>>2] = $105;
    $106 = $np;
    $107 = ((($106)) + 16|0);
    $np = $107;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $46 = $0;
   _png_app_error($46,18240);
  }
  $108 = $2;
  $109 = ((($108)) + 16|0);
  $2 = $109;
  $110 = $3;
  $111 = (($110) + -1)|0;
  $3 = $111;
  $112 = ($111|0)!=(0);
  if (!($112)) {
   break;
  }
 }
 if ((label|0) == 10) {
  $79 = $0;
  $80 = $np;
  $81 = HEAP32[$80>>2]|0;
  _png_free($79,$81);
  $82 = $np;
  HEAP32[$82>>2] = 0;
 }
 $113 = $3;
 $114 = ($113|0)>(0);
 if (!($114)) {
  STACKTOP = sp;return;
 }
 $115 = $0;
 _png_chunk_report($115,18267,1);
 STACKTOP = sp;return;
}
function _png_set_unknown_chunks($png_ptr,$info_ptr,$unknowns,$num_unknowns) {
 $png_ptr = $png_ptr|0;
 $info_ptr = $info_ptr|0;
 $unknowns = $unknowns|0;
 $num_unknowns = $num_unknowns|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $np = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $info_ptr;
 $2 = $unknowns;
 $3 = $num_unknowns;
 $4 = $0;
 $5 = ($4|0)==(0|0);
 $6 = $1;
 $7 = ($6|0)==(0|0);
 $or$cond = $5 | $7;
 $8 = $3;
 $9 = ($8|0)<=(0);
 $or$cond3 = $or$cond | $9;
 $10 = $2;
 $11 = ($10|0)==(0|0);
 $or$cond5 = $or$cond3 | $11;
 if ($or$cond5) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = $1;
 $14 = ((($13)) + 236|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = ((($16)) + 240|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (_png_realloc_array($12,$15,$18,$19,20)|0);
 $np = $20;
 $21 = $np;
 $22 = ($21|0)==(0|0);
 $23 = $0;
 if ($22) {
  _png_chunk_report($23,18286,1);
  STACKTOP = sp;return;
 }
 $24 = $1;
 $25 = ((($24)) + 236|0);
 $26 = HEAP32[$25>>2]|0;
 _png_free($23,$26);
 $27 = $np;
 $28 = $1;
 $29 = ((($28)) + 236|0);
 HEAP32[$29>>2] = $27;
 $30 = $1;
 $31 = ((($30)) + 232|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 | 512;
 HEAP32[$31>>2] = $33;
 $34 = $1;
 $35 = ((($34)) + 240|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $np;
 $38 = (($37) + (($36*20)|0)|0);
 $np = $38;
 while(1) {
  $39 = $3;
  $40 = ($39|0)>(0);
  if (!($40)) {
   break;
  }
  $41 = $np;
  $42 = $2;
  ;HEAP32[$41>>2]=HEAP32[$42>>2]|0;HEAP8[$41+4>>0]=HEAP8[$42+4>>0]|0;
  $43 = $np;
  $44 = ((($43)) + 4|0);
  HEAP8[$44>>0] = 0;
  $45 = $0;
  $46 = $2;
  $47 = ((($46)) + 16|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (_check_location($45,$49)|0);
  $51 = $np;
  $52 = ((($51)) + 16|0);
  HEAP8[$52>>0] = $50;
  $53 = $2;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0);
  do {
   if ($56) {
    $57 = $np;
    $58 = ((($57)) + 8|0);
    HEAP32[$58>>2] = 0;
    $59 = $np;
    $60 = ((($59)) + 12|0);
    HEAP32[$60>>2] = 0;
    label = 11;
   } else {
    $61 = $0;
    $62 = $2;
    $63 = ((($62)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (_png_malloc_base($61,$64)|0);
    $66 = $np;
    $67 = ((($66)) + 8|0);
    HEAP32[$67>>2] = $65;
    $68 = $np;
    $69 = ((($68)) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $72 = $0;
     _png_chunk_report($72,18405,1);
     break;
    } else {
     $73 = $np;
     $74 = ((($73)) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $2;
     $77 = ((($76)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $2;
     $80 = ((($79)) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     _memcpy(($75|0),($78|0),($81|0))|0;
     $82 = $2;
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $np;
     $86 = ((($85)) + 12|0);
     HEAP32[$86>>2] = $84;
     label = 11;
     break;
    }
   }
  } while(0);
  if ((label|0) == 11) {
   label = 0;
   $87 = $np;
   $88 = ((($87)) + 20|0);
   $np = $88;
   $89 = $1;
   $90 = ((($89)) + 240|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($91) + 1)|0;
   HEAP32[$90>>2] = $92;
  }
  $93 = $3;
  $94 = (($93) + -1)|0;
  $3 = $94;
  $95 = $2;
  $96 = ((($95)) + 20|0);
  $2 = $96;
 }
 STACKTOP = sp;return;
}
function _check_location($png_ptr,$location) {
 $png_ptr = $png_ptr|0;
 $location = $location|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $location;
 $2 = $1;
 $3 = $2 & 11;
 $1 = $3;
 $4 = $1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $0;
  $7 = ((($6)) + 208|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 32768;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $0;
   _png_app_warning($11,18310);
   $12 = $0;
   $13 = ((($12)) + 208|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 11;
   $16 = $15&255;
   $17 = $16&255;
   $1 = $17;
  }
 }
 $18 = $1;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $0;
  _png_error($20,18362);
  // unreachable;
 }
 while(1) {
  $21 = $1;
  $22 = $1;
  $23 = $1;
  $24 = (0 - ($23))|0;
  $25 = $22 & $24;
  $26 = ($21|0)!=($25|0);
  $27 = $1;
  if (!($26)) {
   break;
  }
  $28 = $1;
  $29 = (0 - ($28))|0;
  $30 = $27 & $29;
  $31 = $30 ^ -1;
  $32 = $1;
  $33 = $32 & $31;
  $1 = $33;
 }
 $34 = $27&255;
 STACKTOP = sp;return ($34|0);
}
function _png_set_packing($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = ((($3)) + 428|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)<(8);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = ((($8)) + 216|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 | 4;
 HEAP32[$9>>2] = $11;
 $12 = $0;
 $13 = ((($12)) + 429|0);
 HEAP8[$13>>0] = 8;
 STACKTOP = sp;return;
}
function _png_set_interlace_handling($png_ptr) {
 $png_ptr = $png_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $png_ptr;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 424|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $1;
   $10 = ((($9)) + 216|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 | 2;
   HEAP32[$10>>2] = $12;
   $0 = 7;
   $13 = $0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $0 = 1;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _png_set_filler($png_ptr,$filler,$filler_loc) {
 $png_ptr = $png_ptr|0;
 $filler = $filler|0;
 $filler_loc = $filler_loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $filler;
 $2 = $filler_loc;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = ((($5)) + 208|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 32768;
 $9 = ($8|0)!=(0);
 L4: do {
  if ($9) {
   $10 = $1;
   $11 = $10&65535;
   $12 = $0;
   $13 = ((($12)) + 436|0);
   HEAP16[$13>>1] = $11;
  } else {
   $14 = $0;
   $15 = ((($14)) + 427|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   switch ($17|0) {
   case 2:  {
    $18 = $0;
    $19 = ((($18)) + 432|0);
    HEAP8[$19>>0] = 4;
    break L4;
    break;
   }
   case 0:  {
    $20 = $0;
    $21 = ((($20)) + 428|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)>=(8);
    $25 = $0;
    if ($24) {
     $26 = ((($25)) + 432|0);
     HEAP8[$26>>0] = 2;
     break L4;
    }
    _png_app_error($25,18434);
    STACKTOP = sp;return;
    break;
   }
   default: {
    $27 = $0;
    _png_app_error($27,18490);
    STACKTOP = sp;return;
   }
   }
  }
 } while(0);
 $28 = $0;
 $29 = ((($28)) + 216|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 | 32768;
 HEAP32[$29>>2] = $31;
 $32 = $2;
 $33 = ($32|0)==(1);
 $34 = $0;
 $35 = ((($34)) + 212|0);
 $36 = HEAP32[$35>>2]|0;
 if ($33) {
  $37 = $36 | 128;
  HEAP32[$35>>2] = $37;
  STACKTOP = sp;return;
 } else {
  $38 = $36 & -129;
  HEAP32[$35>>2] = $38;
  STACKTOP = sp;return;
 }
}
function _png_set_add_alpha($png_ptr,$filler,$filler_loc) {
 $png_ptr = $png_ptr|0;
 $filler = $filler|0;
 $filler_loc = $filler_loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $filler;
 $2 = $filler_loc;
 $3 = $0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _png_set_filler($5,$6,$7);
 $8 = $0;
 $9 = ((($8)) + 216|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 32768;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $0;
 $14 = ((($13)) + 216|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 | 16777216;
 HEAP32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function _png_do_invert($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i = 0, $i2 = 0, $i5 = 0, $istop = 0, $istop3 = 0, $istop6 = 0, $rp = 0, $rp1 = 0, $rp4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $1;
  $rp = $7;
  $8 = $0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $istop = $10;
  $i = 0;
  while(1) {
   $11 = $i;
   $12 = $istop;
   $13 = ($11>>>0)<($12>>>0);
   if (!($13)) {
    break;
   }
   $14 = $rp;
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 ^ -1;
   $18 = $17&255;
   $19 = $rp;
   HEAP8[$19>>0] = $18;
   $20 = $rp;
   $21 = ((($20)) + 1|0);
   $rp = $21;
   $22 = $i;
   $23 = (($22) + 1)|0;
   $i = $23;
  }
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 8|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = ($27|0)==(4);
 if ($28) {
  $29 = $0;
  $30 = ((($29)) + 9|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = ($32|0)==(8);
  if ($33) {
   $34 = $1;
   $rp1 = $34;
   $35 = $0;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $istop3 = $37;
   $i2 = 0;
   while(1) {
    $38 = $i2;
    $39 = $istop3;
    $40 = ($38>>>0)<($39>>>0);
    if (!($40)) {
     break;
    }
    $41 = $rp1;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $43 ^ -1;
    $45 = $44&255;
    $46 = $rp1;
    HEAP8[$46>>0] = $45;
    $47 = $rp1;
    $48 = ((($47)) + 2|0);
    $rp1 = $48;
    $49 = $i2;
    $50 = (($49) + 2)|0;
    $i2 = $50;
   }
   STACKTOP = sp;return;
  }
 }
 $51 = $0;
 $52 = ((($51)) + 8|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ($54|0)==(4);
 if (!($55)) {
  STACKTOP = sp;return;
 }
 $56 = $0;
 $57 = ((($56)) + 9|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = ($59|0)==(16);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $1;
 $rp4 = $61;
 $62 = $0;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $istop6 = $64;
 $i5 = 0;
 while(1) {
  $65 = $i5;
  $66 = $istop6;
  $67 = ($65>>>0)<($66>>>0);
  if (!($67)) {
   break;
  }
  $68 = $rp4;
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 ^ -1;
  $72 = $71&255;
  $73 = $rp4;
  HEAP8[$73>>0] = $72;
  $74 = $rp4;
  $75 = ((($74)) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $77 ^ -1;
  $79 = $78&255;
  $80 = $rp4;
  $81 = ((($80)) + 1|0);
  HEAP8[$81>>0] = $79;
  $82 = $rp4;
  $83 = ((($82)) + 4|0);
  $rp4 = $83;
  $84 = $i5;
  $85 = (($84) + 4)|0;
  $i5 = $85;
 }
 STACKTOP = sp;return;
}
function _png_do_swap($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $istop = 0, $rp = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)==(16);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $rp = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 $11 = ((($10)) + 10|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = Math_imul($9, $13)|0;
 $istop = $14;
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = $istop;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $rp;
  $19 = HEAP8[$18>>0]|0;
  $t = $19;
  $20 = $rp;
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $rp;
  HEAP8[$23>>0] = $22;
  $24 = $t;
  $25 = $rp;
  $26 = ((($25)) + 1|0);
  HEAP8[$26>>0] = $24;
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
  $29 = $rp;
  $30 = ((($29)) + 2|0);
  $rp = $30;
 }
 STACKTOP = sp;return;
}
function _png_do_packswap($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $end = 0, $rp = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)<(8);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10)|0);
 $end = $11;
 $12 = $0;
 $13 = ((($12)) + 9|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(1);
 do {
  if ($16) {
   $table = 18531;
  } else {
   $17 = $0;
   $18 = ((($17)) + 9|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)==(2);
   if ($21) {
    $table = 18787;
    break;
   }
   $22 = $0;
   $23 = ((($22)) + 9|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = ($25|0)==(4);
   if ($26) {
    $table = 19043;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $27 = $1;
 $rp = $27;
 while(1) {
  $28 = $rp;
  $29 = $end;
  $30 = ($28>>>0)<($29>>>0);
  if (!($30)) {
   break;
  }
  $31 = $rp;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $table;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $rp;
  HEAP8[$37>>0] = $36;
  $38 = $rp;
  $39 = ((($38)) + 1|0);
  $rp = $39;
 }
 STACKTOP = sp;return;
}
function _png_do_strip_channel($row_info,$row,$at_start) {
 $row_info = $row_info|0;
 $row = $row|0;
 $at_start = $at_start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dp = 0, $ep = 0, $sp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $at_start;
 $3 = $1;
 $sp = $3;
 $4 = $1;
 $dp = $4;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) + ($8)|0);
 $ep = $9;
 $10 = $0;
 $11 = ((($10)) + 10|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(2);
 $15 = $0;
 if ($14) {
  $16 = ((($15)) + 9|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(8);
  if ($19) {
   $20 = $2;
   $21 = ($20|0)!=(0);
   $22 = $sp;
   if ($21) {
    $23 = ((($22)) + 1|0);
    $sp = $23;
   } else {
    $24 = ((($22)) + 2|0);
    $sp = $24;
    $25 = $dp;
    $26 = ((($25)) + 1|0);
    $dp = $26;
   }
   while(1) {
    $27 = $sp;
    $28 = $ep;
    $29 = ($27>>>0)<($28>>>0);
    if (!($29)) {
     break;
    }
    $30 = $sp;
    $31 = HEAP8[$30>>0]|0;
    $32 = $dp;
    $33 = ((($32)) + 1|0);
    $dp = $33;
    HEAP8[$32>>0] = $31;
    $34 = $sp;
    $35 = ((($34)) + 2|0);
    $sp = $35;
   }
   $36 = $0;
   $37 = ((($36)) + 11|0);
   HEAP8[$37>>0] = 8;
  } else {
   $38 = $0;
   $39 = ((($38)) + 9|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = ($41|0)==(16);
   if (!($42)) {
    STACKTOP = sp;return;
   }
   $43 = $2;
   $44 = ($43|0)!=(0);
   $45 = $sp;
   if ($44) {
    $46 = ((($45)) + 2|0);
    $sp = $46;
   } else {
    $47 = ((($45)) + 4|0);
    $sp = $47;
    $48 = $dp;
    $49 = ((($48)) + 2|0);
    $dp = $49;
   }
   while(1) {
    $50 = $sp;
    $51 = $ep;
    $52 = ($50>>>0)<($51>>>0);
    if (!($52)) {
     break;
    }
    $53 = $sp;
    $54 = ((($53)) + 1|0);
    $sp = $54;
    $55 = HEAP8[$53>>0]|0;
    $56 = $dp;
    $57 = ((($56)) + 1|0);
    $dp = $57;
    HEAP8[$56>>0] = $55;
    $58 = $sp;
    $59 = HEAP8[$58>>0]|0;
    $60 = $dp;
    $61 = ((($60)) + 1|0);
    $dp = $61;
    HEAP8[$60>>0] = $59;
    $62 = $sp;
    $63 = ((($62)) + 3|0);
    $sp = $63;
   }
   $64 = $0;
   $65 = ((($64)) + 11|0);
   HEAP8[$65>>0] = 16;
  }
  $66 = $0;
  $67 = ((($66)) + 10|0);
  HEAP8[$67>>0] = 1;
  $68 = $0;
  $69 = ((($68)) + 8|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = ($71|0)==(4);
  if ($72) {
   $73 = $0;
   $74 = ((($73)) + 8|0);
   HEAP8[$74>>0] = 0;
  }
 } else {
  $75 = ((($15)) + 10|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = ($77|0)==(4);
  if (!($78)) {
   STACKTOP = sp;return;
  }
  $79 = $0;
  $80 = ((($79)) + 9|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = ($82|0)==(8);
  if ($83) {
   $84 = $2;
   $85 = ($84|0)!=(0);
   $86 = $sp;
   if ($85) {
    $87 = ((($86)) + 1|0);
    $sp = $87;
   } else {
    $88 = ((($86)) + 4|0);
    $sp = $88;
    $89 = $dp;
    $90 = ((($89)) + 3|0);
    $dp = $90;
   }
   while(1) {
    $91 = $sp;
    $92 = $ep;
    $93 = ($91>>>0)<($92>>>0);
    if (!($93)) {
     break;
    }
    $94 = $sp;
    $95 = ((($94)) + 1|0);
    $sp = $95;
    $96 = HEAP8[$94>>0]|0;
    $97 = $dp;
    $98 = ((($97)) + 1|0);
    $dp = $98;
    HEAP8[$97>>0] = $96;
    $99 = $sp;
    $100 = ((($99)) + 1|0);
    $sp = $100;
    $101 = HEAP8[$99>>0]|0;
    $102 = $dp;
    $103 = ((($102)) + 1|0);
    $dp = $103;
    HEAP8[$102>>0] = $101;
    $104 = $sp;
    $105 = HEAP8[$104>>0]|0;
    $106 = $dp;
    $107 = ((($106)) + 1|0);
    $dp = $107;
    HEAP8[$106>>0] = $105;
    $108 = $sp;
    $109 = ((($108)) + 2|0);
    $sp = $109;
   }
   $110 = $0;
   $111 = ((($110)) + 11|0);
   HEAP8[$111>>0] = 24;
  } else {
   $112 = $0;
   $113 = ((($112)) + 9|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = ($115|0)==(16);
   if (!($116)) {
    STACKTOP = sp;return;
   }
   $117 = $2;
   $118 = ($117|0)!=(0);
   $119 = $sp;
   if ($118) {
    $120 = ((($119)) + 2|0);
    $sp = $120;
   } else {
    $121 = ((($119)) + 8|0);
    $sp = $121;
    $122 = $dp;
    $123 = ((($122)) + 6|0);
    $dp = $123;
   }
   while(1) {
    $124 = $sp;
    $125 = $ep;
    $126 = ($124>>>0)<($125>>>0);
    if (!($126)) {
     break;
    }
    $127 = $sp;
    $128 = ((($127)) + 1|0);
    $sp = $128;
    $129 = HEAP8[$127>>0]|0;
    $130 = $dp;
    $131 = ((($130)) + 1|0);
    $dp = $131;
    HEAP8[$130>>0] = $129;
    $132 = $sp;
    $133 = ((($132)) + 1|0);
    $sp = $133;
    $134 = HEAP8[$132>>0]|0;
    $135 = $dp;
    $136 = ((($135)) + 1|0);
    $dp = $136;
    HEAP8[$135>>0] = $134;
    $137 = $sp;
    $138 = ((($137)) + 1|0);
    $sp = $138;
    $139 = HEAP8[$137>>0]|0;
    $140 = $dp;
    $141 = ((($140)) + 1|0);
    $dp = $141;
    HEAP8[$140>>0] = $139;
    $142 = $sp;
    $143 = ((($142)) + 1|0);
    $sp = $143;
    $144 = HEAP8[$142>>0]|0;
    $145 = $dp;
    $146 = ((($145)) + 1|0);
    $dp = $146;
    HEAP8[$145>>0] = $144;
    $147 = $sp;
    $148 = ((($147)) + 1|0);
    $sp = $148;
    $149 = HEAP8[$147>>0]|0;
    $150 = $dp;
    $151 = ((($150)) + 1|0);
    $dp = $151;
    HEAP8[$150>>0] = $149;
    $152 = $sp;
    $153 = HEAP8[$152>>0]|0;
    $154 = $dp;
    $155 = ((($154)) + 1|0);
    $dp = $155;
    HEAP8[$154>>0] = $153;
    $156 = $sp;
    $157 = ((($156)) + 3|0);
    $sp = $157;
   }
   $158 = $0;
   $159 = ((($158)) + 11|0);
   HEAP8[$159>>0] = 48;
  }
  $160 = $0;
  $161 = ((($160)) + 10|0);
  HEAP8[$161>>0] = 3;
  $162 = $0;
  $163 = ((($162)) + 8|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = ($165|0)==(6);
  if ($166) {
   $167 = $0;
   $168 = ((($167)) + 8|0);
   HEAP8[$168>>0] = 2;
  }
 }
 $169 = $dp;
 $170 = $1;
 $171 = $169;
 $172 = $170;
 $173 = (($171) - ($172))|0;
 $174 = $0;
 $175 = ((($174)) + 4|0);
 HEAP32[$175>>2] = $173;
 STACKTOP = sp;return;
}
function _png_do_bgr($row_info,$row) {
 $row_info = $row_info|0;
 $row = $row|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i2 = 0, $i5 = 0, $i8 = 0, $row_width = 0, $rp = 0, $rp1 = 0, $rp4 = 0, $rp7 = 0, $save = 0, $save3 = 0;
 var $save6 = 0, $save9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $row_info;
 $1 = $row;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 2;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $row_width = $9;
 $10 = $0;
 $11 = ((($10)) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($13|0)==(8);
 $15 = $0;
 if ($14) {
  $16 = ((($15)) + 8|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($18|0)==(2);
  if ($19) {
   $i = 0;
   $20 = $1;
   $rp = $20;
   while(1) {
    $21 = $i;
    $22 = $row_width;
    $23 = ($21>>>0)<($22>>>0);
    if (!($23)) {
     break;
    }
    $24 = $rp;
    $25 = HEAP8[$24>>0]|0;
    $save = $25;
    $26 = $rp;
    $27 = ((($26)) + 2|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $rp;
    HEAP8[$29>>0] = $28;
    $30 = $save;
    $31 = $rp;
    $32 = ((($31)) + 2|0);
    HEAP8[$32>>0] = $30;
    $33 = $i;
    $34 = (($33) + 1)|0;
    $i = $34;
    $35 = $rp;
    $36 = ((($35)) + 3|0);
    $rp = $36;
   }
   STACKTOP = sp;return;
  }
  $37 = $0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = ($40|0)==(6);
  if (!($41)) {
   STACKTOP = sp;return;
  }
  $i2 = 0;
  $42 = $1;
  $rp1 = $42;
  while(1) {
   $43 = $i2;
   $44 = $row_width;
   $45 = ($43>>>0)<($44>>>0);
   if (!($45)) {
    break;
   }
   $46 = $rp1;
   $47 = HEAP8[$46>>0]|0;
   $save3 = $47;
   $48 = $rp1;
   $49 = ((($48)) + 2|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $rp1;
   HEAP8[$51>>0] = $50;
   $52 = $save3;
   $53 = $rp1;
   $54 = ((($53)) + 2|0);
   HEAP8[$54>>0] = $52;
   $55 = $i2;
   $56 = (($55) + 1)|0;
   $i2 = $56;
   $57 = $rp1;
   $58 = ((($57)) + 4|0);
   $rp1 = $58;
  }
  STACKTOP = sp;return;
 }
 $59 = ((($15)) + 9|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ($61|0)==(16);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = $0;
 $64 = ((($63)) + 8|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = ($66|0)==(2);
 if ($67) {
  $i5 = 0;
  $68 = $1;
  $rp4 = $68;
  while(1) {
   $69 = $i5;
   $70 = $row_width;
   $71 = ($69>>>0)<($70>>>0);
   if (!($71)) {
    break;
   }
   $72 = $rp4;
   $73 = HEAP8[$72>>0]|0;
   $save6 = $73;
   $74 = $rp4;
   $75 = ((($74)) + 4|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $rp4;
   HEAP8[$77>>0] = $76;
   $78 = $save6;
   $79 = $rp4;
   $80 = ((($79)) + 4|0);
   HEAP8[$80>>0] = $78;
   $81 = $rp4;
   $82 = ((($81)) + 1|0);
   $83 = HEAP8[$82>>0]|0;
   $save6 = $83;
   $84 = $rp4;
   $85 = ((($84)) + 5|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $rp4;
   $88 = ((($87)) + 1|0);
   HEAP8[$88>>0] = $86;
   $89 = $save6;
   $90 = $rp4;
   $91 = ((($90)) + 5|0);
   HEAP8[$91>>0] = $89;
   $92 = $i5;
   $93 = (($92) + 1)|0;
   $i5 = $93;
   $94 = $rp4;
   $95 = ((($94)) + 6|0);
   $rp4 = $95;
  }
  STACKTOP = sp;return;
 }
 $96 = $0;
 $97 = ((($96)) + 8|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $98&255;
 $100 = ($99|0)==(6);
 if (!($100)) {
  STACKTOP = sp;return;
 }
 $i8 = 0;
 $101 = $1;
 $rp7 = $101;
 while(1) {
  $102 = $i8;
  $103 = $row_width;
  $104 = ($102>>>0)<($103>>>0);
  if (!($104)) {
   break;
  }
  $105 = $rp7;
  $106 = HEAP8[$105>>0]|0;
  $save9 = $106;
  $107 = $rp7;
  $108 = ((($107)) + 4|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $rp7;
  HEAP8[$110>>0] = $109;
  $111 = $save9;
  $112 = $rp7;
  $113 = ((($112)) + 4|0);
  HEAP8[$113>>0] = $111;
  $114 = $rp7;
  $115 = ((($114)) + 1|0);
  $116 = HEAP8[$115>>0]|0;
  $save9 = $116;
  $117 = $rp7;
  $118 = ((($117)) + 5|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $rp7;
  $121 = ((($120)) + 1|0);
  HEAP8[$121>>0] = $119;
  $122 = $save9;
  $123 = $rp7;
  $124 = ((($123)) + 5|0);
  HEAP8[$124>>0] = $122;
  $125 = $i8;
  $126 = (($125) + 1)|0;
  $i8 = $126;
  $127 = $rp7;
  $128 = ((($127)) + 8|0);
  $rp7 = $128;
 }
 STACKTOP = sp;return;
}
function _png_do_check_palette_indexes($png_ptr,$row_info) {
 $png_ptr = $png_ptr|0;
 $row_info = $row_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $i1 = 0, $padding = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $png_ptr;
 $1 = $row_info;
 $2 = $0;
 $3 = ((($2)) + 412|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $1;
 $7 = ((($6)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = 1 << $9;
 $11 = ($5|0)<($10|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = ((($12)) + 412|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ($15|0)>(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $1;
 $18 = ((($17)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (0 - ($20))|0;
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($21, $23)|0;
 $25 = $24 & 7;
 $padding = $25;
 $26 = $0;
 $27 = ((($26)) + 384|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) + ($31)|0);
 $rp = $32;
 $33 = $1;
 $34 = ((($33)) + 9|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 switch ($36|0) {
 case 1:  {
  while(1) {
   $37 = $rp;
   $38 = $0;
   $39 = ((($38)) + 384|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($37>>>0)>($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $rp;
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $padding;
   $46 = $44 >> $45;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $0;
    $49 = ((($48)) + 416|0);
    HEAP32[$49>>2] = 1;
   }
   $padding = 0;
   $50 = $rp;
   $51 = ((($50)) + -1|0);
   $rp = $51;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  while(1) {
   $52 = $rp;
   $53 = $0;
   $54 = ((($53)) + 384|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($52>>>0)>($55>>>0);
   if (!($56)) {
    break;
   }
   $57 = $rp;
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $padding;
   $61 = $59 >> $60;
   $62 = $61 & 3;
   $i = $62;
   $63 = $i;
   $64 = $0;
   $65 = ((($64)) + 416|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($63|0)>($66|0);
   if ($67) {
    $68 = $i;
    $69 = $0;
    $70 = ((($69)) + 416|0);
    HEAP32[$70>>2] = $68;
   }
   $71 = $rp;
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = $padding;
   $75 = $73 >> $74;
   $76 = $75 >> 2;
   $77 = $76 & 3;
   $i = $77;
   $78 = $i;
   $79 = $0;
   $80 = ((($79)) + 416|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($78|0)>($81|0);
   if ($82) {
    $83 = $i;
    $84 = $0;
    $85 = ((($84)) + 416|0);
    HEAP32[$85>>2] = $83;
   }
   $86 = $rp;
   $87 = HEAP8[$86>>0]|0;
   $88 = $87&255;
   $89 = $padding;
   $90 = $88 >> $89;
   $91 = $90 >> 4;
   $92 = $91 & 3;
   $i = $92;
   $93 = $i;
   $94 = $0;
   $95 = ((($94)) + 416|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($93|0)>($96|0);
   if ($97) {
    $98 = $i;
    $99 = $0;
    $100 = ((($99)) + 416|0);
    HEAP32[$100>>2] = $98;
   }
   $101 = $rp;
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $padding;
   $105 = $103 >> $104;
   $106 = $105 >> 6;
   $107 = $106 & 3;
   $i = $107;
   $108 = $i;
   $109 = $0;
   $110 = ((($109)) + 416|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($108|0)>($111|0);
   if ($112) {
    $113 = $i;
    $114 = $0;
    $115 = ((($114)) + 416|0);
    HEAP32[$115>>2] = $113;
   }
   $padding = 0;
   $116 = $rp;
   $117 = ((($116)) + -1|0);
   $rp = $117;
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  while(1) {
   $118 = $rp;
   $119 = $0;
   $120 = ((($119)) + 384|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ($118>>>0)>($121>>>0);
   if (!($122)) {
    break;
   }
   $123 = $rp;
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $padding;
   $127 = $125 >> $126;
   $128 = $127 & 15;
   $i1 = $128;
   $129 = $i1;
   $130 = $0;
   $131 = ((($130)) + 416|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($129|0)>($132|0);
   if ($133) {
    $134 = $i1;
    $135 = $0;
    $136 = ((($135)) + 416|0);
    HEAP32[$136>>2] = $134;
   }
   $137 = $rp;
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = $padding;
   $141 = $139 >> $140;
   $142 = $141 >> 4;
   $143 = $142 & 15;
   $i1 = $143;
   $144 = $i1;
   $145 = $0;
   $146 = ((($145)) + 416|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($144|0)>($147|0);
   if ($148) {
    $149 = $i1;
    $150 = $0;
    $151 = ((($150)) + 416|0);
    HEAP32[$151>>2] = $149;
   }
   $padding = 0;
   $152 = $rp;
   $153 = ((($152)) + -1|0);
   $rp = $153;
  }
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  while(1) {
   $154 = $rp;
   $155 = $0;
   $156 = ((($155)) + 384|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($154>>>0)>($157>>>0);
   if (!($158)) {
    break;
   }
   $159 = $rp;
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = $0;
   $163 = ((($162)) + 416|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($161|0)>($164|0);
   if ($165) {
    $166 = $rp;
    $167 = HEAP8[$166>>0]|0;
    $168 = $167&255;
    $169 = $0;
    $170 = ((($169)) + 416|0);
    HEAP32[$170>>2] = $168;
   }
   $171 = $rp;
   $172 = ((($171)) + -1|0);
   $rp = $172;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $n = 0, $sum2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $adler;
 $2 = $buf;
 $3 = $len;
 $4 = $1;
 $5 = $4 >>> 16;
 $6 = $5 & 65535;
 $sum2 = $6;
 $7 = $1;
 $8 = $7 & 65535;
 $1 = $8;
 $9 = $3;
 $10 = ($9|0)==(1);
 $11 = $2;
 if ($10) {
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $1;
  $15 = (($14) + ($13))|0;
  $1 = $15;
  $16 = $1;
  $17 = ($16>>>0)>=(65521);
  if ($17) {
   $18 = $1;
   $19 = (($18) - 65521)|0;
   $1 = $19;
  }
  $20 = $1;
  $21 = $sum2;
  $22 = (($21) + ($20))|0;
  $sum2 = $22;
  $23 = $sum2;
  $24 = ($23>>>0)>=(65521);
  if ($24) {
   $25 = $sum2;
   $26 = (($25) - 65521)|0;
   $sum2 = $26;
  }
  $27 = $1;
  $28 = $sum2;
  $29 = $28 << 16;
  $30 = $27 | $29;
  $0 = $30;
  $382 = $0;
  STACKTOP = sp;return ($382|0);
 }
 $31 = ($11|0)==(0|0);
 if ($31) {
  $0 = 1;
  $382 = $0;
  STACKTOP = sp;return ($382|0);
 }
 $32 = $3;
 $33 = ($32>>>0)<(16);
 if ($33) {
  while(1) {
   $34 = $3;
   $35 = (($34) + -1)|0;
   $3 = $35;
   $36 = ($34|0)!=(0);
   if (!($36)) {
    break;
   }
   $37 = $2;
   $38 = ((($37)) + 1|0);
   $2 = $38;
   $39 = HEAP8[$37>>0]|0;
   $40 = $39&255;
   $41 = $1;
   $42 = (($41) + ($40))|0;
   $1 = $42;
   $43 = $1;
   $44 = $sum2;
   $45 = (($44) + ($43))|0;
   $sum2 = $45;
  }
  $46 = $1;
  $47 = ($46>>>0)>=(65521);
  if ($47) {
   $48 = $1;
   $49 = (($48) - 65521)|0;
   $1 = $49;
  }
  $50 = $sum2;
  $51 = (($50>>>0) % 65521)&-1;
  $sum2 = $51;
  $52 = $1;
  $53 = $sum2;
  $54 = $53 << 16;
  $55 = $52 | $54;
  $0 = $55;
  $382 = $0;
  STACKTOP = sp;return ($382|0);
 }
 while(1) {
  $56 = $3;
  $57 = ($56>>>0)>=(5552);
  $58 = $3;
  if (!($57)) {
   break;
  }
  $59 = (($58) - 5552)|0;
  $3 = $59;
  $n = 347;
  while(1) {
   $60 = $2;
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $1;
   $64 = (($63) + ($62))|0;
   $1 = $64;
   $65 = $1;
   $66 = $sum2;
   $67 = (($66) + ($65))|0;
   $sum2 = $67;
   $68 = $2;
   $69 = ((($68)) + 1|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $1;
   $73 = (($72) + ($71))|0;
   $1 = $73;
   $74 = $1;
   $75 = $sum2;
   $76 = (($75) + ($74))|0;
   $sum2 = $76;
   $77 = $2;
   $78 = ((($77)) + 2|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $1;
   $82 = (($81) + ($80))|0;
   $1 = $82;
   $83 = $1;
   $84 = $sum2;
   $85 = (($84) + ($83))|0;
   $sum2 = $85;
   $86 = $2;
   $87 = ((($86)) + 3|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $1;
   $91 = (($90) + ($89))|0;
   $1 = $91;
   $92 = $1;
   $93 = $sum2;
   $94 = (($93) + ($92))|0;
   $sum2 = $94;
   $95 = $2;
   $96 = ((($95)) + 4|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = $1;
   $100 = (($99) + ($98))|0;
   $1 = $100;
   $101 = $1;
   $102 = $sum2;
   $103 = (($102) + ($101))|0;
   $sum2 = $103;
   $104 = $2;
   $105 = ((($104)) + 5|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = $1;
   $109 = (($108) + ($107))|0;
   $1 = $109;
   $110 = $1;
   $111 = $sum2;
   $112 = (($111) + ($110))|0;
   $sum2 = $112;
   $113 = $2;
   $114 = ((($113)) + 6|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = $115&255;
   $117 = $1;
   $118 = (($117) + ($116))|0;
   $1 = $118;
   $119 = $1;
   $120 = $sum2;
   $121 = (($120) + ($119))|0;
   $sum2 = $121;
   $122 = $2;
   $123 = ((($122)) + 7|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = $1;
   $127 = (($126) + ($125))|0;
   $1 = $127;
   $128 = $1;
   $129 = $sum2;
   $130 = (($129) + ($128))|0;
   $sum2 = $130;
   $131 = $2;
   $132 = ((($131)) + 8|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = $1;
   $136 = (($135) + ($134))|0;
   $1 = $136;
   $137 = $1;
   $138 = $sum2;
   $139 = (($138) + ($137))|0;
   $sum2 = $139;
   $140 = $2;
   $141 = ((($140)) + 9|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142&255;
   $144 = $1;
   $145 = (($144) + ($143))|0;
   $1 = $145;
   $146 = $1;
   $147 = $sum2;
   $148 = (($147) + ($146))|0;
   $sum2 = $148;
   $149 = $2;
   $150 = ((($149)) + 10|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = $1;
   $154 = (($153) + ($152))|0;
   $1 = $154;
   $155 = $1;
   $156 = $sum2;
   $157 = (($156) + ($155))|0;
   $sum2 = $157;
   $158 = $2;
   $159 = ((($158)) + 11|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = $1;
   $163 = (($162) + ($161))|0;
   $1 = $163;
   $164 = $1;
   $165 = $sum2;
   $166 = (($165) + ($164))|0;
   $sum2 = $166;
   $167 = $2;
   $168 = ((($167)) + 12|0);
   $169 = HEAP8[$168>>0]|0;
   $170 = $169&255;
   $171 = $1;
   $172 = (($171) + ($170))|0;
   $1 = $172;
   $173 = $1;
   $174 = $sum2;
   $175 = (($174) + ($173))|0;
   $sum2 = $175;
   $176 = $2;
   $177 = ((($176)) + 13|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = $1;
   $181 = (($180) + ($179))|0;
   $1 = $181;
   $182 = $1;
   $183 = $sum2;
   $184 = (($183) + ($182))|0;
   $sum2 = $184;
   $185 = $2;
   $186 = ((($185)) + 14|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = $1;
   $190 = (($189) + ($188))|0;
   $1 = $190;
   $191 = $1;
   $192 = $sum2;
   $193 = (($192) + ($191))|0;
   $sum2 = $193;
   $194 = $2;
   $195 = ((($194)) + 15|0);
   $196 = HEAP8[$195>>0]|0;
   $197 = $196&255;
   $198 = $1;
   $199 = (($198) + ($197))|0;
   $1 = $199;
   $200 = $1;
   $201 = $sum2;
   $202 = (($201) + ($200))|0;
   $sum2 = $202;
   $203 = $2;
   $204 = ((($203)) + 16|0);
   $2 = $204;
   $205 = $n;
   $206 = (($205) + -1)|0;
   $n = $206;
   $207 = ($206|0)!=(0);
   if (!($207)) {
    break;
   }
  }
  $208 = $1;
  $209 = (($208>>>0) % 65521)&-1;
  $1 = $209;
  $210 = $sum2;
  $211 = (($210>>>0) % 65521)&-1;
  $sum2 = $211;
 }
 $212 = ($58|0)!=(0);
 if ($212) {
  while(1) {
   $213 = $3;
   $214 = ($213>>>0)>=(16);
   if (!($214)) {
    break;
   }
   $215 = $3;
   $216 = (($215) - 16)|0;
   $3 = $216;
   $217 = $2;
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = $1;
   $221 = (($220) + ($219))|0;
   $1 = $221;
   $222 = $1;
   $223 = $sum2;
   $224 = (($223) + ($222))|0;
   $sum2 = $224;
   $225 = $2;
   $226 = ((($225)) + 1|0);
   $227 = HEAP8[$226>>0]|0;
   $228 = $227&255;
   $229 = $1;
   $230 = (($229) + ($228))|0;
   $1 = $230;
   $231 = $1;
   $232 = $sum2;
   $233 = (($232) + ($231))|0;
   $sum2 = $233;
   $234 = $2;
   $235 = ((($234)) + 2|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = $1;
   $239 = (($238) + ($237))|0;
   $1 = $239;
   $240 = $1;
   $241 = $sum2;
   $242 = (($241) + ($240))|0;
   $sum2 = $242;
   $243 = $2;
   $244 = ((($243)) + 3|0);
   $245 = HEAP8[$244>>0]|0;
   $246 = $245&255;
   $247 = $1;
   $248 = (($247) + ($246))|0;
   $1 = $248;
   $249 = $1;
   $250 = $sum2;
   $251 = (($250) + ($249))|0;
   $sum2 = $251;
   $252 = $2;
   $253 = ((($252)) + 4|0);
   $254 = HEAP8[$253>>0]|0;
   $255 = $254&255;
   $256 = $1;
   $257 = (($256) + ($255))|0;
   $1 = $257;
   $258 = $1;
   $259 = $sum2;
   $260 = (($259) + ($258))|0;
   $sum2 = $260;
   $261 = $2;
   $262 = ((($261)) + 5|0);
   $263 = HEAP8[$262>>0]|0;
   $264 = $263&255;
   $265 = $1;
   $266 = (($265) + ($264))|0;
   $1 = $266;
   $267 = $1;
   $268 = $sum2;
   $269 = (($268) + ($267))|0;
   $sum2 = $269;
   $270 = $2;
   $271 = ((($270)) + 6|0);
   $272 = HEAP8[$271>>0]|0;
   $273 = $272&255;
   $274 = $1;
   $275 = (($274) + ($273))|0;
   $1 = $275;
   $276 = $1;
   $277 = $sum2;
   $278 = (($277) + ($276))|0;
   $sum2 = $278;
   $279 = $2;
   $280 = ((($279)) + 7|0);
   $281 = HEAP8[$280>>0]|0;
   $282 = $281&255;
   $283 = $1;
   $284 = (($283) + ($282))|0;
   $1 = $284;
   $285 = $1;
   $286 = $sum2;
   $287 = (($286) + ($285))|0;
   $sum2 = $287;
   $288 = $2;
   $289 = ((($288)) + 8|0);
   $290 = HEAP8[$289>>0]|0;
   $291 = $290&255;
   $292 = $1;
   $293 = (($292) + ($291))|0;
   $1 = $293;
   $294 = $1;
   $295 = $sum2;
   $296 = (($295) + ($294))|0;
   $sum2 = $296;
   $297 = $2;
   $298 = ((($297)) + 9|0);
   $299 = HEAP8[$298>>0]|0;
   $300 = $299&255;
   $301 = $1;
   $302 = (($301) + ($300))|0;
   $1 = $302;
   $303 = $1;
   $304 = $sum2;
   $305 = (($304) + ($303))|0;
   $sum2 = $305;
   $306 = $2;
   $307 = ((($306)) + 10|0);
   $308 = HEAP8[$307>>0]|0;
   $309 = $308&255;
   $310 = $1;
   $311 = (($310) + ($309))|0;
   $1 = $311;
   $312 = $1;
   $313 = $sum2;
   $314 = (($313) + ($312))|0;
   $sum2 = $314;
   $315 = $2;
   $316 = ((($315)) + 11|0);
   $317 = HEAP8[$316>>0]|0;
   $318 = $317&255;
   $319 = $1;
   $320 = (($319) + ($318))|0;
   $1 = $320;
   $321 = $1;
   $322 = $sum2;
   $323 = (($322) + ($321))|0;
   $sum2 = $323;
   $324 = $2;
   $325 = ((($324)) + 12|0);
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = $1;
   $329 = (($328) + ($327))|0;
   $1 = $329;
   $330 = $1;
   $331 = $sum2;
   $332 = (($331) + ($330))|0;
   $sum2 = $332;
   $333 = $2;
   $334 = ((($333)) + 13|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $335&255;
   $337 = $1;
   $338 = (($337) + ($336))|0;
   $1 = $338;
   $339 = $1;
   $340 = $sum2;
   $341 = (($340) + ($339))|0;
   $sum2 = $341;
   $342 = $2;
   $343 = ((($342)) + 14|0);
   $344 = HEAP8[$343>>0]|0;
   $345 = $344&255;
   $346 = $1;
   $347 = (($346) + ($345))|0;
   $1 = $347;
   $348 = $1;
   $349 = $sum2;
   $350 = (($349) + ($348))|0;
   $sum2 = $350;
   $351 = $2;
   $352 = ((($351)) + 15|0);
   $353 = HEAP8[$352>>0]|0;
   $354 = $353&255;
   $355 = $1;
   $356 = (($355) + ($354))|0;
   $1 = $356;
   $357 = $1;
   $358 = $sum2;
   $359 = (($358) + ($357))|0;
   $sum2 = $359;
   $360 = $2;
   $361 = ((($360)) + 16|0);
   $2 = $361;
  }
  while(1) {
   $362 = $3;
   $363 = (($362) + -1)|0;
   $3 = $363;
   $364 = ($362|0)!=(0);
   if (!($364)) {
    break;
   }
   $365 = $2;
   $366 = ((($365)) + 1|0);
   $2 = $366;
   $367 = HEAP8[$365>>0]|0;
   $368 = $367&255;
   $369 = $1;
   $370 = (($369) + ($368))|0;
   $1 = $370;
   $371 = $1;
   $372 = $sum2;
   $373 = (($372) + ($371))|0;
   $sum2 = $373;
  }
  $374 = $1;
  $375 = (($374>>>0) % 65521)&-1;
  $1 = $375;
  $376 = $sum2;
  $377 = (($376>>>0) % 65521)&-1;
  $sum2 = $377;
 }
 $378 = $1;
 $379 = $sum2;
 $380 = $379 << 16;
 $381 = $378 | $380;
 $0 = $381;
 $382 = $0;
 STACKTOP = sp;return ($382|0);
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endian = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $endian = sp;
 $1 = $crc;
 $2 = $buf;
 $3 = $len;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $0 = 0;
  } else {
   HEAP32[$endian>>2] = 1;
   $6 = HEAP8[$endian>>0]|0;
   $7 = ($6<<24>>24)!=(0);
   $8 = $1;
   $9 = $2;
   $10 = $3;
   if ($7) {
    $11 = (_crc32_little($8,$9,$10)|0);
    $0 = $11;
    break;
   } else {
    $12 = (_crc32_big($8,$9,$10)|0);
    $0 = $12;
    break;
   }
  }
 } while(0);
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function _crc32_little($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc;
 $1 = $buf;
 $2 = $len;
 $3 = $0;
 $c = $3;
 $4 = $c;
 $5 = $4 ^ -1;
 $c = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $1;
  $9 = $8;
  $10 = $9 & 3;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   break;
  }
  $12 = $c;
  $13 = $1;
  $14 = ((($13)) + 1|0);
  $1 = $14;
  $15 = HEAP8[$13>>0]|0;
  $16 = $15&255;
  $17 = $12 ^ $16;
  $18 = $17 & 255;
  $19 = (712 + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $c;
  $22 = $21 >>> 8;
  $23 = $20 ^ $22;
  $c = $23;
  $24 = $2;
  $25 = (($24) + -1)|0;
  $2 = $25;
 }
 $26 = $1;
 $buf4 = $26;
 while(1) {
  $27 = $2;
  $28 = ($27>>>0)>=(32);
  if (!($28)) {
   break;
  }
  $29 = $buf4;
  $30 = ((($29)) + 4|0);
  $buf4 = $30;
  $31 = HEAP32[$29>>2]|0;
  $32 = $c;
  $33 = $32 ^ $31;
  $c = $33;
  $34 = $c;
  $35 = $34 & 255;
  $36 = ((3784) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $c;
  $39 = $38 >>> 8;
  $40 = $39 & 255;
  $41 = ((2760) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $37 ^ $42;
  $44 = $c;
  $45 = $44 >>> 16;
  $46 = $45 & 255;
  $47 = ((1736) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $43 ^ $48;
  $50 = $c;
  $51 = $50 >>> 24;
  $52 = (712 + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $49 ^ $53;
  $c = $54;
  $55 = $buf4;
  $56 = ((($55)) + 4|0);
  $buf4 = $56;
  $57 = HEAP32[$55>>2]|0;
  $58 = $c;
  $59 = $58 ^ $57;
  $c = $59;
  $60 = $c;
  $61 = $60 & 255;
  $62 = ((3784) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $c;
  $65 = $64 >>> 8;
  $66 = $65 & 255;
  $67 = ((2760) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $63 ^ $68;
  $70 = $c;
  $71 = $70 >>> 16;
  $72 = $71 & 255;
  $73 = ((1736) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $69 ^ $74;
  $76 = $c;
  $77 = $76 >>> 24;
  $78 = (712 + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $75 ^ $79;
  $c = $80;
  $81 = $buf4;
  $82 = ((($81)) + 4|0);
  $buf4 = $82;
  $83 = HEAP32[$81>>2]|0;
  $84 = $c;
  $85 = $84 ^ $83;
  $c = $85;
  $86 = $c;
  $87 = $86 & 255;
  $88 = ((3784) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $c;
  $91 = $90 >>> 8;
  $92 = $91 & 255;
  $93 = ((2760) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $89 ^ $94;
  $96 = $c;
  $97 = $96 >>> 16;
  $98 = $97 & 255;
  $99 = ((1736) + ($98<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $95 ^ $100;
  $102 = $c;
  $103 = $102 >>> 24;
  $104 = (712 + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $101 ^ $105;
  $c = $106;
  $107 = $buf4;
  $108 = ((($107)) + 4|0);
  $buf4 = $108;
  $109 = HEAP32[$107>>2]|0;
  $110 = $c;
  $111 = $110 ^ $109;
  $c = $111;
  $112 = $c;
  $113 = $112 & 255;
  $114 = ((3784) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $c;
  $117 = $116 >>> 8;
  $118 = $117 & 255;
  $119 = ((2760) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $115 ^ $120;
  $122 = $c;
  $123 = $122 >>> 16;
  $124 = $123 & 255;
  $125 = ((1736) + ($124<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $121 ^ $126;
  $128 = $c;
  $129 = $128 >>> 24;
  $130 = (712 + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $127 ^ $131;
  $c = $132;
  $133 = $buf4;
  $134 = ((($133)) + 4|0);
  $buf4 = $134;
  $135 = HEAP32[$133>>2]|0;
  $136 = $c;
  $137 = $136 ^ $135;
  $c = $137;
  $138 = $c;
  $139 = $138 & 255;
  $140 = ((3784) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $c;
  $143 = $142 >>> 8;
  $144 = $143 & 255;
  $145 = ((2760) + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $141 ^ $146;
  $148 = $c;
  $149 = $148 >>> 16;
  $150 = $149 & 255;
  $151 = ((1736) + ($150<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $147 ^ $152;
  $154 = $c;
  $155 = $154 >>> 24;
  $156 = (712 + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $153 ^ $157;
  $c = $158;
  $159 = $buf4;
  $160 = ((($159)) + 4|0);
  $buf4 = $160;
  $161 = HEAP32[$159>>2]|0;
  $162 = $c;
  $163 = $162 ^ $161;
  $c = $163;
  $164 = $c;
  $165 = $164 & 255;
  $166 = ((3784) + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $c;
  $169 = $168 >>> 8;
  $170 = $169 & 255;
  $171 = ((2760) + ($170<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $167 ^ $172;
  $174 = $c;
  $175 = $174 >>> 16;
  $176 = $175 & 255;
  $177 = ((1736) + ($176<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = $173 ^ $178;
  $180 = $c;
  $181 = $180 >>> 24;
  $182 = (712 + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $179 ^ $183;
  $c = $184;
  $185 = $buf4;
  $186 = ((($185)) + 4|0);
  $buf4 = $186;
  $187 = HEAP32[$185>>2]|0;
  $188 = $c;
  $189 = $188 ^ $187;
  $c = $189;
  $190 = $c;
  $191 = $190 & 255;
  $192 = ((3784) + ($191<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $c;
  $195 = $194 >>> 8;
  $196 = $195 & 255;
  $197 = ((2760) + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $193 ^ $198;
  $200 = $c;
  $201 = $200 >>> 16;
  $202 = $201 & 255;
  $203 = ((1736) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $199 ^ $204;
  $206 = $c;
  $207 = $206 >>> 24;
  $208 = (712 + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $205 ^ $209;
  $c = $210;
  $211 = $buf4;
  $212 = ((($211)) + 4|0);
  $buf4 = $212;
  $213 = HEAP32[$211>>2]|0;
  $214 = $c;
  $215 = $214 ^ $213;
  $c = $215;
  $216 = $c;
  $217 = $216 & 255;
  $218 = ((3784) + ($217<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $c;
  $221 = $220 >>> 8;
  $222 = $221 & 255;
  $223 = ((2760) + ($222<<2)|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = $219 ^ $224;
  $226 = $c;
  $227 = $226 >>> 16;
  $228 = $227 & 255;
  $229 = ((1736) + ($228<<2)|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = $225 ^ $230;
  $232 = $c;
  $233 = $232 >>> 24;
  $234 = (712 + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $231 ^ $235;
  $c = $236;
  $237 = $2;
  $238 = (($237) - 32)|0;
  $2 = $238;
 }
 while(1) {
  $239 = $2;
  $240 = ($239>>>0)>=(4);
  $241 = $buf4;
  if (!($240)) {
   break;
  }
  $242 = ((($241)) + 4|0);
  $buf4 = $242;
  $243 = HEAP32[$241>>2]|0;
  $244 = $c;
  $245 = $244 ^ $243;
  $c = $245;
  $246 = $c;
  $247 = $246 & 255;
  $248 = ((3784) + ($247<<2)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $c;
  $251 = $250 >>> 8;
  $252 = $251 & 255;
  $253 = ((2760) + ($252<<2)|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $249 ^ $254;
  $256 = $c;
  $257 = $256 >>> 16;
  $258 = $257 & 255;
  $259 = ((1736) + ($258<<2)|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $255 ^ $260;
  $262 = $c;
  $263 = $262 >>> 24;
  $264 = (712 + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $261 ^ $265;
  $c = $266;
  $267 = $2;
  $268 = (($267) - 4)|0;
  $2 = $268;
 }
 $1 = $241;
 $269 = $2;
 $270 = ($269|0)!=(0);
 if (!($270)) {
  $286 = $c;
  $287 = $286 ^ -1;
  $c = $287;
  $288 = $c;
  STACKTOP = sp;return ($288|0);
 }
 while(1) {
  $271 = $c;
  $272 = $1;
  $273 = ((($272)) + 1|0);
  $1 = $273;
  $274 = HEAP8[$272>>0]|0;
  $275 = $274&255;
  $276 = $271 ^ $275;
  $277 = $276 & 255;
  $278 = (712 + ($277<<2)|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $c;
  $281 = $280 >>> 8;
  $282 = $279 ^ $281;
  $c = $282;
  $283 = $2;
  $284 = (($283) + -1)|0;
  $2 = $284;
  $285 = ($284|0)!=(0);
  if (!($285)) {
   break;
  }
 }
 $286 = $c;
 $287 = $286 ^ -1;
 $c = $287;
 $288 = $c;
 STACKTOP = sp;return ($288|0);
}
function _crc32_big($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buf4 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $crc;
 $1 = $buf;
 $2 = $len;
 $3 = $0;
 $4 = $3 >>> 24;
 $5 = $4 & 255;
 $6 = $0;
 $7 = $6 >>> 8;
 $8 = $7 & 65280;
 $9 = (($5) + ($8))|0;
 $10 = $0;
 $11 = $10 & 65280;
 $12 = $11 << 8;
 $13 = (($9) + ($12))|0;
 $14 = $0;
 $15 = $14 & 255;
 $16 = $15 << 24;
 $17 = (($13) + ($16))|0;
 $c = $17;
 $18 = $c;
 $19 = $18 ^ -1;
 $c = $19;
 while(1) {
  $20 = $2;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $1;
  $23 = $22;
  $24 = $23 & 3;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $26 = $c;
  $27 = $26 >>> 24;
  $28 = $1;
  $29 = ((($28)) + 1|0);
  $1 = $29;
  $30 = HEAP8[$28>>0]|0;
  $31 = $30&255;
  $32 = $27 ^ $31;
  $33 = ((4808) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $c;
  $36 = $35 << 8;
  $37 = $34 ^ $36;
  $c = $37;
  $38 = $2;
  $39 = (($38) + -1)|0;
  $2 = $39;
 }
 $40 = $1;
 $buf4 = $40;
 $41 = $buf4;
 $42 = ((($41)) + -4|0);
 $buf4 = $42;
 while(1) {
  $43 = $2;
  $44 = ($43>>>0)>=(32);
  if (!($44)) {
   break;
  }
  $45 = $buf4;
  $46 = ((($45)) + 4|0);
  $buf4 = $46;
  $47 = HEAP32[$46>>2]|0;
  $48 = $c;
  $49 = $48 ^ $47;
  $c = $49;
  $50 = $c;
  $51 = $50 & 255;
  $52 = ((4808) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $c;
  $55 = $54 >>> 8;
  $56 = $55 & 255;
  $57 = ((5832) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $53 ^ $58;
  $60 = $c;
  $61 = $60 >>> 16;
  $62 = $61 & 255;
  $63 = ((6856) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $59 ^ $64;
  $66 = $c;
  $67 = $66 >>> 24;
  $68 = ((7880) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $65 ^ $69;
  $c = $70;
  $71 = $buf4;
  $72 = ((($71)) + 4|0);
  $buf4 = $72;
  $73 = HEAP32[$72>>2]|0;
  $74 = $c;
  $75 = $74 ^ $73;
  $c = $75;
  $76 = $c;
  $77 = $76 & 255;
  $78 = ((4808) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $c;
  $81 = $80 >>> 8;
  $82 = $81 & 255;
  $83 = ((5832) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $79 ^ $84;
  $86 = $c;
  $87 = $86 >>> 16;
  $88 = $87 & 255;
  $89 = ((6856) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $85 ^ $90;
  $92 = $c;
  $93 = $92 >>> 24;
  $94 = ((7880) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $91 ^ $95;
  $c = $96;
  $97 = $buf4;
  $98 = ((($97)) + 4|0);
  $buf4 = $98;
  $99 = HEAP32[$98>>2]|0;
  $100 = $c;
  $101 = $100 ^ $99;
  $c = $101;
  $102 = $c;
  $103 = $102 & 255;
  $104 = ((4808) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $c;
  $107 = $106 >>> 8;
  $108 = $107 & 255;
  $109 = ((5832) + ($108<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $105 ^ $110;
  $112 = $c;
  $113 = $112 >>> 16;
  $114 = $113 & 255;
  $115 = ((6856) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $111 ^ $116;
  $118 = $c;
  $119 = $118 >>> 24;
  $120 = ((7880) + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $117 ^ $121;
  $c = $122;
  $123 = $buf4;
  $124 = ((($123)) + 4|0);
  $buf4 = $124;
  $125 = HEAP32[$124>>2]|0;
  $126 = $c;
  $127 = $126 ^ $125;
  $c = $127;
  $128 = $c;
  $129 = $128 & 255;
  $130 = ((4808) + ($129<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $c;
  $133 = $132 >>> 8;
  $134 = $133 & 255;
  $135 = ((5832) + ($134<<2)|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $131 ^ $136;
  $138 = $c;
  $139 = $138 >>> 16;
  $140 = $139 & 255;
  $141 = ((6856) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $137 ^ $142;
  $144 = $c;
  $145 = $144 >>> 24;
  $146 = ((7880) + ($145<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $143 ^ $147;
  $c = $148;
  $149 = $buf4;
  $150 = ((($149)) + 4|0);
  $buf4 = $150;
  $151 = HEAP32[$150>>2]|0;
  $152 = $c;
  $153 = $152 ^ $151;
  $c = $153;
  $154 = $c;
  $155 = $154 & 255;
  $156 = ((4808) + ($155<<2)|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $c;
  $159 = $158 >>> 8;
  $160 = $159 & 255;
  $161 = ((5832) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $157 ^ $162;
  $164 = $c;
  $165 = $164 >>> 16;
  $166 = $165 & 255;
  $167 = ((6856) + ($166<<2)|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $163 ^ $168;
  $170 = $c;
  $171 = $170 >>> 24;
  $172 = ((7880) + ($171<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $169 ^ $173;
  $c = $174;
  $175 = $buf4;
  $176 = ((($175)) + 4|0);
  $buf4 = $176;
  $177 = HEAP32[$176>>2]|0;
  $178 = $c;
  $179 = $178 ^ $177;
  $c = $179;
  $180 = $c;
  $181 = $180 & 255;
  $182 = ((4808) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $c;
  $185 = $184 >>> 8;
  $186 = $185 & 255;
  $187 = ((5832) + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $183 ^ $188;
  $190 = $c;
  $191 = $190 >>> 16;
  $192 = $191 & 255;
  $193 = ((6856) + ($192<<2)|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $189 ^ $194;
  $196 = $c;
  $197 = $196 >>> 24;
  $198 = ((7880) + ($197<<2)|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $195 ^ $199;
  $c = $200;
  $201 = $buf4;
  $202 = ((($201)) + 4|0);
  $buf4 = $202;
  $203 = HEAP32[$202>>2]|0;
  $204 = $c;
  $205 = $204 ^ $203;
  $c = $205;
  $206 = $c;
  $207 = $206 & 255;
  $208 = ((4808) + ($207<<2)|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $c;
  $211 = $210 >>> 8;
  $212 = $211 & 255;
  $213 = ((5832) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $209 ^ $214;
  $216 = $c;
  $217 = $216 >>> 16;
  $218 = $217 & 255;
  $219 = ((6856) + ($218<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $215 ^ $220;
  $222 = $c;
  $223 = $222 >>> 24;
  $224 = ((7880) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $221 ^ $225;
  $c = $226;
  $227 = $buf4;
  $228 = ((($227)) + 4|0);
  $buf4 = $228;
  $229 = HEAP32[$228>>2]|0;
  $230 = $c;
  $231 = $230 ^ $229;
  $c = $231;
  $232 = $c;
  $233 = $232 & 255;
  $234 = ((4808) + ($233<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $c;
  $237 = $236 >>> 8;
  $238 = $237 & 255;
  $239 = ((5832) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $235 ^ $240;
  $242 = $c;
  $243 = $242 >>> 16;
  $244 = $243 & 255;
  $245 = ((6856) + ($244<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $241 ^ $246;
  $248 = $c;
  $249 = $248 >>> 24;
  $250 = ((7880) + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $247 ^ $251;
  $c = $252;
  $253 = $2;
  $254 = (($253) - 32)|0;
  $2 = $254;
 }
 while(1) {
  $255 = $2;
  $256 = ($255>>>0)>=(4);
  $257 = $buf4;
  $258 = ((($257)) + 4|0);
  $buf4 = $258;
  if (!($256)) {
   break;
  }
  $259 = HEAP32[$258>>2]|0;
  $260 = $c;
  $261 = $260 ^ $259;
  $c = $261;
  $262 = $c;
  $263 = $262 & 255;
  $264 = ((4808) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $c;
  $267 = $266 >>> 8;
  $268 = $267 & 255;
  $269 = ((5832) + ($268<<2)|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = $265 ^ $270;
  $272 = $c;
  $273 = $272 >>> 16;
  $274 = $273 & 255;
  $275 = ((6856) + ($274<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $271 ^ $276;
  $278 = $c;
  $279 = $278 >>> 24;
  $280 = ((7880) + ($279<<2)|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = $277 ^ $281;
  $c = $282;
  $283 = $2;
  $284 = (($283) - 4)|0;
  $2 = $284;
 }
 $285 = $buf4;
 $1 = $285;
 $286 = $2;
 $287 = ($286|0)!=(0);
 if (!($287)) {
  $303 = $c;
  $304 = $303 ^ -1;
  $c = $304;
  $305 = $c;
  $306 = $305 >>> 24;
  $307 = $306 & 255;
  $308 = $c;
  $309 = $308 >>> 8;
  $310 = $309 & 65280;
  $311 = (($307) + ($310))|0;
  $312 = $c;
  $313 = $312 & 65280;
  $314 = $313 << 8;
  $315 = (($311) + ($314))|0;
  $316 = $c;
  $317 = $316 & 255;
  $318 = $317 << 24;
  $319 = (($315) + ($318))|0;
  STACKTOP = sp;return ($319|0);
 }
 while(1) {
  $288 = $c;
  $289 = $288 >>> 24;
  $290 = $1;
  $291 = ((($290)) + 1|0);
  $1 = $291;
  $292 = HEAP8[$290>>0]|0;
  $293 = $292&255;
  $294 = $289 ^ $293;
  $295 = ((4808) + ($294<<2)|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = $c;
  $298 = $297 << 8;
  $299 = $296 ^ $298;
  $c = $299;
  $300 = $2;
  $301 = (($300) + -1)|0;
  $2 = $301;
  $302 = ($301|0)!=(0);
  if (!($302)) {
   break;
  }
 }
 $303 = $c;
 $304 = $303 ^ -1;
 $c = $304;
 $305 = $c;
 $306 = $305 >>> 24;
 $307 = $306 & 255;
 $308 = $c;
 $309 = $308 >>> 8;
 $310 = $309 & 65280;
 $311 = (($307) + ($310))|0;
 $312 = $c;
 $313 = $312 & 65280;
 $314 = $313 << 8;
 $315 = (($311) + ($314))|0;
 $316 = $c;
 $317 = $316 & 255;
 $318 = $317 << 24;
 $319 = (($315) + ($318))|0;
 STACKTOP = sp;return ($319|0);
}
function _inflate_fast($strm,$start) {
 $strm = $strm|0;
 $start = $start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $beg = 0, $bits = 0, $dcode = 0, $dist = 0, $dmask = 0, $end = 0, $from = 0, $here = 0, $hold = 0, $in = 0, $last = 0;
 var $lcode = 0, $len = 0, $lmask = 0, $op = 0, $out = 0, $state = 0, $whave = 0, $window = 0, $wnext = 0, $wsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $here = sp + 88|0;
 $0 = $strm;
 $1 = $start;
 $2 = $0;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $state = $4;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + -1|0);
 $in = $7;
 $8 = $in;
 $9 = $0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 5)|0;
 $13 = (($8) + ($12)|0);
 $last = $13;
 $14 = $0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + -1|0);
 $out = $17;
 $18 = $out;
 $19 = $1;
 $20 = $0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19) - ($22))|0;
 $24 = (0 - ($23))|0;
 $25 = (($18) + ($24)|0);
 $beg = $25;
 $26 = $out;
 $27 = $0;
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 257)|0;
 $31 = (($26) + ($30)|0);
 $end = $31;
 $32 = $state;
 $33 = ((($32)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $wsize = $34;
 $35 = $state;
 $36 = ((($35)) + 44|0);
 $37 = HEAP32[$36>>2]|0;
 $whave = $37;
 $38 = $state;
 $39 = ((($38)) + 48|0);
 $40 = HEAP32[$39>>2]|0;
 $wnext = $40;
 $41 = $state;
 $42 = ((($41)) + 52|0);
 $43 = HEAP32[$42>>2]|0;
 $window = $43;
 $44 = $state;
 $45 = ((($44)) + 56|0);
 $46 = HEAP32[$45>>2]|0;
 $hold = $46;
 $47 = $state;
 $48 = ((($47)) + 60|0);
 $49 = HEAP32[$48>>2]|0;
 $bits = $49;
 $50 = $state;
 $51 = ((($50)) + 76|0);
 $52 = HEAP32[$51>>2]|0;
 $lcode = $52;
 $53 = $state;
 $54 = ((($53)) + 80|0);
 $55 = HEAP32[$54>>2]|0;
 $dcode = $55;
 $56 = $state;
 $57 = ((($56)) + 84|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = 1 << $58;
 $60 = (($59) - 1)|0;
 $lmask = $60;
 $61 = $state;
 $62 = ((($61)) + 88|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = 1 << $63;
 $65 = (($64) - 1)|0;
 $dmask = $65;
 L1: while(1) {
  $66 = $bits;
  $67 = ($66>>>0)<(15);
  if ($67) {
   $68 = $in;
   $69 = ((($68)) + 1|0);
   $in = $69;
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $bits;
   $73 = $71 << $72;
   $74 = $hold;
   $75 = (($74) + ($73))|0;
   $hold = $75;
   $76 = $bits;
   $77 = (($76) + 8)|0;
   $bits = $77;
   $78 = $in;
   $79 = ((($78)) + 1|0);
   $in = $79;
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $bits;
   $83 = $81 << $82;
   $84 = $hold;
   $85 = (($84) + ($83))|0;
   $hold = $85;
   $86 = $bits;
   $87 = (($86) + 8)|0;
   $bits = $87;
  }
  $88 = $hold;
  $89 = $lmask;
  $90 = $88 & $89;
  $91 = $lcode;
  $92 = (($91) + ($90<<2)|0);
  ;HEAP16[$here>>1]=HEAP16[$92>>1]|0;HEAP16[$here+2>>1]=HEAP16[$92+2>>1]|0;
  while(1) {
   $93 = ((($here)) + 1|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $op = $95;
   $96 = $op;
   $97 = $hold;
   $98 = $97 >>> $96;
   $hold = $98;
   $99 = $op;
   $100 = $bits;
   $101 = (($100) - ($99))|0;
   $bits = $101;
   $102 = HEAP8[$here>>0]|0;
   $103 = $102&255;
   $op = $103;
   $104 = $op;
   $105 = ($104|0)==(0);
   if ($105) {
    label = 6;
    break;
   }
   $111 = $op;
   $112 = $111 & 16;
   $113 = ($112|0)!=(0);
   if ($113) {
    label = 8;
    break;
   }
   $438 = $op;
   $439 = $438 & 64;
   $440 = ($439|0)==(0);
   if (!($440)) {
    label = 55;
    break L1;
   }
   $441 = ((($here)) + 2|0);
   $442 = HEAP16[$441>>1]|0;
   $443 = $442&65535;
   $444 = $hold;
   $445 = $op;
   $446 = 1 << $445;
   $447 = (($446) - 1)|0;
   $448 = $444 & $447;
   $449 = (($443) + ($448))|0;
   $450 = $lcode;
   $451 = (($450) + ($449<<2)|0);
   ;HEAP16[$here>>1]=HEAP16[$451>>1]|0;HEAP16[$here+2>>1]=HEAP16[$451+2>>1]|0;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $106 = ((($here)) + 2|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&255;
    $109 = $out;
    $110 = ((($109)) + 1|0);
    $out = $110;
    HEAP8[$110>>0] = $108;
   }
   else if ((label|0) == 8) {
    label = 0;
    $114 = ((($here)) + 2|0);
    $115 = HEAP16[$114>>1]|0;
    $116 = $115&65535;
    $len = $116;
    $117 = $op;
    $118 = $117 & 15;
    $op = $118;
    $119 = $op;
    $120 = ($119|0)!=(0);
    if ($120) {
     $121 = $bits;
     $122 = $op;
     $123 = ($121>>>0)<($122>>>0);
     if ($123) {
      $124 = $in;
      $125 = ((($124)) + 1|0);
      $in = $125;
      $126 = HEAP8[$125>>0]|0;
      $127 = $126&255;
      $128 = $bits;
      $129 = $127 << $128;
      $130 = $hold;
      $131 = (($130) + ($129))|0;
      $hold = $131;
      $132 = $bits;
      $133 = (($132) + 8)|0;
      $bits = $133;
     }
     $134 = $hold;
     $135 = $op;
     $136 = 1 << $135;
     $137 = (($136) - 1)|0;
     $138 = $134 & $137;
     $139 = $len;
     $140 = (($139) + ($138))|0;
     $len = $140;
     $141 = $op;
     $142 = $hold;
     $143 = $142 >>> $141;
     $hold = $143;
     $144 = $op;
     $145 = $bits;
     $146 = (($145) - ($144))|0;
     $bits = $146;
    }
    $147 = $bits;
    $148 = ($147>>>0)<(15);
    if ($148) {
     $149 = $in;
     $150 = ((($149)) + 1|0);
     $in = $150;
     $151 = HEAP8[$150>>0]|0;
     $152 = $151&255;
     $153 = $bits;
     $154 = $152 << $153;
     $155 = $hold;
     $156 = (($155) + ($154))|0;
     $hold = $156;
     $157 = $bits;
     $158 = (($157) + 8)|0;
     $bits = $158;
     $159 = $in;
     $160 = ((($159)) + 1|0);
     $in = $160;
     $161 = HEAP8[$160>>0]|0;
     $162 = $161&255;
     $163 = $bits;
     $164 = $162 << $163;
     $165 = $hold;
     $166 = (($165) + ($164))|0;
     $hold = $166;
     $167 = $bits;
     $168 = (($167) + 8)|0;
     $bits = $168;
    }
    $169 = $hold;
    $170 = $dmask;
    $171 = $169 & $170;
    $172 = $dcode;
    $173 = (($172) + ($171<<2)|0);
    ;HEAP16[$here>>1]=HEAP16[$173>>1]|0;HEAP16[$here+2>>1]=HEAP16[$173+2>>1]|0;
    while(1) {
     $174 = ((($here)) + 1|0);
     $175 = HEAP8[$174>>0]|0;
     $176 = $175&255;
     $op = $176;
     $177 = $op;
     $178 = $hold;
     $179 = $178 >>> $177;
     $hold = $179;
     $180 = $op;
     $181 = $bits;
     $182 = (($181) - ($180))|0;
     $bits = $182;
     $183 = HEAP8[$here>>0]|0;
     $184 = $183&255;
     $op = $184;
     $185 = $op;
     $186 = $185 & 16;
     $187 = ($186|0)!=(0);
     if ($187) {
      break;
     }
     $421 = $op;
     $422 = $421 & 64;
     $423 = ($422|0)==(0);
     if (!($423)) {
      label = 52;
      break L1;
     }
     $424 = ((($here)) + 2|0);
     $425 = HEAP16[$424>>1]|0;
     $426 = $425&65535;
     $427 = $hold;
     $428 = $op;
     $429 = 1 << $428;
     $430 = (($429) - 1)|0;
     $431 = $427 & $430;
     $432 = (($426) + ($431))|0;
     $433 = $dcode;
     $434 = (($433) + ($432<<2)|0);
     ;HEAP16[$here>>1]=HEAP16[$434>>1]|0;HEAP16[$here+2>>1]=HEAP16[$434+2>>1]|0;
    }
    $188 = ((($here)) + 2|0);
    $189 = HEAP16[$188>>1]|0;
    $190 = $189&65535;
    $dist = $190;
    $191 = $op;
    $192 = $191 & 15;
    $op = $192;
    $193 = $bits;
    $194 = $op;
    $195 = ($193>>>0)<($194>>>0);
    if ($195) {
     $196 = $in;
     $197 = ((($196)) + 1|0);
     $in = $197;
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = $bits;
     $201 = $199 << $200;
     $202 = $hold;
     $203 = (($202) + ($201))|0;
     $hold = $203;
     $204 = $bits;
     $205 = (($204) + 8)|0;
     $bits = $205;
     $206 = $bits;
     $207 = $op;
     $208 = ($206>>>0)<($207>>>0);
     if ($208) {
      $209 = $in;
      $210 = ((($209)) + 1|0);
      $in = $210;
      $211 = HEAP8[$210>>0]|0;
      $212 = $211&255;
      $213 = $bits;
      $214 = $212 << $213;
      $215 = $hold;
      $216 = (($215) + ($214))|0;
      $hold = $216;
      $217 = $bits;
      $218 = (($217) + 8)|0;
      $bits = $218;
     }
    }
    $219 = $hold;
    $220 = $op;
    $221 = 1 << $220;
    $222 = (($221) - 1)|0;
    $223 = $219 & $222;
    $224 = $dist;
    $225 = (($224) + ($223))|0;
    $dist = $225;
    $226 = $op;
    $227 = $hold;
    $228 = $227 >>> $226;
    $hold = $228;
    $229 = $op;
    $230 = $bits;
    $231 = (($230) - ($229))|0;
    $bits = $231;
    $232 = $out;
    $233 = $beg;
    $234 = $232;
    $235 = $233;
    $236 = (($234) - ($235))|0;
    $op = $236;
    $237 = $dist;
    $238 = $op;
    $239 = ($237>>>0)>($238>>>0);
    if (!($239)) {
     $384 = $out;
     $385 = $dist;
     $386 = (0 - ($385))|0;
     $387 = (($384) + ($386)|0);
     $from = $387;
     while(1) {
      $388 = $from;
      $389 = ((($388)) + 1|0);
      $from = $389;
      $390 = HEAP8[$389>>0]|0;
      $391 = $out;
      $392 = ((($391)) + 1|0);
      $out = $392;
      HEAP8[$392>>0] = $390;
      $393 = $from;
      $394 = ((($393)) + 1|0);
      $from = $394;
      $395 = HEAP8[$394>>0]|0;
      $396 = $out;
      $397 = ((($396)) + 1|0);
      $out = $397;
      HEAP8[$397>>0] = $395;
      $398 = $from;
      $399 = ((($398)) + 1|0);
      $from = $399;
      $400 = HEAP8[$399>>0]|0;
      $401 = $out;
      $402 = ((($401)) + 1|0);
      $out = $402;
      HEAP8[$402>>0] = $400;
      $403 = $len;
      $404 = (($403) - 3)|0;
      $len = $404;
      $405 = $len;
      $406 = ($405>>>0)>(2);
      if (!($406)) {
       break;
      }
     }
     $407 = $len;
     $408 = ($407|0)!=(0);
     if (!($408)) {
      break;
     }
     $409 = $from;
     $410 = ((($409)) + 1|0);
     $from = $410;
     $411 = HEAP8[$410>>0]|0;
     $412 = $out;
     $413 = ((($412)) + 1|0);
     $out = $413;
     HEAP8[$413>>0] = $411;
     $414 = $len;
     $415 = ($414>>>0)>(1);
     if (!($415)) {
      break;
     }
     $416 = $from;
     $417 = ((($416)) + 1|0);
     $from = $417;
     $418 = HEAP8[$417>>0]|0;
     $419 = $out;
     $420 = ((($419)) + 1|0);
     $out = $420;
     HEAP8[$420>>0] = $418;
     break;
    }
    $240 = $dist;
    $241 = $op;
    $242 = (($240) - ($241))|0;
    $op = $242;
    $243 = $op;
    $244 = $whave;
    $245 = ($243>>>0)>($244>>>0);
    if ($245) {
     $246 = $state;
     $247 = ((($246)) + 7104|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($248|0)!=(0);
     if ($249) {
      label = 22;
      break L1;
     }
    }
    $253 = $window;
    $254 = ((($253)) + -1|0);
    $from = $254;
    $255 = $wnext;
    $256 = ($255|0)==(0);
    do {
     if ($256) {
      $257 = $wsize;
      $258 = $op;
      $259 = (($257) - ($258))|0;
      $260 = $from;
      $261 = (($260) + ($259)|0);
      $from = $261;
      $262 = $op;
      $263 = $len;
      $264 = ($262>>>0)<($263>>>0);
      if ($264) {
       $265 = $op;
       $266 = $len;
       $267 = (($266) - ($265))|0;
       $len = $267;
       while(1) {
        $268 = $from;
        $269 = ((($268)) + 1|0);
        $from = $269;
        $270 = HEAP8[$269>>0]|0;
        $271 = $out;
        $272 = ((($271)) + 1|0);
        $out = $272;
        HEAP8[$272>>0] = $270;
        $273 = $op;
        $274 = (($273) + -1)|0;
        $op = $274;
        $275 = ($274|0)!=(0);
        if (!($275)) {
         break;
        }
       }
       $276 = $out;
       $277 = $dist;
       $278 = (0 - ($277))|0;
       $279 = (($276) + ($278)|0);
       $from = $279;
      }
     } else {
      $280 = $wnext;
      $281 = $op;
      $282 = ($280>>>0)<($281>>>0);
      if (!($282)) {
       $328 = $wnext;
       $329 = $op;
       $330 = (($328) - ($329))|0;
       $331 = $from;
       $332 = (($331) + ($330)|0);
       $from = $332;
       $333 = $op;
       $334 = $len;
       $335 = ($333>>>0)<($334>>>0);
       if (!($335)) {
        break;
       }
       $336 = $op;
       $337 = $len;
       $338 = (($337) - ($336))|0;
       $len = $338;
       while(1) {
        $339 = $from;
        $340 = ((($339)) + 1|0);
        $from = $340;
        $341 = HEAP8[$340>>0]|0;
        $342 = $out;
        $343 = ((($342)) + 1|0);
        $out = $343;
        HEAP8[$343>>0] = $341;
        $344 = $op;
        $345 = (($344) + -1)|0;
        $op = $345;
        $346 = ($345|0)!=(0);
        if (!($346)) {
         break;
        }
       }
       $347 = $out;
       $348 = $dist;
       $349 = (0 - ($348))|0;
       $350 = (($347) + ($349)|0);
       $from = $350;
       break;
      }
      $283 = $wsize;
      $284 = $wnext;
      $285 = (($283) + ($284))|0;
      $286 = $op;
      $287 = (($285) - ($286))|0;
      $288 = $from;
      $289 = (($288) + ($287)|0);
      $from = $289;
      $290 = $wnext;
      $291 = $op;
      $292 = (($291) - ($290))|0;
      $op = $292;
      $293 = $op;
      $294 = $len;
      $295 = ($293>>>0)<($294>>>0);
      if ($295) {
       $296 = $op;
       $297 = $len;
       $298 = (($297) - ($296))|0;
       $len = $298;
       while(1) {
        $299 = $from;
        $300 = ((($299)) + 1|0);
        $from = $300;
        $301 = HEAP8[$300>>0]|0;
        $302 = $out;
        $303 = ((($302)) + 1|0);
        $out = $303;
        HEAP8[$303>>0] = $301;
        $304 = $op;
        $305 = (($304) + -1)|0;
        $op = $305;
        $306 = ($305|0)!=(0);
        if (!($306)) {
         break;
        }
       }
       $307 = $window;
       $308 = ((($307)) + -1|0);
       $from = $308;
       $309 = $wnext;
       $310 = $len;
       $311 = ($309>>>0)<($310>>>0);
       if ($311) {
        $312 = $wnext;
        $op = $312;
        $313 = $op;
        $314 = $len;
        $315 = (($314) - ($313))|0;
        $len = $315;
        while(1) {
         $316 = $from;
         $317 = ((($316)) + 1|0);
         $from = $317;
         $318 = HEAP8[$317>>0]|0;
         $319 = $out;
         $320 = ((($319)) + 1|0);
         $out = $320;
         HEAP8[$320>>0] = $318;
         $321 = $op;
         $322 = (($321) + -1)|0;
         $op = $322;
         $323 = ($322|0)!=(0);
         if (!($323)) {
          break;
         }
        }
        $324 = $out;
        $325 = $dist;
        $326 = (0 - ($325))|0;
        $327 = (($324) + ($326)|0);
        $from = $327;
       }
      }
     }
    } while(0);
    while(1) {
     $351 = $len;
     $352 = ($351>>>0)>(2);
     if (!($352)) {
      break;
     }
     $353 = $from;
     $354 = ((($353)) + 1|0);
     $from = $354;
     $355 = HEAP8[$354>>0]|0;
     $356 = $out;
     $357 = ((($356)) + 1|0);
     $out = $357;
     HEAP8[$357>>0] = $355;
     $358 = $from;
     $359 = ((($358)) + 1|0);
     $from = $359;
     $360 = HEAP8[$359>>0]|0;
     $361 = $out;
     $362 = ((($361)) + 1|0);
     $out = $362;
     HEAP8[$362>>0] = $360;
     $363 = $from;
     $364 = ((($363)) + 1|0);
     $from = $364;
     $365 = HEAP8[$364>>0]|0;
     $366 = $out;
     $367 = ((($366)) + 1|0);
     $out = $367;
     HEAP8[$367>>0] = $365;
     $368 = $len;
     $369 = (($368) - 3)|0;
     $len = $369;
    }
    $370 = $len;
    $371 = ($370|0)!=(0);
    if ($371) {
     $372 = $from;
     $373 = ((($372)) + 1|0);
     $from = $373;
     $374 = HEAP8[$373>>0]|0;
     $375 = $out;
     $376 = ((($375)) + 1|0);
     $out = $376;
     HEAP8[$376>>0] = $374;
     $377 = $len;
     $378 = ($377>>>0)>(1);
     if ($378) {
      $379 = $from;
      $380 = ((($379)) + 1|0);
      $from = $380;
      $381 = HEAP8[$380>>0]|0;
      $382 = $out;
      $383 = ((($382)) + 1|0);
      $out = $383;
      HEAP8[$383>>0] = $381;
     }
    }
   }
  } while(0);
  $459 = $in;
  $460 = $last;
  $461 = ($459>>>0)<($460>>>0);
  if (!($461)) {
   break;
  }
  $462 = $out;
  $463 = $end;
  $464 = ($462>>>0)<($463>>>0);
  if (!($464)) {
   break;
  }
 }
 do {
  if ((label|0) == 22) {
   $250 = $0;
   $251 = ((($250)) + 24|0);
   HEAP32[$251>>2] = 19692;
   $252 = $state;
   HEAP32[$252>>2] = 29;
  }
  else if ((label|0) == 52) {
   $435 = $0;
   $436 = ((($435)) + 24|0);
   HEAP32[$436>>2] = 19670;
   $437 = $state;
   HEAP32[$437>>2] = 29;
  }
  else if ((label|0) == 55) {
   $452 = $op;
   $453 = $452 & 32;
   $454 = ($453|0)!=(0);
   if ($454) {
    $455 = $state;
    HEAP32[$455>>2] = 11;
    break;
   } else {
    $456 = $0;
    $457 = ((($456)) + 24|0);
    HEAP32[$457>>2] = 19642;
    $458 = $state;
    HEAP32[$458>>2] = 29;
    break;
   }
  }
 } while(0);
 $465 = $bits;
 $466 = $465 >>> 3;
 $len = $466;
 $467 = $len;
 $468 = $in;
 $469 = (0 - ($467))|0;
 $470 = (($468) + ($469)|0);
 $in = $470;
 $471 = $len;
 $472 = $471 << 3;
 $473 = $bits;
 $474 = (($473) - ($472))|0;
 $bits = $474;
 $475 = $bits;
 $476 = 1 << $475;
 $477 = (($476) - 1)|0;
 $478 = $hold;
 $479 = $478 & $477;
 $hold = $479;
 $480 = $in;
 $481 = ((($480)) + 1|0);
 $482 = $0;
 HEAP32[$482>>2] = $481;
 $483 = $out;
 $484 = ((($483)) + 1|0);
 $485 = $0;
 $486 = ((($485)) + 12|0);
 HEAP32[$486>>2] = $484;
 $487 = $in;
 $488 = $last;
 $489 = ($487>>>0)<($488>>>0);
 if ($489) {
  $490 = $last;
  $491 = $in;
  $492 = $490;
  $493 = $491;
  $494 = (($492) - ($493))|0;
  $495 = (5 + ($494))|0;
  $504 = $495;
 } else {
  $496 = $in;
  $497 = $last;
  $498 = $496;
  $499 = $497;
  $500 = (($498) - ($499))|0;
  $501 = (5 - ($500))|0;
  $504 = $501;
 }
 $502 = $0;
 $503 = ((($502)) + 4|0);
 HEAP32[$503>>2] = $504;
 $505 = $out;
 $506 = $end;
 $507 = ($505>>>0)<($506>>>0);
 if ($507) {
  $508 = $end;
  $509 = $out;
  $510 = $508;
  $511 = $509;
  $512 = (($510) - ($511))|0;
  $513 = (257 + ($512))|0;
  $522 = $513;
  $520 = $0;
  $521 = ((($520)) + 16|0);
  HEAP32[$521>>2] = $522;
  $523 = $hold;
  $524 = $state;
  $525 = ((($524)) + 56|0);
  HEAP32[$525>>2] = $523;
  $526 = $bits;
  $527 = $state;
  $528 = ((($527)) + 60|0);
  HEAP32[$528>>2] = $526;
  STACKTOP = sp;return;
 } else {
  $514 = $out;
  $515 = $end;
  $516 = $514;
  $517 = $515;
  $518 = (($516) - ($517))|0;
  $519 = (257 - ($518))|0;
  $522 = $519;
  $520 = $0;
  $521 = ((($520)) + 16|0);
  HEAP32[$521>>2] = $522;
  $523 = $hold;
  $524 = $state;
  $525 = ((($524)) + 56|0);
  HEAP32[$525>>2] = $523;
  $526 = $bits;
  $527 = $state;
  $528 = ((($527)) + 60|0);
  HEAP32[$528>>2] = $526;
  STACKTOP = sp;return;
 }
}
function _inflateResetKeep($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = ((($8)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $state = $10;
   $11 = $state;
   $12 = ((($11)) + 28|0);
   HEAP32[$12>>2] = 0;
   $13 = $1;
   $14 = ((($13)) + 20|0);
   HEAP32[$14>>2] = 0;
   $15 = $1;
   $16 = ((($15)) + 8|0);
   HEAP32[$16>>2] = 0;
   $17 = $1;
   $18 = ((($17)) + 24|0);
   HEAP32[$18>>2] = 0;
   $19 = $state;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = $state;
    $24 = ((($23)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 1;
    $27 = $1;
    $28 = ((($27)) + 48|0);
    HEAP32[$28>>2] = $26;
   }
   $29 = $state;
   HEAP32[$29>>2] = 0;
   $30 = $state;
   $31 = ((($30)) + 4|0);
   HEAP32[$31>>2] = 0;
   $32 = $state;
   $33 = ((($32)) + 12|0);
   HEAP32[$33>>2] = 0;
   $34 = $state;
   $35 = ((($34)) + 20|0);
   HEAP32[$35>>2] = 32768;
   $36 = $state;
   $37 = ((($36)) + 32|0);
   HEAP32[$37>>2] = 0;
   $38 = $state;
   $39 = ((($38)) + 56|0);
   HEAP32[$39>>2] = 0;
   $40 = $state;
   $41 = ((($40)) + 60|0);
   HEAP32[$41>>2] = 0;
   $42 = $state;
   $43 = ((($42)) + 1328|0);
   $44 = $state;
   $45 = ((($44)) + 108|0);
   HEAP32[$45>>2] = $43;
   $46 = $state;
   $47 = ((($46)) + 80|0);
   HEAP32[$47>>2] = $43;
   $48 = $state;
   $49 = ((($48)) + 76|0);
   HEAP32[$49>>2] = $43;
   $50 = $state;
   $51 = ((($50)) + 7104|0);
   HEAP32[$51>>2] = 1;
   $52 = $state;
   $53 = ((($52)) + 7108|0);
   HEAP32[$53>>2] = -1;
   $0 = 0;
   $54 = $0;
   STACKTOP = sp;return ($54|0);
  }
 }
 $0 = -2;
 $54 = $0;
 STACKTOP = sp;return ($54|0);
}
function _inflateReset($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = ((($8)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $state = $10;
   $11 = $state;
   $12 = ((($11)) + 40|0);
   HEAP32[$12>>2] = 0;
   $13 = $state;
   $14 = ((($13)) + 44|0);
   HEAP32[$14>>2] = 0;
   $15 = $state;
   $16 = ((($15)) + 48|0);
   HEAP32[$16>>2] = 0;
   $17 = $1;
   $18 = (_inflateResetKeep($17)|0);
   $0 = $18;
   $19 = $0;
   STACKTOP = sp;return ($19|0);
  }
 }
 $0 = -2;
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function _inflateReset2($strm,$windowBits) {
 $strm = $strm|0;
 $windowBits = $windowBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $state = 0;
 var $wrap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $windowBits;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = $1;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = $1;
   $10 = ((($9)) + 28|0);
   $11 = HEAP32[$10>>2]|0;
   $state = $11;
   $12 = $2;
   $13 = ($12|0)<(0);
   if ($13) {
    $wrap = 0;
    $14 = $2;
    $15 = (0 - ($14))|0;
    $2 = $15;
   } else {
    $16 = $2;
    $17 = $16 >> 4;
    $18 = (($17) + 1)|0;
    $wrap = $18;
    $19 = $2;
    $20 = ($19|0)<(48);
    if ($20) {
     $21 = $2;
     $22 = $21 & 15;
     $2 = $22;
    }
   }
   $23 = $2;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $2;
    $26 = ($25|0)<(8);
    $27 = $2;
    $28 = ($27|0)>(15);
    $or$cond = $26 | $28;
    if ($or$cond) {
     $0 = -2;
     $57 = $0;
     STACKTOP = sp;return ($57|0);
    }
   }
   $29 = $state;
   $30 = ((($29)) + 52|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0|0);
   if ($32) {
    $33 = $state;
    $34 = ((($33)) + 36|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $2;
    $37 = ($35|0)!=($36|0);
    if ($37) {
     $38 = $1;
     $39 = ((($38)) + 36|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $1;
     $42 = ((($41)) + 40|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = $state;
     $45 = ((($44)) + 52|0);
     $46 = HEAP32[$45>>2]|0;
     FUNCTION_TABLE_vii[$40 & 63]($43,$46);
     $47 = $state;
     $48 = ((($47)) + 52|0);
     HEAP32[$48>>2] = 0;
    }
   }
   $49 = $wrap;
   $50 = $state;
   $51 = ((($50)) + 8|0);
   HEAP32[$51>>2] = $49;
   $52 = $2;
   $53 = $state;
   $54 = ((($53)) + 36|0);
   HEAP32[$54>>2] = $52;
   $55 = $1;
   $56 = (_inflateReset($55)|0);
   $0 = $56;
   $57 = $0;
   STACKTOP = sp;return ($57|0);
  }
 }
 $0 = -2;
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _inflateInit2_($strm,$windowBits,$version,$stream_size) {
 $strm = $strm|0;
 $windowBits = $windowBits|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $ret = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $windowBits;
 $3 = $version;
 $4 = $stream_size;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = $3;
  $8 = HEAP8[$7>>0]|0;
  $9 = $8 << 24 >> 24;
  $10 = HEAP8[19299]|0;
  $11 = $10 << 24 >> 24;
  $12 = ($9|0)!=($11|0);
  $13 = $4;
  $14 = ($13|0)!=(56);
  $or$cond = $12 | $14;
  if (!($or$cond)) {
   $15 = $1;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $0 = -2;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
   $17 = $1;
   $18 = ((($17)) + 24|0);
   HEAP32[$18>>2] = 0;
   $19 = $1;
   $20 = ((($19)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $23 = $1;
    $24 = ((($23)) + 32|0);
    HEAP32[$24>>2] = 33;
    $25 = $1;
    $26 = ((($25)) + 40|0);
    HEAP32[$26>>2] = 0;
   }
   $27 = $1;
   $28 = ((($27)) + 36|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $31 = $1;
    $32 = ((($31)) + 36|0);
    HEAP32[$32>>2] = 34;
   }
   $33 = $1;
   $34 = ((($33)) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = ((($36)) + 40|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (FUNCTION_TABLE_iiii[$35 & 63]($38,1,7116)|0);
   $state = $39;
   $40 = $state;
   $41 = ($40|0)==(0|0);
   if ($41) {
    $0 = -4;
    $62 = $0;
    STACKTOP = sp;return ($62|0);
   }
   $42 = $state;
   $43 = $1;
   $44 = ((($43)) + 28|0);
   HEAP32[$44>>2] = $42;
   $45 = $state;
   $46 = ((($45)) + 52|0);
   HEAP32[$46>>2] = 0;
   $47 = $1;
   $48 = $2;
   $49 = (_inflateReset2($47,$48)|0);
   $ret = $49;
   $50 = $ret;
   $51 = ($50|0)!=(0);
   if ($51) {
    $52 = $1;
    $53 = ((($52)) + 36|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $1;
    $56 = ((($55)) + 40|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $state;
    FUNCTION_TABLE_vii[$54 & 63]($57,$58);
    $59 = $1;
    $60 = ((($59)) + 28|0);
    HEAP32[$60>>2] = 0;
   }
   $61 = $ret;
   $0 = $61;
   $62 = $0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $0 = -6;
 $62 = $0;
 STACKTOP = sp;return ($62|0);
}
function _inflateInit_($strm,$version,$stream_size) {
 $strm = $strm|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $strm;
 $1 = $version;
 $2 = $stream_size;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_inflateInit2_($3,15,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _inflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bits = 0, $copy = 0, $from = 0, $have = 0, $hbuf = 0, $here = 0, $hold = 0, $in = 0, $last = 0, $left = 0, $len = 0, $next = 0;
 var $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, $out = 0, $put = 0, $ret = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $here = sp + 68|0;
 $last = sp + 64|0;
 $hbuf = sp + 72|0;
 $1 = $strm;
 $2 = $flush;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = $1;
   $6 = ((($5)) + 28|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = $1;
    $10 = ((($9)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     $13 = $1;
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0|0);
     if ($15) {
      $16 = $1;
      $17 = ((($16)) + 4|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($18|0)!=(0);
      if ($19) {
       break;
      }
     }
     $20 = $1;
     $21 = ((($20)) + 28|0);
     $22 = HEAP32[$21>>2]|0;
     $state = $22;
     $23 = $state;
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(11);
     if ($25) {
      $26 = $state;
      HEAP32[$26>>2] = 12;
     }
     $27 = $1;
     $28 = ((($27)) + 12|0);
     $29 = HEAP32[$28>>2]|0;
     $put = $29;
     $30 = $1;
     $31 = ((($30)) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $left = $32;
     $33 = $1;
     $34 = HEAP32[$33>>2]|0;
     $next = $34;
     $35 = $1;
     $36 = ((($35)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $have = $37;
     $38 = $state;
     $39 = ((($38)) + 56|0);
     $40 = HEAP32[$39>>2]|0;
     $hold = $40;
     $41 = $state;
     $42 = ((($41)) + 60|0);
     $43 = HEAP32[$42>>2]|0;
     $bits = $43;
     $44 = $have;
     $in = $44;
     $45 = $left;
     $out = $45;
     $ret = 0;
     L11: while(1) {
      $46 = $state;
      $47 = HEAP32[$46>>2]|0;
      L13: do {
       switch ($47|0) {
       case 28:  {
        label = 302;
        break L11;
        break;
       }
       case 29:  {
        label = 303;
        break L11;
        break;
       }
       case 30:  {
        label = 304;
        break L11;
        break;
       }
       case 0:  {
        $48 = $state;
        $49 = ((($48)) + 8|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ($50|0)==(0);
        if ($51) {
         $52 = $state;
         HEAP32[$52>>2] = 12;
         continue L11;
        }
        while(1) {
         $53 = $bits;
         $54 = ($53>>>0)<(16);
         if (!($54)) {
          break;
         }
         $55 = $have;
         $56 = ($55|0)==(0);
         if ($56) {
          break L11;
         }
         $57 = $have;
         $58 = (($57) + -1)|0;
         $have = $58;
         $59 = $next;
         $60 = ((($59)) + 1|0);
         $next = $60;
         $61 = HEAP8[$59>>0]|0;
         $62 = $61&255;
         $63 = $bits;
         $64 = $62 << $63;
         $65 = $hold;
         $66 = (($65) + ($64))|0;
         $hold = $66;
         $67 = $bits;
         $68 = (($67) + 8)|0;
         $bits = $68;
        }
        $69 = $state;
        $70 = ((($69)) + 8|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = $71 & 2;
        $73 = ($72|0)!=(0);
        $74 = $hold;
        $75 = ($74|0)==(35615);
        $or$cond = $73 & $75;
        if ($or$cond) {
         $76 = (_crc32(0,0,0)|0);
         $77 = $state;
         $78 = ((($77)) + 24|0);
         HEAP32[$78>>2] = $76;
         $79 = $hold;
         $80 = $79&255;
         HEAP8[$hbuf>>0] = $80;
         $81 = $hold;
         $82 = $81 >>> 8;
         $83 = $82&255;
         $84 = ((($hbuf)) + 1|0);
         HEAP8[$84>>0] = $83;
         $85 = $state;
         $86 = ((($85)) + 24|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = (_crc32($87,$hbuf,2)|0);
         $89 = $state;
         $90 = ((($89)) + 24|0);
         HEAP32[$90>>2] = $88;
         $hold = 0;
         $bits = 0;
         $91 = $state;
         HEAP32[$91>>2] = 1;
         continue L11;
        }
        $92 = $state;
        $93 = ((($92)) + 16|0);
        HEAP32[$93>>2] = 0;
        $94 = $state;
        $95 = ((($94)) + 32|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ($96|0)!=(0|0);
        if ($97) {
         $98 = $state;
         $99 = ((($98)) + 32|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ((($100)) + 48|0);
         HEAP32[$101>>2] = -1;
        }
        $102 = $state;
        $103 = ((($102)) + 8|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = $104 & 1;
        $106 = ($105|0)!=(0);
        if ($106) {
         $107 = $hold;
         $108 = $107 & 255;
         $109 = $108 << 8;
         $110 = $hold;
         $111 = $110 >>> 8;
         $112 = (($109) + ($111))|0;
         $113 = (($112>>>0) % 31)&-1;
         $114 = ($113|0)!=(0);
         if (!($114)) {
          $118 = $hold;
          $119 = $118 & 15;
          $120 = ($119|0)!=(8);
          if ($120) {
           $121 = $1;
           $122 = ((($121)) + 24|0);
           HEAP32[$122>>2] = 19328;
           $123 = $state;
           HEAP32[$123>>2] = 29;
           continue L11;
          }
          $124 = $hold;
          $125 = $124 >>> 4;
          $hold = $125;
          $126 = $bits;
          $127 = (($126) - 4)|0;
          $bits = $127;
          $128 = $hold;
          $129 = $128 & 15;
          $130 = (($129) + 8)|0;
          $len = $130;
          $131 = $state;
          $132 = ((($131)) + 36|0);
          $133 = HEAP32[$132>>2]|0;
          $134 = ($133|0)==(0);
          $135 = $len;
          $136 = $state;
          $137 = ((($136)) + 36|0);
          if ($134) {
           HEAP32[$137>>2] = $135;
          } else {
           $138 = HEAP32[$137>>2]|0;
           $139 = ($135>>>0)>($138>>>0);
           if ($139) {
            $140 = $1;
            $141 = ((($140)) + 24|0);
            HEAP32[$141>>2] = 19355;
            $142 = $state;
            HEAP32[$142>>2] = 29;
            continue L11;
           }
          }
          $143 = $len;
          $144 = 1 << $143;
          $145 = $state;
          $146 = ((($145)) + 20|0);
          HEAP32[$146>>2] = $144;
          $147 = (_adler32(0,0,0)|0);
          $148 = $state;
          $149 = ((($148)) + 24|0);
          HEAP32[$149>>2] = $147;
          $150 = $1;
          $151 = ((($150)) + 48|0);
          HEAP32[$151>>2] = $147;
          $152 = $hold;
          $153 = $152 & 512;
          $154 = ($153|0)!=(0);
          $155 = $154 ? 9 : 11;
          $156 = $state;
          HEAP32[$156>>2] = $155;
          $hold = 0;
          $bits = 0;
          continue L11;
         }
        }
        $115 = $1;
        $116 = ((($115)) + 24|0);
        HEAP32[$116>>2] = 19305;
        $117 = $state;
        HEAP32[$117>>2] = 29;
        continue L11;
        break;
       }
       case 1:  {
        while(1) {
         $157 = $bits;
         $158 = ($157>>>0)<(16);
         if (!($158)) {
          break;
         }
         $159 = $have;
         $160 = ($159|0)==(0);
         if ($160) {
          break L11;
         }
         $161 = $have;
         $162 = (($161) + -1)|0;
         $have = $162;
         $163 = $next;
         $164 = ((($163)) + 1|0);
         $next = $164;
         $165 = HEAP8[$163>>0]|0;
         $166 = $165&255;
         $167 = $bits;
         $168 = $166 << $167;
         $169 = $hold;
         $170 = (($169) + ($168))|0;
         $hold = $170;
         $171 = $bits;
         $172 = (($171) + 8)|0;
         $bits = $172;
        }
        $173 = $hold;
        $174 = $state;
        $175 = ((($174)) + 16|0);
        HEAP32[$175>>2] = $173;
        $176 = $state;
        $177 = ((($176)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = $178 & 255;
        $180 = ($179|0)!=(8);
        if ($180) {
         $181 = $1;
         $182 = ((($181)) + 24|0);
         HEAP32[$182>>2] = 19328;
         $183 = $state;
         HEAP32[$183>>2] = 29;
         continue L11;
        }
        $184 = $state;
        $185 = ((($184)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = $186 & 57344;
        $188 = ($187|0)!=(0);
        if ($188) {
         $189 = $1;
         $190 = ((($189)) + 24|0);
         HEAP32[$190>>2] = 19375;
         $191 = $state;
         HEAP32[$191>>2] = 29;
         continue L11;
        }
        $192 = $state;
        $193 = ((($192)) + 32|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)!=(0|0);
        if ($195) {
         $196 = $hold;
         $197 = $196 >>> 8;
         $198 = $197 & 1;
         $199 = $state;
         $200 = ((($199)) + 32|0);
         $201 = HEAP32[$200>>2]|0;
         HEAP32[$201>>2] = $198;
        }
        $202 = $state;
        $203 = ((($202)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $205 = $204 & 512;
        $206 = ($205|0)!=(0);
        if ($206) {
         $207 = $hold;
         $208 = $207&255;
         HEAP8[$hbuf>>0] = $208;
         $209 = $hold;
         $210 = $209 >>> 8;
         $211 = $210&255;
         $212 = ((($hbuf)) + 1|0);
         HEAP8[$212>>0] = $211;
         $213 = $state;
         $214 = ((($213)) + 24|0);
         $215 = HEAP32[$214>>2]|0;
         $216 = (_crc32($215,$hbuf,2)|0);
         $217 = $state;
         $218 = ((($217)) + 24|0);
         HEAP32[$218>>2] = $216;
        }
        $hold = 0;
        $bits = 0;
        $219 = $state;
        HEAP32[$219>>2] = 2;
        label = 42;
        break;
       }
       case 2:  {
        label = 42;
        break;
       }
       case 3:  {
        label = 50;
        break;
       }
       case 4:  {
        label = 58;
        break;
       }
       case 5:  {
        label = 70;
        break;
       }
       case 6:  {
        label = 85;
        break;
       }
       case 7:  {
        label = 100;
        break;
       }
       case 8:  {
        label = 115;
        break;
       }
       case 9:  {
        while(1) {
         $683 = $bits;
         $684 = ($683>>>0)<(32);
         if (!($684)) {
          break;
         }
         $685 = $have;
         $686 = ($685|0)==(0);
         if ($686) {
          break L11;
         }
         $687 = $have;
         $688 = (($687) + -1)|0;
         $have = $688;
         $689 = $next;
         $690 = ((($689)) + 1|0);
         $next = $690;
         $691 = HEAP8[$689>>0]|0;
         $692 = $691&255;
         $693 = $bits;
         $694 = $692 << $693;
         $695 = $hold;
         $696 = (($695) + ($694))|0;
         $hold = $696;
         $697 = $bits;
         $698 = (($697) + 8)|0;
         $bits = $698;
        }
        $699 = $hold;
        $700 = $699 >>> 24;
        $701 = $700 & 255;
        $702 = $hold;
        $703 = $702 >>> 8;
        $704 = $703 & 65280;
        $705 = (($701) + ($704))|0;
        $706 = $hold;
        $707 = $706 & 65280;
        $708 = $707 << 8;
        $709 = (($705) + ($708))|0;
        $710 = $hold;
        $711 = $710 & 255;
        $712 = $711 << 24;
        $713 = (($709) + ($712))|0;
        $714 = $state;
        $715 = ((($714)) + 24|0);
        HEAP32[$715>>2] = $713;
        $716 = $1;
        $717 = ((($716)) + 48|0);
        HEAP32[$717>>2] = $713;
        $hold = 0;
        $bits = 0;
        $718 = $state;
        HEAP32[$718>>2] = 10;
        label = 129;
        break;
       }
       case 10:  {
        label = 129;
        break;
       }
       case 11:  {
        label = 132;
        break;
       }
       case 12:  {
        label = 133;
        break;
       }
       case 13:  {
        $806 = $bits;
        $807 = $806 & 7;
        $808 = $hold;
        $809 = $808 >>> $807;
        $hold = $809;
        $810 = $bits;
        $811 = $810 & 7;
        $812 = $bits;
        $813 = (($812) - ($811))|0;
        $bits = $813;
        while(1) {
         $814 = $bits;
         $815 = ($814>>>0)<(32);
         if (!($815)) {
          break;
         }
         $816 = $have;
         $817 = ($816|0)==(0);
         if ($817) {
          break L11;
         }
         $818 = $have;
         $819 = (($818) + -1)|0;
         $have = $819;
         $820 = $next;
         $821 = ((($820)) + 1|0);
         $next = $821;
         $822 = HEAP8[$820>>0]|0;
         $823 = $822&255;
         $824 = $bits;
         $825 = $823 << $824;
         $826 = $hold;
         $827 = (($826) + ($825))|0;
         $hold = $827;
         $828 = $bits;
         $829 = (($828) + 8)|0;
         $bits = $829;
        }
        $830 = $hold;
        $831 = $830 & 65535;
        $832 = $hold;
        $833 = $832 >>> 16;
        $834 = $833 ^ 65535;
        $835 = ($831|0)!=($834|0);
        if ($835) {
         $836 = $1;
         $837 = ((($836)) + 24|0);
         HEAP32[$837>>2] = 19439;
         $838 = $state;
         HEAP32[$838>>2] = 29;
         continue L11;
        } else {
         $839 = $hold;
         $840 = $839 & 65535;
         $841 = $state;
         $842 = ((($841)) + 64|0);
         HEAP32[$842>>2] = $840;
         $hold = 0;
         $bits = 0;
         $843 = $state;
         HEAP32[$843>>2] = 14;
         $844 = $2;
         $845 = ($844|0)==(6);
         if ($845) {
          break L11;
         } else {
          label = 153;
          break L13;
         }
        }
        break;
       }
       case 14:  {
        label = 153;
        break;
       }
       case 15:  {
        label = 154;
        break;
       }
       case 16:  {
        while(1) {
         $883 = $bits;
         $884 = ($883>>>0)<(14);
         if (!($884)) {
          break;
         }
         $885 = $have;
         $886 = ($885|0)==(0);
         if ($886) {
          break L11;
         }
         $887 = $have;
         $888 = (($887) + -1)|0;
         $have = $888;
         $889 = $next;
         $890 = ((($889)) + 1|0);
         $next = $890;
         $891 = HEAP8[$889>>0]|0;
         $892 = $891&255;
         $893 = $bits;
         $894 = $892 << $893;
         $895 = $hold;
         $896 = (($895) + ($894))|0;
         $hold = $896;
         $897 = $bits;
         $898 = (($897) + 8)|0;
         $bits = $898;
        }
        $899 = $hold;
        $900 = $899 & 31;
        $901 = (($900) + 257)|0;
        $902 = $state;
        $903 = ((($902)) + 96|0);
        HEAP32[$903>>2] = $901;
        $904 = $hold;
        $905 = $904 >>> 5;
        $hold = $905;
        $906 = $bits;
        $907 = (($906) - 5)|0;
        $bits = $907;
        $908 = $hold;
        $909 = $908 & 31;
        $910 = (($909) + 1)|0;
        $911 = $state;
        $912 = ((($911)) + 100|0);
        HEAP32[$912>>2] = $910;
        $913 = $hold;
        $914 = $913 >>> 5;
        $hold = $914;
        $915 = $bits;
        $916 = (($915) - 5)|0;
        $bits = $916;
        $917 = $hold;
        $918 = $917 & 15;
        $919 = (($918) + 4)|0;
        $920 = $state;
        $921 = ((($920)) + 92|0);
        HEAP32[$921>>2] = $919;
        $922 = $hold;
        $923 = $922 >>> 4;
        $hold = $923;
        $924 = $bits;
        $925 = (($924) - 4)|0;
        $bits = $925;
        $926 = $state;
        $927 = ((($926)) + 96|0);
        $928 = HEAP32[$927>>2]|0;
        $929 = ($928>>>0)>(286);
        if (!($929)) {
         $930 = $state;
         $931 = ((($930)) + 100|0);
         $932 = HEAP32[$931>>2]|0;
         $933 = ($932>>>0)>(30);
         if (!($933)) {
          $937 = $state;
          $938 = ((($937)) + 104|0);
          HEAP32[$938>>2] = 0;
          $939 = $state;
          HEAP32[$939>>2] = 17;
          label = 169;
          break L13;
         }
        }
        $934 = $1;
        $935 = ((($934)) + 24|0);
        HEAP32[$935>>2] = 19468;
        $936 = $state;
        HEAP32[$936>>2] = 29;
        continue L11;
        break;
       }
       case 17:  {
        label = 169;
        break;
       }
       case 18:  {
        label = 179;
        break;
       }
       case 19:  {
        label = 213;
        break;
       }
       case 20:  {
        label = 214;
        break;
       }
       case 21:  {
        label = 235;
        break;
       }
       case 22:  {
        label = 241;
        break;
       }
       case 23:  {
        label = 253;
        break;
       }
       case 24:  {
        break;
       }
       case 25:  {
        $1848 = $left;
        $1849 = ($1848|0)==(0);
        if ($1849) {
         break L11;
        }
        $1850 = $state;
        $1851 = ((($1850)) + 64|0);
        $1852 = HEAP32[$1851>>2]|0;
        $1853 = $1852&255;
        $1854 = $put;
        $1855 = ((($1854)) + 1|0);
        $put = $1855;
        HEAP8[$1854>>0] = $1853;
        $1856 = $left;
        $1857 = (($1856) + -1)|0;
        $left = $1857;
        $1858 = $state;
        HEAP32[$1858>>2] = 20;
        continue L11;
        break;
       }
       case 26:  {
        $1859 = $state;
        $1860 = ((($1859)) + 8|0);
        $1861 = HEAP32[$1860>>2]|0;
        $1862 = ($1861|0)!=(0);
        do {
         if ($1862) {
          while(1) {
           $1863 = $bits;
           $1864 = ($1863>>>0)<(32);
           if (!($1864)) {
            break;
           }
           $1865 = $have;
           $1866 = ($1865|0)==(0);
           if ($1866) {
            break L11;
           }
           $1867 = $have;
           $1868 = (($1867) + -1)|0;
           $have = $1868;
           $1869 = $next;
           $1870 = ((($1869)) + 1|0);
           $next = $1870;
           $1871 = HEAP8[$1869>>0]|0;
           $1872 = $1871&255;
           $1873 = $bits;
           $1874 = $1872 << $1873;
           $1875 = $hold;
           $1876 = (($1875) + ($1874))|0;
           $hold = $1876;
           $1877 = $bits;
           $1878 = (($1877) + 8)|0;
           $bits = $1878;
          }
          $1879 = $left;
          $1880 = $out;
          $1881 = (($1880) - ($1879))|0;
          $out = $1881;
          $1882 = $out;
          $1883 = $1;
          $1884 = ((($1883)) + 20|0);
          $1885 = HEAP32[$1884>>2]|0;
          $1886 = (($1885) + ($1882))|0;
          HEAP32[$1884>>2] = $1886;
          $1887 = $out;
          $1888 = $state;
          $1889 = ((($1888)) + 28|0);
          $1890 = HEAP32[$1889>>2]|0;
          $1891 = (($1890) + ($1887))|0;
          HEAP32[$1889>>2] = $1891;
          $1892 = $out;
          $1893 = ($1892|0)!=(0);
          if ($1893) {
           $1894 = $state;
           $1895 = ((($1894)) + 16|0);
           $1896 = HEAP32[$1895>>2]|0;
           $1897 = ($1896|0)!=(0);
           $1898 = $state;
           $1899 = ((($1898)) + 24|0);
           $1900 = HEAP32[$1899>>2]|0;
           $1901 = $put;
           $1902 = $out;
           $1903 = (0 - ($1902))|0;
           $1904 = (($1901) + ($1903)|0);
           $1905 = $out;
           if ($1897) {
            $1906 = (_crc32($1900,$1904,$1905)|0);
            $1910 = $1906;
           } else {
            $1907 = (_adler32($1900,$1904,$1905)|0);
            $1910 = $1907;
           }
           $1908 = $state;
           $1909 = ((($1908)) + 24|0);
           HEAP32[$1909>>2] = $1910;
           $1911 = $1;
           $1912 = ((($1911)) + 48|0);
           HEAP32[$1912>>2] = $1910;
          }
          $1913 = $left;
          $out = $1913;
          $1914 = $state;
          $1915 = ((($1914)) + 16|0);
          $1916 = HEAP32[$1915>>2]|0;
          $1917 = ($1916|0)!=(0);
          $1918 = $hold;
          if ($1917) {
           $1936 = $1918;
          } else {
           $1919 = $1918 >>> 24;
           $1920 = $1919 & 255;
           $1921 = $hold;
           $1922 = $1921 >>> 8;
           $1923 = $1922 & 65280;
           $1924 = (($1920) + ($1923))|0;
           $1925 = $hold;
           $1926 = $1925 & 65280;
           $1927 = $1926 << 8;
           $1928 = (($1924) + ($1927))|0;
           $1929 = $hold;
           $1930 = $1929 & 255;
           $1931 = $1930 << 24;
           $1932 = (($1928) + ($1931))|0;
           $1936 = $1932;
          }
          $1933 = $state;
          $1934 = ((($1933)) + 24|0);
          $1935 = HEAP32[$1934>>2]|0;
          $1937 = ($1936|0)!=($1935|0);
          if ($1937) {
           $1938 = $1;
           $1939 = ((($1938)) + 24|0);
           HEAP32[$1939>>2] = 19722;
           $1940 = $state;
           HEAP32[$1940>>2] = 29;
           continue L11;
          } else {
           $hold = 0;
           $bits = 0;
           break;
          }
         }
        } while(0);
        $1941 = $state;
        HEAP32[$1941>>2] = 27;
        label = 293;
        break;
       }
       case 27:  {
        label = 293;
        break;
       }
       default: {
        label = 305;
        break L11;
       }
       }
      } while(0);
      do {
       if ((label|0) == 42) {
        while(1) {
         label = 0;
         $220 = $bits;
         $221 = ($220>>>0)<(32);
         if (!($221)) {
          break;
         }
         $222 = $have;
         $223 = ($222|0)==(0);
         if ($223) {
          break L11;
         }
         $224 = $have;
         $225 = (($224) + -1)|0;
         $have = $225;
         $226 = $next;
         $227 = ((($226)) + 1|0);
         $next = $227;
         $228 = HEAP8[$226>>0]|0;
         $229 = $228&255;
         $230 = $bits;
         $231 = $229 << $230;
         $232 = $hold;
         $233 = (($232) + ($231))|0;
         $hold = $233;
         $234 = $bits;
         $235 = (($234) + 8)|0;
         $bits = $235;
         label = 42;
        }
        $236 = $state;
        $237 = ((($236)) + 32|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = ($238|0)!=(0|0);
        if ($239) {
         $240 = $hold;
         $241 = $state;
         $242 = ((($241)) + 32|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = ((($243)) + 4|0);
         HEAP32[$244>>2] = $240;
        }
        $245 = $state;
        $246 = ((($245)) + 16|0);
        $247 = HEAP32[$246>>2]|0;
        $248 = $247 & 512;
        $249 = ($248|0)!=(0);
        if ($249) {
         $250 = $hold;
         $251 = $250&255;
         HEAP8[$hbuf>>0] = $251;
         $252 = $hold;
         $253 = $252 >>> 8;
         $254 = $253&255;
         $255 = ((($hbuf)) + 1|0);
         HEAP8[$255>>0] = $254;
         $256 = $hold;
         $257 = $256 >>> 16;
         $258 = $257&255;
         $259 = ((($hbuf)) + 2|0);
         HEAP8[$259>>0] = $258;
         $260 = $hold;
         $261 = $260 >>> 24;
         $262 = $261&255;
         $263 = ((($hbuf)) + 3|0);
         HEAP8[$263>>0] = $262;
         $264 = $state;
         $265 = ((($264)) + 24|0);
         $266 = HEAP32[$265>>2]|0;
         $267 = (_crc32($266,$hbuf,4)|0);
         $268 = $state;
         $269 = ((($268)) + 24|0);
         HEAP32[$269>>2] = $267;
        }
        $hold = 0;
        $bits = 0;
        $270 = $state;
        HEAP32[$270>>2] = 3;
        label = 50;
       }
       else if ((label|0) == 129) {
        label = 0;
        $719 = $state;
        $720 = ((($719)) + 12|0);
        $721 = HEAP32[$720>>2]|0;
        $722 = ($721|0)==(0);
        if ($722) {
         label = 130;
         break L11;
        }
        $740 = (_adler32(0,0,0)|0);
        $741 = $state;
        $742 = ((($741)) + 24|0);
        HEAP32[$742>>2] = $740;
        $743 = $1;
        $744 = ((($743)) + 48|0);
        HEAP32[$744>>2] = $740;
        $745 = $state;
        HEAP32[$745>>2] = 11;
        label = 132;
       }
       else if ((label|0) == 153) {
        label = 0;
        $846 = $state;
        HEAP32[$846>>2] = 15;
        label = 154;
       }
       else if ((label|0) == 169) {
        while(1) {
         label = 0;
         $940 = $state;
         $941 = ((($940)) + 104|0);
         $942 = HEAP32[$941>>2]|0;
         $943 = $state;
         $944 = ((($943)) + 92|0);
         $945 = HEAP32[$944>>2]|0;
         $946 = ($942>>>0)<($945>>>0);
         if (!($946)) {
          break;
         }
         while(1) {
          $947 = $bits;
          $948 = ($947>>>0)<(3);
          if (!($948)) {
           break;
          }
          $949 = $have;
          $950 = ($949|0)==(0);
          if ($950) {
           break L11;
          }
          $951 = $have;
          $952 = (($951) + -1)|0;
          $have = $952;
          $953 = $next;
          $954 = ((($953)) + 1|0);
          $next = $954;
          $955 = HEAP8[$953>>0]|0;
          $956 = $955&255;
          $957 = $bits;
          $958 = $956 << $957;
          $959 = $hold;
          $960 = (($959) + ($958))|0;
          $hold = $960;
          $961 = $bits;
          $962 = (($961) + 8)|0;
          $bits = $962;
         }
         $963 = $hold;
         $964 = $963 & 7;
         $965 = $964&65535;
         $966 = $state;
         $967 = ((($966)) + 104|0);
         $968 = HEAP32[$967>>2]|0;
         $969 = (($968) + 1)|0;
         HEAP32[$967>>2] = $969;
         $970 = (11316 + ($968<<1)|0);
         $971 = HEAP16[$970>>1]|0;
         $972 = $971&65535;
         $973 = $state;
         $974 = ((($973)) + 112|0);
         $975 = (($974) + ($972<<1)|0);
         HEAP16[$975>>1] = $965;
         $976 = $hold;
         $977 = $976 >>> 3;
         $hold = $977;
         $978 = $bits;
         $979 = (($978) - 3)|0;
         $bits = $979;
         label = 169;
        }
        while(1) {
         $980 = $state;
         $981 = ((($980)) + 104|0);
         $982 = HEAP32[$981>>2]|0;
         $983 = ($982>>>0)<(19);
         $984 = $state;
         if (!($983)) {
          break;
         }
         $985 = ((($984)) + 104|0);
         $986 = HEAP32[$985>>2]|0;
         $987 = (($986) + 1)|0;
         HEAP32[$985>>2] = $987;
         $988 = (11316 + ($986<<1)|0);
         $989 = HEAP16[$988>>1]|0;
         $990 = $989&65535;
         $991 = $state;
         $992 = ((($991)) + 112|0);
         $993 = (($992) + ($990<<1)|0);
         HEAP16[$993>>1] = 0;
        }
        $994 = ((($984)) + 1328|0);
        $995 = $state;
        $996 = ((($995)) + 108|0);
        HEAP32[$996>>2] = $994;
        $997 = $state;
        $998 = ((($997)) + 108|0);
        $999 = HEAP32[$998>>2]|0;
        $1000 = $state;
        $1001 = ((($1000)) + 76|0);
        HEAP32[$1001>>2] = $999;
        $1002 = $state;
        $1003 = ((($1002)) + 84|0);
        HEAP32[$1003>>2] = 7;
        $1004 = $state;
        $1005 = ((($1004)) + 112|0);
        $1006 = $state;
        $1007 = ((($1006)) + 108|0);
        $1008 = $state;
        $1009 = ((($1008)) + 84|0);
        $1010 = $state;
        $1011 = ((($1010)) + 752|0);
        $1012 = (_inflate_table(0,$1005,19,$1007,$1009,$1011)|0);
        $ret = $1012;
        $1013 = $ret;
        $1014 = ($1013|0)!=(0);
        if ($1014) {
         $1015 = $1;
         $1016 = ((($1015)) + 24|0);
         HEAP32[$1016>>2] = 19504;
         $1017 = $state;
         HEAP32[$1017>>2] = 29;
         continue L11;
        } else {
         $1018 = $state;
         $1019 = ((($1018)) + 104|0);
         HEAP32[$1019>>2] = 0;
         $1020 = $state;
         HEAP32[$1020>>2] = 18;
         label = 179;
         break;
        }
       }
       else if ((label|0) == 293) {
        label = 0;
        $1942 = $state;
        $1943 = ((($1942)) + 8|0);
        $1944 = HEAP32[$1943>>2]|0;
        $1945 = ($1944|0)!=(0);
        if (!($1945)) {
         label = 301;
         break L11;
        }
        $1946 = $state;
        $1947 = ((($1946)) + 16|0);
        $1948 = HEAP32[$1947>>2]|0;
        $1949 = ($1948|0)!=(0);
        if (!($1949)) {
         label = 301;
         break L11;
        }
        while(1) {
         $1950 = $bits;
         $1951 = ($1950>>>0)<(32);
         if (!($1951)) {
          break;
         }
         $1952 = $have;
         $1953 = ($1952|0)==(0);
         if ($1953) {
          break L11;
         }
         $1954 = $have;
         $1955 = (($1954) + -1)|0;
         $have = $1955;
         $1956 = $next;
         $1957 = ((($1956)) + 1|0);
         $next = $1957;
         $1958 = HEAP8[$1956>>0]|0;
         $1959 = $1958&255;
         $1960 = $bits;
         $1961 = $1959 << $1960;
         $1962 = $hold;
         $1963 = (($1962) + ($1961))|0;
         $hold = $1963;
         $1964 = $bits;
         $1965 = (($1964) + 8)|0;
         $bits = $1965;
        }
        $1966 = $hold;
        $1967 = $state;
        $1968 = ((($1967)) + 28|0);
        $1969 = HEAP32[$1968>>2]|0;
        $1970 = ($1966|0)!=($1969|0);
        if (!($1970)) {
         label = 300;
         break L11;
        }
        $1971 = $1;
        $1972 = ((($1971)) + 24|0);
        HEAP32[$1972>>2] = 19743;
        $1973 = $state;
        HEAP32[$1973>>2] = 29;
        continue L11;
       }
      } while(0);
      do {
       if ((label|0) == 50) {
        while(1) {
         label = 0;
         $271 = $bits;
         $272 = ($271>>>0)<(16);
         if (!($272)) {
          break;
         }
         $273 = $have;
         $274 = ($273|0)==(0);
         if ($274) {
          break L11;
         }
         $275 = $have;
         $276 = (($275) + -1)|0;
         $have = $276;
         $277 = $next;
         $278 = ((($277)) + 1|0);
         $next = $278;
         $279 = HEAP8[$277>>0]|0;
         $280 = $279&255;
         $281 = $bits;
         $282 = $280 << $281;
         $283 = $hold;
         $284 = (($283) + ($282))|0;
         $hold = $284;
         $285 = $bits;
         $286 = (($285) + 8)|0;
         $bits = $286;
         label = 50;
        }
        $287 = $state;
        $288 = ((($287)) + 32|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = ($289|0)!=(0|0);
        if ($290) {
         $291 = $hold;
         $292 = $291 & 255;
         $293 = $state;
         $294 = ((($293)) + 32|0);
         $295 = HEAP32[$294>>2]|0;
         $296 = ((($295)) + 8|0);
         HEAP32[$296>>2] = $292;
         $297 = $hold;
         $298 = $297 >>> 8;
         $299 = $state;
         $300 = ((($299)) + 32|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = ((($301)) + 12|0);
         HEAP32[$302>>2] = $298;
        }
        $303 = $state;
        $304 = ((($303)) + 16|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = $305 & 512;
        $307 = ($306|0)!=(0);
        if ($307) {
         $308 = $hold;
         $309 = $308&255;
         HEAP8[$hbuf>>0] = $309;
         $310 = $hold;
         $311 = $310 >>> 8;
         $312 = $311&255;
         $313 = ((($hbuf)) + 1|0);
         HEAP8[$313>>0] = $312;
         $314 = $state;
         $315 = ((($314)) + 24|0);
         $316 = HEAP32[$315>>2]|0;
         $317 = (_crc32($316,$hbuf,2)|0);
         $318 = $state;
         $319 = ((($318)) + 24|0);
         HEAP32[$319>>2] = $317;
        }
        $hold = 0;
        $bits = 0;
        $320 = $state;
        HEAP32[$320>>2] = 4;
        label = 58;
       }
       else if ((label|0) == 132) {
        label = 0;
        $746 = $2;
        $747 = ($746|0)==(5);
        $748 = $2;
        $749 = ($748|0)==(6);
        $or$cond4 = $747 | $749;
        if ($or$cond4) {
         break L11;
        } else {
         label = 133;
        }
       }
       else if ((label|0) == 154) {
        label = 0;
        $847 = $state;
        $848 = ((($847)) + 64|0);
        $849 = HEAP32[$848>>2]|0;
        $copy = $849;
        $850 = $copy;
        $851 = ($850|0)!=(0);
        if (!($851)) {
         $882 = $state;
         HEAP32[$882>>2] = 11;
         continue L11;
        }
        $852 = $copy;
        $853 = $have;
        $854 = ($852>>>0)>($853>>>0);
        if ($854) {
         $855 = $have;
         $copy = $855;
        }
        $856 = $copy;
        $857 = $left;
        $858 = ($856>>>0)>($857>>>0);
        if ($858) {
         $859 = $left;
         $copy = $859;
        }
        $860 = $copy;
        $861 = ($860|0)==(0);
        if ($861) {
         break L11;
        }
        $862 = $put;
        $863 = $next;
        $864 = $copy;
        _memcpy(($862|0),($863|0),($864|0))|0;
        $865 = $copy;
        $866 = $have;
        $867 = (($866) - ($865))|0;
        $have = $867;
        $868 = $copy;
        $869 = $next;
        $870 = (($869) + ($868)|0);
        $next = $870;
        $871 = $copy;
        $872 = $left;
        $873 = (($872) - ($871))|0;
        $left = $873;
        $874 = $copy;
        $875 = $put;
        $876 = (($875) + ($874)|0);
        $put = $876;
        $877 = $copy;
        $878 = $state;
        $879 = ((($878)) + 64|0);
        $880 = HEAP32[$879>>2]|0;
        $881 = (($880) - ($877))|0;
        HEAP32[$879>>2] = $881;
        continue L11;
       }
       else if ((label|0) == 179) {
        L164: while(1) {
         label = 0;
         $1021 = $state;
         $1022 = ((($1021)) + 104|0);
         $1023 = HEAP32[$1022>>2]|0;
         $1024 = $state;
         $1025 = ((($1024)) + 96|0);
         $1026 = HEAP32[$1025>>2]|0;
         $1027 = $state;
         $1028 = ((($1027)) + 100|0);
         $1029 = HEAP32[$1028>>2]|0;
         $1030 = (($1026) + ($1029))|0;
         $1031 = ($1023>>>0)<($1030>>>0);
         if (!($1031)) {
          break;
         }
         while(1) {
          $1032 = $hold;
          $1033 = $state;
          $1034 = ((($1033)) + 84|0);
          $1035 = HEAP32[$1034>>2]|0;
          $1036 = 1 << $1035;
          $1037 = (($1036) - 1)|0;
          $1038 = $1032 & $1037;
          $1039 = $state;
          $1040 = ((($1039)) + 76|0);
          $1041 = HEAP32[$1040>>2]|0;
          $1042 = (($1041) + ($1038<<2)|0);
          ;HEAP16[$here>>1]=HEAP16[$1042>>1]|0;HEAP16[$here+2>>1]=HEAP16[$1042+2>>1]|0;
          $1043 = ((($here)) + 1|0);
          $1044 = HEAP8[$1043>>0]|0;
          $1045 = $1044&255;
          $1046 = $bits;
          $1047 = ($1045>>>0)<=($1046>>>0);
          if ($1047) {
           break;
          }
          $1048 = $have;
          $1049 = ($1048|0)==(0);
          if ($1049) {
           break L11;
          }
          $1050 = $have;
          $1051 = (($1050) + -1)|0;
          $have = $1051;
          $1052 = $next;
          $1053 = ((($1052)) + 1|0);
          $next = $1053;
          $1054 = HEAP8[$1052>>0]|0;
          $1055 = $1054&255;
          $1056 = $bits;
          $1057 = $1055 << $1056;
          $1058 = $hold;
          $1059 = (($1058) + ($1057))|0;
          $hold = $1059;
          $1060 = $bits;
          $1061 = (($1060) + 8)|0;
          $bits = $1061;
         }
         $1062 = ((($here)) + 2|0);
         $1063 = HEAP16[$1062>>1]|0;
         $1064 = $1063&65535;
         $1065 = ($1064|0)<(16);
         if ($1065) {
          $1066 = ((($here)) + 1|0);
          $1067 = HEAP8[$1066>>0]|0;
          $1068 = $1067&255;
          $1069 = $hold;
          $1070 = $1069 >>> $1068;
          $hold = $1070;
          $1071 = ((($here)) + 1|0);
          $1072 = HEAP8[$1071>>0]|0;
          $1073 = $1072&255;
          $1074 = $bits;
          $1075 = (($1074) - ($1073))|0;
          $bits = $1075;
          $1076 = ((($here)) + 2|0);
          $1077 = HEAP16[$1076>>1]|0;
          $1078 = $state;
          $1079 = ((($1078)) + 104|0);
          $1080 = HEAP32[$1079>>2]|0;
          $1081 = (($1080) + 1)|0;
          HEAP32[$1079>>2] = $1081;
          $1082 = $state;
          $1083 = ((($1082)) + 112|0);
          $1084 = (($1083) + ($1080<<1)|0);
          HEAP16[$1084>>1] = $1077;
          label = 179;
          continue;
         }
         $1085 = ((($here)) + 2|0);
         $1086 = HEAP16[$1085>>1]|0;
         $1087 = $1086&65535;
         $1088 = ($1087|0)==(16);
         do {
          if ($1088) {
           while(1) {
            $1089 = $bits;
            $1090 = ((($here)) + 1|0);
            $1091 = HEAP8[$1090>>0]|0;
            $1092 = $1091&255;
            $1093 = (($1092) + 2)|0;
            $1094 = ($1089>>>0)<($1093>>>0);
            if (!($1094)) {
             break;
            }
            $1095 = $have;
            $1096 = ($1095|0)==(0);
            if ($1096) {
             break L11;
            }
            $1097 = $have;
            $1098 = (($1097) + -1)|0;
            $have = $1098;
            $1099 = $next;
            $1100 = ((($1099)) + 1|0);
            $next = $1100;
            $1101 = HEAP8[$1099>>0]|0;
            $1102 = $1101&255;
            $1103 = $bits;
            $1104 = $1102 << $1103;
            $1105 = $hold;
            $1106 = (($1105) + ($1104))|0;
            $hold = $1106;
            $1107 = $bits;
            $1108 = (($1107) + 8)|0;
            $bits = $1108;
           }
           $1109 = ((($here)) + 1|0);
           $1110 = HEAP8[$1109>>0]|0;
           $1111 = $1110&255;
           $1112 = $hold;
           $1113 = $1112 >>> $1111;
           $hold = $1113;
           $1114 = ((($here)) + 1|0);
           $1115 = HEAP8[$1114>>0]|0;
           $1116 = $1115&255;
           $1117 = $bits;
           $1118 = (($1117) - ($1116))|0;
           $bits = $1118;
           $1119 = $state;
           $1120 = ((($1119)) + 104|0);
           $1121 = HEAP32[$1120>>2]|0;
           $1122 = ($1121|0)==(0);
           if ($1122) {
            label = 190;
            break L164;
           }
           $1126 = $state;
           $1127 = ((($1126)) + 104|0);
           $1128 = HEAP32[$1127>>2]|0;
           $1129 = (($1128) - 1)|0;
           $1130 = $state;
           $1131 = ((($1130)) + 112|0);
           $1132 = (($1131) + ($1129<<1)|0);
           $1133 = HEAP16[$1132>>1]|0;
           $1134 = $1133&65535;
           $len = $1134;
           $1135 = $hold;
           $1136 = $1135 & 3;
           $1137 = (3 + ($1136))|0;
           $copy = $1137;
           $1138 = $hold;
           $1139 = $1138 >>> 2;
           $hold = $1139;
           $1140 = $bits;
           $1141 = (($1140) - 2)|0;
           $bits = $1141;
          } else {
           $1142 = ((($here)) + 2|0);
           $1143 = HEAP16[$1142>>1]|0;
           $1144 = $1143&65535;
           $1145 = ($1144|0)==(17);
           if ($1145) {
            while(1) {
             $1146 = $bits;
             $1147 = ((($here)) + 1|0);
             $1148 = HEAP8[$1147>>0]|0;
             $1149 = $1148&255;
             $1150 = (($1149) + 3)|0;
             $1151 = ($1146>>>0)<($1150>>>0);
             if (!($1151)) {
              break;
             }
             $1152 = $have;
             $1153 = ($1152|0)==(0);
             if ($1153) {
              break L11;
             }
             $1154 = $have;
             $1155 = (($1154) + -1)|0;
             $have = $1155;
             $1156 = $next;
             $1157 = ((($1156)) + 1|0);
             $next = $1157;
             $1158 = HEAP8[$1156>>0]|0;
             $1159 = $1158&255;
             $1160 = $bits;
             $1161 = $1159 << $1160;
             $1162 = $hold;
             $1163 = (($1162) + ($1161))|0;
             $hold = $1163;
             $1164 = $bits;
             $1165 = (($1164) + 8)|0;
             $bits = $1165;
            }
            $1166 = ((($here)) + 1|0);
            $1167 = HEAP8[$1166>>0]|0;
            $1168 = $1167&255;
            $1169 = $hold;
            $1170 = $1169 >>> $1168;
            $hold = $1170;
            $1171 = ((($here)) + 1|0);
            $1172 = HEAP8[$1171>>0]|0;
            $1173 = $1172&255;
            $1174 = $bits;
            $1175 = (($1174) - ($1173))|0;
            $bits = $1175;
            $len = 0;
            $1176 = $hold;
            $1177 = $1176 & 7;
            $1178 = (3 + ($1177))|0;
            $copy = $1178;
            $1179 = $hold;
            $1180 = $1179 >>> 3;
            $hold = $1180;
            $1181 = $bits;
            $1182 = (($1181) - 3)|0;
            $bits = $1182;
            break;
           } else {
            while(1) {
             $1183 = $bits;
             $1184 = ((($here)) + 1|0);
             $1185 = HEAP8[$1184>>0]|0;
             $1186 = $1185&255;
             $1187 = (($1186) + 7)|0;
             $1188 = ($1183>>>0)<($1187>>>0);
             if (!($1188)) {
              break;
             }
             $1189 = $have;
             $1190 = ($1189|0)==(0);
             if ($1190) {
              break L11;
             }
             $1191 = $have;
             $1192 = (($1191) + -1)|0;
             $have = $1192;
             $1193 = $next;
             $1194 = ((($1193)) + 1|0);
             $next = $1194;
             $1195 = HEAP8[$1193>>0]|0;
             $1196 = $1195&255;
             $1197 = $bits;
             $1198 = $1196 << $1197;
             $1199 = $hold;
             $1200 = (($1199) + ($1198))|0;
             $hold = $1200;
             $1201 = $bits;
             $1202 = (($1201) + 8)|0;
             $bits = $1202;
            }
            $1203 = ((($here)) + 1|0);
            $1204 = HEAP8[$1203>>0]|0;
            $1205 = $1204&255;
            $1206 = $hold;
            $1207 = $1206 >>> $1205;
            $hold = $1207;
            $1208 = ((($here)) + 1|0);
            $1209 = HEAP8[$1208>>0]|0;
            $1210 = $1209&255;
            $1211 = $bits;
            $1212 = (($1211) - ($1210))|0;
            $bits = $1212;
            $len = 0;
            $1213 = $hold;
            $1214 = $1213 & 127;
            $1215 = (11 + ($1214))|0;
            $copy = $1215;
            $1216 = $hold;
            $1217 = $1216 >>> 7;
            $hold = $1217;
            $1218 = $bits;
            $1219 = (($1218) - 7)|0;
            $bits = $1219;
            break;
           }
          }
         } while(0);
         $1220 = $state;
         $1221 = ((($1220)) + 104|0);
         $1222 = HEAP32[$1221>>2]|0;
         $1223 = $copy;
         $1224 = (($1222) + ($1223))|0;
         $1225 = $state;
         $1226 = ((($1225)) + 96|0);
         $1227 = HEAP32[$1226>>2]|0;
         $1228 = $state;
         $1229 = ((($1228)) + 100|0);
         $1230 = HEAP32[$1229>>2]|0;
         $1231 = (($1227) + ($1230))|0;
         $1232 = ($1224>>>0)>($1231>>>0);
         if ($1232) {
          label = 202;
          break;
         }
         while(1) {
          $1236 = $copy;
          $1237 = (($1236) + -1)|0;
          $copy = $1237;
          $1238 = ($1236|0)!=(0);
          if (!($1238)) {
           label = 179;
           continue L164;
          }
          $1239 = $len;
          $1240 = $1239&65535;
          $1241 = $state;
          $1242 = ((($1241)) + 104|0);
          $1243 = HEAP32[$1242>>2]|0;
          $1244 = (($1243) + 1)|0;
          HEAP32[$1242>>2] = $1244;
          $1245 = $state;
          $1246 = ((($1245)) + 112|0);
          $1247 = (($1246) + ($1243<<1)|0);
          HEAP16[$1247>>1] = $1240;
         }
        }
        if ((label|0) == 190) {
         label = 0;
         $1123 = $1;
         $1124 = ((($1123)) + 24|0);
         HEAP32[$1124>>2] = 19529;
         $1125 = $state;
         HEAP32[$1125>>2] = 29;
        }
        else if ((label|0) == 202) {
         label = 0;
         $1233 = $1;
         $1234 = ((($1233)) + 24|0);
         HEAP32[$1234>>2] = 19529;
         $1235 = $state;
         HEAP32[$1235>>2] = 29;
        }
        $1248 = $state;
        $1249 = HEAP32[$1248>>2]|0;
        $1250 = ($1249|0)==(29);
        if ($1250) {
         continue L11;
        }
        $1251 = $state;
        $1252 = ((($1251)) + 112|0);
        $1253 = ((($1252)) + 512|0);
        $1254 = HEAP16[$1253>>1]|0;
        $1255 = $1254&65535;
        $1256 = ($1255|0)==(0);
        if ($1256) {
         $1257 = $1;
         $1258 = ((($1257)) + 24|0);
         HEAP32[$1258>>2] = 19555;
         $1259 = $state;
         HEAP32[$1259>>2] = 29;
         continue L11;
        }
        $1260 = $state;
        $1261 = ((($1260)) + 1328|0);
        $1262 = $state;
        $1263 = ((($1262)) + 108|0);
        HEAP32[$1263>>2] = $1261;
        $1264 = $state;
        $1265 = ((($1264)) + 108|0);
        $1266 = HEAP32[$1265>>2]|0;
        $1267 = $state;
        $1268 = ((($1267)) + 76|0);
        HEAP32[$1268>>2] = $1266;
        $1269 = $state;
        $1270 = ((($1269)) + 84|0);
        HEAP32[$1270>>2] = 9;
        $1271 = $state;
        $1272 = ((($1271)) + 112|0);
        $1273 = $state;
        $1274 = ((($1273)) + 96|0);
        $1275 = HEAP32[$1274>>2]|0;
        $1276 = $state;
        $1277 = ((($1276)) + 108|0);
        $1278 = $state;
        $1279 = ((($1278)) + 84|0);
        $1280 = $state;
        $1281 = ((($1280)) + 752|0);
        $1282 = (_inflate_table(1,$1272,$1275,$1277,$1279,$1281)|0);
        $ret = $1282;
        $1283 = $ret;
        $1284 = ($1283|0)!=(0);
        if ($1284) {
         $1285 = $1;
         $1286 = ((($1285)) + 24|0);
         HEAP32[$1286>>2] = 19592;
         $1287 = $state;
         HEAP32[$1287>>2] = 29;
         continue L11;
        }
        $1288 = $state;
        $1289 = ((($1288)) + 108|0);
        $1290 = HEAP32[$1289>>2]|0;
        $1291 = $state;
        $1292 = ((($1291)) + 80|0);
        HEAP32[$1292>>2] = $1290;
        $1293 = $state;
        $1294 = ((($1293)) + 88|0);
        HEAP32[$1294>>2] = 6;
        $1295 = $state;
        $1296 = ((($1295)) + 112|0);
        $1297 = $state;
        $1298 = ((($1297)) + 96|0);
        $1299 = HEAP32[$1298>>2]|0;
        $1300 = (($1296) + ($1299<<1)|0);
        $1301 = $state;
        $1302 = ((($1301)) + 100|0);
        $1303 = HEAP32[$1302>>2]|0;
        $1304 = $state;
        $1305 = ((($1304)) + 108|0);
        $1306 = $state;
        $1307 = ((($1306)) + 88|0);
        $1308 = $state;
        $1309 = ((($1308)) + 752|0);
        $1310 = (_inflate_table(2,$1300,$1303,$1305,$1307,$1309)|0);
        $ret = $1310;
        $1311 = $ret;
        $1312 = ($1311|0)!=(0);
        if ($1312) {
         $1313 = $1;
         $1314 = ((($1313)) + 24|0);
         HEAP32[$1314>>2] = 19620;
         $1315 = $state;
         HEAP32[$1315>>2] = 29;
         continue L11;
        } else {
         $1316 = $state;
         HEAP32[$1316>>2] = 19;
         $1317 = $2;
         $1318 = ($1317|0)==(6);
         if ($1318) {
          break L11;
         } else {
          label = 213;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       label = 0;
       $321 = $state;
       $322 = ((($321)) + 16|0);
       $323 = HEAP32[$322>>2]|0;
       $324 = $323 & 1024;
       $325 = ($324|0)!=(0);
       if ($325) {
        while(1) {
         $326 = $bits;
         $327 = ($326>>>0)<(16);
         if (!($327)) {
          break;
         }
         $328 = $have;
         $329 = ($328|0)==(0);
         if ($329) {
          break L11;
         }
         $330 = $have;
         $331 = (($330) + -1)|0;
         $have = $331;
         $332 = $next;
         $333 = ((($332)) + 1|0);
         $next = $333;
         $334 = HEAP8[$332>>0]|0;
         $335 = $334&255;
         $336 = $bits;
         $337 = $335 << $336;
         $338 = $hold;
         $339 = (($338) + ($337))|0;
         $hold = $339;
         $340 = $bits;
         $341 = (($340) + 8)|0;
         $bits = $341;
        }
        $342 = $hold;
        $343 = $state;
        $344 = ((($343)) + 64|0);
        HEAP32[$344>>2] = $342;
        $345 = $state;
        $346 = ((($345)) + 32|0);
        $347 = HEAP32[$346>>2]|0;
        $348 = ($347|0)!=(0|0);
        if ($348) {
         $349 = $hold;
         $350 = $state;
         $351 = ((($350)) + 32|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ((($352)) + 20|0);
         HEAP32[$353>>2] = $349;
        }
        $354 = $state;
        $355 = ((($354)) + 16|0);
        $356 = HEAP32[$355>>2]|0;
        $357 = $356 & 512;
        $358 = ($357|0)!=(0);
        if ($358) {
         $359 = $hold;
         $360 = $359&255;
         HEAP8[$hbuf>>0] = $360;
         $361 = $hold;
         $362 = $361 >>> 8;
         $363 = $362&255;
         $364 = ((($hbuf)) + 1|0);
         HEAP8[$364>>0] = $363;
         $365 = $state;
         $366 = ((($365)) + 24|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = (_crc32($367,$hbuf,2)|0);
         $369 = $state;
         $370 = ((($369)) + 24|0);
         HEAP32[$370>>2] = $368;
        }
        $hold = 0;
        $bits = 0;
       } else {
        $371 = $state;
        $372 = ((($371)) + 32|0);
        $373 = HEAP32[$372>>2]|0;
        $374 = ($373|0)!=(0|0);
        if ($374) {
         $375 = $state;
         $376 = ((($375)) + 32|0);
         $377 = HEAP32[$376>>2]|0;
         $378 = ((($377)) + 16|0);
         HEAP32[$378>>2] = 0;
        }
       }
       $379 = $state;
       HEAP32[$379>>2] = 5;
       label = 70;
      }
      else if ((label|0) == 133) {
       label = 0;
       $750 = $state;
       $751 = ((($750)) + 4|0);
       $752 = HEAP32[$751>>2]|0;
       $753 = ($752|0)!=(0);
       if ($753) {
        $754 = $bits;
        $755 = $754 & 7;
        $756 = $hold;
        $757 = $756 >>> $755;
        $hold = $757;
        $758 = $bits;
        $759 = $758 & 7;
        $760 = $bits;
        $761 = (($760) - ($759))|0;
        $bits = $761;
        $762 = $state;
        HEAP32[$762>>2] = 26;
        continue;
       }
       while(1) {
        $763 = $bits;
        $764 = ($763>>>0)<(3);
        if (!($764)) {
         break;
        }
        $765 = $have;
        $766 = ($765|0)==(0);
        if ($766) {
         break L11;
        }
        $767 = $have;
        $768 = (($767) + -1)|0;
        $have = $768;
        $769 = $next;
        $770 = ((($769)) + 1|0);
        $next = $770;
        $771 = HEAP8[$769>>0]|0;
        $772 = $771&255;
        $773 = $bits;
        $774 = $772 << $773;
        $775 = $hold;
        $776 = (($775) + ($774))|0;
        $hold = $776;
        $777 = $bits;
        $778 = (($777) + 8)|0;
        $bits = $778;
       }
       $779 = $hold;
       $780 = $779 & 1;
       $781 = $state;
       $782 = ((($781)) + 4|0);
       HEAP32[$782>>2] = $780;
       $783 = $hold;
       $784 = $783 >>> 1;
       $hold = $784;
       $785 = $bits;
       $786 = (($785) - 1)|0;
       $bits = $786;
       $787 = $hold;
       $788 = $787 & 3;
       switch ($788|0) {
       case 0:  {
        $789 = $state;
        HEAP32[$789>>2] = 13;
        break;
       }
       case 1:  {
        $790 = $state;
        _fixedtables_741($790);
        $791 = $state;
        HEAP32[$791>>2] = 19;
        $792 = $2;
        $793 = ($792|0)==(6);
        if ($793) {
         label = 141;
         break L11;
        }
        break;
       }
       case 2:  {
        $798 = $state;
        HEAP32[$798>>2] = 16;
        break;
       }
       case 3:  {
        $799 = $1;
        $800 = ((($799)) + 24|0);
        HEAP32[$800>>2] = 19420;
        $801 = $state;
        HEAP32[$801>>2] = 29;
        break;
       }
       default: {
        label = 144;
        break L11;
       }
       }
       $802 = $hold;
       $803 = $802 >>> 2;
       $hold = $803;
       $804 = $bits;
       $805 = (($804) - 2)|0;
       $bits = $805;
       continue;
      }
      else if ((label|0) == 213) {
       label = 0;
       $1319 = $state;
       HEAP32[$1319>>2] = 20;
       label = 214;
      }
      do {
       if ((label|0) == 70) {
        label = 0;
        $380 = $state;
        $381 = ((($380)) + 16|0);
        $382 = HEAP32[$381>>2]|0;
        $383 = $382 & 1024;
        $384 = ($383|0)!=(0);
        if ($384) {
         $385 = $state;
         $386 = ((($385)) + 64|0);
         $387 = HEAP32[$386>>2]|0;
         $copy = $387;
         $388 = $copy;
         $389 = $have;
         $390 = ($388>>>0)>($389>>>0);
         if ($390) {
          $391 = $have;
          $copy = $391;
         }
         $392 = $copy;
         $393 = ($392|0)!=(0);
         if ($393) {
          $394 = $state;
          $395 = ((($394)) + 32|0);
          $396 = HEAP32[$395>>2]|0;
          $397 = ($396|0)!=(0|0);
          if ($397) {
           $398 = $state;
           $399 = ((($398)) + 32|0);
           $400 = HEAP32[$399>>2]|0;
           $401 = ((($400)) + 16|0);
           $402 = HEAP32[$401>>2]|0;
           $403 = ($402|0)!=(0|0);
           if ($403) {
            $404 = $state;
            $405 = ((($404)) + 32|0);
            $406 = HEAP32[$405>>2]|0;
            $407 = ((($406)) + 20|0);
            $408 = HEAP32[$407>>2]|0;
            $409 = $state;
            $410 = ((($409)) + 64|0);
            $411 = HEAP32[$410>>2]|0;
            $412 = (($408) - ($411))|0;
            $len = $412;
            $413 = $state;
            $414 = ((($413)) + 32|0);
            $415 = HEAP32[$414>>2]|0;
            $416 = ((($415)) + 16|0);
            $417 = HEAP32[$416>>2]|0;
            $418 = $len;
            $419 = (($417) + ($418)|0);
            $420 = $next;
            $421 = $len;
            $422 = $copy;
            $423 = (($421) + ($422))|0;
            $424 = $state;
            $425 = ((($424)) + 32|0);
            $426 = HEAP32[$425>>2]|0;
            $427 = ((($426)) + 24|0);
            $428 = HEAP32[$427>>2]|0;
            $429 = ($423>>>0)>($428>>>0);
            if ($429) {
             $430 = $state;
             $431 = ((($430)) + 32|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = ((($432)) + 24|0);
             $434 = HEAP32[$433>>2]|0;
             $435 = $len;
             $436 = (($434) - ($435))|0;
             $438 = $436;
            } else {
             $437 = $copy;
             $438 = $437;
            }
            _memcpy(($419|0),($420|0),($438|0))|0;
           }
          }
          $439 = $state;
          $440 = ((($439)) + 16|0);
          $441 = HEAP32[$440>>2]|0;
          $442 = $441 & 512;
          $443 = ($442|0)!=(0);
          if ($443) {
           $444 = $state;
           $445 = ((($444)) + 24|0);
           $446 = HEAP32[$445>>2]|0;
           $447 = $next;
           $448 = $copy;
           $449 = (_crc32($446,$447,$448)|0);
           $450 = $state;
           $451 = ((($450)) + 24|0);
           HEAP32[$451>>2] = $449;
          }
          $452 = $copy;
          $453 = $have;
          $454 = (($453) - ($452))|0;
          $have = $454;
          $455 = $copy;
          $456 = $next;
          $457 = (($456) + ($455)|0);
          $next = $457;
          $458 = $copy;
          $459 = $state;
          $460 = ((($459)) + 64|0);
          $461 = HEAP32[$460>>2]|0;
          $462 = (($461) - ($458))|0;
          HEAP32[$460>>2] = $462;
         }
         $463 = $state;
         $464 = ((($463)) + 64|0);
         $465 = HEAP32[$464>>2]|0;
         $466 = ($465|0)!=(0);
         if ($466) {
          break L11;
         }
        }
        $467 = $state;
        $468 = ((($467)) + 64|0);
        HEAP32[$468>>2] = 0;
        $469 = $state;
        HEAP32[$469>>2] = 6;
        label = 85;
       }
       else if ((label|0) == 214) {
        label = 0;
        $1320 = $have;
        $1321 = ($1320>>>0)>=(6);
        $1322 = $left;
        $1323 = ($1322>>>0)>=(258);
        $or$cond6 = $1321 & $1323;
        if ($or$cond6) {
         $1324 = $put;
         $1325 = $1;
         $1326 = ((($1325)) + 12|0);
         HEAP32[$1326>>2] = $1324;
         $1327 = $left;
         $1328 = $1;
         $1329 = ((($1328)) + 16|0);
         HEAP32[$1329>>2] = $1327;
         $1330 = $next;
         $1331 = $1;
         HEAP32[$1331>>2] = $1330;
         $1332 = $have;
         $1333 = $1;
         $1334 = ((($1333)) + 4|0);
         HEAP32[$1334>>2] = $1332;
         $1335 = $hold;
         $1336 = $state;
         $1337 = ((($1336)) + 56|0);
         HEAP32[$1337>>2] = $1335;
         $1338 = $bits;
         $1339 = $state;
         $1340 = ((($1339)) + 60|0);
         HEAP32[$1340>>2] = $1338;
         $1341 = $1;
         $1342 = $out;
         _inflate_fast($1341,$1342);
         $1343 = $1;
         $1344 = ((($1343)) + 12|0);
         $1345 = HEAP32[$1344>>2]|0;
         $put = $1345;
         $1346 = $1;
         $1347 = ((($1346)) + 16|0);
         $1348 = HEAP32[$1347>>2]|0;
         $left = $1348;
         $1349 = $1;
         $1350 = HEAP32[$1349>>2]|0;
         $next = $1350;
         $1351 = $1;
         $1352 = ((($1351)) + 4|0);
         $1353 = HEAP32[$1352>>2]|0;
         $have = $1353;
         $1354 = $state;
         $1355 = ((($1354)) + 56|0);
         $1356 = HEAP32[$1355>>2]|0;
         $hold = $1356;
         $1357 = $state;
         $1358 = ((($1357)) + 60|0);
         $1359 = HEAP32[$1358>>2]|0;
         $bits = $1359;
         $1360 = $state;
         $1361 = HEAP32[$1360>>2]|0;
         $1362 = ($1361|0)==(11);
         if (!($1362)) {
          continue L11;
         }
         $1363 = $state;
         $1364 = ((($1363)) + 7108|0);
         HEAP32[$1364>>2] = -1;
         continue L11;
        }
        $1365 = $state;
        $1366 = ((($1365)) + 7108|0);
        HEAP32[$1366>>2] = 0;
        while(1) {
         $1367 = $hold;
         $1368 = $state;
         $1369 = ((($1368)) + 84|0);
         $1370 = HEAP32[$1369>>2]|0;
         $1371 = 1 << $1370;
         $1372 = (($1371) - 1)|0;
         $1373 = $1367 & $1372;
         $1374 = $state;
         $1375 = ((($1374)) + 76|0);
         $1376 = HEAP32[$1375>>2]|0;
         $1377 = (($1376) + ($1373<<2)|0);
         ;HEAP16[$here>>1]=HEAP16[$1377>>1]|0;HEAP16[$here+2>>1]=HEAP16[$1377+2>>1]|0;
         $1378 = ((($here)) + 1|0);
         $1379 = HEAP8[$1378>>0]|0;
         $1380 = $1379&255;
         $1381 = $bits;
         $1382 = ($1380>>>0)<=($1381>>>0);
         if ($1382) {
          break;
         }
         $1383 = $have;
         $1384 = ($1383|0)==(0);
         if ($1384) {
          break L11;
         }
         $1385 = $have;
         $1386 = (($1385) + -1)|0;
         $have = $1386;
         $1387 = $next;
         $1388 = ((($1387)) + 1|0);
         $next = $1388;
         $1389 = HEAP8[$1387>>0]|0;
         $1390 = $1389&255;
         $1391 = $bits;
         $1392 = $1390 << $1391;
         $1393 = $hold;
         $1394 = (($1393) + ($1392))|0;
         $hold = $1394;
         $1395 = $bits;
         $1396 = (($1395) + 8)|0;
         $bits = $1396;
        }
        $1397 = HEAP8[$here>>0]|0;
        $1398 = $1397&255;
        $1399 = ($1398|0)!=(0);
        if ($1399) {
         $1400 = HEAP8[$here>>0]|0;
         $1401 = $1400&255;
         $1402 = $1401 & 240;
         $1403 = ($1402|0)==(0);
         if ($1403) {
          ;HEAP16[$last>>1]=HEAP16[$here>>1]|0;HEAP16[$last+2>>1]=HEAP16[$here+2>>1]|0;
          while(1) {
           $1404 = ((($last)) + 2|0);
           $1405 = HEAP16[$1404>>1]|0;
           $1406 = $1405&65535;
           $1407 = $hold;
           $1408 = ((($last)) + 1|0);
           $1409 = HEAP8[$1408>>0]|0;
           $1410 = $1409&255;
           $1411 = HEAP8[$last>>0]|0;
           $1412 = $1411&255;
           $1413 = (($1410) + ($1412))|0;
           $1414 = 1 << $1413;
           $1415 = (($1414) - 1)|0;
           $1416 = $1407 & $1415;
           $1417 = ((($last)) + 1|0);
           $1418 = HEAP8[$1417>>0]|0;
           $1419 = $1418&255;
           $1420 = $1416 >>> $1419;
           $1421 = (($1406) + ($1420))|0;
           $1422 = $state;
           $1423 = ((($1422)) + 76|0);
           $1424 = HEAP32[$1423>>2]|0;
           $1425 = (($1424) + ($1421<<2)|0);
           ;HEAP16[$here>>1]=HEAP16[$1425>>1]|0;HEAP16[$here+2>>1]=HEAP16[$1425+2>>1]|0;
           $1426 = ((($last)) + 1|0);
           $1427 = HEAP8[$1426>>0]|0;
           $1428 = $1427&255;
           $1429 = ((($here)) + 1|0);
           $1430 = HEAP8[$1429>>0]|0;
           $1431 = $1430&255;
           $1432 = (($1428) + ($1431))|0;
           $1433 = $bits;
           $1434 = ($1432>>>0)<=($1433>>>0);
           if ($1434) {
            break;
           }
           $1435 = $have;
           $1436 = ($1435|0)==(0);
           if ($1436) {
            break L11;
           }
           $1437 = $have;
           $1438 = (($1437) + -1)|0;
           $have = $1438;
           $1439 = $next;
           $1440 = ((($1439)) + 1|0);
           $next = $1440;
           $1441 = HEAP8[$1439>>0]|0;
           $1442 = $1441&255;
           $1443 = $bits;
           $1444 = $1442 << $1443;
           $1445 = $hold;
           $1446 = (($1445) + ($1444))|0;
           $hold = $1446;
           $1447 = $bits;
           $1448 = (($1447) + 8)|0;
           $bits = $1448;
          }
          $1449 = ((($last)) + 1|0);
          $1450 = HEAP8[$1449>>0]|0;
          $1451 = $1450&255;
          $1452 = $hold;
          $1453 = $1452 >>> $1451;
          $hold = $1453;
          $1454 = ((($last)) + 1|0);
          $1455 = HEAP8[$1454>>0]|0;
          $1456 = $1455&255;
          $1457 = $bits;
          $1458 = (($1457) - ($1456))|0;
          $bits = $1458;
          $1459 = ((($last)) + 1|0);
          $1460 = HEAP8[$1459>>0]|0;
          $1461 = $1460&255;
          $1462 = $state;
          $1463 = ((($1462)) + 7108|0);
          $1464 = HEAP32[$1463>>2]|0;
          $1465 = (($1464) + ($1461))|0;
          HEAP32[$1463>>2] = $1465;
         }
        }
        $1466 = ((($here)) + 1|0);
        $1467 = HEAP8[$1466>>0]|0;
        $1468 = $1467&255;
        $1469 = $hold;
        $1470 = $1469 >>> $1468;
        $hold = $1470;
        $1471 = ((($here)) + 1|0);
        $1472 = HEAP8[$1471>>0]|0;
        $1473 = $1472&255;
        $1474 = $bits;
        $1475 = (($1474) - ($1473))|0;
        $bits = $1475;
        $1476 = ((($here)) + 1|0);
        $1477 = HEAP8[$1476>>0]|0;
        $1478 = $1477&255;
        $1479 = $state;
        $1480 = ((($1479)) + 7108|0);
        $1481 = HEAP32[$1480>>2]|0;
        $1482 = (($1481) + ($1478))|0;
        HEAP32[$1480>>2] = $1482;
        $1483 = ((($here)) + 2|0);
        $1484 = HEAP16[$1483>>1]|0;
        $1485 = $1484&65535;
        $1486 = $state;
        $1487 = ((($1486)) + 64|0);
        HEAP32[$1487>>2] = $1485;
        $1488 = HEAP8[$here>>0]|0;
        $1489 = $1488&255;
        $1490 = ($1489|0)==(0);
        if ($1490) {
         $1491 = $state;
         HEAP32[$1491>>2] = 25;
         continue L11;
        }
        $1492 = HEAP8[$here>>0]|0;
        $1493 = $1492&255;
        $1494 = $1493 & 32;
        $1495 = ($1494|0)!=(0);
        if ($1495) {
         $1496 = $state;
         $1497 = ((($1496)) + 7108|0);
         HEAP32[$1497>>2] = -1;
         $1498 = $state;
         HEAP32[$1498>>2] = 11;
         continue L11;
        }
        $1499 = HEAP8[$here>>0]|0;
        $1500 = $1499&255;
        $1501 = $1500 & 64;
        $1502 = ($1501|0)!=(0);
        if ($1502) {
         $1503 = $1;
         $1504 = ((($1503)) + 24|0);
         HEAP32[$1504>>2] = 19642;
         $1505 = $state;
         HEAP32[$1505>>2] = 29;
         continue L11;
        } else {
         $1506 = HEAP8[$here>>0]|0;
         $1507 = $1506&255;
         $1508 = $1507 & 15;
         $1509 = $state;
         $1510 = ((($1509)) + 72|0);
         HEAP32[$1510>>2] = $1508;
         $1511 = $state;
         HEAP32[$1511>>2] = 21;
         label = 235;
         break;
        }
       }
      } while(0);
      if ((label|0) == 85) {
       label = 0;
       $470 = $state;
       $471 = ((($470)) + 16|0);
       $472 = HEAP32[$471>>2]|0;
       $473 = $472 & 2048;
       $474 = ($473|0)!=(0);
       if ($474) {
        $475 = $have;
        $476 = ($475|0)==(0);
        if ($476) {
         break;
        }
        $copy = 0;
        while(1) {
         $477 = $copy;
         $478 = (($477) + 1)|0;
         $copy = $478;
         $479 = $next;
         $480 = (($479) + ($477)|0);
         $481 = HEAP8[$480>>0]|0;
         $482 = $481&255;
         $len = $482;
         $483 = $state;
         $484 = ((($483)) + 32|0);
         $485 = HEAP32[$484>>2]|0;
         $486 = ($485|0)!=(0|0);
         if ($486) {
          $487 = $state;
          $488 = ((($487)) + 32|0);
          $489 = HEAP32[$488>>2]|0;
          $490 = ((($489)) + 28|0);
          $491 = HEAP32[$490>>2]|0;
          $492 = ($491|0)!=(0|0);
          if ($492) {
           $493 = $state;
           $494 = ((($493)) + 64|0);
           $495 = HEAP32[$494>>2]|0;
           $496 = $state;
           $497 = ((($496)) + 32|0);
           $498 = HEAP32[$497>>2]|0;
           $499 = ((($498)) + 32|0);
           $500 = HEAP32[$499>>2]|0;
           $501 = ($495>>>0)<($500>>>0);
           if ($501) {
            $502 = $len;
            $503 = $502&255;
            $504 = $state;
            $505 = ((($504)) + 64|0);
            $506 = HEAP32[$505>>2]|0;
            $507 = (($506) + 1)|0;
            HEAP32[$505>>2] = $507;
            $508 = $state;
            $509 = ((($508)) + 32|0);
            $510 = HEAP32[$509>>2]|0;
            $511 = ((($510)) + 28|0);
            $512 = HEAP32[$511>>2]|0;
            $513 = (($512) + ($506)|0);
            HEAP8[$513>>0] = $503;
           }
          }
         }
         $514 = $len;
         $515 = ($514|0)!=(0);
         if (!($515)) {
          break;
         }
         $516 = $copy;
         $517 = $have;
         $518 = ($516>>>0)<($517>>>0);
         if (!($518)) {
          break;
         }
        }
        $519 = $state;
        $520 = ((($519)) + 16|0);
        $521 = HEAP32[$520>>2]|0;
        $522 = $521 & 512;
        $523 = ($522|0)!=(0);
        if ($523) {
         $524 = $state;
         $525 = ((($524)) + 24|0);
         $526 = HEAP32[$525>>2]|0;
         $527 = $next;
         $528 = $copy;
         $529 = (_crc32($526,$527,$528)|0);
         $530 = $state;
         $531 = ((($530)) + 24|0);
         HEAP32[$531>>2] = $529;
        }
        $532 = $copy;
        $533 = $have;
        $534 = (($533) - ($532))|0;
        $have = $534;
        $535 = $copy;
        $536 = $next;
        $537 = (($536) + ($535)|0);
        $next = $537;
        $538 = $len;
        $539 = ($538|0)!=(0);
        if ($539) {
         break;
        }
       } else {
        $540 = $state;
        $541 = ((($540)) + 32|0);
        $542 = HEAP32[$541>>2]|0;
        $543 = ($542|0)!=(0|0);
        if ($543) {
         $544 = $state;
         $545 = ((($544)) + 32|0);
         $546 = HEAP32[$545>>2]|0;
         $547 = ((($546)) + 28|0);
         HEAP32[$547>>2] = 0;
        }
       }
       $548 = $state;
       $549 = ((($548)) + 64|0);
       HEAP32[$549>>2] = 0;
       $550 = $state;
       HEAP32[$550>>2] = 7;
       label = 100;
      }
      else if ((label|0) == 235) {
       label = 0;
       $1512 = $state;
       $1513 = ((($1512)) + 72|0);
       $1514 = HEAP32[$1513>>2]|0;
       $1515 = ($1514|0)!=(0);
       if ($1515) {
        while(1) {
         $1516 = $bits;
         $1517 = $state;
         $1518 = ((($1517)) + 72|0);
         $1519 = HEAP32[$1518>>2]|0;
         $1520 = ($1516>>>0)<($1519>>>0);
         if (!($1520)) {
          break;
         }
         $1521 = $have;
         $1522 = ($1521|0)==(0);
         if ($1522) {
          break L11;
         }
         $1523 = $have;
         $1524 = (($1523) + -1)|0;
         $have = $1524;
         $1525 = $next;
         $1526 = ((($1525)) + 1|0);
         $next = $1526;
         $1527 = HEAP8[$1525>>0]|0;
         $1528 = $1527&255;
         $1529 = $bits;
         $1530 = $1528 << $1529;
         $1531 = $hold;
         $1532 = (($1531) + ($1530))|0;
         $hold = $1532;
         $1533 = $bits;
         $1534 = (($1533) + 8)|0;
         $bits = $1534;
        }
        $1535 = $hold;
        $1536 = $state;
        $1537 = ((($1536)) + 72|0);
        $1538 = HEAP32[$1537>>2]|0;
        $1539 = 1 << $1538;
        $1540 = (($1539) - 1)|0;
        $1541 = $1535 & $1540;
        $1542 = $state;
        $1543 = ((($1542)) + 64|0);
        $1544 = HEAP32[$1543>>2]|0;
        $1545 = (($1544) + ($1541))|0;
        HEAP32[$1543>>2] = $1545;
        $1546 = $state;
        $1547 = ((($1546)) + 72|0);
        $1548 = HEAP32[$1547>>2]|0;
        $1549 = $hold;
        $1550 = $1549 >>> $1548;
        $hold = $1550;
        $1551 = $state;
        $1552 = ((($1551)) + 72|0);
        $1553 = HEAP32[$1552>>2]|0;
        $1554 = $bits;
        $1555 = (($1554) - ($1553))|0;
        $bits = $1555;
        $1556 = $state;
        $1557 = ((($1556)) + 72|0);
        $1558 = HEAP32[$1557>>2]|0;
        $1559 = $state;
        $1560 = ((($1559)) + 7108|0);
        $1561 = HEAP32[$1560>>2]|0;
        $1562 = (($1561) + ($1558))|0;
        HEAP32[$1560>>2] = $1562;
       }
       $1563 = $state;
       $1564 = ((($1563)) + 64|0);
       $1565 = HEAP32[$1564>>2]|0;
       $1566 = $state;
       $1567 = ((($1566)) + 7112|0);
       HEAP32[$1567>>2] = $1565;
       $1568 = $state;
       HEAP32[$1568>>2] = 22;
       label = 241;
      }
      do {
       if ((label|0) == 100) {
        label = 0;
        $551 = $state;
        $552 = ((($551)) + 16|0);
        $553 = HEAP32[$552>>2]|0;
        $554 = $553 & 4096;
        $555 = ($554|0)!=(0);
        if ($555) {
         $556 = $have;
         $557 = ($556|0)==(0);
         if ($557) {
          break L11;
         }
         $copy = 0;
         while(1) {
          $558 = $copy;
          $559 = (($558) + 1)|0;
          $copy = $559;
          $560 = $next;
          $561 = (($560) + ($558)|0);
          $562 = HEAP8[$561>>0]|0;
          $563 = $562&255;
          $len = $563;
          $564 = $state;
          $565 = ((($564)) + 32|0);
          $566 = HEAP32[$565>>2]|0;
          $567 = ($566|0)!=(0|0);
          if ($567) {
           $568 = $state;
           $569 = ((($568)) + 32|0);
           $570 = HEAP32[$569>>2]|0;
           $571 = ((($570)) + 36|0);
           $572 = HEAP32[$571>>2]|0;
           $573 = ($572|0)!=(0|0);
           if ($573) {
            $574 = $state;
            $575 = ((($574)) + 64|0);
            $576 = HEAP32[$575>>2]|0;
            $577 = $state;
            $578 = ((($577)) + 32|0);
            $579 = HEAP32[$578>>2]|0;
            $580 = ((($579)) + 40|0);
            $581 = HEAP32[$580>>2]|0;
            $582 = ($576>>>0)<($581>>>0);
            if ($582) {
             $583 = $len;
             $584 = $583&255;
             $585 = $state;
             $586 = ((($585)) + 64|0);
             $587 = HEAP32[$586>>2]|0;
             $588 = (($587) + 1)|0;
             HEAP32[$586>>2] = $588;
             $589 = $state;
             $590 = ((($589)) + 32|0);
             $591 = HEAP32[$590>>2]|0;
             $592 = ((($591)) + 36|0);
             $593 = HEAP32[$592>>2]|0;
             $594 = (($593) + ($587)|0);
             HEAP8[$594>>0] = $584;
            }
           }
          }
          $595 = $len;
          $596 = ($595|0)!=(0);
          if (!($596)) {
           break;
          }
          $597 = $copy;
          $598 = $have;
          $599 = ($597>>>0)<($598>>>0);
          if (!($599)) {
           break;
          }
         }
         $600 = $state;
         $601 = ((($600)) + 16|0);
         $602 = HEAP32[$601>>2]|0;
         $603 = $602 & 512;
         $604 = ($603|0)!=(0);
         if ($604) {
          $605 = $state;
          $606 = ((($605)) + 24|0);
          $607 = HEAP32[$606>>2]|0;
          $608 = $next;
          $609 = $copy;
          $610 = (_crc32($607,$608,$609)|0);
          $611 = $state;
          $612 = ((($611)) + 24|0);
          HEAP32[$612>>2] = $610;
         }
         $613 = $copy;
         $614 = $have;
         $615 = (($614) - ($613))|0;
         $have = $615;
         $616 = $copy;
         $617 = $next;
         $618 = (($617) + ($616)|0);
         $next = $618;
         $619 = $len;
         $620 = ($619|0)!=(0);
         if ($620) {
          break L11;
         }
        } else {
         $621 = $state;
         $622 = ((($621)) + 32|0);
         $623 = HEAP32[$622>>2]|0;
         $624 = ($623|0)!=(0|0);
         if ($624) {
          $625 = $state;
          $626 = ((($625)) + 32|0);
          $627 = HEAP32[$626>>2]|0;
          $628 = ((($627)) + 36|0);
          HEAP32[$628>>2] = 0;
         }
        }
        $629 = $state;
        HEAP32[$629>>2] = 8;
        label = 115;
       }
       else if ((label|0) == 241) {
        while(1) {
         label = 0;
         $1569 = $hold;
         $1570 = $state;
         $1571 = ((($1570)) + 88|0);
         $1572 = HEAP32[$1571>>2]|0;
         $1573 = 1 << $1572;
         $1574 = (($1573) - 1)|0;
         $1575 = $1569 & $1574;
         $1576 = $state;
         $1577 = ((($1576)) + 80|0);
         $1578 = HEAP32[$1577>>2]|0;
         $1579 = (($1578) + ($1575<<2)|0);
         ;HEAP16[$here>>1]=HEAP16[$1579>>1]|0;HEAP16[$here+2>>1]=HEAP16[$1579+2>>1]|0;
         $1580 = ((($here)) + 1|0);
         $1581 = HEAP8[$1580>>0]|0;
         $1582 = $1581&255;
         $1583 = $bits;
         $1584 = ($1582>>>0)<=($1583>>>0);
         if ($1584) {
          break;
         }
         $1585 = $have;
         $1586 = ($1585|0)==(0);
         if ($1586) {
          break L11;
         }
         $1587 = $have;
         $1588 = (($1587) + -1)|0;
         $have = $1588;
         $1589 = $next;
         $1590 = ((($1589)) + 1|0);
         $next = $1590;
         $1591 = HEAP8[$1589>>0]|0;
         $1592 = $1591&255;
         $1593 = $bits;
         $1594 = $1592 << $1593;
         $1595 = $hold;
         $1596 = (($1595) + ($1594))|0;
         $hold = $1596;
         $1597 = $bits;
         $1598 = (($1597) + 8)|0;
         $bits = $1598;
         label = 241;
        }
        $1599 = HEAP8[$here>>0]|0;
        $1600 = $1599&255;
        $1601 = $1600 & 240;
        $1602 = ($1601|0)==(0);
        if ($1602) {
         ;HEAP16[$last>>1]=HEAP16[$here>>1]|0;HEAP16[$last+2>>1]=HEAP16[$here+2>>1]|0;
         while(1) {
          $1603 = ((($last)) + 2|0);
          $1604 = HEAP16[$1603>>1]|0;
          $1605 = $1604&65535;
          $1606 = $hold;
          $1607 = ((($last)) + 1|0);
          $1608 = HEAP8[$1607>>0]|0;
          $1609 = $1608&255;
          $1610 = HEAP8[$last>>0]|0;
          $1611 = $1610&255;
          $1612 = (($1609) + ($1611))|0;
          $1613 = 1 << $1612;
          $1614 = (($1613) - 1)|0;
          $1615 = $1606 & $1614;
          $1616 = ((($last)) + 1|0);
          $1617 = HEAP8[$1616>>0]|0;
          $1618 = $1617&255;
          $1619 = $1615 >>> $1618;
          $1620 = (($1605) + ($1619))|0;
          $1621 = $state;
          $1622 = ((($1621)) + 80|0);
          $1623 = HEAP32[$1622>>2]|0;
          $1624 = (($1623) + ($1620<<2)|0);
          ;HEAP16[$here>>1]=HEAP16[$1624>>1]|0;HEAP16[$here+2>>1]=HEAP16[$1624+2>>1]|0;
          $1625 = ((($last)) + 1|0);
          $1626 = HEAP8[$1625>>0]|0;
          $1627 = $1626&255;
          $1628 = ((($here)) + 1|0);
          $1629 = HEAP8[$1628>>0]|0;
          $1630 = $1629&255;
          $1631 = (($1627) + ($1630))|0;
          $1632 = $bits;
          $1633 = ($1631>>>0)<=($1632>>>0);
          if ($1633) {
           break;
          }
          $1634 = $have;
          $1635 = ($1634|0)==(0);
          if ($1635) {
           break L11;
          }
          $1636 = $have;
          $1637 = (($1636) + -1)|0;
          $have = $1637;
          $1638 = $next;
          $1639 = ((($1638)) + 1|0);
          $next = $1639;
          $1640 = HEAP8[$1638>>0]|0;
          $1641 = $1640&255;
          $1642 = $bits;
          $1643 = $1641 << $1642;
          $1644 = $hold;
          $1645 = (($1644) + ($1643))|0;
          $hold = $1645;
          $1646 = $bits;
          $1647 = (($1646) + 8)|0;
          $bits = $1647;
         }
         $1648 = ((($last)) + 1|0);
         $1649 = HEAP8[$1648>>0]|0;
         $1650 = $1649&255;
         $1651 = $hold;
         $1652 = $1651 >>> $1650;
         $hold = $1652;
         $1653 = ((($last)) + 1|0);
         $1654 = HEAP8[$1653>>0]|0;
         $1655 = $1654&255;
         $1656 = $bits;
         $1657 = (($1656) - ($1655))|0;
         $bits = $1657;
         $1658 = ((($last)) + 1|0);
         $1659 = HEAP8[$1658>>0]|0;
         $1660 = $1659&255;
         $1661 = $state;
         $1662 = ((($1661)) + 7108|0);
         $1663 = HEAP32[$1662>>2]|0;
         $1664 = (($1663) + ($1660))|0;
         HEAP32[$1662>>2] = $1664;
        }
        $1665 = ((($here)) + 1|0);
        $1666 = HEAP8[$1665>>0]|0;
        $1667 = $1666&255;
        $1668 = $hold;
        $1669 = $1668 >>> $1667;
        $hold = $1669;
        $1670 = ((($here)) + 1|0);
        $1671 = HEAP8[$1670>>0]|0;
        $1672 = $1671&255;
        $1673 = $bits;
        $1674 = (($1673) - ($1672))|0;
        $bits = $1674;
        $1675 = ((($here)) + 1|0);
        $1676 = HEAP8[$1675>>0]|0;
        $1677 = $1676&255;
        $1678 = $state;
        $1679 = ((($1678)) + 7108|0);
        $1680 = HEAP32[$1679>>2]|0;
        $1681 = (($1680) + ($1677))|0;
        HEAP32[$1679>>2] = $1681;
        $1682 = HEAP8[$here>>0]|0;
        $1683 = $1682&255;
        $1684 = $1683 & 64;
        $1685 = ($1684|0)!=(0);
        if ($1685) {
         $1686 = $1;
         $1687 = ((($1686)) + 24|0);
         HEAP32[$1687>>2] = 19670;
         $1688 = $state;
         HEAP32[$1688>>2] = 29;
         continue L11;
        } else {
         $1689 = ((($here)) + 2|0);
         $1690 = HEAP16[$1689>>1]|0;
         $1691 = $1690&65535;
         $1692 = $state;
         $1693 = ((($1692)) + 68|0);
         HEAP32[$1693>>2] = $1691;
         $1694 = HEAP8[$here>>0]|0;
         $1695 = $1694&255;
         $1696 = $1695 & 15;
         $1697 = $state;
         $1698 = ((($1697)) + 72|0);
         HEAP32[$1698>>2] = $1696;
         $1699 = $state;
         HEAP32[$1699>>2] = 23;
         label = 253;
         break;
        }
       }
      } while(0);
      if ((label|0) == 115) {
       label = 0;
       $630 = $state;
       $631 = ((($630)) + 16|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = $632 & 512;
       $634 = ($633|0)!=(0);
       do {
        if ($634) {
         while(1) {
          $635 = $bits;
          $636 = ($635>>>0)<(16);
          if (!($636)) {
           break;
          }
          $637 = $have;
          $638 = ($637|0)==(0);
          if ($638) {
           break L11;
          }
          $639 = $have;
          $640 = (($639) + -1)|0;
          $have = $640;
          $641 = $next;
          $642 = ((($641)) + 1|0);
          $next = $642;
          $643 = HEAP8[$641>>0]|0;
          $644 = $643&255;
          $645 = $bits;
          $646 = $644 << $645;
          $647 = $hold;
          $648 = (($647) + ($646))|0;
          $hold = $648;
          $649 = $bits;
          $650 = (($649) + 8)|0;
          $bits = $650;
         }
         $651 = $hold;
         $652 = $state;
         $653 = ((($652)) + 24|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = $654 & 65535;
         $656 = ($651|0)!=($655|0);
         if ($656) {
          $657 = $1;
          $658 = ((($657)) + 24|0);
          HEAP32[$658>>2] = 19400;
          $659 = $state;
          HEAP32[$659>>2] = 29;
          continue L11;
         } else {
          $hold = 0;
          $bits = 0;
          break;
         }
        }
       } while(0);
       $660 = $state;
       $661 = ((($660)) + 32|0);
       $662 = HEAP32[$661>>2]|0;
       $663 = ($662|0)!=(0|0);
       if ($663) {
        $664 = $state;
        $665 = ((($664)) + 16|0);
        $666 = HEAP32[$665>>2]|0;
        $667 = $666 >> 9;
        $668 = $667 & 1;
        $669 = $state;
        $670 = ((($669)) + 32|0);
        $671 = HEAP32[$670>>2]|0;
        $672 = ((($671)) + 44|0);
        HEAP32[$672>>2] = $668;
        $673 = $state;
        $674 = ((($673)) + 32|0);
        $675 = HEAP32[$674>>2]|0;
        $676 = ((($675)) + 48|0);
        HEAP32[$676>>2] = 1;
       }
       $677 = (_crc32(0,0,0)|0);
       $678 = $state;
       $679 = ((($678)) + 24|0);
       HEAP32[$679>>2] = $677;
       $680 = $1;
       $681 = ((($680)) + 48|0);
       HEAP32[$681>>2] = $677;
       $682 = $state;
       HEAP32[$682>>2] = 11;
       continue;
      }
      else if ((label|0) == 253) {
       label = 0;
       $1700 = $state;
       $1701 = ((($1700)) + 72|0);
       $1702 = HEAP32[$1701>>2]|0;
       $1703 = ($1702|0)!=(0);
       if ($1703) {
        while(1) {
         $1704 = $bits;
         $1705 = $state;
         $1706 = ((($1705)) + 72|0);
         $1707 = HEAP32[$1706>>2]|0;
         $1708 = ($1704>>>0)<($1707>>>0);
         if (!($1708)) {
          break;
         }
         $1709 = $have;
         $1710 = ($1709|0)==(0);
         if ($1710) {
          break L11;
         }
         $1711 = $have;
         $1712 = (($1711) + -1)|0;
         $have = $1712;
         $1713 = $next;
         $1714 = ((($1713)) + 1|0);
         $next = $1714;
         $1715 = HEAP8[$1713>>0]|0;
         $1716 = $1715&255;
         $1717 = $bits;
         $1718 = $1716 << $1717;
         $1719 = $hold;
         $1720 = (($1719) + ($1718))|0;
         $hold = $1720;
         $1721 = $bits;
         $1722 = (($1721) + 8)|0;
         $bits = $1722;
        }
        $1723 = $hold;
        $1724 = $state;
        $1725 = ((($1724)) + 72|0);
        $1726 = HEAP32[$1725>>2]|0;
        $1727 = 1 << $1726;
        $1728 = (($1727) - 1)|0;
        $1729 = $1723 & $1728;
        $1730 = $state;
        $1731 = ((($1730)) + 68|0);
        $1732 = HEAP32[$1731>>2]|0;
        $1733 = (($1732) + ($1729))|0;
        HEAP32[$1731>>2] = $1733;
        $1734 = $state;
        $1735 = ((($1734)) + 72|0);
        $1736 = HEAP32[$1735>>2]|0;
        $1737 = $hold;
        $1738 = $1737 >>> $1736;
        $hold = $1738;
        $1739 = $state;
        $1740 = ((($1739)) + 72|0);
        $1741 = HEAP32[$1740>>2]|0;
        $1742 = $bits;
        $1743 = (($1742) - ($1741))|0;
        $bits = $1743;
        $1744 = $state;
        $1745 = ((($1744)) + 72|0);
        $1746 = HEAP32[$1745>>2]|0;
        $1747 = $state;
        $1748 = ((($1747)) + 7108|0);
        $1749 = HEAP32[$1748>>2]|0;
        $1750 = (($1749) + ($1746))|0;
        HEAP32[$1748>>2] = $1750;
       }
       $1751 = $state;
       HEAP32[$1751>>2] = 24;
      }
      $1752 = $left;
      $1753 = ($1752|0)==(0);
      if ($1753) {
       break;
      }
      $1754 = $out;
      $1755 = $left;
      $1756 = (($1754) - ($1755))|0;
      $copy = $1756;
      $1757 = $state;
      $1758 = ((($1757)) + 68|0);
      $1759 = HEAP32[$1758>>2]|0;
      $1760 = $copy;
      $1761 = ($1759>>>0)>($1760>>>0);
      if ($1761) {
       $1762 = $state;
       $1763 = ((($1762)) + 68|0);
       $1764 = HEAP32[$1763>>2]|0;
       $1765 = $copy;
       $1766 = (($1764) - ($1765))|0;
       $copy = $1766;
       $1767 = $copy;
       $1768 = $state;
       $1769 = ((($1768)) + 44|0);
       $1770 = HEAP32[$1769>>2]|0;
       $1771 = ($1767>>>0)>($1770>>>0);
       if ($1771) {
        $1772 = $state;
        $1773 = ((($1772)) + 7104|0);
        $1774 = HEAP32[$1773>>2]|0;
        $1775 = ($1774|0)!=(0);
        if ($1775) {
         $1776 = $1;
         $1777 = ((($1776)) + 24|0);
         HEAP32[$1777>>2] = 19692;
         $1778 = $state;
         HEAP32[$1778>>2] = 29;
         continue;
        }
       }
       $1779 = $copy;
       $1780 = $state;
       $1781 = ((($1780)) + 48|0);
       $1782 = HEAP32[$1781>>2]|0;
       $1783 = ($1779>>>0)>($1782>>>0);
       $1784 = $state;
       if ($1783) {
        $1785 = ((($1784)) + 48|0);
        $1786 = HEAP32[$1785>>2]|0;
        $1787 = $copy;
        $1788 = (($1787) - ($1786))|0;
        $copy = $1788;
        $1789 = $state;
        $1790 = ((($1789)) + 52|0);
        $1791 = HEAP32[$1790>>2]|0;
        $1792 = $state;
        $1793 = ((($1792)) + 40|0);
        $1794 = HEAP32[$1793>>2]|0;
        $1795 = $copy;
        $1796 = (($1794) - ($1795))|0;
        $1797 = (($1791) + ($1796)|0);
        $from = $1797;
       } else {
        $1798 = ((($1784)) + 52|0);
        $1799 = HEAP32[$1798>>2]|0;
        $1800 = $state;
        $1801 = ((($1800)) + 48|0);
        $1802 = HEAP32[$1801>>2]|0;
        $1803 = $copy;
        $1804 = (($1802) - ($1803))|0;
        $1805 = (($1799) + ($1804)|0);
        $from = $1805;
       }
       $1806 = $copy;
       $1807 = $state;
       $1808 = ((($1807)) + 64|0);
       $1809 = HEAP32[$1808>>2]|0;
       $1810 = ($1806>>>0)>($1809>>>0);
       if ($1810) {
        $1811 = $state;
        $1812 = ((($1811)) + 64|0);
        $1813 = HEAP32[$1812>>2]|0;
        $copy = $1813;
       }
      } else {
       $1814 = $put;
       $1815 = $state;
       $1816 = ((($1815)) + 68|0);
       $1817 = HEAP32[$1816>>2]|0;
       $1818 = (0 - ($1817))|0;
       $1819 = (($1814) + ($1818)|0);
       $from = $1819;
       $1820 = $state;
       $1821 = ((($1820)) + 64|0);
       $1822 = HEAP32[$1821>>2]|0;
       $copy = $1822;
      }
      $1823 = $copy;
      $1824 = $left;
      $1825 = ($1823>>>0)>($1824>>>0);
      if ($1825) {
       $1826 = $left;
       $copy = $1826;
      }
      $1827 = $copy;
      $1828 = $left;
      $1829 = (($1828) - ($1827))|0;
      $left = $1829;
      $1830 = $copy;
      $1831 = $state;
      $1832 = ((($1831)) + 64|0);
      $1833 = HEAP32[$1832>>2]|0;
      $1834 = (($1833) - ($1830))|0;
      HEAP32[$1832>>2] = $1834;
      while(1) {
       $1835 = $from;
       $1836 = ((($1835)) + 1|0);
       $from = $1836;
       $1837 = HEAP8[$1835>>0]|0;
       $1838 = $put;
       $1839 = ((($1838)) + 1|0);
       $put = $1839;
       HEAP8[$1838>>0] = $1837;
       $1840 = $copy;
       $1841 = (($1840) + -1)|0;
       $copy = $1841;
       $1842 = ($1841|0)!=(0);
       if (!($1842)) {
        break;
       }
      }
      $1843 = $state;
      $1844 = ((($1843)) + 64|0);
      $1845 = HEAP32[$1844>>2]|0;
      $1846 = ($1845|0)==(0);
      if (!($1846)) {
       continue;
      }
      $1847 = $state;
      HEAP32[$1847>>2] = 20;
     }
     if ((label|0) == 130) {
      $723 = $put;
      $724 = $1;
      $725 = ((($724)) + 12|0);
      HEAP32[$725>>2] = $723;
      $726 = $left;
      $727 = $1;
      $728 = ((($727)) + 16|0);
      HEAP32[$728>>2] = $726;
      $729 = $next;
      $730 = $1;
      HEAP32[$730>>2] = $729;
      $731 = $have;
      $732 = $1;
      $733 = ((($732)) + 4|0);
      HEAP32[$733>>2] = $731;
      $734 = $hold;
      $735 = $state;
      $736 = ((($735)) + 56|0);
      HEAP32[$736>>2] = $734;
      $737 = $bits;
      $738 = $state;
      $739 = ((($738)) + 60|0);
      HEAP32[$739>>2] = $737;
      $0 = 2;
      $2107 = $0;
      STACKTOP = sp;return ($2107|0);
     }
     else if ((label|0) == 141) {
      $794 = $hold;
      $795 = $794 >>> 2;
      $hold = $795;
      $796 = $bits;
      $797 = (($796) - 2)|0;
      $bits = $797;
     }
     else if ((label|0) == 144) {
      // unreachable;
     }
     else if ((label|0) == 300) {
      $hold = 0;
      $bits = 0;
      label = 301;
     }
     else if ((label|0) == 303) {
      $ret = -3;
     }
     else if ((label|0) == 304) {
      $0 = -4;
      $2107 = $0;
      STACKTOP = sp;return ($2107|0);
     }
     else if ((label|0) == 305) {
      $0 = -2;
      $2107 = $0;
      STACKTOP = sp;return ($2107|0);
     }
     if ((label|0) == 301) {
      $1974 = $state;
      HEAP32[$1974>>2] = 28;
      label = 302;
     }
     if ((label|0) == 302) {
      $ret = 1;
     }
     $1975 = $put;
     $1976 = $1;
     $1977 = ((($1976)) + 12|0);
     HEAP32[$1977>>2] = $1975;
     $1978 = $left;
     $1979 = $1;
     $1980 = ((($1979)) + 16|0);
     HEAP32[$1980>>2] = $1978;
     $1981 = $next;
     $1982 = $1;
     HEAP32[$1982>>2] = $1981;
     $1983 = $have;
     $1984 = $1;
     $1985 = ((($1984)) + 4|0);
     HEAP32[$1985>>2] = $1983;
     $1986 = $hold;
     $1987 = $state;
     $1988 = ((($1987)) + 56|0);
     HEAP32[$1988>>2] = $1986;
     $1989 = $bits;
     $1990 = $state;
     $1991 = ((($1990)) + 60|0);
     HEAP32[$1991>>2] = $1989;
     $1992 = $state;
     $1993 = ((($1992)) + 40|0);
     $1994 = HEAP32[$1993>>2]|0;
     $1995 = ($1994|0)!=(0);
     if ($1995) {
      label = 310;
     } else {
      $1996 = $out;
      $1997 = $1;
      $1998 = ((($1997)) + 16|0);
      $1999 = HEAP32[$1998>>2]|0;
      $2000 = ($1996|0)!=($1999|0);
      if ($2000) {
       $2001 = $state;
       $2002 = HEAP32[$2001>>2]|0;
       $2003 = ($2002>>>0)<(29);
       if ($2003) {
        $2004 = $state;
        $2005 = HEAP32[$2004>>2]|0;
        $2006 = ($2005>>>0)<(26);
        $2007 = $2;
        $2008 = ($2007|0)!=(4);
        $or$cond8 = $2006 | $2008;
        if ($or$cond8) {
         label = 310;
        }
       }
      }
     }
     if ((label|0) == 310) {
      $2009 = $1;
      $2010 = $1;
      $2011 = ((($2010)) + 12|0);
      $2012 = HEAP32[$2011>>2]|0;
      $2013 = $out;
      $2014 = $1;
      $2015 = ((($2014)) + 16|0);
      $2016 = HEAP32[$2015>>2]|0;
      $2017 = (($2013) - ($2016))|0;
      $2018 = (_updatewindow($2009,$2012,$2017)|0);
      $2019 = ($2018|0)!=(0);
      if ($2019) {
       $2020 = $state;
       HEAP32[$2020>>2] = 30;
       $0 = -4;
       $2107 = $0;
       STACKTOP = sp;return ($2107|0);
      }
     }
     $2021 = $1;
     $2022 = ((($2021)) + 4|0);
     $2023 = HEAP32[$2022>>2]|0;
     $2024 = $in;
     $2025 = (($2024) - ($2023))|0;
     $in = $2025;
     $2026 = $1;
     $2027 = ((($2026)) + 16|0);
     $2028 = HEAP32[$2027>>2]|0;
     $2029 = $out;
     $2030 = (($2029) - ($2028))|0;
     $out = $2030;
     $2031 = $in;
     $2032 = $1;
     $2033 = ((($2032)) + 8|0);
     $2034 = HEAP32[$2033>>2]|0;
     $2035 = (($2034) + ($2031))|0;
     HEAP32[$2033>>2] = $2035;
     $2036 = $out;
     $2037 = $1;
     $2038 = ((($2037)) + 20|0);
     $2039 = HEAP32[$2038>>2]|0;
     $2040 = (($2039) + ($2036))|0;
     HEAP32[$2038>>2] = $2040;
     $2041 = $out;
     $2042 = $state;
     $2043 = ((($2042)) + 28|0);
     $2044 = HEAP32[$2043>>2]|0;
     $2045 = (($2044) + ($2041))|0;
     HEAP32[$2043>>2] = $2045;
     $2046 = $state;
     $2047 = ((($2046)) + 8|0);
     $2048 = HEAP32[$2047>>2]|0;
     $2049 = ($2048|0)!=(0);
     $2050 = $out;
     $2051 = ($2050|0)!=(0);
     $or$cond10 = $2049 & $2051;
     if ($or$cond10) {
      $2052 = $state;
      $2053 = ((($2052)) + 16|0);
      $2054 = HEAP32[$2053>>2]|0;
      $2055 = ($2054|0)!=(0);
      $2056 = $state;
      $2057 = ((($2056)) + 24|0);
      $2058 = HEAP32[$2057>>2]|0;
      $2059 = $1;
      $2060 = ((($2059)) + 12|0);
      $2061 = HEAP32[$2060>>2]|0;
      $2062 = $out;
      $2063 = (0 - ($2062))|0;
      $2064 = (($2061) + ($2063)|0);
      $2065 = $out;
      if ($2055) {
       $2066 = (_crc32($2058,$2064,$2065)|0);
       $2070 = $2066;
      } else {
       $2067 = (_adler32($2058,$2064,$2065)|0);
       $2070 = $2067;
      }
      $2068 = $state;
      $2069 = ((($2068)) + 24|0);
      HEAP32[$2069>>2] = $2070;
      $2071 = $1;
      $2072 = ((($2071)) + 48|0);
      HEAP32[$2072>>2] = $2070;
     }
     $2073 = $state;
     $2074 = ((($2073)) + 60|0);
     $2075 = HEAP32[$2074>>2]|0;
     $2076 = $state;
     $2077 = ((($2076)) + 4|0);
     $2078 = HEAP32[$2077>>2]|0;
     $2079 = ($2078|0)!=(0);
     $2080 = $2079 ? 64 : 0;
     $2081 = (($2075) + ($2080))|0;
     $2082 = $state;
     $2083 = HEAP32[$2082>>2]|0;
     $2084 = ($2083|0)==(11);
     $2085 = $2084 ? 128 : 0;
     $2086 = (($2081) + ($2085))|0;
     $2087 = $state;
     $2088 = HEAP32[$2087>>2]|0;
     $2089 = ($2088|0)==(19);
     if ($2089) {
      $2093 = 1;
     } else {
      $2090 = $state;
      $2091 = HEAP32[$2090>>2]|0;
      $2092 = ($2091|0)==(14);
      $2093 = $2092;
     }
     $2094 = $2093 ? 256 : 0;
     $2095 = (($2086) + ($2094))|0;
     $2096 = $1;
     $2097 = ((($2096)) + 44|0);
     HEAP32[$2097>>2] = $2095;
     $2098 = $in;
     $2099 = ($2098|0)==(0);
     $2100 = $out;
     $2101 = ($2100|0)==(0);
     $or$cond12 = $2099 & $2101;
     $2102 = $2;
     $2103 = ($2102|0)==(4);
     $or$cond14 = $or$cond12 | $2103;
     $2104 = $ret;
     $2105 = ($2104|0)==(0);
     $or$cond16 = $or$cond14 & $2105;
     if ($or$cond16) {
      $ret = -5;
     }
     $2106 = $ret;
     $0 = $2106;
     $2107 = $0;
     STACKTOP = sp;return ($2107|0);
    }
   }
  }
 } while(0);
 $0 = -2;
 $2107 = $0;
 STACKTOP = sp;return ($2107|0);
}
function _fixedtables_741($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $state;
 $1 = $0;
 $2 = ((($1)) + 76|0);
 HEAP32[$2>>2] = 9140;
 $3 = $0;
 $4 = ((($3)) + 84|0);
 HEAP32[$4>>2] = 9;
 $5 = $0;
 $6 = ((($5)) + 80|0);
 HEAP32[$6>>2] = 11188;
 $7 = $0;
 $8 = ((($7)) + 88|0);
 HEAP32[$8>>2] = 5;
 STACKTOP = sp;return;
}
function _updatewindow($strm,$end,$copy) {
 $strm = $strm|0;
 $end = $end|0;
 $copy = $copy|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $end;
 $3 = $copy;
 $4 = $1;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $state = $6;
 $7 = $state;
 $8 = ((($7)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = ((($14)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $state;
  $18 = ((($17)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = 1 << $19;
  $21 = (FUNCTION_TABLE_iiii[$13 & 63]($16,$20,1)|0);
  $22 = $state;
  $23 = ((($22)) + 52|0);
  HEAP32[$23>>2] = $21;
  $24 = $state;
  $25 = ((($24)) + 52|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $0 = 1;
   $135 = $0;
   STACKTOP = sp;return ($135|0);
  }
 }
 $28 = $state;
 $29 = ((($28)) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  $32 = $state;
  $33 = ((($32)) + 36|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = 1 << $34;
  $36 = $state;
  $37 = ((($36)) + 40|0);
  HEAP32[$37>>2] = $35;
  $38 = $state;
  $39 = ((($38)) + 48|0);
  HEAP32[$39>>2] = 0;
  $40 = $state;
  $41 = ((($40)) + 44|0);
  HEAP32[$41>>2] = 0;
 }
 $42 = $3;
 $43 = $state;
 $44 = ((($43)) + 40|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($42>>>0)>=($45>>>0);
 $47 = $state;
 do {
  if ($46) {
   $48 = ((($47)) + 52|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $2;
   $51 = $state;
   $52 = ((($51)) + 40|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (0 - ($53))|0;
   $55 = (($50) + ($54)|0);
   $56 = $state;
   $57 = ((($56)) + 40|0);
   $58 = HEAP32[$57>>2]|0;
   _memcpy(($49|0),($55|0),($58|0))|0;
   $59 = $state;
   $60 = ((($59)) + 48|0);
   HEAP32[$60>>2] = 0;
   $61 = $state;
   $62 = ((($61)) + 40|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $state;
   $65 = ((($64)) + 44|0);
   HEAP32[$65>>2] = $63;
  } else {
   $66 = ((($47)) + 40|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $state;
   $69 = ((($68)) + 48|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($67) - ($70))|0;
   $dist = $71;
   $72 = $dist;
   $73 = $3;
   $74 = ($72>>>0)>($73>>>0);
   if ($74) {
    $75 = $3;
    $dist = $75;
   }
   $76 = $state;
   $77 = ((($76)) + 52|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $state;
   $80 = ((($79)) + 48|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($78) + ($81)|0);
   $83 = $2;
   $84 = $3;
   $85 = (0 - ($84))|0;
   $86 = (($83) + ($85)|0);
   $87 = $dist;
   _memcpy(($82|0),($86|0),($87|0))|0;
   $88 = $dist;
   $89 = $3;
   $90 = (($89) - ($88))|0;
   $3 = $90;
   $91 = $3;
   $92 = ($91|0)!=(0);
   if ($92) {
    $93 = $state;
    $94 = ((($93)) + 52|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $2;
    $97 = $3;
    $98 = (0 - ($97))|0;
    $99 = (($96) + ($98)|0);
    $100 = $3;
    _memcpy(($95|0),($99|0),($100|0))|0;
    $101 = $3;
    $102 = $state;
    $103 = ((($102)) + 48|0);
    HEAP32[$103>>2] = $101;
    $104 = $state;
    $105 = ((($104)) + 40|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $state;
    $108 = ((($107)) + 44|0);
    HEAP32[$108>>2] = $106;
    break;
   }
   $109 = $dist;
   $110 = $state;
   $111 = ((($110)) + 48|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($112) + ($109))|0;
   HEAP32[$111>>2] = $113;
   $114 = $state;
   $115 = ((($114)) + 48|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $state;
   $118 = ((($117)) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($116|0)==($119|0);
   if ($120) {
    $121 = $state;
    $122 = ((($121)) + 48|0);
    HEAP32[$122>>2] = 0;
   }
   $123 = $state;
   $124 = ((($123)) + 44|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $state;
   $127 = ((($126)) + 40|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($125>>>0)<($128>>>0);
   if ($129) {
    $130 = $dist;
    $131 = $state;
    $132 = ((($131)) + 44|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + ($130))|0;
    HEAP32[$132>>2] = $134;
   }
  }
 } while(0);
 $0 = 0;
 $135 = $0;
 STACKTOP = sp;return ($135|0);
}
function _inflateEnd($strm) {
 $strm = $strm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $strm;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = $1;
  $5 = ((($4)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = ((($8)) + 36|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = $1;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $state = $14;
    $15 = $state;
    $16 = ((($15)) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = $1;
     $20 = ((($19)) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = $1;
     $23 = ((($22)) + 40|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $state;
     $26 = ((($25)) + 52|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_vii[$21 & 63]($24,$27);
    }
    $28 = $1;
    $29 = ((($28)) + 36|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $1;
    $32 = ((($31)) + 40|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $1;
    $35 = ((($34)) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$30 & 63]($33,$36);
    $37 = $1;
    $38 = ((($37)) + 28|0);
    HEAP32[$38>>2] = 0;
    $0 = 0;
    $39 = $0;
    STACKTOP = sp;return ($39|0);
   }
  }
 }
 $0 = -2;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _inflate_table($type,$lens,$codes,$table,$bits,$work) {
 $type = $type|0;
 $lens = $lens|0;
 $codes = $codes|0;
 $table = $table|0;
 $bits = $bits|0;
 $work = $work|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $count = 0, $curr = 0, $drop = 0, $end = 0, $extra = 0, $fill = 0, $here = 0, $huff = 0, $incr = 0, $left = 0, $len = 0, $low = 0, $mask = 0, $max = 0;
 var $min = 0, $next = 0, $offs = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $root = 0, $sym = 0, $used = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $here = sp + 168|0;
 $count = sp + 136|0;
 $offs = sp + 104|0;
 $1 = $type;
 $2 = $lens;
 $3 = $codes;
 $4 = $table;
 $5 = $bits;
 $6 = $work;
 $len = 0;
 while(1) {
  $7 = $len;
  $8 = ($7>>>0)<=(15);
  if (!($8)) {
   break;
  }
  $9 = $len;
  $10 = (($count) + ($9<<1)|0);
  HEAP16[$10>>1] = 0;
  $11 = $len;
  $12 = (($11) + 1)|0;
  $len = $12;
 }
 $sym = 0;
 while(1) {
  $13 = $sym;
  $14 = $3;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $sym;
  $17 = $2;
  $18 = (($17) + ($16<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($count) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = (($22) + 1)<<16>>16;
  HEAP16[$21>>1] = $23;
  $24 = $sym;
  $25 = (($24) + 1)|0;
  $sym = $25;
 }
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $root = $27;
 $max = 15;
 while(1) {
  $28 = $max;
  $29 = ($28>>>0)>=(1);
  if (!($29)) {
   break;
  }
  $30 = $max;
  $31 = (($count) + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($33|0)!=(0);
  if ($34) {
   break;
  }
  $35 = $max;
  $36 = (($35) + -1)|0;
  $max = $36;
 }
 $37 = $root;
 $38 = $max;
 $39 = ($37>>>0)>($38>>>0);
 if ($39) {
  $40 = $max;
  $root = $40;
 }
 $41 = $max;
 $42 = ($41|0)==(0);
 if ($42) {
  HEAP8[$here>>0] = 64;
  $43 = ((($here)) + 1|0);
  HEAP8[$43>>0] = 1;
  $44 = ((($here)) + 2|0);
  HEAP16[$44>>1] = 0;
  $45 = $4;
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 4|0);
  HEAP32[$45>>2] = $47;
  ;HEAP16[$46>>1]=HEAP16[$here>>1]|0;HEAP16[$46+2>>1]=HEAP16[$here+2>>1]|0;
  $48 = $4;
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 4|0);
  HEAP32[$48>>2] = $50;
  ;HEAP16[$49>>1]=HEAP16[$here>>1]|0;HEAP16[$49+2>>1]=HEAP16[$here+2>>1]|0;
  $51 = $5;
  HEAP32[$51>>2] = 1;
  $0 = 0;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 $min = 1;
 while(1) {
  $52 = $min;
  $53 = $max;
  $54 = ($52>>>0)<($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $min;
  $56 = (($count) + ($55<<1)|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57&65535;
  $59 = ($58|0)!=(0);
  if ($59) {
   break;
  }
  $60 = $min;
  $61 = (($60) + 1)|0;
  $min = $61;
 }
 $62 = $root;
 $63 = $min;
 $64 = ($62>>>0)<($63>>>0);
 if ($64) {
  $65 = $min;
  $root = $65;
 }
 $left = 1;
 $len = 1;
 while(1) {
  $66 = $len;
  $67 = ($66>>>0)<=(15);
  $68 = $left;
  if (!($67)) {
   break;
  }
  $69 = $68 << 1;
  $left = $69;
  $70 = $len;
  $71 = (($count) + ($70<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72&65535;
  $74 = $left;
  $75 = (($74) - ($73))|0;
  $left = $75;
  $76 = $left;
  $77 = ($76|0)<(0);
  if ($77) {
   label = 24;
   break;
  }
  $78 = $len;
  $79 = (($78) + 1)|0;
  $len = $79;
 }
 if ((label|0) == 24) {
  $0 = -1;
  $344 = $0;
  STACKTOP = sp;return ($344|0);
 }
 $80 = ($68|0)>(0);
 if ($80) {
  $81 = $1;
  $82 = ($81|0)==(0);
  $83 = $max;
  $84 = ($83|0)!=(1);
  $or$cond = $82 | $84;
  if ($or$cond) {
   $0 = -1;
   $344 = $0;
   STACKTOP = sp;return ($344|0);
  }
 }
 $85 = ((($offs)) + 2|0);
 HEAP16[$85>>1] = 0;
 $len = 1;
 while(1) {
  $86 = $len;
  $87 = ($86>>>0)<(15);
  if (!($87)) {
   break;
  }
  $88 = $len;
  $89 = (($offs) + ($88<<1)|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $92 = $len;
  $93 = (($count) + ($92<<1)|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = (($91) + ($95))|0;
  $97 = $96&65535;
  $98 = $len;
  $99 = (($98) + 1)|0;
  $100 = (($offs) + ($99<<1)|0);
  HEAP16[$100>>1] = $97;
  $101 = $len;
  $102 = (($101) + 1)|0;
  $len = $102;
 }
 $sym = 0;
 while(1) {
  $103 = $sym;
  $104 = $3;
  $105 = ($103>>>0)<($104>>>0);
  if (!($105)) {
   break;
  }
  $106 = $sym;
  $107 = $2;
  $108 = (($107) + ($106<<1)|0);
  $109 = HEAP16[$108>>1]|0;
  $110 = $109&65535;
  $111 = ($110|0)!=(0);
  if ($111) {
   $112 = $sym;
   $113 = $112&65535;
   $114 = $sym;
   $115 = $2;
   $116 = (($115) + ($114<<1)|0);
   $117 = HEAP16[$116>>1]|0;
   $118 = $117&65535;
   $119 = (($offs) + ($118<<1)|0);
   $120 = HEAP16[$119>>1]|0;
   $121 = (($120) + 1)<<16>>16;
   HEAP16[$119>>1] = $121;
   $122 = $120&65535;
   $123 = $6;
   $124 = (($123) + ($122<<1)|0);
   HEAP16[$124>>1] = $113;
  }
  $125 = $sym;
  $126 = (($125) + 1)|0;
  $sym = $126;
 }
 $127 = $1;
 switch ($127|0) {
 case 0:  {
  $128 = $6;
  $extra = $128;
  $base = $128;
  $end = 19;
  break;
 }
 case 1:  {
  $base = 11354;
  $129 = $base;
  $130 = ((($129)) + -514|0);
  $base = $130;
  $extra = 11416;
  $131 = $extra;
  $132 = ((($131)) + -514|0);
  $extra = $132;
  $end = 256;
  break;
 }
 default: {
  $base = 11478;
  $extra = 11542;
  $end = -1;
 }
 }
 $huff = 0;
 $sym = 0;
 $133 = $min;
 $len = $133;
 $134 = $4;
 $135 = HEAP32[$134>>2]|0;
 $next = $135;
 $136 = $root;
 $curr = $136;
 $drop = 0;
 $low = -1;
 $137 = $root;
 $138 = 1 << $137;
 $used = $138;
 $139 = $used;
 $140 = (($139) - 1)|0;
 $mask = $140;
 $141 = $1;
 $142 = ($141|0)==(1);
 $143 = $used;
 $144 = ($143>>>0)>(852);
 $or$cond3 = $142 & $144;
 if (!($or$cond3)) {
  $145 = $1;
  $146 = ($145|0)==(2);
  $147 = $used;
  $148 = ($147>>>0)>(592);
  $or$cond5 = $146 & $148;
  if (!($or$cond5)) {
   while(1) {
    $149 = $len;
    $150 = $drop;
    $151 = (($149) - ($150))|0;
    $152 = $151&255;
    $153 = ((($here)) + 1|0);
    HEAP8[$153>>0] = $152;
    $154 = $sym;
    $155 = $6;
    $156 = (($155) + ($154<<1)|0);
    $157 = HEAP16[$156>>1]|0;
    $158 = $157&65535;
    $159 = $end;
    $160 = ($158|0)<($159|0);
    do {
     if ($160) {
      HEAP8[$here>>0] = 0;
      $161 = $sym;
      $162 = $6;
      $163 = (($162) + ($161<<1)|0);
      $164 = HEAP16[$163>>1]|0;
      $165 = ((($here)) + 2|0);
      HEAP16[$165>>1] = $164;
     } else {
      $166 = $sym;
      $167 = $6;
      $168 = (($167) + ($166<<1)|0);
      $169 = HEAP16[$168>>1]|0;
      $170 = $169&65535;
      $171 = $end;
      $172 = ($170|0)>($171|0);
      if ($172) {
       $173 = $sym;
       $174 = $6;
       $175 = (($174) + ($173<<1)|0);
       $176 = HEAP16[$175>>1]|0;
       $177 = $176&65535;
       $178 = $extra;
       $179 = (($178) + ($177<<1)|0);
       $180 = HEAP16[$179>>1]|0;
       $181 = $180&255;
       HEAP8[$here>>0] = $181;
       $182 = $sym;
       $183 = $6;
       $184 = (($183) + ($182<<1)|0);
       $185 = HEAP16[$184>>1]|0;
       $186 = $185&65535;
       $187 = $base;
       $188 = (($187) + ($186<<1)|0);
       $189 = HEAP16[$188>>1]|0;
       $190 = ((($here)) + 2|0);
       HEAP16[$190>>1] = $189;
       break;
      } else {
       HEAP8[$here>>0] = 96;
       $191 = ((($here)) + 2|0);
       HEAP16[$191>>1] = 0;
       break;
      }
     }
    } while(0);
    $192 = $len;
    $193 = $drop;
    $194 = (($192) - ($193))|0;
    $195 = 1 << $194;
    $incr = $195;
    $196 = $curr;
    $197 = 1 << $196;
    $fill = $197;
    $198 = $fill;
    $min = $198;
    while(1) {
     $199 = $incr;
     $200 = $fill;
     $201 = (($200) - ($199))|0;
     $fill = $201;
     $202 = $huff;
     $203 = $drop;
     $204 = $202 >>> $203;
     $205 = $fill;
     $206 = (($204) + ($205))|0;
     $207 = $next;
     $208 = (($207) + ($206<<2)|0);
     ;HEAP16[$208>>1]=HEAP16[$here>>1]|0;HEAP16[$208+2>>1]=HEAP16[$here+2>>1]|0;
     $209 = $fill;
     $210 = ($209|0)!=(0);
     if (!($210)) {
      break;
     }
    }
    $211 = $len;
    $212 = (($211) - 1)|0;
    $213 = 1 << $212;
    $incr = $213;
    while(1) {
     $214 = $huff;
     $215 = $incr;
     $216 = $214 & $215;
     $217 = ($216|0)!=(0);
     $218 = $incr;
     if (!($217)) {
      break;
     }
     $219 = $218 >>> 1;
     $incr = $219;
    }
    $220 = ($218|0)!=(0);
    if ($220) {
     $221 = $incr;
     $222 = (($221) - 1)|0;
     $223 = $huff;
     $224 = $223 & $222;
     $huff = $224;
     $225 = $incr;
     $226 = $huff;
     $227 = (($226) + ($225))|0;
     $huff = $227;
    } else {
     $huff = 0;
    }
    $228 = $sym;
    $229 = (($228) + 1)|0;
    $sym = $229;
    $230 = $len;
    $231 = (($count) + ($230<<1)|0);
    $232 = HEAP16[$231>>1]|0;
    $233 = (($232) + -1)<<16>>16;
    HEAP16[$231>>1] = $233;
    $234 = $233&65535;
    $235 = ($234|0)==(0);
    if ($235) {
     $236 = $len;
     $237 = $max;
     $238 = ($236|0)==($237|0);
     if ($238) {
      break;
     }
     $239 = $sym;
     $240 = $6;
     $241 = (($240) + ($239<<1)|0);
     $242 = HEAP16[$241>>1]|0;
     $243 = $242&65535;
     $244 = $2;
     $245 = (($244) + ($243<<1)|0);
     $246 = HEAP16[$245>>1]|0;
     $247 = $246&65535;
     $len = $247;
    }
    $248 = $len;
    $249 = $root;
    $250 = ($248>>>0)>($249>>>0);
    if (!($250)) {
     continue;
    }
    $251 = $huff;
    $252 = $mask;
    $253 = $251 & $252;
    $254 = $low;
    $255 = ($253|0)!=($254|0);
    if (!($255)) {
     continue;
    }
    $256 = $drop;
    $257 = ($256|0)==(0);
    if ($257) {
     $258 = $root;
     $drop = $258;
    }
    $259 = $min;
    $260 = $next;
    $261 = (($260) + ($259<<2)|0);
    $next = $261;
    $262 = $len;
    $263 = $drop;
    $264 = (($262) - ($263))|0;
    $curr = $264;
    $265 = $curr;
    $266 = 1 << $265;
    $left = $266;
    while(1) {
     $267 = $curr;
     $268 = $drop;
     $269 = (($267) + ($268))|0;
     $270 = $max;
     $271 = ($269>>>0)<($270>>>0);
     if (!($271)) {
      break;
     }
     $272 = $curr;
     $273 = $drop;
     $274 = (($272) + ($273))|0;
     $275 = (($count) + ($274<<1)|0);
     $276 = HEAP16[$275>>1]|0;
     $277 = $276&65535;
     $278 = $left;
     $279 = (($278) - ($277))|0;
     $left = $279;
     $280 = $left;
     $281 = ($280|0)<=(0);
     if ($281) {
      break;
     }
     $282 = $curr;
     $283 = (($282) + 1)|0;
     $curr = $283;
     $284 = $left;
     $285 = $284 << 1;
     $left = $285;
    }
    $286 = $curr;
    $287 = 1 << $286;
    $288 = $used;
    $289 = (($288) + ($287))|0;
    $used = $289;
    $290 = $1;
    $291 = ($290|0)==(1);
    $292 = $used;
    $293 = ($292>>>0)>(852);
    $or$cond7 = $291 & $293;
    if ($or$cond7) {
     label = 70;
     break;
    }
    $294 = $1;
    $295 = ($294|0)==(2);
    $296 = $used;
    $297 = ($296>>>0)>(592);
    $or$cond9 = $295 & $297;
    if ($or$cond9) {
     label = 70;
     break;
    }
    $298 = $huff;
    $299 = $mask;
    $300 = $298 & $299;
    $low = $300;
    $301 = $curr;
    $302 = $301&255;
    $303 = $low;
    $304 = $4;
    $305 = HEAP32[$304>>2]|0;
    $306 = (($305) + ($303<<2)|0);
    HEAP8[$306>>0] = $302;
    $307 = $root;
    $308 = $307&255;
    $309 = $low;
    $310 = $4;
    $311 = HEAP32[$310>>2]|0;
    $312 = (($311) + ($309<<2)|0);
    $313 = ((($312)) + 1|0);
    HEAP8[$313>>0] = $308;
    $314 = $next;
    $315 = $4;
    $316 = HEAP32[$315>>2]|0;
    $317 = $314;
    $318 = $316;
    $319 = (($317) - ($318))|0;
    $320 = (($319|0) / 4)&-1;
    $321 = $320&65535;
    $322 = $low;
    $323 = $4;
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + ($322<<2)|0);
    $326 = ((($325)) + 2|0);
    HEAP16[$326>>1] = $321;
   }
   if ((label|0) == 70) {
    $0 = 1;
    $344 = $0;
    STACKTOP = sp;return ($344|0);
   }
   $327 = $huff;
   $328 = ($327|0)!=(0);
   if ($328) {
    HEAP8[$here>>0] = 64;
    $329 = $len;
    $330 = $drop;
    $331 = (($329) - ($330))|0;
    $332 = $331&255;
    $333 = ((($here)) + 1|0);
    HEAP8[$333>>0] = $332;
    $334 = ((($here)) + 2|0);
    HEAP16[$334>>1] = 0;
    $335 = $huff;
    $336 = $next;
    $337 = (($336) + ($335<<2)|0);
    ;HEAP16[$337>>1]=HEAP16[$here>>1]|0;HEAP16[$337+2>>1]=HEAP16[$here+2>>1]|0;
   }
   $338 = $used;
   $339 = $4;
   $340 = HEAP32[$339>>2]|0;
   $341 = (($340) + ($338<<2)|0);
   HEAP32[$339>>2] = $341;
   $342 = $root;
   $343 = $5;
   HEAP32[$343>>2] = $342;
   $0 = 0;
   $344 = $0;
   STACKTOP = sp;return ($344|0);
  }
 }
 $0 = 1;
 $344 = $0;
 STACKTOP = sp;return ($344|0);
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $items;
 $2 = $size;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = $2;
  $7 = (($5) - ($6))|0;
  $8 = $1;
  $9 = (($8) + ($7))|0;
  $1 = $9;
 }
 $10 = $1;
 $11 = $2;
 $12 = Math_imul($10, $11)|0;
 $13 = (_malloc($12)|0);
 STACKTOP = sp;return ($13|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $opaque;
 $1 = $ptr;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5688]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 22796;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[5688]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((35|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_393($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[5688]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((36|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 2;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 63]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 63]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((19766 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 20246;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 20246;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 20246;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 20246 : (20248);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (20247);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 20246;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 20246;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 22148;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 22155;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (22156) : (22161);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (22158);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (20230 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(22190,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(22190,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 22174 : 22178;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 22182 : 22186;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 20246;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 20246;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (20230 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 20246;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (20246 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 20246;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 63]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 63]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (20256 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 20344;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 20344;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 20344;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(22192,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(22192,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 37;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 2;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 3;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 1;
   $34 = HEAP32[(22756)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((22780)|0));
   $37 = HEAP32[(22776)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(22776)>>2] = $4;
   ___unlock(((22780)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((22780)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(22776)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(22776)>>2] = $14;
  }
  ___unlock(((22780)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 31]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[2284]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[2284]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((22780)|0));
   $$012 = HEAP32[(22776)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((22780)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 63]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 63]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _ferror($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 5;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   ___unlockfile($f);
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 5;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 63]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[2255]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 63]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $31 = ($30|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($30|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 63]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($f)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) - ($14))|0;
  $22 = (($21) + ($16))|0;
  $23 = (($22) + ($18))|0;
  $24 = (($23) - ($20))|0;
  $$0 = $24;
 }
 return ($$0|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function _vprintf($fmt,$ap) {
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2255]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 return ($1|0);
}
function _fmin($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fabs = 0.0, $fabs1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = ($3>>>0)>(2146435072);
 $5 = ($2>>>0)>(0);
 $6 = ($3|0)==(2146435072);
 $7 = $6 & $5;
 $8 = $4 | $7;
 do {
  if ($8) {
   $$0 = $y;
  } else {
   $fabs1 = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs1;$9 = HEAP32[tempDoublePtr>>2]|0;
   $10 = HEAP32[tempDoublePtr+4>>2]|0;
   $11 = ($10>>>0)>(2146435072);
   $12 = ($9>>>0)>(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    $$0 = $x;
   } else {
    HEAPF64[tempDoublePtr>>3] = $y;$16 = HEAP32[tempDoublePtr>>2]|0;
    $17 = HEAP32[tempDoublePtr+4>>2]|0;
    $18 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
    $19 = tempRet0;
    $20 = (_bitshift64Lshr(($16|0),($17|0),63)|0);
    $21 = tempRet0;
    $22 = ($18|0)==($20|0);
    if ($22) {
     $25 = $x < $y;
     $26 = $25 ? $x : $y;
     $$0 = $26;
     break;
    } else {
     $23 = ($1|0)<(0);
     $24 = $23 ? $x : $y;
     $$0 = $24;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _fmax($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fabs = 0.0, $fabs1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $fabs = (+Math_abs((+$x)));
 HEAPF64[tempDoublePtr>>3] = $fabs;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = ($3>>>0)>(2146435072);
 $5 = ($2>>>0)>(0);
 $6 = ($3|0)==(2146435072);
 $7 = $6 & $5;
 $8 = $4 | $7;
 do {
  if ($8) {
   $$0 = $y;
  } else {
   $fabs1 = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs1;$9 = HEAP32[tempDoublePtr>>2]|0;
   $10 = HEAP32[tempDoublePtr+4>>2]|0;
   $11 = ($10>>>0)>(2146435072);
   $12 = ($9>>>0)>(0);
   $13 = ($10|0)==(2146435072);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    $$0 = $x;
   } else {
    HEAPF64[tempDoublePtr>>3] = $y;$16 = HEAP32[tempDoublePtr>>2]|0;
    $17 = HEAP32[tempDoublePtr+4>>2]|0;
    $18 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
    $19 = tempRet0;
    $20 = (_bitshift64Lshr(($16|0),($17|0),63)|0);
    $21 = tempRet0;
    $22 = ($18|0)==($20|0);
    if ($22) {
     $25 = $x < $y;
     $26 = $25 ? $y : $x;
     $$0 = $26;
     break;
    } else {
     $23 = ($1|0)<(0);
     $24 = $23 ? $y : $x;
     $$0 = $24;
     break;
    }
   }
  }
 } while(0);
 return (+$$0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0;
 var $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0;
 var $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0;
 var $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0;
 var $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0;
 var $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic$i$i = sp;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[5700]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (22840 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[5700] = $22;
     } else {
      $23 = HEAP32[(22816)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = HEAP32[(22808)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (22840 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[5700] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(22816)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(22808)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(22820)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (22840 + ($93<<2)|0);
      $95 = HEAP32[5700]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[5700] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(22816)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(22808)>>2] = $82;
     HEAP32[(22820)>>2] = $85;
     $$0 = $70;
     STACKTOP = sp;return ($$0|0);
    }
    $107 = HEAP32[(22804)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (23104 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(22816)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (23104 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(22804)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(22804)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(22816)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(22816)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(22816)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(22808)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(22820)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (22840 + ($231<<2)|0);
       $233 = HEAP32[5700]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[5700] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(22816)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(22808)>>2] = $rsize$0$i$lcssa;
      HEAP32[(22820)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(22804)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (23104 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (23104 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(22808)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(22816)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (23104 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(22804)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(22804)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(22816)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(22816)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(22816)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (22840 + ($428<<2)|0);
          $430 = HEAP32[5700]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[5700] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(22816)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (23104 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(22804)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(22804)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(22816)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(22816)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       STACKTOP = sp;return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(22808)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(22820)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(22820)>>2] = $514;
   HEAP32[(22808)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(22808)>>2] = 0;
   HEAP32[(22820)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  STACKTOP = sp;return ($$0|0);
 }
 $527 = HEAP32[(22812)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(22812)>>2] = $529;
  $530 = HEAP32[(22824)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(22824)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  STACKTOP = sp;return ($$0|0);
 }
 $537 = HEAP32[5818]|0;
 $538 = ($537|0)==(0);
 if ($538) {
  HEAP32[(23280)>>2] = 4096;
  HEAP32[(23276)>>2] = 4096;
  HEAP32[(23284)>>2] = -1;
  HEAP32[(23288)>>2] = -1;
  HEAP32[(23292)>>2] = 0;
  HEAP32[(23244)>>2] = 0;
  $539 = $magic$i$i;
  $540 = $539 & -16;
  $541 = $540 ^ 1431655768;
  HEAP32[$magic$i$i>>2] = $541;
  HEAP32[5818] = $541;
 }
 $542 = (($nb$0) + 48)|0;
 $543 = HEAP32[(23280)>>2]|0;
 $544 = (($nb$0) + 47)|0;
 $545 = (($543) + ($544))|0;
 $546 = (0 - ($543))|0;
 $547 = $545 & $546;
 $548 = ($547>>>0)>($nb$0>>>0);
 if (!($548)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $549 = HEAP32[(23240)>>2]|0;
 $550 = ($549|0)==(0);
 if (!($550)) {
  $551 = HEAP32[(23232)>>2]|0;
  $552 = (($551) + ($547))|0;
  $553 = ($552>>>0)<=($551>>>0);
  $554 = ($552>>>0)>($549>>>0);
  $or$cond1$i16 = $553 | $554;
  if ($or$cond1$i16) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $555 = HEAP32[(23244)>>2]|0;
 $556 = $555 & 4;
 $557 = ($556|0)==(0);
 L254: do {
  if ($557) {
   $558 = HEAP32[(22824)>>2]|0;
   $559 = ($558|0)==(0|0);
   L256: do {
    if ($559) {
     label = 171;
    } else {
     $sp$0$i$i = (23248);
     while(1) {
      $560 = HEAP32[$sp$0$i$i>>2]|0;
      $561 = ($560>>>0)>($558>>>0);
      if (!($561)) {
       $562 = ((($sp$0$i$i)) + 4|0);
       $563 = HEAP32[$562>>2]|0;
       $564 = (($560) + ($563)|0);
       $565 = ($564>>>0)>($558>>>0);
       if ($565) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $562;
        break;
       }
      }
      $566 = ((($sp$0$i$i)) + 8|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = ($567|0)==(0|0);
      if ($568) {
       label = 171;
       break L256;
      } else {
       $sp$0$i$i = $567;
      }
     }
     $591 = HEAP32[(22812)>>2]|0;
     $592 = (($545) - ($591))|0;
     $593 = $592 & $546;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = (_sbrk(($593|0))|0);
      $596 = HEAP32[$$lcssa153>>2]|0;
      $597 = HEAP32[$$lcssa155>>2]|0;
      $598 = (($596) + ($597)|0);
      $599 = ($595|0)==($598|0);
      if ($599) {
       $600 = ($595|0)==((-1)|0);
       if (!($600)) {
        $tbase$746$i = $595;$tsize$745$i = $593;
        label = 191;
        break L254;
       }
      } else {
       $br$2$ph$i = $595;$ssize$2$ph$i = $593;
       label = 181;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $569 = (_sbrk(0)|0);
     $570 = ($569|0)==((-1)|0);
     if (!($570)) {
      $571 = $569;
      $572 = HEAP32[(23276)>>2]|0;
      $573 = (($572) + -1)|0;
      $574 = $573 & $571;
      $575 = ($574|0)==(0);
      if ($575) {
       $ssize$0$i = $547;
      } else {
       $576 = (($573) + ($571))|0;
       $577 = (0 - ($572))|0;
       $578 = $576 & $577;
       $579 = (($547) - ($571))|0;
       $580 = (($579) + ($578))|0;
       $ssize$0$i = $580;
      }
      $581 = HEAP32[(23232)>>2]|0;
      $582 = (($581) + ($ssize$0$i))|0;
      $583 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $584 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $583 & $584;
      if ($or$cond$i17) {
       $585 = HEAP32[(23240)>>2]|0;
       $586 = ($585|0)==(0);
       if (!($586)) {
        $587 = ($582>>>0)<=($581>>>0);
        $588 = ($582>>>0)>($585>>>0);
        $or$cond2$i = $587 | $588;
        if ($or$cond2$i) {
         break;
        }
       }
       $589 = (_sbrk(($ssize$0$i|0))|0);
       $590 = ($589|0)==($569|0);
       if ($590) {
        $tbase$746$i = $569;$tsize$745$i = $ssize$0$i;
        label = 191;
        break L254;
       } else {
        $br$2$ph$i = $589;$ssize$2$ph$i = $ssize$0$i;
        label = 181;
       }
      }
     }
    }
   } while(0);
   L276: do {
    if ((label|0) == 181) {
     $601 = (0 - ($ssize$2$ph$i))|0;
     $602 = ($br$2$ph$i|0)!=((-1)|0);
     $603 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $603 & $602;
     $604 = ($542>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $604 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $605 = HEAP32[(23280)>>2]|0;
       $606 = (($544) - ($ssize$2$ph$i))|0;
       $607 = (($606) + ($605))|0;
       $608 = (0 - ($605))|0;
       $609 = $607 & $608;
       $610 = ($609>>>0)<(2147483647);
       if ($610) {
        $611 = (_sbrk(($609|0))|0);
        $612 = ($611|0)==((-1)|0);
        if ($612) {
         (_sbrk(($601|0))|0);
         break L276;
        } else {
         $613 = (($609) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $613;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $614 = ($br$2$ph$i|0)==((-1)|0);
     if (!($614)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 191;
      break L254;
     }
    }
   } while(0);
   $615 = HEAP32[(23244)>>2]|0;
   $616 = $615 | 4;
   HEAP32[(23244)>>2] = $616;
   label = 188;
  } else {
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $617 = ($547>>>0)<(2147483647);
  if ($617) {
   $618 = (_sbrk(($547|0))|0);
   $619 = (_sbrk(0)|0);
   $620 = ($618|0)!=((-1)|0);
   $621 = ($619|0)!=((-1)|0);
   $or$cond5$i = $620 & $621;
   $622 = ($618>>>0)<($619>>>0);
   $or$cond10$i = $622 & $or$cond5$i;
   if ($or$cond10$i) {
    $623 = $619;
    $624 = $618;
    $625 = (($623) - ($624))|0;
    $626 = (($nb$0) + 40)|0;
    $$not$i = ($625>>>0)>($626>>>0);
    if ($$not$i) {
     $tbase$746$i = $618;$tsize$745$i = $625;
     label = 191;
    }
   }
  }
 }
 if ((label|0) == 191) {
  $627 = HEAP32[(23232)>>2]|0;
  $628 = (($627) + ($tsize$745$i))|0;
  HEAP32[(23232)>>2] = $628;
  $629 = HEAP32[(23236)>>2]|0;
  $630 = ($628>>>0)>($629>>>0);
  if ($630) {
   HEAP32[(23236)>>2] = $628;
  }
  $631 = HEAP32[(22824)>>2]|0;
  $632 = ($631|0)==(0|0);
  do {
   if ($632) {
    $633 = HEAP32[(22816)>>2]|0;
    $634 = ($633|0)==(0|0);
    $635 = ($tbase$746$i>>>0)<($633>>>0);
    $or$cond11$i = $634 | $635;
    if ($or$cond11$i) {
     HEAP32[(22816)>>2] = $tbase$746$i;
    }
    HEAP32[(23248)>>2] = $tbase$746$i;
    HEAP32[(23252)>>2] = $tsize$745$i;
    HEAP32[(23260)>>2] = 0;
    $636 = HEAP32[5818]|0;
    HEAP32[(22836)>>2] = $636;
    HEAP32[(22832)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $637 = $i$01$i$i << 1;
     $638 = (22840 + ($637<<2)|0);
     $639 = ((($638)) + 12|0);
     HEAP32[$639>>2] = $638;
     $640 = ((($638)) + 8|0);
     HEAP32[$640>>2] = $638;
     $641 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($641|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $641;
     }
    }
    $642 = (($tsize$745$i) + -40)|0;
    $643 = ((($tbase$746$i)) + 8|0);
    $644 = $643;
    $645 = $644 & 7;
    $646 = ($645|0)==(0);
    $647 = (0 - ($644))|0;
    $648 = $647 & 7;
    $649 = $646 ? 0 : $648;
    $650 = (($tbase$746$i) + ($649)|0);
    $651 = (($642) - ($649))|0;
    HEAP32[(22824)>>2] = $650;
    HEAP32[(22812)>>2] = $651;
    $652 = $651 | 1;
    $653 = ((($650)) + 4|0);
    HEAP32[$653>>2] = $652;
    $654 = (($650) + ($651)|0);
    $655 = ((($654)) + 4|0);
    HEAP32[$655>>2] = 40;
    $656 = HEAP32[(23288)>>2]|0;
    HEAP32[(22828)>>2] = $656;
   } else {
    $sp$068$i = (23248);
    while(1) {
     $657 = HEAP32[$sp$068$i>>2]|0;
     $658 = ((($sp$068$i)) + 4|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = (($657) + ($659)|0);
     $661 = ($tbase$746$i|0)==($660|0);
     if ($661) {
      $$lcssa147 = $657;$$lcssa149 = $658;$$lcssa151 = $659;$sp$068$i$lcssa = $sp$068$i;
      label = 201;
      break;
     }
     $662 = ((($sp$068$i)) + 8|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = ($663|0)==(0|0);
     if ($664) {
      break;
     } else {
      $sp$068$i = $663;
     }
    }
    if ((label|0) == 201) {
     $665 = ((($sp$068$i$lcssa)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($631>>>0)>=($$lcssa147>>>0);
      $670 = ($631>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $670 & $669;
      if ($or$cond48$i) {
       $671 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $671;
       $672 = HEAP32[(22812)>>2]|0;
       $673 = ((($631)) + 8|0);
       $674 = $673;
       $675 = $674 & 7;
       $676 = ($675|0)==(0);
       $677 = (0 - ($674))|0;
       $678 = $677 & 7;
       $679 = $676 ? 0 : $678;
       $680 = (($631) + ($679)|0);
       $681 = (($tsize$745$i) - ($679))|0;
       $682 = (($681) + ($672))|0;
       HEAP32[(22824)>>2] = $680;
       HEAP32[(22812)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($680)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($680) + ($682)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(23288)>>2]|0;
       HEAP32[(22828)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(22816)>>2]|0;
    $689 = ($tbase$746$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(22816)>>2] = $tbase$746$i;
     $753 = $tbase$746$i;
    } else {
     $753 = $688;
    }
    $690 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (23248);
    while(1) {
     $691 = HEAP32[$sp$167$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 209;
      break;
     }
     $693 = ((($sp$167$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      $sp$0$i$i$i = (23248);
      break;
     } else {
      $sp$167$i = $694;
     }
    }
    if ((label|0) == 209) {
     $696 = ((($sp$167$i$lcssa)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $700 = ((($sp$167$i$lcssa)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($tsize$745$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($tbase$746$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($tbase$746$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($nb$0)|0);
      $723 = (($721) - ($nb$0))|0;
      $724 = $nb$0 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($718|0)==($631|0);
      do {
       if ($726) {
        $727 = HEAP32[(22812)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(22812)>>2] = $728;
        HEAP32[(22824)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(22820)>>2]|0;
        $732 = ($718|0)==($731|0);
        if ($732) {
         $733 = HEAP32[(22808)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(22808)>>2] = $734;
         HEAP32[(22820)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L328: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (22840 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $752 = ($746>>>0)<($753>>>0);
             if ($752) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[5700]|0;
            $761 = $760 & $759;
            HEAP32[5700] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre9$i$i = ((($748)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $763 = ($748>>>0)<($753>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi10$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $786;$RP$1$i$i = $782;
              }
             } else {
              $R$1$i$i = $784;$RP$1$i$i = $783;
             }
             while(1) {
              $788 = ((($R$1$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if (!($790)) {
               $R$1$i$i = $789;$RP$1$i$i = $788;
               continue;
              }
              $791 = ((($R$1$i$i)) + 16|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $792;$RP$1$i$i = $791;
              }
             }
             $794 = ($RP$1$i$i$lcssa>>>0)<($753>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($774>>>0)<($753>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $R$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (23104 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($718|0)==($799|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(22804)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(22804)>>2] = $804;
             break L328;
            } else {
             $805 = HEAP32[(22816)>>2]|0;
             $806 = ($769>>>0)<($805>>>0);
             if ($806) {
              _abort();
              // unreachable;
             }
             $807 = ((($769)) + 16|0);
             $808 = HEAP32[$807>>2]|0;
             $809 = ($808|0)==($718|0);
             if ($809) {
              HEAP32[$807>>2] = $R$3$i$i;
             } else {
              $810 = ((($769)) + 20|0);
              HEAP32[$810>>2] = $R$3$i$i;
             }
             $811 = ($R$3$i$i|0)==(0|0);
             if ($811) {
              break L328;
             }
            }
           } while(0);
           $812 = HEAP32[(22816)>>2]|0;
           $813 = ($R$3$i$i>>>0)<($812>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($R$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($816>>>0)<($812>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($R$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(22816)>>2]|0;
           $825 = ($822>>>0)<($824>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($R$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $oldfirst$0$i$i = $828;$qsize$0$i$i = $829;
        } else {
         $oldfirst$0$i$i = $718;$qsize$0$i$i = $723;
        }
        $830 = ((($oldfirst$0$i$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $qsize$0$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($qsize$0$i$i)|0);
        HEAP32[$835>>2] = $qsize$0$i$i;
        $836 = $qsize$0$i$i >>> 3;
        $837 = ($qsize$0$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (22840 + ($838<<2)|0);
         $840 = HEAP32[5700]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[5700] = $844;
           $$pre$i16$i = ((($839)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $839;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(22816)>>2]|0;
           $848 = ($846>>>0)<($847>>>0);
           if (!($848)) {
            $$pre$phi$i17$iZ2D = $845;$F4$0$i$i = $846;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $722;
         $849 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $F4$0$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $qsize$0$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $I7$0$i$i = 0;
         } else {
          $854 = ($qsize$0$i$i>>>0)>(16777215);
          if ($854) {
           $I7$0$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $qsize$0$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $I7$0$i$i = $876;
         }
        } while(0);
        $877 = (23104 + ($I7$0$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $I7$0$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(22804)>>2]|0;
        $882 = 1 << $I7$0$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(22804)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ($I7$0$i$i|0)==(31);
        $891 = $I7$0$i$i >>> 1;
        $892 = (25 - ($891))|0;
        $893 = $890 ? 0 : $892;
        $894 = $qsize$0$i$i << $893;
        $K8$0$i$i = $894;$T$0$i18$i = $889;
        while(1) {
         $895 = ((($T$0$i18$i)) + 4|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $896 & -8;
         $898 = ($897|0)==($qsize$0$i$i|0);
         if ($898) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 279;
          break;
         }
         $899 = $K8$0$i$i >>> 31;
         $900 = (((($T$0$i18$i)) + 16|0) + ($899<<2)|0);
         $901 = $K8$0$i$i << 1;
         $902 = HEAP32[$900>>2]|0;
         $903 = ($902|0)==(0|0);
         if ($903) {
          $$lcssa = $900;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 276;
          break;
         } else {
          $K8$0$i$i = $901;$T$0$i18$i = $902;
         }
        }
        if ((label|0) == 276) {
         $904 = HEAP32[(22816)>>2]|0;
         $905 = ($$lcssa>>>0)<($904>>>0);
         if ($905) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $722;
          $906 = ((($722)) + 24|0);
          HEAP32[$906>>2] = $T$0$i18$i$lcssa139;
          $907 = ((($722)) + 12|0);
          HEAP32[$907>>2] = $722;
          $908 = ((($722)) + 8|0);
          HEAP32[$908>>2] = $722;
          break;
         }
        }
        else if ((label|0) == 279) {
         $909 = ((($T$0$i18$i$lcssa)) + 8|0);
         $910 = HEAP32[$909>>2]|0;
         $911 = HEAP32[(22816)>>2]|0;
         $912 = ($910>>>0)>=($911>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($911>>>0);
         $913 = $912 & $not$$i20$i;
         if ($913) {
          $914 = ((($910)) + 12|0);
          HEAP32[$914>>2] = $722;
          HEAP32[$909>>2] = $722;
          $915 = ((($722)) + 8|0);
          HEAP32[$915>>2] = $910;
          $916 = ((($722)) + 12|0);
          HEAP32[$916>>2] = $T$0$i18$i$lcssa;
          $917 = ((($722)) + 24|0);
          HEAP32[$917>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1048 = ((($710)) + 8|0);
      $$0 = $1048;
      STACKTOP = sp;return ($$0|0);
     } else {
      $sp$0$i$i$i = (23248);
     }
    }
    while(1) {
     $918 = HEAP32[$sp$0$i$i$i>>2]|0;
     $919 = ($918>>>0)>($631>>>0);
     if (!($919)) {
      $920 = ((($sp$0$i$i$i)) + 4|0);
      $921 = HEAP32[$920>>2]|0;
      $922 = (($918) + ($921)|0);
      $923 = ($922>>>0)>($631>>>0);
      if ($923) {
       $$lcssa142 = $922;
       break;
      }
     }
     $924 = ((($sp$0$i$i$i)) + 8|0);
     $925 = HEAP32[$924>>2]|0;
     $sp$0$i$i$i = $925;
    }
    $926 = ((($$lcssa142)) + -47|0);
    $927 = ((($926)) + 8|0);
    $928 = $927;
    $929 = $928 & 7;
    $930 = ($929|0)==(0);
    $931 = (0 - ($928))|0;
    $932 = $931 & 7;
    $933 = $930 ? 0 : $932;
    $934 = (($926) + ($933)|0);
    $935 = ((($631)) + 16|0);
    $936 = ($934>>>0)<($935>>>0);
    $937 = $936 ? $631 : $934;
    $938 = ((($937)) + 8|0);
    $939 = ((($937)) + 24|0);
    $940 = (($tsize$745$i) + -40)|0;
    $941 = ((($tbase$746$i)) + 8|0);
    $942 = $941;
    $943 = $942 & 7;
    $944 = ($943|0)==(0);
    $945 = (0 - ($942))|0;
    $946 = $945 & 7;
    $947 = $944 ? 0 : $946;
    $948 = (($tbase$746$i) + ($947)|0);
    $949 = (($940) - ($947))|0;
    HEAP32[(22824)>>2] = $948;
    HEAP32[(22812)>>2] = $949;
    $950 = $949 | 1;
    $951 = ((($948)) + 4|0);
    HEAP32[$951>>2] = $950;
    $952 = (($948) + ($949)|0);
    $953 = ((($952)) + 4|0);
    HEAP32[$953>>2] = 40;
    $954 = HEAP32[(23288)>>2]|0;
    HEAP32[(22828)>>2] = $954;
    $955 = ((($937)) + 4|0);
    HEAP32[$955>>2] = 27;
    ;HEAP32[$938>>2]=HEAP32[(23248)>>2]|0;HEAP32[$938+4>>2]=HEAP32[(23248)+4>>2]|0;HEAP32[$938+8>>2]=HEAP32[(23248)+8>>2]|0;HEAP32[$938+12>>2]=HEAP32[(23248)+12>>2]|0;
    HEAP32[(23248)>>2] = $tbase$746$i;
    HEAP32[(23252)>>2] = $tsize$745$i;
    HEAP32[(23260)>>2] = 0;
    HEAP32[(23256)>>2] = $938;
    $p$0$i$i = $939;
    while(1) {
     $956 = ((($p$0$i$i)) + 4|0);
     HEAP32[$956>>2] = 7;
     $957 = ((($956)) + 4|0);
     $958 = ($957>>>0)<($$lcssa142>>>0);
     if ($958) {
      $p$0$i$i = $956;
     } else {
      break;
     }
    }
    $959 = ($937|0)==($631|0);
    if (!($959)) {
     $960 = $937;
     $961 = $631;
     $962 = (($960) - ($961))|0;
     $963 = HEAP32[$955>>2]|0;
     $964 = $963 & -2;
     HEAP32[$955>>2] = $964;
     $965 = $962 | 1;
     $966 = ((($631)) + 4|0);
     HEAP32[$966>>2] = $965;
     HEAP32[$937>>2] = $962;
     $967 = $962 >>> 3;
     $968 = ($962>>>0)<(256);
     if ($968) {
      $969 = $967 << 1;
      $970 = (22840 + ($969<<2)|0);
      $971 = HEAP32[5700]|0;
      $972 = 1 << $967;
      $973 = $971 & $972;
      $974 = ($973|0)==(0);
      if ($974) {
       $975 = $971 | $972;
       HEAP32[5700] = $975;
       $$pre$i$i = ((($970)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $970;
      } else {
       $976 = ((($970)) + 8|0);
       $977 = HEAP32[$976>>2]|0;
       $978 = HEAP32[(22816)>>2]|0;
       $979 = ($977>>>0)<($978>>>0);
       if ($979) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $976;$F$0$i$i = $977;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $631;
      $980 = ((($F$0$i$i)) + 12|0);
      HEAP32[$980>>2] = $631;
      $981 = ((($631)) + 8|0);
      HEAP32[$981>>2] = $F$0$i$i;
      $982 = ((($631)) + 12|0);
      HEAP32[$982>>2] = $970;
      break;
     }
     $983 = $962 >>> 8;
     $984 = ($983|0)==(0);
     if ($984) {
      $I1$0$i$i = 0;
     } else {
      $985 = ($962>>>0)>(16777215);
      if ($985) {
       $I1$0$i$i = 31;
      } else {
       $986 = (($983) + 1048320)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 8;
       $989 = $983 << $988;
       $990 = (($989) + 520192)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 4;
       $993 = $992 | $988;
       $994 = $989 << $992;
       $995 = (($994) + 245760)|0;
       $996 = $995 >>> 16;
       $997 = $996 & 2;
       $998 = $993 | $997;
       $999 = (14 - ($998))|0;
       $1000 = $994 << $997;
       $1001 = $1000 >>> 15;
       $1002 = (($999) + ($1001))|0;
       $1003 = $1002 << 1;
       $1004 = (($1002) + 7)|0;
       $1005 = $962 >>> $1004;
       $1006 = $1005 & 1;
       $1007 = $1006 | $1003;
       $I1$0$i$i = $1007;
      }
     }
     $1008 = (23104 + ($I1$0$i$i<<2)|0);
     $1009 = ((($631)) + 28|0);
     HEAP32[$1009>>2] = $I1$0$i$i;
     $1010 = ((($631)) + 20|0);
     HEAP32[$1010>>2] = 0;
     HEAP32[$935>>2] = 0;
     $1011 = HEAP32[(22804)>>2]|0;
     $1012 = 1 << $I1$0$i$i;
     $1013 = $1011 & $1012;
     $1014 = ($1013|0)==(0);
     if ($1014) {
      $1015 = $1011 | $1012;
      HEAP32[(22804)>>2] = $1015;
      HEAP32[$1008>>2] = $631;
      $1016 = ((($631)) + 24|0);
      HEAP32[$1016>>2] = $1008;
      $1017 = ((($631)) + 12|0);
      HEAP32[$1017>>2] = $631;
      $1018 = ((($631)) + 8|0);
      HEAP32[$1018>>2] = $631;
      break;
     }
     $1019 = HEAP32[$1008>>2]|0;
     $1020 = ($I1$0$i$i|0)==(31);
     $1021 = $I1$0$i$i >>> 1;
     $1022 = (25 - ($1021))|0;
     $1023 = $1020 ? 0 : $1022;
     $1024 = $962 << $1023;
     $K2$0$i$i = $1024;$T$0$i$i = $1019;
     while(1) {
      $1025 = ((($T$0$i$i)) + 4|0);
      $1026 = HEAP32[$1025>>2]|0;
      $1027 = $1026 & -8;
      $1028 = ($1027|0)==($962|0);
      if ($1028) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 305;
       break;
      }
      $1029 = $K2$0$i$i >>> 31;
      $1030 = (((($T$0$i$i)) + 16|0) + ($1029<<2)|0);
      $1031 = $K2$0$i$i << 1;
      $1032 = HEAP32[$1030>>2]|0;
      $1033 = ($1032|0)==(0|0);
      if ($1033) {
       $$lcssa141 = $1030;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 302;
       break;
      } else {
       $K2$0$i$i = $1031;$T$0$i$i = $1032;
      }
     }
     if ((label|0) == 302) {
      $1034 = HEAP32[(22816)>>2]|0;
      $1035 = ($$lcssa141>>>0)<($1034>>>0);
      if ($1035) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $631;
       $1036 = ((($631)) + 24|0);
       HEAP32[$1036>>2] = $T$0$i$i$lcssa140;
       $1037 = ((($631)) + 12|0);
       HEAP32[$1037>>2] = $631;
       $1038 = ((($631)) + 8|0);
       HEAP32[$1038>>2] = $631;
       break;
      }
     }
     else if ((label|0) == 305) {
      $1039 = ((($T$0$i$i$lcssa)) + 8|0);
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = HEAP32[(22816)>>2]|0;
      $1042 = ($1040>>>0)>=($1041>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1041>>>0);
      $1043 = $1042 & $not$$i$i;
      if ($1043) {
       $1044 = ((($1040)) + 12|0);
       HEAP32[$1044>>2] = $631;
       HEAP32[$1039>>2] = $631;
       $1045 = ((($631)) + 8|0);
       HEAP32[$1045>>2] = $1040;
       $1046 = ((($631)) + 12|0);
       HEAP32[$1046>>2] = $T$0$i$i$lcssa;
       $1047 = ((($631)) + 24|0);
       HEAP32[$1047>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1049 = HEAP32[(22812)>>2]|0;
  $1050 = ($1049>>>0)>($nb$0>>>0);
  if ($1050) {
   $1051 = (($1049) - ($nb$0))|0;
   HEAP32[(22812)>>2] = $1051;
   $1052 = HEAP32[(22824)>>2]|0;
   $1053 = (($1052) + ($nb$0)|0);
   HEAP32[(22824)>>2] = $1053;
   $1054 = $1051 | 1;
   $1055 = ((($1053)) + 4|0);
   HEAP32[$1055>>2] = $1054;
   $1056 = $nb$0 | 3;
   $1057 = ((($1052)) + 4|0);
   HEAP32[$1057>>2] = $1056;
   $1058 = ((($1052)) + 8|0);
   $$0 = $1058;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1059 = (___errno_location()|0);
 HEAP32[$1059>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(22816)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(22820)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(22808)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (22840 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[5700]|0;
     $37 = $36 & $35;
     HEAP32[5700] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (23104 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(22804)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(22804)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(22816)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(22816)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(22816)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(22824)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(22812)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(22812)>>2] = $122;
   HEAP32[(22824)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(22820)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(22820)>>2] = 0;
   HEAP32[(22808)>>2] = 0;
   return;
  }
  $127 = HEAP32[(22820)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(22808)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(22808)>>2] = $130;
   HEAP32[(22820)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (22840 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(22816)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[5700]|0;
     $154 = $153 & $152;
     HEAP32[5700] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(22816)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(22816)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(22816)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (23104 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(22804)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(22804)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(22816)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(22816)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(22816)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(22820)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(22808)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (22840 + ($235<<2)|0);
  $237 = HEAP32[5700]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[5700] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(22816)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (23104 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(22804)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(22804)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(22816)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(22816)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(22832)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(22832)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (23256);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(22832)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(22816)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(23280)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(22824)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(22812)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(22824)>>2] = $38;
  HEAP32[(22812)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(22820)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(22808)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(22808)>>2] = $storemerge1;
  HEAP32[(22820)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (22840 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[5700]|0;
    $91 = $90 & $89;
    HEAP32[5700] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (23104 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(22804)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(22804)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(22816)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(22816)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(22816)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(22816)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(22820)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(22808)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (22840 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[5700]|0;
     $32 = $31 & $30;
     HEAP32[5700] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (23104 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(22804)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(22804)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(22816)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(22816)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(22816)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(22816)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(22824)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(22812)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(22812)>>2] = $116;
   HEAP32[(22824)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(22820)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(22820)>>2] = 0;
   HEAP32[(22808)>>2] = 0;
   return;
  }
  $121 = HEAP32[(22820)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(22808)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(22808)>>2] = $124;
   HEAP32[(22820)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (22840 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[5700]|0;
     $147 = $146 & $145;
     HEAP32[5700] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (23104 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(22804)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(22804)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(22816)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(22816)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(22816)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(22820)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(22808)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (22840 + ($225<<2)|0);
  $227 = HEAP32[5700]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[5700] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(22816)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (23104 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(22804)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(22804)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(22816)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(22816)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4);
}
function b5() {
 ; nullFunc_v(5);
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0;
}
function b7(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(7);return 0;
}
function b8(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function ___assert_fail__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,___stdio_write,___stdio_seek,___stdout_write,b0,b0,_png_sig_cmp,b0,b0,b0,b0,_png_set_longjmp_fn,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_png_zalloc,b0,b0,b0,b0
,b0,b0,b0,b0,_zcalloc,b0,b0,b0,___stdio_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vi = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,_cleanup_393,_cleanup_387,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_emscripten_longjmp__wrapper,b2,b2,b2,_png_read_end,b2,b2,b2,b2,b2,b2,b2,_png_zfree,_png_free,b2,b2
,b2,b2,b2,b2,b2,_zcfree,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,___stdio_close,b3,b3,b3,b3,b3,b3,b3,_png_create_info_struct,b3,b3,b3,b3,b3,b3,b3,b3,b3,_get_gl_color_format,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_viii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_png_set_read_fn,_read_png_data_callback,b4,b4,__debug_log_e,_read_and_update_info,b4,b4,_png_destroy_read_struct,b4,b4,b4,b4,b4,b4,b4,b4,_png_default_read_data,_png_read_filter_row_sub
,_png_read_filter_row_up,_png_read_filter_row_avg,_png_read_filter_row_paeth_1byte_pixel,_png_read_filter_row_paeth_multibyte_pixel,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,_do_frame,b5,b5];
var FUNCTION_TABLE_iiiii = [b6,b6,b6,b6,b6,b6,b6,b6,_png_create_read_struct,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_png_user_version_check,_png_malloc_warn,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_viiii = [b8,b8,b8,b8,b8,b8,___assert_fail__wrapper,b8,b8,b8,b8,b8,b8,b8,b8,b8,_read_entire_png_image,b8,b8,b8,_png_set_mem_fn,_png_set_error_fn,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];

  return { _testSetjmp: _testSetjmp, _i64Subtract: _i64Subtract, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _pthread_self: _pthread_self, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, _malloc: _malloc, _saveSetjmp: _saveSetjmp, _memcpy: _memcpy, _bitshift64Shl: _bitshift64Shl, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, ___udivmoddi4: ___udivmoddi4, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__testSetjmp.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__saveSetjmp.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



